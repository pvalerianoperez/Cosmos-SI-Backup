/*
Script de implementación para Cosmos.DB

Una herramienta generó este código.
Los cambios realizados en este archivo podrían generar un comportamiento incorrecto y se perderán si
se vuelve a generar el código.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Cosmos.DB"
:setvar DefaultFilePrefix "Cosmos.DB"
:setvar DefaultDataPath "C:\Users\Dell\AppData\Local\Microsoft\VisualStudio\SSDT\Cosmos"
:setvar DefaultLogPath "C:\Users\Dell\AppData\Local\Microsoft\VisualStudio\SSDT\Cosmos"

GO
:on error exit
GO
/*
Detectar el modo SQLCMD y deshabilitar la ejecución del script si no se admite el modo SQLCMD.
Para volver a habilitar el script después de habilitar el modo SQLCMD, ejecute lo siguiente:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'El modo SQLCMD debe estar habilitado para ejecutar correctamente este script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creando la base de datos $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'No se puede modificar la configuración de la base de datos. Debe ser un administrador del sistema para poder aplicar esta configuración.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'No se puede modificar la configuración de la base de datos. Debe ser un administrador del sistema para poder aplicar esta configuración.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creando Tabla [dbo].[AcAdmisionDocumentoEntregado]...';


GO
CREATE TABLE [dbo].[AcAdmisionDocumentoEntregado] (
    [DocumentoEntregadoID] INT IDENTITY (1, 1) NOT NULL,
    [DocumentoID]          INT NOT NULL,
    [TipoDocumentoID]      INT NOT NULL,
    [AspiranteID]          INT NOT NULL,
    [Cantidad]             INT NOT NULL,
    PRIMARY KEY CLUSTERED ([DocumentoEntregadoID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcAdmisionEstatus]...';


GO
CREATE TABLE [dbo].[AcAdmisionEstatus] (
    [EstatusID]    INT           IDENTITY (1, 1) NOT NULL,
    [EstatusClave] VARCHAR (6)   NOT NULL,
    [Nombre]       VARCHAR (80)  NOT NULL,
    [NombreCorto]  VARCHAR (15)  NOT NULL,
    [Descripcion]  VARCHAR (150) NULL,
    [Admitido]     BIT           NOT NULL,
    [Entrevistado] BIT           NOT NULL,
    [Suspendido]   BIT           NOT NULL,
    [No_Admitido]  BIT           NULL,
    PRIMARY KEY CLUSTERED ([EstatusID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcAdmisionIdioma]...';


GO
CREATE TABLE [dbo].[AcAdmisionIdioma] (
    [IdiomaID] INT          IDENTITY (1, 1) NOT NULL,
    [Nombre]   VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([IdiomaID] ASC),
    CONSTRAINT [Ac_Admision_AdmisionIdioma] UNIQUE NONCLUSTERED ([Nombre] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcAdmisionMedioContacto]...';


GO
CREATE TABLE [dbo].[AcAdmisionMedioContacto] (
    [MedioContactoID] INT          IDENTITY (1, 1) NOT NULL,
    [Nombre]          VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([MedioContactoID] ASC),
    CONSTRAINT [AK_AcAdmision_AdmisionMedioContacto] UNIQUE NONCLUSTERED ([Nombre] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcAdmisionMotivoBaja]...';


GO
CREATE TABLE [dbo].[AcAdmisionMotivoBaja] (
    [MotivoBajaID] INT          IDENTITY (1, 1) NOT NULL,
    [Nombre]       VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([MotivoBajaID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcAdmisionParentesco]...';


GO
CREATE TABLE [dbo].[AcAdmisionParentesco] (
    [ParentescoID] INT          IDENTITY (1, 1) NOT NULL,
    [Nombre]       VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([ParentescoID] ASC),
    CONSTRAINT [Ak_Admision_AdmisionParentesco] UNIQUE NONCLUSTERED ([Nombre] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcAdmisionProfesion]...';


GO
CREATE TABLE [dbo].[AcAdmisionProfesion] (
    [ProfesionID] INT          IDENTITY (1, 1) NOT NULL,
    [Nombre]      VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([ProfesionID] ASC),
    CONSTRAINT [AK_AcAdmision_AdmisionProfesion] UNIQUE NONCLUSTERED ([Nombre] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcAdmisionProspecto]...';


GO
CREATE TABLE [dbo].[AcAdmisionProspecto] (
    [ProspectoID]     INT           NOT NULL,
    [Nombre]          NVARCHAR (35) NULL,
    [ApellidoPaterno] NVARCHAR (30) NULL,
    [ApellidoMaterno] NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([ProspectoID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcAdmisionReligion]...';


GO
CREATE TABLE [dbo].[AcAdmisionReligion] (
    [ReligionID] INT          IDENTITY (1, 1) NOT NULL,
    [Nombre]     VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([ReligionID] ASC),
    CONSTRAINT [AK_AcAdmision_AdmisionReligion] UNIQUE NONCLUSTERED ([Nombre] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcAdmisionServicioSeguimiento]...';


GO
CREATE TABLE [dbo].[AcAdmisionServicioSeguimiento] (
    [ServicioSeguimientoID] INT          IDENTITY (1, 1) NOT NULL,
    [Nombre]                VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([ServicioSeguimientoID] ASC),
    CONSTRAINT [AK_AcAdmision_AdmisionServicioSeguimiento] UNIQUE NONCLUSTERED ([Nombre] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcAdmisionVinculo]...';


GO
CREATE TABLE [dbo].[AcAdmisionVinculo] (
    [VinculoID] INT          IDENTITY (1, 1) NOT NULL,
    [Nombre]    VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([VinculoID] ASC),
    CONSTRAINT [AK_AcAdmision_AdmisionVinculo] UNIQUE NONCLUSTERED ([Nombre] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcAdmisionZona]...';


GO
CREATE TABLE [dbo].[AcAdmisionZona] (
    [ZonaID] INT          IDENTITY (1, 1) NOT NULL,
    [Nombre] VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([ZonaID] ASC),
    CONSTRAINT [AK_AcAdmision_AdmisionZona] UNIQUE NONCLUSTERED ([Nombre] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcAreaDeFormacion]...';


GO
CREATE TABLE [dbo].[AcAreaDeFormacion] (
    [AreaDeFormacionID]    INT          IDENTITY (1, 1) NOT NULL,
    [AreaDeFormacionClave] VARCHAR (6)  NOT NULL,
    [Nombre]               VARCHAR (80) NOT NULL,
    [NombreCorto]          VARCHAR (15) NOT NULL,
    PRIMARY KEY CLUSTERED ([AreaDeFormacionID] ASC),
    CONSTRAINT [AK_AcAreaDeFormacion_AreaDeFormacionClave] UNIQUE NONCLUSTERED ([AreaDeFormacionClave] ASC),
    CONSTRAINT [AK_AcAreaDeFormacion_Nombre] UNIQUE NONCLUSTERED ([Nombre] ASC),
    CONSTRAINT [AK_AcAreaDeFormacion_NombreCorto] UNIQUE NONCLUSTERED ([NombreCorto] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcAreaFormacion]...';


GO
CREATE TABLE [dbo].[AcAreaFormacion] (
    [AreaFormacionID]    INT          IDENTITY (1, 1) NOT NULL,
    [AreaFormacionClave] VARCHAR (6)  NULL,
    [Nombre]             VARCHAR (80) NOT NULL,
    [NombreCorto]        VARCHAR (15) NULL,
    CONSTRAINT [PK_AcAreaFormacion] PRIMARY KEY CLUSTERED ([AreaFormacionID] ASC),
    CONSTRAINT [AK_AcAreaFormacion_AreaFormacionClave] UNIQUE NONCLUSTERED ([AreaFormacionClave] ASC),
    CONSTRAINT [AK_AcAreaFormacion_Nombre] UNIQUE NONCLUSTERED ([Nombre] ASC),
    CONSTRAINT [AK_AcAreaFormacion_NombreCorto] UNIQUE NONCLUSTERED ([NombreCorto] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcAsignatura]...';


GO
CREATE TABLE [dbo].[AcAsignatura] (
    [AsignaturaID] INT          IDENTITY (1, 1) NOT NULL,
    [Nombre]       VARCHAR (80) NOT NULL,
    PRIMARY KEY CLUSTERED ([AsignaturaID] ASC),
    CONSTRAINT [AK_AcAsignatura_Nombre] UNIQUE NONCLUSTERED ([Nombre] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcCalendario]...';


GO
CREATE TABLE [dbo].[AcCalendario] (
    [CalendarioID]         INT           IDENTITY (1, 1) NOT NULL,
    [CalendarioClave]      VARCHAR (6)   NULL,
    [Nombre]               VARCHAR (80)  NOT NULL,
    [NombreCorto]          VARCHAR (15)  NULL,
    [Descripcion]          VARCHAR (100) NULL,
    [FechaInicio]          DATETIME      NOT NULL,
    [FechaFinal]           DATETIME      NOT NULL,
    [CalendarioIDAnterior] INT           NULL,
    CONSTRAINT [PK_AcCalendario] PRIMARY KEY CLUSTERED ([CalendarioID] ASC),
    CONSTRAINT [IX_AcCalendario_Clave] UNIQUE NONCLUSTERED ([CalendarioClave] ASC),
    CONSTRAINT [IX_AcCalendario_Nombre] UNIQUE NONCLUSTERED ([Nombre] ASC),
    CONSTRAINT [IX_AcCalendario_NombreCorto] UNIQUE NONCLUSTERED ([NombreCorto] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcCiclo]...';


GO
CREATE TABLE [dbo].[AcCiclo] (
    [CicloID]         INT           IDENTITY (1, 1) NOT NULL,
    [CicloClave]      VARCHAR (6)   NULL,
    [Nombre]          VARCHAR (80)  NOT NULL,
    [NombreCorto]     VARCHAR (15)  NULL,
    [Descripcion]     VARCHAR (150) NULL,
    [CalendarioID]    INT           NOT NULL,
    [FechaInicio]     DATETIME      NOT NULL,
    [FechaFinal]      DATETIME      NOT NULL,
    [CicloIDAnterior] INT           NULL,
    [CicloTipoID]     INT           NOT NULL,
    CONSTRAINT [PK_Table1] PRIMARY KEY CLUSTERED ([CicloID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[AcCiclo].[IXFK_AcCiclo_AcCalendario]...';


GO
CREATE NONCLUSTERED INDEX [IXFK_AcCiclo_AcCalendario]
    ON [dbo].[AcCiclo]([CalendarioID] ASC);


GO
PRINT N'Creando Índice [dbo].[AcCiclo].[IXFK_AcCiclo_AcCicloTipo]...';


GO
CREATE NONCLUSTERED INDEX [IXFK_AcCiclo_AcCicloTipo]
    ON [dbo].[AcCiclo]([CicloTipoID] ASC);


GO
PRINT N'Creando Tabla [dbo].[AcCicloTipo]...';


GO
CREATE TABLE [dbo].[AcCicloTipo] (
    [CicloTipoID]    INT          IDENTITY (1, 1) NOT NULL,
    [CicloTipoClave] VARCHAR (6)  NULL,
    [Nombre]         VARCHAR (80) NOT NULL,
    [NombreCorto]    VARCHAR (15) NULL,
    CONSTRAINT [PK_AcCicloTipo] PRIMARY KEY CLUSTERED ([CicloTipoID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcDiaAsueto]...';


GO
CREATE TABLE [dbo].[AcDiaAsueto] (
    [DiaAsuetoID]    INT           IDENTITY (1, 1) NOT NULL,
    [DiaAsuetoClave] VARCHAR (6)   NULL,
    [Nombre]         VARCHAR (80)  NOT NULL,
    [NombreCorto]    VARCHAR (15)  NULL,
    [CicloID]        INT           NOT NULL,
    [Descripcion]    VARCHAR (150) NULL,
    [Fecha]          DATE          NOT NULL,
    CONSTRAINT [PK_AcDiaAsueto] PRIMARY KEY CLUSTERED ([DiaAsuetoID] ASC),
    CONSTRAINT [AK_AcDiaAsueto_CicloID_Fecha] UNIQUE NONCLUSTERED ([CicloID] ASC, [Fecha] ASC),
    CONSTRAINT [AK_AcDiaAsueto_DiaAsuetoClave] UNIQUE NONCLUSTERED ([DiaAsuetoClave] ASC),
    CONSTRAINT [AK_AcDiaAsueto_Nombre] UNIQUE NONCLUSTERED ([Nombre] ASC),
    CONSTRAINT [AK_AcDiaAsueto_NombreCorto] UNIQUE NONCLUSTERED ([NombreCorto] ASC)
);


GO
PRINT N'Creando Índice [dbo].[AcDiaAsueto].[IXFK_AcDiaAsueto_AcCiclo]...';


GO
CREATE NONCLUSTERED INDEX [IXFK_AcDiaAsueto_AcCiclo]
    ON [dbo].[AcDiaAsueto]([CicloID] ASC);


GO
PRINT N'Creando Tabla [dbo].[AcDocumento]...';


GO
CREATE TABLE [dbo].[AcDocumento] (
    [DocumentoID]    INT           IDENTITY (1, 1) NOT NULL,
    [DocumentoClave] VARCHAR (6)   NULL,
    [Nombre]         VARCHAR (80)  NOT NULL,
    [NombreCorto]    VARCHAR (15)  NULL,
    [Descripcion]    VARCHAR (150) NULL,
    PRIMARY KEY CLUSTERED ([DocumentoID] ASC),
    CONSTRAINT [AK_AcDocumento_DocumentoClave] UNIQUE NONCLUSTERED ([DocumentoClave] ASC),
    CONSTRAINT [AK_AcDocumento_Nombre] UNIQUE NONCLUSTERED ([Nombre] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcDocumentosRequeridos]...';


GO
CREATE TABLE [dbo].[AcDocumentosRequeridos] (
    [DocumentoRequridoID] INT IDENTITY (1, 1) NOT NULL,
    [DocumentoID]         INT NOT NULL,
    [TipoDocumentoID]     INT NOT NULL,
    [SeccionID]           INT NOT NULL,
    [Cantidad]            INT NOT NULL,
    PRIMARY KEY CLUSTERED ([DocumentoRequridoID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcGiroEmpresa]...';


GO
CREATE TABLE [dbo].[AcGiroEmpresa] (
    [GiroEmpresaID] INT          IDENTITY (1, 1) NOT NULL,
    [Nombre]        VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([GiroEmpresaID] ASC),
    CONSTRAINT [Ak_Admision_AdmisionGiroEmpresa] UNIQUE NONCLUSTERED ([Nombre] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcInstitucionEducativa]...';


GO
CREATE TABLE [dbo].[AcInstitucionEducativa] (
    [InstitucionEducativaID]    INT             IDENTITY (1, 1) NOT NULL,
    [InstitucionEducativaClave] VARCHAR (6)     NOT NULL,
    [Nombre]                    VARCHAR (80)    NOT NULL,
    [NombreCorto]               VARCHAR (15)    NOT NULL,
    [ExtraTexto1]               VARCHAR (500)   NULL,
    [ExtraTexto2]               VARCHAR (500)   NULL,
    [ExtraTexto3]               VARCHAR (500)   NULL,
    [ExtraFecha1]               DATETIME        NULL,
    [ExtraFecha2]               DATETIME        NULL,
    [ExtraDecimal1]             DECIMAL (18, 6) NULL,
    [ExtraDecimal2]             DECIMAL (18, 6) NULL,
    [ExtraDecimal3]             DECIMAL (18, 6) NULL,
    CONSTRAINT [PK_AcInstitucionEducativa] PRIMARY KEY CLUSTERED ([InstitucionEducativaID] ASC),
    CONSTRAINT [AK_AcInstitucionEducativa_InstitucionEducativaClave] UNIQUE NONCLUSTERED ([InstitucionEducativaClave] ASC),
    CONSTRAINT [AK_AcInstitucionEducativa_Nombre] UNIQUE NONCLUSTERED ([Nombre] ASC),
    CONSTRAINT [AK_AcInstitucionEducativa_NombreCorto] UNIQUE NONCLUSTERED ([NombreCorto] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcMail]...';


GO
CREATE TABLE [dbo].[AcMail] (
    [MailID]         INT           IDENTITY (1, 1) NOT NULL,
    [Email]          NVARCHAR (50) NULL,
    [Predeterminado] BIT           NULL,
    PRIMARY KEY CLUSTERED ([MailID] ASC),
    CONSTRAINT [AK_AcMail_Email] UNIQUE NONCLUSTERED ([Email] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcNivelEducativo]...';


GO
CREATE TABLE [dbo].[AcNivelEducativo] (
    [NivelEducativoID]    INT          IDENTITY (1, 1) NOT NULL,
    [NivelEducativoClave] VARCHAR (6)  NULL,
    [Nombre]              VARCHAR (80) NOT NULL,
    [NombreCorto]         VARCHAR (15) NULL,
    CONSTRAINT [PK_AcNivelEducativo] PRIMARY KEY CLUSTERED ([NivelEducativoID] ASC),
    CONSTRAINT [AK_AcNivelEducativo_NivelEducativoClave] UNIQUE NONCLUSTERED ([NivelEducativoClave] ASC),
    CONSTRAINT [AK_AcNivelEducativo_Nombre] UNIQUE NONCLUSTERED ([Nombre] ASC),
    CONSTRAINT [AK_AcNivelEducativo_NombreCorto] UNIQUE NONCLUSTERED ([NombreCorto] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcOfertaAcademica]...';


GO
CREATE TABLE [dbo].[AcOfertaAcademica] (
    [OfertaAcademicaID] INT IDENTITY (1, 1) NOT NULL,
    [CicloID]           INT NOT NULL,
    [PlantelID]         INT NOT NULL,
    [SeccionID]         INT NOT NULL,
    PRIMARY KEY CLUSTERED ([OfertaAcademicaID] ASC),
    CONSTRAINT [AK_AcOfertaAcademica_CicloID_PlantelID_SeccionID] UNIQUE NONCLUSTERED ([CicloID] ASC, [PlantelID] ASC, [SeccionID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcOfertaAcademicaPlanEstudioTurno]...';


GO
CREATE TABLE [dbo].[AcOfertaAcademicaPlanEstudioTurno] (
    [OfertaAcademicaPlanEstudioTurnoID] INT IDENTITY (1, 1) NOT NULL,
    [OfertaAcademicaID]                 INT NOT NULL,
    [PlanEstudioID]                     INT NOT NULL,
    [TurnoID]                           INT NOT NULL,
    [RvoeID]                            INT NOT NULL,
    PRIMARY KEY CLUSTERED ([OfertaAcademicaPlanEstudioTurnoID] ASC),
    CONSTRAINT [AK_AcOfertaAcademicaPlanEstudioTurno_OfertaAcademicaID_PlanEstudioID_TurnoID] UNIQUE NONCLUSTERED ([OfertaAcademicaID] ASC, [PlanEstudioID] ASC, [TurnoID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcPeriodoEvaluacion]...';


GO
CREATE TABLE [dbo].[AcPeriodoEvaluacion] (
    [PeriodoEvaluacionID]         INT           IDENTITY (1, 1) NOT NULL,
    [PeriodoEvaluacionClave]      VARCHAR (6)   NULL,
    [Nombre]                      VARCHAR (80)  NOT NULL,
    [NombreCorto]                 VARCHAR (15)  NULL,
    [Descripcion]                 VARCHAR (150) NULL,
    [PeriodoEvaluacionIDAnterior] INT           NULL,
    [FechaInicio]                 DATETIME      NOT NULL,
    [FechaFinal]                  DATETIME      NOT NULL,
    [CicloID]                     INT           NOT NULL,
    CONSTRAINT [PK_AcPeriodo] PRIMARY KEY CLUSTERED ([PeriodoEvaluacionID] ASC),
    CONSTRAINT [AK_AcPeriodoEvaluacion_Nombre] UNIQUE NONCLUSTERED ([Nombre] ASC),
    CONSTRAINT [AK_AcPeriodoEvaluacion_NombreCorto] UNIQUE NONCLUSTERED ([NombreCorto] ASC),
    CONSTRAINT [AK_AcPeriodoEvaluacion_PeriodoEvaluacionClave] UNIQUE NONCLUSTERED ([PeriodoEvaluacionClave] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcPeriodoVacacional]...';


GO
CREATE TABLE [dbo].[AcPeriodoVacacional] (
    [PeriodoVacacionalID]    INT           IDENTITY (1, 1) NOT NULL,
    [PeriodoVacacionalClave] VARCHAR (6)   NULL,
    [Nombre]                 VARCHAR (80)  NOT NULL,
    [NombreCorto]            VARCHAR (15)  NULL,
    [Descripcion]            VARCHAR (150) NULL,
    [CicloID]                INT           NOT NULL,
    [FechaInicio]            DATETIME      NOT NULL,
    [FechaFinal]             DATETIME      NOT NULL,
    CONSTRAINT [PK_AcPeriodoVacacional] PRIMARY KEY CLUSTERED ([PeriodoVacacionalID] ASC),
    CONSTRAINT [AK_AcPeriodoVacacional_Nombre] UNIQUE NONCLUSTERED ([Nombre] ASC),
    CONSTRAINT [AK_AcPeriodoVacacional_NombreCorto] UNIQUE NONCLUSTERED ([NombreCorto] ASC),
    CONSTRAINT [AK_AcPeriodoVacacional_PeriodoVacacionalClave] UNIQUE NONCLUSTERED ([PeriodoVacacionalClave] ASC)
);


GO
PRINT N'Creando Índice [dbo].[AcPeriodoVacacional].[IXFK_AcPeriodoVacacional_AcCiclo]...';


GO
CREATE NONCLUSTERED INDEX [IXFK_AcPeriodoVacacional_AcCiclo]
    ON [dbo].[AcPeriodoVacacional]([CicloID] ASC);


GO
PRINT N'Creando Tabla [dbo].[AcPlanEstudio]...';


GO
CREATE TABLE [dbo].[AcPlanEstudio] (
    [PlanEstudioID]                 INT            IDENTITY (1, 1) NOT NULL,
    [PlanEstudioClave]              VARCHAR (6)    NULL,
    [Nombre]                        VARCHAR (80)   NOT NULL,
    [NombreCorto]                   VARCHAR (15)   NULL,
    [Descripcion]                   VARCHAR (150)  NULL,
    [SeccionID]                     INT            NOT NULL,
    [CalificacionMinimaAprobatoria] DECIMAL (5, 2) NULL,
    [CreditosParaAcreditar]         INT            NULL,
    CONSTRAINT [PK_AcPlanEstudio] PRIMARY KEY CLUSTERED ([PlanEstudioID] ASC),
    CONSTRAINT [AK_AcPlanEstudio_Nombre] UNIQUE NONCLUSTERED ([Nombre] ASC),
    CONSTRAINT [AK_AcPlanEstudio_NombreCorto] UNIQUE NONCLUSTERED ([NombreCorto] ASC),
    CONSTRAINT [AK_AcPlanEstudio_PlanEstudioClave] UNIQUE NONCLUSTERED ([PlanEstudioClave] ASC)
);


GO
PRINT N'Creando Índice [dbo].[AcPlanEstudio].[IXFK_AcPlanEstudio_AcSeccion]...';


GO
CREATE NONCLUSTERED INDEX [IXFK_AcPlanEstudio_AcSeccion]
    ON [dbo].[AcPlanEstudio]([SeccionID] ASC);


GO
PRINT N'Creando Tabla [dbo].[AcPlantel]...';


GO
CREATE TABLE [dbo].[AcPlantel] (
    [PlantelID]    INT          IDENTITY (1, 1) NOT NULL,
    [PlantelClave] VARCHAR (6)  NULL,
    [Nombre]       VARCHAR (80) NOT NULL,
    [NombreCorto]  VARCHAR (15) NULL,
    [SucursalID]   INT          NOT NULL,
    CONSTRAINT [PK_AcPlantel] PRIMARY KEY CLUSTERED ([PlantelID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcProgramaEstudio]...';


GO
CREATE TABLE [dbo].[AcProgramaEstudio] (
    [ProgramaEstudioID]     INT         IDENTITY (1, 1) NOT NULL,
    [PlanEstudioID]         INT         NOT NULL,
    [AsignaturaID]          INT         NOT NULL,
    [Clave]                 VARCHAR (6) NULL,
    [ProgramaEstudioTipoID] INT         NOT NULL,
    [AreaFormacionID]       INT         NOT NULL,
    [HorasTeoria]           INT         NULL,
    [HorasPractica]         INT         NULL,
    [HorasTotales]          INT         NULL,
    [Creditos]              INT         NULL,
    [DuracionSemanas]       INT         NULL,
    [Grado]                 INT         NULL,
    CONSTRAINT [PK_AcProgramaEstudio] PRIMARY KEY CLUSTERED ([ProgramaEstudioID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[AcProgramaEstudio].[IXFK_AcProgramaEstudio_AcAsignaturas]...';


GO
CREATE NONCLUSTERED INDEX [IXFK_AcProgramaEstudio_AcAsignaturas]
    ON [dbo].[AcProgramaEstudio]([AsignaturaID] ASC);


GO
PRINT N'Creando Índice [dbo].[AcProgramaEstudio].[IXFK_AcProgramaEstudio_AcPlanEstudio]...';


GO
CREATE NONCLUSTERED INDEX [IXFK_AcProgramaEstudio_AcPlanEstudio]
    ON [dbo].[AcProgramaEstudio]([PlanEstudioID] ASC);


GO
PRINT N'Creando Tabla [dbo].[AcProgramaEstudioTipo]...';


GO
CREATE TABLE [dbo].[AcProgramaEstudioTipo] (
    [ProgramaEstudioTipoID]    INT          IDENTITY (1, 1) NOT NULL,
    [ProgramaEstudioTipoClave] VARCHAR (6)  NULL,
    [Nombre]                   VARCHAR (80) NOT NULL,
    [NombreCorto]              VARCHAR (15) NULL,
    CONSTRAINT [PK_AcProgramaEstudioTipo] PRIMARY KEY CLUSTERED ([ProgramaEstudioTipoID] ASC),
    CONSTRAINT [AK_AcProgramaEstudioTipo_Nombre] UNIQUE NONCLUSTERED ([Nombre] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcRequisitoProgramaEstudio]...';


GO
CREATE TABLE [dbo].[AcRequisitoProgramaEstudio] (
    [RequisitoProgramaEstudioID]      INT IDENTITY (1, 1) NOT NULL,
    [SalidaTerminalProgramaEstudioID] INT NULL,
    [ProgramaEstudioID]               INT NOT NULL,
    [ProgramaEstudioIDPrerrequisito]  INT NULL,
    [ProgramaEstudioIDCondicionalOR]  INT NULL,
    [ProgramaEstudioIDSimultanea]     INT NULL,
    [Creditos]                        INT NULL,
    PRIMARY KEY CLUSTERED ([RequisitoProgramaEstudioID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcRvoe]...';


GO
CREATE TABLE [dbo].[AcRvoe] (
    [RvoeID]          INT          IDENTITY (1, 1) NOT NULL,
    [RvoeClave]       VARCHAR (6)  NULL,
    [Nombre]          VARCHAR (80) NULL,
    [NombreCorto]     VARCHAR (15) NULL,
    [Registro]        VARCHAR (50) NULL,
    [FechaExpedicion] DATETIME     NULL,
    CONSTRAINT [PK_Rvoe] PRIMARY KEY CLUSTERED ([RvoeID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcRvoePlanEstudio]...';


GO
CREATE TABLE [dbo].[AcRvoePlanEstudio] (
    [RvoePlanEstudioID] INT IDENTITY (1, 1) NOT NULL,
    [RvoeID]            INT NULL,
    [PlanEstudioID]     INT NULL,
    CONSTRAINT [PK_AcRvoePlanEstudio] PRIMARY KEY CLUSTERED ([RvoePlanEstudioID] ASC),
    CONSTRAINT [AK_AcRvoePlanEstudio_RvoeID_PlanEstudioID] UNIQUE NONCLUSTERED ([RvoeID] ASC, [PlanEstudioID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcSalidaTerminal]...';


GO
CREATE TABLE [dbo].[AcSalidaTerminal] (
    [SalidaTerminalID]    INT           IDENTITY (1, 1) NOT NULL,
    [SalidaTerminalClave] VARCHAR (6)   NULL,
    [Nombre]              VARCHAR (80)  NOT NULL,
    [NombreCorto]         VARCHAR (15)  NULL,
    [Descripcion]         VARCHAR (150) NULL,
    [PlanEstudioID]       INT           NOT NULL,
    [Activa]              BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([SalidaTerminalID] ASC),
    CONSTRAINT [AK_AcSalidaTerminal_PlanEstudioID_Nombre] UNIQUE NONCLUSTERED ([PlanEstudioID] ASC, [Nombre] ASC),
    CONSTRAINT [AK_AcSalidaTerminal_PlanEstudioID_NombreCorto] UNIQUE NONCLUSTERED ([PlanEstudioID] ASC, [NombreCorto] ASC),
    CONSTRAINT [AK_AcSalidaTerminal_PlanEstudioID_SalidaTerminalClave] UNIQUE NONCLUSTERED ([PlanEstudioID] ASC, [SalidaTerminalClave] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcSalidaTerminalProgramaEstudio]...';


GO
CREATE TABLE [dbo].[AcSalidaTerminalProgramaEstudio] (
    [SalidaTerminalProgramaEstudioID] INT IDENTITY (1, 1) NOT NULL,
    [SalidaTerminalID]                INT NOT NULL,
    [ProgramaEstudioID]               INT NOT NULL,
    PRIMARY KEY CLUSTERED ([SalidaTerminalProgramaEstudioID] ASC),
    CONSTRAINT [AK_AcSalidaTerminalProgramaEstudio_SalidaTerminalID_ProgramaEstudioID] UNIQUE NONCLUSTERED ([SalidaTerminalID] ASC, [ProgramaEstudioID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcSeccion]...';


GO
CREATE TABLE [dbo].[AcSeccion] (
    [SeccionID]        INT           IDENTITY (1, 1) NOT NULL,
    [SeccionClave]     VARCHAR (6)   NULL,
    [Nombre]           VARCHAR (80)  NOT NULL,
    [NombreCorto]      VARCHAR (15)  NULL,
    [Descripcion]      VARCHAR (150) NULL,
    [NivelEducativoID] INT           NOT NULL,
    CONSTRAINT [PK_AcSeccion] PRIMARY KEY CLUSTERED ([SeccionID] ASC),
    CONSTRAINT [AK_AcSeccion_Nombre] UNIQUE NONCLUSTERED ([Nombre] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcTipoDocumento]...';


GO
CREATE TABLE [dbo].[AcTipoDocumento] (
    [TipoDocumentoID]    INT           IDENTITY (1, 1) NOT NULL,
    [TipoDocumentoClave] VARCHAR (6)   NULL,
    [Nombre]             VARCHAR (80)  NOT NULL,
    [NombreCorto]        VARCHAR (15)  NULL,
    [Descripcion]        VARCHAR (150) NULL,
    PRIMARY KEY CLUSTERED ([TipoDocumentoID] ASC),
    CONSTRAINT [AK_AcTipoDocumento_DocumentoClave] UNIQUE NONCLUSTERED ([TipoDocumentoClave] ASC),
    CONSTRAINT [AK_AcTipoDocumento_Nombre] UNIQUE NONCLUSTERED ([Nombre] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AcTurno]...';


GO
CREATE TABLE [dbo].[AcTurno] (
    [TurnoID]     INT          IDENTITY (1, 1) NOT NULL,
    [TurnoClave]  VARCHAR (6)  NULL,
    [Nombre]      VARCHAR (80) NULL,
    [NombreCorto] VARCHAR (15) NULL,
    [HoraInicio]  SMALLINT     NULL,
    [HoraFinal]   SMALLINT     NULL,
    CONSTRAINT [PK_AcTurnos] PRIMARY KEY CLUSTERED ([TurnoID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AdmisionArea]...';


GO
CREATE TABLE [dbo].[AdmisionArea] (
    [AreaID] INT          IDENTITY (1, 1) NOT NULL,
    [Nombre] VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([AreaID] ASC),
    CONSTRAINT [AK_AcAdmision_AdmisionArea] UNIQUE NONCLUSTERED ([Nombre] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AuxBanco]...';


GO
CREATE TABLE [dbo].[AuxBanco] (
    [AuxBancoID]    INT          IDENTITY (1, 1) NOT NULL,
    [AuxBancoClave] VARCHAR (4)  NOT NULL,
    [Nombre]        VARCHAR (30) NOT NULL,
    [NombreCorto]   VARCHAR (10) NULL,
    CONSTRAINT [PK_AuxBanco] PRIMARY KEY CLUSTERED ([AuxBancoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[AuxBanco].[IX_Banco_BancoClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Banco_BancoClave]
    ON [dbo].[AuxBanco]([AuxBancoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[AuxEstadoCivil]...';


GO
CREATE TABLE [dbo].[AuxEstadoCivil] (
    [AuxEstadoCivilID]    INT          IDENTITY (1, 1) NOT NULL,
    [AuxEstadoCivilClave] VARCHAR (6)  NOT NULL,
    [Nombre]              VARCHAR (30) NOT NULL,
    [NombreCorto]         VARCHAR (10) NOT NULL,
    CONSTRAINT [PK_AuxEstadoCivil] PRIMARY KEY CLUSTERED ([AuxEstadoCivilID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[AuxEstadoCivil].[IX_EstadoCivil]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_EstadoCivil]
    ON [dbo].[AuxEstadoCivil]([AuxEstadoCivilClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[AuxFormaPago]...';


GO
CREATE TABLE [dbo].[AuxFormaPago] (
    [AuxFormaPagoID]    INT          IDENTITY (1, 1) NOT NULL,
    [Nombre]            VARCHAR (50) NULL,
    [NombreCorto]       VARCHAR (20) NULL,
    [AuxFormaPagoClave] VARCHAR (5)  NOT NULL,
    CONSTRAINT [PK_AuxFormaPago] PRIMARY KEY CLUSTERED ([AuxFormaPagoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[AuxFormaPago].[IX_AuxFormaPago_AuxFormaPagoClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_AuxFormaPago_AuxFormaPagoClave]
    ON [dbo].[AuxFormaPago]([AuxFormaPagoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[AuxGiroEmpresa]...';


GO
CREATE TABLE [dbo].[AuxGiroEmpresa] (
    [AuxGiroEmpresaID]    INT          IDENTITY (1, 1) NOT NULL,
    [AuxGiroEmpresaClave] VARCHAR (6)  NOT NULL,
    [Nombre]              VARCHAR (60) NOT NULL,
    [NombreCorto]         VARCHAR (20) NULL,
    CONSTRAINT [PK_AuxGiroEmpresaID] PRIMARY KEY CLUSTERED ([AuxGiroEmpresaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[AuxGiroEmpresa].[IX_GiroEmpresa_GiroEmpresaClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_GiroEmpresa_GiroEmpresaClave]
    ON [dbo].[AuxGiroEmpresa]([AuxGiroEmpresaClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[AuxHorarioPersonal]...';


GO
CREATE TABLE [dbo].[AuxHorarioPersonal] (
    [AuxHorarioPersonalID]    INT          IDENTITY (1, 1) NOT NULL,
    [AuxHorarioPersonalClave] VARCHAR (6)  NOT NULL,
    [EmpresaID]               INT          NOT NULL,
    [Nombre]                  VARCHAR (30) NOT NULL,
    [NombreCorto]             VARCHAR (10) NOT NULL,
    CONSTRAINT [PK_AuxHorarioPersonal] PRIMARY KEY CLUSTERED ([AuxHorarioPersonalID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[AuxHorarioPersonal].[IX_HorarioPersonal_EmpresaID_HorarioPersonalClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_HorarioPersonal_EmpresaID_HorarioPersonalClave]
    ON [dbo].[AuxHorarioPersonal]([EmpresaID] ASC, [AuxHorarioPersonalClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[AuxIdioma]...';


GO
CREATE TABLE [dbo].[AuxIdioma] (
    [AuxIdiomaID]    INT          IDENTITY (1, 1) NOT NULL,
    [Nombre]         VARCHAR (50) NULL,
    [NombreCorto]    VARCHAR (20) NULL,
    [AuxIdiomaClave] VARCHAR (5)  NOT NULL,
    CONSTRAINT [PK_AuxIdioma] PRIMARY KEY CLUSTERED ([AuxIdiomaID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[AuxMarca]...';


GO
CREATE TABLE [dbo].[AuxMarca] (
    [AuxMarcaID]    INT          IDENTITY (1, 1) NOT NULL,
    [AuxMarcaClave] VARCHAR (4)  NOT NULL,
    [Nombre]        VARCHAR (25) NOT NULL,
    [NombreCorto]   VARCHAR (8)  NOT NULL,
    [Activo]        CHAR (1)     NOT NULL,
    CONSTRAINT [PK_Auxmarca] PRIMARY KEY CLUSTERED ([AuxMarcaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[AuxMarca].[IX_Marca_MarcaClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Marca_MarcaClave]
    ON [dbo].[AuxMarca]([AuxMarcaClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[AuxMedioContacto]...';


GO
CREATE TABLE [dbo].[AuxMedioContacto] (
    [AuxMedioContactoID]    INT          IDENTITY (1, 1) NOT NULL,
    [AuxMedioContactoClave] VARCHAR (5)  NOT NULL,
    [Nombre]                VARCHAR (30) NOT NULL,
    [NombreCorto]           VARCHAR (10) NULL,
    CONSTRAINT [PK_Auxmedios_contacto] PRIMARY KEY CLUSTERED ([AuxMedioContactoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[AuxMedioContacto].[IX_MedioContacto_MedioContactoClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_MedioContacto_MedioContactoClave]
    ON [dbo].[AuxMedioContacto]([AuxMedioContactoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[AuxProfesion]...';


GO
CREATE TABLE [dbo].[AuxProfesion] (
    [AuxProfesionID]    INT          IDENTITY (1, 1) NOT NULL,
    [AuxProfesionClave] VARCHAR (8)  NOT NULL,
    [Nombre]            VARCHAR (60) NOT NULL,
    [NombreCorto]       VARCHAR (20) NOT NULL,
    [Tratamiento]       VARCHAR (6)  NOT NULL,
    CONSTRAINT [PK_Auxprofesion] PRIMARY KEY CLUSTERED ([AuxProfesionID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[AuxProfesion].[IX_Profesion_ProfesionClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Profesion_ProfesionClave]
    ON [dbo].[AuxProfesion]([AuxProfesionClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[AuxPuesto]...';


GO
CREATE TABLE [dbo].[AuxPuesto] (
    [AuxPuestoID]     INT           IDENTITY (1, 1) NOT NULL,
    [AuxPuestoClave]  VARCHAR (8)   NOT NULL,
    [Nombre]          VARCHAR (60)  NOT NULL,
    [NombreCorto]     VARCHAR (20)  NULL,
    [Sueldo]          MONEY         NOT NULL,
    [BaseNeto]        CHAR (1)      NOT NULL,
    [Tipo]            CHAR (1)      NOT NULL,
    [Objetivo]        VARCHAR (250) NOT NULL,
    [ReqAcademicos]   VARCHAR (100) NOT NULL,
    [TiempoDesempeno] TINYINT       NOT NULL,
    [EmpresaID]       INT           NOT NULL,
    CONSTRAINT [PK_Auxpuestos] PRIMARY KEY CLUSTERED ([AuxPuestoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[AuxPuesto].[IX_Puesto_PuestoClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Puesto_PuestoClave]
    ON [dbo].[AuxPuesto]([AuxPuestoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[AuxReligion]...';


GO
CREATE TABLE [dbo].[AuxReligion] (
    [AuxReligionID]    INT          IDENTITY (1, 1) NOT NULL,
    [AuxReligionClave] VARCHAR (5)  NOT NULL,
    [Nombre]           VARCHAR (50) NULL,
    [NombreCorto]      VARCHAR (12) NULL,
    CONSTRAINT [PK_AuxReligionID] PRIMARY KEY CLUSTERED ([AuxReligionID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[AuxReligion].[IX_AuxReligion_AuxReligionClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_AuxReligion_AuxReligionClave]
    ON [dbo].[AuxReligion]([AuxReligionClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[AuxUnidad]...';


GO
CREATE TABLE [dbo].[AuxUnidad] (
    [AuxUnidadID]    INT          IDENTITY (1, 1) NOT NULL,
    [AuxUnidadClave] VARCHAR (5)  NOT NULL,
    [Nombre]         VARCHAR (25) NOT NULL,
    [NombreCorto]    VARCHAR (8)  NOT NULL,
    [Estatus]        CHAR (1)     NOT NULL,
    CONSTRAINT [PK_AuxUnidadID] PRIMARY KEY CLUSTERED ([AuxUnidadID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[AuxUnidad].[IX_AuxUnidad_AuxUnidadClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_AuxUnidad_AuxUnidadClave]
    ON [dbo].[AuxUnidad]([AuxUnidadClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[AuxVinculo]...';


GO
CREATE TABLE [dbo].[AuxVinculo] (
    [AuxVinculoID]    INT          IDENTITY (1, 1) NOT NULL,
    [AuxVinculoClave] VARCHAR (5)  NOT NULL,
    [Nombre]          VARCHAR (40) NOT NULL,
    [NombreCorto]     VARCHAR (15) NOT NULL,
    CONSTRAINT [PK_AuxVinculoID] PRIMARY KEY CLUSTERED ([AuxVinculoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[AuxVinculo].[IX_Vinculo]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Vinculo]
    ON [dbo].[AuxVinculo]([AuxVinculoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[AuxZona]...';


GO
CREATE TABLE [dbo].[AuxZona] (
    [AuxZonaID]    INT          IDENTITY (1, 1) NOT NULL,
    [AuxZonaClave] VARCHAR (5)  NULL,
    [Nombre]       VARCHAR (50) NULL,
    [NombreCorto]  VARCHAR (20) NULL,
    CONSTRAINT [PK_AuxZona] PRIMARY KEY CLUSTERED ([AuxZonaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[AuxZona].[IX_Zona]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Zona]
    ON [dbo].[AuxZona]([AuxZonaClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[BcoCuenta]...';


GO
CREATE TABLE [dbo].[BcoCuenta] (
    [BcoCuentaID]   INT          IDENTITY (1, 1) NOT NULL,
    [Clabe]         DECIMAL (18) NOT NULL,
    [Cuenta]        DECIMAL (18) NOT NULL,
    [Tarjeta]       DECIMAL (16) NOT NULL,
    [BcoSucursalID] INT          NOT NULL,
    CONSTRAINT [PK_BcoCuenta] PRIMARY KEY CLUSTERED ([BcoCuentaID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[BcoMovimiento]...';


GO
CREATE TABLE [dbo].[BcoMovimiento] (
    [BcoMovimientoID]     INT             IDENTITY (1, 1) NOT NULL,
    [PpalSerieID]         INT             NOT NULL,
    [Folio]               INT             NOT NULL,
    [PpalPersonalID]      INT             NOT NULL,
    [Fecha]               DATETIME        NOT NULL,
    [Referencia]          VARCHAR (50)    NOT NULL,
    [Concepto]            VARCHAR (100)   NOT NULL,
    [Importe]             DECIMAL (18, 2) NULL,
    [BcoTipoMovimientoID] INT             NOT NULL,
    [BcoCuentaID]         INT             NOT NULL,
    [AuxFormaPagoID]      INT             NOT NULL,
    CONSTRAINT [PK_BcoMovimiento] PRIMARY KEY CLUSTERED ([BcoMovimientoID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[BcoMovimientoBanco]...';


GO
CREATE TABLE [dbo].[BcoMovimientoBanco] (
    [BcoMovimientoBancoID] INT           NOT NULL,
    [PpalSerieID]          INT           NOT NULL,
    [Folio]                INT           NOT NULL,
    [PpalPersonalID]       INT           NOT NULL,
    [Fecha]                DATETIME      NOT NULL,
    [Referencia]           VARCHAR (50)  NOT NULL,
    [Concepto]             VARCHAR (100) NOT NULL,
    [Importe]              FLOAT (53)    NOT NULL,
    [CargoAbono]           CHAR (1)      NOT NULL,
    CONSTRAINT [PK_BcoMovimientoBanco] PRIMARY KEY CLUSTERED ([BcoMovimientoBancoID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[BcoSucursal]...';


GO
CREATE TABLE [dbo].[BcoSucursal] (
    [BcoSucursalID]    INT          IDENTITY (1, 1) NOT NULL,
    [BcoSucursalClave] VARCHAR (5)  NOT NULL,
    [AuxBancoID]       INT          NOT NULL,
    [Nombre]           VARCHAR (60) NOT NULL,
    [NombreCorto]      VARCHAR (10) NOT NULL,
    CONSTRAINT [PK_BcoSucursal] PRIMARY KEY CLUSTERED ([BcoSucursalID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[BcoSucursal].[IX_BcoSucursal_AuxBancoID_BcoSucursalClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_BcoSucursal_AuxBancoID_BcoSucursalClave]
    ON [dbo].[BcoSucursal]([AuxBancoID] ASC, [BcoSucursalClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[BcoTipoMovimiento]...';


GO
CREATE TABLE [dbo].[BcoTipoMovimiento] (
    [BcoTipoMovimientoID]    INT          IDENTITY (1, 1) NOT NULL,
    [BcoTipoMovimientoClave] VARCHAR (10) NOT NULL,
    [Nombre]                 VARCHAR (50) NOT NULL,
    [NombreCorto]            VARCHAR (15) NOT NULL,
    [NaturalezaID]           INT          NOT NULL,
    CONSTRAINT [PK_BcoTipoMovimiento] PRIMARY KEY CLUSTERED ([BcoTipoMovimientoID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[Borrar_codigo]...';


GO
CREATE TABLE [dbo].[Borrar_codigo] (
    [codigo] VARCHAR (50)  NOT NULL,
    [nombre] VARCHAR (100) NULL,
    CONSTRAINT [PK_Borrar_codigo] PRIMARY KEY CLUSTERED ([codigo] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[CalCalendario]...';


GO
CREATE TABLE [dbo].[CalCalendario] (
    [CalendarioID]     INT          IDENTITY (1, 1) NOT NULL,
    [CalendarioClave]  VARCHAR (6)  NULL,
    [Nombre]           VARCHAR (80) NULL,
    [NombreCorto]      VARCHAR (15) NULL,
    [CalendarioTipoID] INT          NOT NULL,
    [Borrado]          BIT          NOT NULL,
    PRIMARY KEY CLUSTERED ([CalendarioID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[CalCalendarioEvento]...';


GO
CREATE TABLE [dbo].[CalCalendarioEvento] (
    [CalendarioEventoID] INT IDENTITY (1, 1) NOT NULL,
    [CalendarioID]       INT NOT NULL,
    [EventoID]           INT NOT NULL,
    [EventoPadreID]      INT NULL,
    PRIMARY KEY CLUSTERED ([CalendarioEventoID] ASC),
    CONSTRAINT [AK_CalCalendarioEvento_CalendarioID_EventoID] UNIQUE NONCLUSTERED ([CalendarioID] ASC, [EventoID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[CalCalendarioPersona]...';


GO
CREATE TABLE [dbo].[CalCalendarioPersona] (
    [CalendarioPersonaID]  INT IDENTITY (1, 1) NOT NULL,
    [CalendarioID]         INT NOT NULL,
    [EspPersonaID]         INT NOT NULL,
    [CalendarioPermisoInt] INT NOT NULL,
    [Dueno]                BIT NOT NULL,
    PRIMARY KEY CLUSTERED ([CalendarioPersonaID] ASC),
    CONSTRAINT [AK_CalCalendarioPersona_Calendario_Persona] UNIQUE NONCLUSTERED ([CalendarioID] ASC, [EspPersonaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CalCalendarioPersona].[IX_CalCalendarioPersona_Dueno]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CalCalendarioPersona_Dueno]
    ON [dbo].[CalCalendarioPersona]([CalendarioID] ASC, [Dueno] ASC) WHERE ([Dueno]=(1));


GO
PRINT N'Creando Tabla [dbo].[CalCalendarioTipo]...';


GO
CREATE TABLE [dbo].[CalCalendarioTipo] (
    [CalendarioTipoID]    INT        IDENTITY (1, 1) NOT NULL,
    [CalendarioTipoClave] NCHAR (6)  NULL,
    [Nombre]              NCHAR (80) NULL,
    [NombreCorto]         NCHAR (15) NULL,
    PRIMARY KEY CLUSTERED ([CalendarioTipoID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[CalEvento]...';


GO
CREATE TABLE [dbo].[CalEvento] (
    [EventoID]            INT            IDENTITY (1, 1) NOT NULL,
    [EventoTipoID]        INT            NOT NULL,
    [FechaInicio]         SMALLDATETIME  NULL,
    [FechaFinal]          SMALLDATETIME  NULL,
    [TodoElDia]           BIT            NULL,
    [Tema]                NVARCHAR (50)  NULL,
    [Locacion]            NVARCHAR (50)  NULL,
    [Descripcion]         NVARCHAR (MAX) NULL,
    [StatusID]            INT            NOT NULL,
    [EtiquetaID]          INT            NULL,
    [RecursoID]           INT            NULL,
    [RecursoIDs]          NVARCHAR (MAX) NULL,
    [RecordatorioInfo]    NVARCHAR (MAX) NULL,
    [RecurrenciaInfo]     NVARCHAR (MAX) NULL,
    [CampoPersonalizado1] NVARCHAR (MAX) NULL,
    [CampoPersonalizado2] NVARCHAR (MAX) NULL,
    [CampoPersonalizado3] NVARCHAR (MAX) NULL,
    [CampoPersonalizado4] NVARCHAR (MAX) NULL,
    [CampoPersonalizado5] NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([EventoID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[CalEventoStatus]...';


GO
CREATE TABLE [dbo].[CalEventoStatus] (
    [EventoStatusID]    INT        IDENTITY (1, 1) NOT NULL,
    [EventoStatusClave] NCHAR (6)  NOT NULL,
    [Nombre]            NCHAR (80) NOT NULL,
    [NombreCorto]       NCHAR (15) NOT NULL,
    PRIMARY KEY CLUSTERED ([EventoStatusID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[CalEventoTipo]...';


GO
CREATE TABLE [dbo].[CalEventoTipo] (
    [EventoTipoID]    INT        IDENTITY (1, 1) NOT NULL,
    [EventoTipoClave] NCHAR (6)  NOT NULL,
    [Nombre]          NCHAR (80) NOT NULL,
    [NombreCorto]     NCHAR (15) NOT NULL,
    PRIMARY KEY CLUSTERED ([EventoTipoID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[CalRecurso]...';


GO
CREATE TABLE [dbo].[CalRecurso] (
    [UniqueID]            INT            IDENTITY (1, 1) NOT NULL,
    [RecursoID]           INT            NOT NULL,
    [RecursoNombre]       NVARCHAR (50)  NULL,
    [Color]               INT            NULL,
    [ImagenUrl]           NVARCHAR (300) NULL,
    [CampoPersonalizado1] NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([UniqueID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[CfgEjercicioOperativo]...';


GO
CREATE TABLE [dbo].[CfgEjercicioOperativo] (
    [CfgEjercicioOperativoID] INT          IDENTITY (1, 1) NOT NULL,
    [CfgEjercicioClave]       VARCHAR (4)  NOT NULL,
    [Nombre]                  VARCHAR (20) NOT NULL,
    [NombreCorto]             VARCHAR (10) NOT NULL,
    [EmpresaID]               INT          NOT NULL,
    CONSTRAINT [PK_CfgEjercicioOperativo] PRIMARY KEY CLUSTERED ([CfgEjercicioOperativoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgEjercicioOperativo].[IX_EjercicioOperativo_EmpresaID_EjercicioClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_EjercicioOperativo_EmpresaID_EjercicioClave]
    ON [dbo].[CfgEjercicioOperativo]([EmpresaID] ASC, [CfgEjercicioClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CfgEsquemaImpuestoRetencion]...';


GO
CREATE TABLE [dbo].[CfgEsquemaImpuestoRetencion] (
    [CfgEsquemaImpuestoRetencionID]    INT          IDENTITY (1, 1) NOT NULL,
    [CfgEsquemaImpuestoRetencionClave] VARCHAR (3)  NOT NULL,
    [Nombre]                           VARCHAR (50) NOT NULL,
    [NombreCorto]                      VARCHAR (10) NOT NULL,
    CONSTRAINT [PK_CfgEsquemaImpuestoRetencion] PRIMARY KEY CLUSTERED ([CfgEsquemaImpuestoRetencionID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgEsquemaImpuestoRetencion].[IX_CfgEsquemaImpuestoRetencion]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CfgEsquemaImpuestoRetencion]
    ON [dbo].[CfgEsquemaImpuestoRetencion]([CfgEsquemaImpuestoRetencionClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CfgEsquemaImpuestoRetencionDetalle]...';


GO
CREATE TABLE [dbo].[CfgEsquemaImpuestoRetencionDetalle] (
    [CfgEsquemaImpuestoRetencionDetalleID] INT            IDENTITY (1, 1) NOT NULL,
    [CfgEsquemaImpuestoRetencionID]        INT            NOT NULL,
    [CfgImpuestoRetencionID]               INT            NOT NULL,
    [Porcentaje]                           DECIMAL (9, 6) NOT NULL,
    [Activo]                               CHAR (1)       NOT NULL,
    CONSTRAINT [PK_CfgEsquemaImpuestoRetencionDetalle] PRIMARY KEY CLUSTERED ([CfgEsquemaImpuestoRetencionDetalleID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgEsquemaImpuestoRetencionDetalle].[IX_CfgEsquemaImpuestoRetencionDetalle]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CfgEsquemaImpuestoRetencionDetalle]
    ON [dbo].[CfgEsquemaImpuestoRetencionDetalle]([CfgEsquemaImpuestoRetencionID] ASC, [CfgImpuestoRetencionID] ASC);


GO
PRINT N'Creando Tabla [dbo].[CfgEstatusCliente]...';


GO
CREATE TABLE [dbo].[CfgEstatusCliente] (
    [CfgEstatusClienteID]    INT          IDENTITY (1, 1) NOT NULL,
    [CfgEstatusClienteClave] VARCHAR (6)  NULL,
    [Nombre]                 VARCHAR (40) NULL,
    [NombreCorto]            VARCHAR (10) NULL,
    [EstatusPersonaID]       INT          NULL,
    CONSTRAINT [PK_CfgEstatusCliente] PRIMARY KEY CLUSTERED ([CfgEstatusClienteID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgEstatusCliente].[IX_EstatusCliente_EstatusClienteClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_EstatusCliente_EstatusClienteClave]
    ON [dbo].[CfgEstatusCliente]([CfgEstatusClienteClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CfgEstatusContactoPersonal]...';


GO
CREATE TABLE [dbo].[CfgEstatusContactoPersonal] (
    [CfgEstatusContactoPersonalID]    INT          IDENTITY (1, 1) NOT NULL,
    [CfgEstatusContactoPersonalClave] VARCHAR (6)  NULL,
    [Nombre]                          VARCHAR (40) NULL,
    [NombreCorto]                     VARCHAR (10) NULL,
    [EstatusPersonaID]                INT          NULL,
    CONSTRAINT [PK_CfgEstatusContactoPersonal] PRIMARY KEY CLUSTERED ([CfgEstatusContactoPersonalID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgEstatusContactoPersonal].[IX_EstatusContactoPersonal_EstatusContactoPersonalClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_EstatusContactoPersonal_EstatusContactoPersonalClave]
    ON [dbo].[CfgEstatusContactoPersonal]([CfgEstatusContactoPersonalClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CfgEstatusDocumento]...';


GO
CREATE TABLE [dbo].[CfgEstatusDocumento] (
    [CfgEstatusDocumentoID]         INT          IDENTITY (1, 1) NOT NULL,
    [CfgEstatusDocumentoClave]      VARCHAR (8)  NOT NULL,
    [Nombre]                        VARCHAR (40) NOT NULL,
    [NombreCorto]                   VARCHAR (10) NOT NULL,
    [SistemaEstatusTipoDocumentoID] INT          NOT NULL,
    [Predeterminado]                BIT          NOT NULL,
    CONSTRAINT [PK_CfgEstatusDocumentoID] PRIMARY KEY CLUSTERED ([CfgEstatusDocumentoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgEstatusDocumento].[IX_CfgEstatusDocumento_SistemaEstatusTipoDocumentoID_CfgEstatusDocumentoClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CfgEstatusDocumento_SistemaEstatusTipoDocumentoID_CfgEstatusDocumentoClave]
    ON [dbo].[CfgEstatusDocumento]([SistemaEstatusTipoDocumentoID] ASC, [CfgEstatusDocumentoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CfgEstatusPersonal]...';


GO
CREATE TABLE [dbo].[CfgEstatusPersonal] (
    [CfgEstatusPersonalID]    INT          IDENTITY (1, 1) NOT NULL,
    [CfgEstatusPersonalClave] VARCHAR (6)  NOT NULL,
    [Nombre]                  VARCHAR (30) NOT NULL,
    [NombreCorto]             VARCHAR (10) NOT NULL,
    [EstatusPersonaID]        INT          NOT NULL,
    CONSTRAINT [PK_CfgEstatusPersonal] PRIMARY KEY CLUSTERED ([CfgEstatusPersonalID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgEstatusPersonal].[IX_EstatusPersonal_EstatusPersonalClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_EstatusPersonal_EstatusPersonalClave]
    ON [dbo].[CfgEstatusPersonal]([CfgEstatusPersonalClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CfgEstatusRepresentanteCliente]...';


GO
CREATE TABLE [dbo].[CfgEstatusRepresentanteCliente] (
    [CfgEstatusRepresentanteClienteID]    INT          IDENTITY (1, 1) NOT NULL,
    [CfgEstatusRepresentanteClienteClave] VARCHAR (6)  NULL,
    [Nombre]                              VARCHAR (40) NOT NULL,
    [NombreCorto]                         VARCHAR (10) NOT NULL,
    [EstatusPersonaID]                    INT          NULL,
    CONSTRAINT [PK_CfgEstatusRepresentanteCliente] PRIMARY KEY CLUSTERED ([CfgEstatusRepresentanteClienteID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgEstatusRepresentanteCliente].[IX_EstatusRepresentanteCliente_EstatusRepresentanteClienteClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_EstatusRepresentanteCliente_EstatusRepresentanteClienteClave]
    ON [dbo].[CfgEstatusRepresentanteCliente]([CfgEstatusRepresentanteClienteClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CfgFamiliaProducto]...';


GO
CREATE TABLE [dbo].[CfgFamiliaProducto] (
    [CfgFamiliaProductoID] INT          IDENTITY (1, 1) NOT NULL,
    [PadreID]              INT          NULL,
    [CfgFamiliaClave]      VARCHAR (5)  NOT NULL,
    [FamiliaClavePadre]    VARCHAR (5)  NOT NULL,
    [Nombre]               VARCHAR (40) NOT NULL,
    [NombreCorto]          VARCHAR (15) NOT NULL,
    CONSTRAINT [PK_Cfgfamiliaproducto] PRIMARY KEY CLUSTERED ([CfgFamiliaProductoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgFamiliaProducto].[IX_FamiliaProducto_FamiliaClavePadre_FamiliaClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_FamiliaProducto_FamiliaClavePadre_FamiliaClave]
    ON [dbo].[CfgFamiliaProducto]([FamiliaClavePadre] ASC, [CfgFamiliaClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CfgImpuestoRetencion]...';


GO
CREATE TABLE [dbo].[CfgImpuestoRetencion] (
    [CfgImpuestoRetencionID]    INT          IDENTITY (1, 1) NOT NULL,
    [CfgImpuestoRetencionClave] VARCHAR (6)  NOT NULL,
    [Nombre]                    VARCHAR (60) NOT NULL,
    [NombreCorto]               VARCHAR (10) NOT NULL,
    [ImpuestoRetencion]         CHAR (1)     NOT NULL,
    CONSTRAINT [PK_CfgImpuestoRetencion] PRIMARY KEY CLUSTERED ([CfgImpuestoRetencionID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgImpuestoRetencion].[IX_CfgImpuestoRetencionClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CfgImpuestoRetencionClave]
    ON [dbo].[CfgImpuestoRetencion]([CfgImpuestoRetencionClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CfgParamConfigUsuarioCosmos]...';


GO
CREATE TABLE [dbo].[CfgParamConfigUsuarioCosmos] (
    [CfgParamConfigUsuarioCosmosID] INT          IDENTITY (1, 1) NOT NULL,
    [ComparteProveedor]             CHAR (1)     NOT NULL,
    [TextoArea]                     VARCHAR (50) NOT NULL,
    [TextoAreas]                    VARCHAR (50) NOT NULL,
    [TextoAreaAlias]                VARCHAR (15) NOT NULL,
    [TextoAreasAlias]               VARCHAR (15) NOT NULL,
    [TextoAreasPrefijo]             VARCHAR (5)  NOT NULL,
    [TextoAreaPrefijo]              VARCHAR (5)  NOT NULL,
    [TextoCentroCosto]              VARCHAR (50) NOT NULL,
    [TextoCentrosCosto]             VARCHAR (50) NOT NULL,
    [TextoCentroCostoAlias]         VARCHAR (15) NOT NULL,
    [TextoCentrosCostoAlias]        VARCHAR (15) NOT NULL,
    [TextoCentroCostoPrefijo]       VARCHAR (5)  NOT NULL,
    [TextoCentrosCostoPrefijo]      VARCHAR (5)  NOT NULL,
    [TextoSucursal]                 VARCHAR (50) NOT NULL,
    [TextoSucursales]               VARCHAR (50) NOT NULL,
    [TextoSucursalAlias]            VARCHAR (15) NOT NULL,
    [TextoSucursalesAlias]          VARCHAR (15) NOT NULL,
    [TextoSucursalPrefijo]          VARCHAR (5)  NOT NULL,
    [TextoSucursalesPrefijo]        VARCHAR (5)  NOT NULL,
    [ProductoClaveAutomatico]       CHAR (1)     NOT NULL,
    [ProductoClaveDigitos]          TINYINT      NOT NULL,
    [ProveedorClaveAutomatico]      CHAR (1)     NOT NULL,
    [ProveedorClaveDigitos]         TINYINT      NOT NULL,
    [ClienteClaveAutomatico]        CHAR (1)     NOT NULL,
    [ClienteClaveDigitos]           TINYINT      NOT NULL,
    [ProductoUltimaClave]           INT          NOT NULL,
    [ProveedorUltimaClave]          INT          NOT NULL,
    [ClienteUltimaClave]            INT          NOT NULL,
    CONSTRAINT [PK_CfgParamConfigUsuarioCosmos] PRIMARY KEY CLUSTERED ([CfgParamConfigUsuarioCosmosID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[CfgParamInicioUsuarioCosmos]...';


GO
CREATE TABLE [dbo].[CfgParamInicioUsuarioCosmos] (
    [ParamInicioUsuarioCosmosID]               INT      IDENTITY (1, 1) NOT NULL,
    [PpalAreaIDInicio]                         INT      NOT NULL,
    [PpalCentroCostoIDInicio]                  INT      NOT NULL,
    [EspCiudadIDInicio]                        INT      NOT NULL,
    [PpalConceptoEgresoIDInicio]               INT      NOT NULL,
    [PpalConceptoIngresoIDInicio]              INT      NOT NULL,
    [EspEstadoIDInicio]                        INT      NOT NULL,
    [AuxEstadoCivilIDInicio]                   INT      NOT NULL,
    [CfgEstatusClienteIDInicio]                INT      NOT NULL,
    [CfgEstatusContactoPersonalIDInicio]       INT      NOT NULL,
    [CfgEstatusDocumentoIDInicio]              INT      NOT NULL,
    [CfgEstatusPersonalIDInicio]               INT      NOT NULL,
    [CmpEstatusProveedorIDInicio]              INT      NOT NULL,
    [CmpEstatusRepresentanteProveedorIDInicio] INT      NOT NULL,
    [CfgFamiliaProductoIDInicio]               INT      NOT NULL,
    [AuxFormaPagoIDInicio]                     INT      NOT NULL,
    [AuxGiroEmpresaIDInicio]                   INT      NOT NULL,
    [AuxHorarioPersonalIDInicio]               INT      NOT NULL,
    [AuxIdiomaIDInicio]                        INT      NOT NULL,
    [AuxMarcaIDInicio]                         INT      NOT NULL,
    [AuxMedioContactoIDInicio]                 INT      NOT NULL,
    [EspMunicipioIDInicio]                     INT      NOT NULL,
    [EspPaisIDInicio]                          INT      NOT NULL,
    [AuxProfesionIDInicio]                     INT      NOT NULL,
    [SistemaSexoIDInicio]                      INT      NOT NULL,
    [CfgTipoClienteIDInicio]                   INT      NOT NULL,
    [CfgTipoContactoPersonalIDInicio]          INT      NOT NULL,
    [CfgTipoDomicilioIDInicio]                 INT      NOT NULL,
    [CfgTipoFechaIDInicio]                     INT      NOT NULL,
    [CfgTipoHorarioIDInicio]                   INT      NOT NULL,
    [CfgTipoMailIDInicio]                      INT      NOT NULL,
    [CfgTipoProductoIDInicio]                  INT      NOT NULL,
    [CmpTipoProveedorIDInicio]                 INT      NOT NULL,
    [CfgTipoRepresentanteClienteIDInicio]      INT      NOT NULL,
    [CmpTipoRepresentanteProveedorIDInicio]    INT      NOT NULL,
    [CfgTipoTelefonoIDInicio]                  INT      NOT NULL,
    [AuxUnidadIDInicio]                        INT      NOT NULL,
    [AuxVinculoIDInicio]                       INT      NOT NULL,
    [AuxZonaIDInicio]                          INT      NOT NULL,
    [EmpresaID]                                INT      NOT NULL,
    [FechaInicio]                              DATETIME NOT NULL,
    [CfgUsoTelefonoIDInicio]                   INT      NOT NULL,
    [PpalSucursalIDInicio]                     INT      NOT NULL,
    CONSTRAINT [PK_CfgParamInicioUsuarioCosmos2] PRIMARY KEY CLUSTERED ([ParamInicioUsuarioCosmosID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[CfgPeriodoOperativo]...';


GO
CREATE TABLE [dbo].[CfgPeriodoOperativo] (
    [CfgPeriodoOperativoID]   INT          IDENTITY (1, 1) NOT NULL,
    [CfgEjercicioOperativoID] INT          NOT NULL,
    [CfgPeriodoClave]         VARCHAR (6)  NOT NULL,
    [Nombre]                  VARCHAR (20) NOT NULL,
    [NombreCorto]             VARCHAR (6)  NOT NULL,
    [PeriodoOrden]            INT          NOT NULL,
    [FechaInicial]            DATE         NOT NULL,
    [FechaFinal]              DATE         NOT NULL,
    [FechaEjercePresupuesto]  DATE         NOT NULL,
    CONSTRAINT [PK_CfgPeriodoOperativo] PRIMARY KEY CLUSTERED ([CfgPeriodoOperativoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgPeriodoOperativo].[IX_PeriodoOperativo_EjercicioOperativoID_PeriodoClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PeriodoOperativo_EjercicioOperativoID_PeriodoClave]
    ON [dbo].[CfgPeriodoOperativo]([CfgEjercicioOperativoID] ASC, [CfgPeriodoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CfgTasaIVA]...';


GO
CREATE TABLE [dbo].[CfgTasaIVA] (
    [CfgTasaIVAID]    INT            IDENTITY (1, 1) NOT NULL,
    [CfgTasaIVAClave] VARCHAR (3)    NOT NULL,
    [Nombre]          VARCHAR (30)   NOT NULL,
    [NombreCorto]     VARCHAR (8)    NOT NULL,
    [PorcentajeIVA]   DECIMAL (5, 2) NOT NULL,
    CONSTRAINT [PK_CfgTasaIVA] PRIMARY KEY CLUSTERED ([CfgTasaIVAID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgTasaIVA].[IX_CfgTasaIVA]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CfgTasaIVA]
    ON [dbo].[CfgTasaIVA]([CfgTasaIVAClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CfgTipoAsentamiento]...';


GO
CREATE TABLE [dbo].[CfgTipoAsentamiento] (
    [CfgTipoAsentamientoID]    INT          IDENTITY (1, 1) NOT NULL,
    [CfgTipoAsentamientoClave] VARCHAR (3)  NOT NULL,
    [Nombre]                   VARCHAR (40) NOT NULL,
    [NombreCorto]              VARCHAR (10) NOT NULL,
    CONSTRAINT [PK_CfgTipoAsentamiento] PRIMARY KEY CLUSTERED ([CfgTipoAsentamientoID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[CfgTipoCliente]...';


GO
CREATE TABLE [dbo].[CfgTipoCliente] (
    [CfgTipoClienteID]    INT          IDENTITY (1, 1) NOT NULL,
    [CfgTipoClienteClave] VARCHAR (5)  NOT NULL,
    [Nombre]              VARCHAR (50) NOT NULL,
    [NombreCorto]         VARCHAR (20) NOT NULL,
    CONSTRAINT [PK_CfgTipoCliente] PRIMARY KEY CLUSTERED ([CfgTipoClienteID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgTipoCliente].[IX_TipoCliente_TipoClienteClave]...';


GO
CREATE NONCLUSTERED INDEX [IX_TipoCliente_TipoClienteClave]
    ON [dbo].[CfgTipoCliente]([CfgTipoClienteClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CfgTipoContactoPersonal]...';


GO
CREATE TABLE [dbo].[CfgTipoContactoPersonal] (
    [CfgTipoContactoPersonalID]    INT          IDENTITY (1, 1) NOT NULL,
    [CfgTipoContactoPersonalClave] VARCHAR (4)  NOT NULL,
    [Nombre]                       VARCHAR (50) NOT NULL,
    [NombreCorto]                  VARCHAR (20) NOT NULL,
    CONSTRAINT [PK__CfgContactoPersonal] PRIMARY KEY CLUSTERED ([CfgTipoContactoPersonalID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[CfgTipoDomicilio]...';


GO
CREATE TABLE [dbo].[CfgTipoDomicilio] (
    [CfgTipoDomicilioID]        INT          IDENTITY (1, 1) NOT NULL,
    [CfgTipoDomicilioClave]     VARCHAR (10) NOT NULL,
    [Nombre]                    VARCHAR (40) NOT NULL,
    [NombreCorto]               VARCHAR (15) NOT NULL,
    [Estatus]                   BIT          NOT NULL,
    [CfgSistemaTipoDomicilioID] INT          NOT NULL,
    CONSTRAINT [PK_CfgTipoDomicilio] PRIMARY KEY CLUSTERED ([CfgTipoDomicilioID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgTipoDomicilio].[IX_TipoDomicilio_TipoDomicilioClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_TipoDomicilio_TipoDomicilioClave]
    ON [dbo].[CfgTipoDomicilio]([CfgTipoDomicilioClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CfgTipoFecha]...';


GO
CREATE TABLE [dbo].[CfgTipoFecha] (
    [CfgTipoFechaID]    INT          IDENTITY (1, 1) NOT NULL,
    [CfgTipoFechaClave] VARCHAR (10) NOT NULL,
    [Nombre]            VARCHAR (40) NOT NULL,
    [NombreCorto]       VARCHAR (15) NOT NULL,
    [Estatus]           BIT          NOT NULL,
    [TipoFechaID]       INT          NOT NULL,
    CONSTRAINT [PK_CfgTipoFecha] PRIMARY KEY CLUSTERED ([CfgTipoFechaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgTipoFecha].[IX_TipoFecha_TipoFechaClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_TipoFecha_TipoFechaClave]
    ON [dbo].[CfgTipoFecha]([CfgTipoFechaClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CfgTipoHorario]...';


GO
CREATE TABLE [dbo].[CfgTipoHorario] (
    [CfgTipoHorarioID]    INT          IDENTITY (1, 1) NOT NULL,
    [CfgTipoHorarioClave] VARCHAR (10) NOT NULL,
    [Nombre]              VARCHAR (30) NOT NULL,
    [NombreCorto]         VARCHAR (10) NOT NULL,
    [EmpresaID]           INT          NOT NULL,
    [Homogeneo]           CHAR (1)     NOT NULL,
    CONSTRAINT [PK_CfgTipoHorario] PRIMARY KEY CLUSTERED ([CfgTipoHorarioID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgTipoHorario].[IX_TipoHorario_EmpresaID_TipoHorarioClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_TipoHorario_EmpresaID_TipoHorarioClave]
    ON [dbo].[CfgTipoHorario]([EmpresaID] ASC, [CfgTipoHorarioClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CfgTipoMail]...';


GO
CREATE TABLE [dbo].[CfgTipoMail] (
    [CfgTipoMailID]        INT          IDENTITY (1, 1) NOT NULL,
    [CfgTipoMailClave]     VARCHAR (10) NOT NULL,
    [Nombre]               VARCHAR (40) NOT NULL,
    [NombreCorto]          VARCHAR (15) NOT NULL,
    [Estatus]              BIT          NOT NULL,
    [CfgSistemaTipoMailID] INT          NOT NULL,
    CONSTRAINT [PK_CfgTipoMail] PRIMARY KEY CLUSTERED ([CfgTipoMailID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgTipoMail].[IX_TipoMail_TipoMailClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_TipoMail_TipoMailClave]
    ON [dbo].[CfgTipoMail]([CfgTipoMailClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CfgTipoProducto]...';


GO
CREATE TABLE [dbo].[CfgTipoProducto] (
    [CfgTipoProductoID]    INT          IDENTITY (1, 1) NOT NULL,
    [CfgTipoProductoClave] VARCHAR (4)  NOT NULL,
    [Nombre]               VARCHAR (40) NOT NULL,
    [NombreCorto]          VARCHAR (10) NOT NULL,
    CONSTRAINT [PK_CfgTipoProducto] PRIMARY KEY CLUSTERED ([CfgTipoProductoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgTipoProducto].[IX_TipoProducto]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_TipoProducto]
    ON [dbo].[CfgTipoProducto]([CfgTipoProductoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CfgTipoRepresentanteCliente]...';


GO
CREATE TABLE [dbo].[CfgTipoRepresentanteCliente] (
    [CfgTipoRepresentanteClienteID]    INT          IDENTITY (1, 1) NOT NULL,
    [CfgTipoRepresentanteClienteClave] VARCHAR (4)  NOT NULL,
    [Nombre]                           VARCHAR (50) NOT NULL,
    [NombreCorto]                      VARCHAR (20) NOT NULL,
    CONSTRAINT [PK_CfgTipoRepresentanteCliente] PRIMARY KEY CLUSTERED ([CfgTipoRepresentanteClienteID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[CfgTipoRepresentanteProveedor]...';


GO
CREATE TABLE [dbo].[CfgTipoRepresentanteProveedor] (
    [CfgTipoRepresentanteProveedorID]    INT          IDENTITY (1, 1) NOT NULL,
    [CfgTipoRepresentanteProveedorClave] VARCHAR (10) NOT NULL,
    [Nombre]                             VARCHAR (60) NOT NULL,
    [NombreCorto]                        VARCHAR (10) NOT NULL,
    [TipoRepresentanteProveedorID]       INT          NOT NULL,
    CONSTRAINT [PK_CfgTipoRepresentanteProveedorID] PRIMARY KEY CLUSTERED ([CfgTipoRepresentanteProveedorID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgTipoRepresentanteProveedor].[IX_CfgTipoRepresentanteProveedor]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CfgTipoRepresentanteProveedor]
    ON [dbo].[CfgTipoRepresentanteProveedor]([CfgTipoRepresentanteProveedorClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CfgTipoTelefono]...';


GO
CREATE TABLE [dbo].[CfgTipoTelefono] (
    [CfgTipoTelefonoID]     INT          IDENTITY (1, 1) NOT NULL,
    [CfgTipoTelefonoClave]  VARCHAR (10) NOT NULL,
    [Nombre]                VARCHAR (40) NOT NULL,
    [NombreCorto]           VARCHAR (15) NOT NULL,
    [Activo]                BIT          NOT NULL,
    [SistemaTipoTelefonoID] INT          NOT NULL,
    CONSTRAINT [PK_CfgTipoTelefonoID] PRIMARY KEY CLUSTERED ([CfgTipoTelefonoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgTipoTelefono].[IX_CfgTipoTelefono_CfgTipoTelefonoClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CfgTipoTelefono_CfgTipoTelefonoClave]
    ON [dbo].[CfgTipoTelefono]([CfgTipoTelefonoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CfgUsoTelefono]...';


GO
CREATE TABLE [dbo].[CfgUsoTelefono] (
    [CfgUsoTelefonoID]     INT          IDENTITY (1, 1) NOT NULL,
    [CfgUsoTelefonoClave]  VARCHAR (10) NOT NULL,
    [Nombre]               VARCHAR (40) NOT NULL,
    [NombreCorto]          VARCHAR (15) NOT NULL,
    [Activo]               BIT          NOT NULL,
    [SistemaUsoTelefonoID] INT          NOT NULL,
    CONSTRAINT [PK_CfgUsoTelefonoID] PRIMARY KEY CLUSTERED ([CfgUsoTelefonoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CfgUsoTelefono].[IX_CfgUsoTelefono_CfgUsoTelefonoClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CfgUsoTelefono_CfgUsoTelefonoClave]
    ON [dbo].[CfgUsoTelefono]([CfgUsoTelefonoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CmpAnticipoDetalle]...';


GO
CREATE TABLE [dbo].[CmpAnticipoDetalle] (
    [CmpAnticipoDetalleID]    INT           NOT NULL,
    [CmpAnticipoEncabezadoID] INT           NOT NULL,
    [PpalCentroCostoID]       INT           NOT NULL,
    [PpalAreaID]              INT           NOT NULL,
    [PpalConceptoEgresoID]    INT           NOT NULL,
    [PpalCuentaContableID]    INT           NOT NULL,
    [Importe]                 FLOAT (53)    NOT NULL,
    [Descripcion]             VARCHAR (500) NOT NULL,
    CONSTRAINT [PK_CmdAnticipoDetalle] PRIMARY KEY CLUSTERED ([CmpAnticipoDetalleID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[CmpAnticipoEncabezado]...';


GO
CREATE TABLE [dbo].[CmpAnticipoEncabezado] (
    [CmpAnticipoEncabezadoID]      INT           NOT NULL,
    [PpalSucursalID]               INT           NOT NULL,
    [TipoDocumentoID]              INT           NOT NULL,
    [PpalSerieID]                  INT           NOT NULL,
    [Folio]                        INT           NOT NULL,
    [PpalProveedorID]              INT           NOT NULL,
    [CmpTipoMovimientoProveedorID] INT           NOT NULL,
    [PpalPersonalID]               INT           NOT NULL,
    [Fecha]                        DATETIME      NOT NULL,
    [Referencia]                   VARCHAR (50)  NOT NULL,
    [Concepto]                     VARCHAR (100) NOT NULL,
    [Importe]                      FLOAT (53)    NOT NULL,
    [BcoMovimientoID]              INT           NOT NULL,
    CONSTRAINT [PK_CmpAnticipoEncabezado] PRIMARY KEY CLUSTERED ([CmpAnticipoEncabezadoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CmpAnticipoEncabezado].[IX_PpalSucursalID_TipoDocumentoID_PpalSerieID_Folio]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PpalSucursalID_TipoDocumentoID_PpalSerieID_Folio]
    ON [dbo].[CmpAnticipoEncabezado]([PpalSucursalID] ASC, [TipoDocumentoID] ASC, [PpalSerieID] ASC, [Folio] ASC);


GO
PRINT N'Creando Tabla [dbo].[CmpCompraDesglose]...';


GO
CREATE TABLE [dbo].[CmpCompraDesglose] (
    [CmpCompraDesgloseID]      INT           IDENTITY (1, 1) NOT NULL,
    [CmpCompraDetalleID]       INT           NOT NULL,
    [Renglon]                  INT           NOT NULL,
    [PpalSucursalID]           INT           NOT NULL,
    [PpalCentroCostoID]        INT           NOT NULL,
    [PpalAreaID]               INT           NOT NULL,
    [PpalAlmacenID]            INT           NOT NULL,
    [PpalConceptoEgresoID]     INT           NOT NULL,
    [PpalCuentaContableID]     INT           NOT NULL,
    [Cantidad]                 FLOAT (53)    NOT NULL,
    [CmpOrdenCompraDesgloseID] INT           NULL,
    [DescripcionAdicional]     VARCHAR (500) NOT NULL,
    CONSTRAINT [PK_CmpCompraDesglose] PRIMARY KEY CLUSTERED ([CmpCompraDesgloseID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CmpCompraDesglose].[IX_CompraDesglose_CompraDetalleID_Renglon]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CompraDesglose_CompraDetalleID_Renglon]
    ON [dbo].[CmpCompraDesglose]([CmpCompraDetalleID] ASC, [Renglon] ASC);


GO
PRINT N'Creando Tabla [dbo].[CmpCompraDetalle]...';


GO
CREATE TABLE [dbo].[CmpCompraDetalle] (
    [CmpCompraDetalleID]    INT             IDENTITY (1, 1) NOT NULL,
    [CmpCompraEncabezadoID] INT             NOT NULL,
    [Renglon]               INT             NOT NULL,
    [PpalProductoID]        INT             NOT NULL,
    [Cantidad]              DECIMAL (18, 6) NOT NULL,
    [AuxUnidadID]           INT             NOT NULL,
    [Costo]                 DECIMAL (18, 2) NOT NULL,
    [DescripcionAdicional]  VARCHAR (500)   NOT NULL,
    CONSTRAINT [PK_CmpCompraDetalle] PRIMARY KEY CLUSTERED ([CmpCompraDetalleID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CmpCompraDetalle].[IX_CompraDetalle_CompraEncabezadoID_Renglon]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CompraDetalle_CompraEncabezadoID_Renglon]
    ON [dbo].[CmpCompraDetalle]([CmpCompraEncabezadoID] ASC, [Renglon] ASC);


GO
PRINT N'Creando Tabla [dbo].[CmpCompraEncabezado]...';


GO
CREATE TABLE [dbo].[CmpCompraEncabezado] (
    [CmpCompraEncabezadoID]        INT           IDENTITY (1, 1) NOT NULL,
    [PpalSucursalID]               INT           NOT NULL,
    [TipoDocumentoID]              INT           NULL,
    [PpalSerieID]                  INT           NOT NULL,
    [Folio]                        INT           NOT NULL,
    [PpalProveedorID]              INT           NOT NULL,
    [CmpTipoMovimientoProveedorID] INT           NOT NULL,
    [PpalPersonalID]               INT           NOT NULL,
    [Fecha]                        DATETIME      NOT NULL,
    [Referencia]                   VARCHAR (50)  NOT NULL,
    [Concepto]                     VARCHAR (100) NOT NULL,
    [CfgEstatusDocumentoID]        INT           NOT NULL,
    [LinkXML]                      VARCHAR (250) NOT NULL,
    [LinkPDF]                      VARCHAR (250) NOT NULL,
    [EstatusFactura]               CHAR (1)      NOT NULL,
    [PpalCentroCostoID]            INT           NOT NULL,
    [PpalConceptoEgresoID]         INT           NOT NULL,
    CONSTRAINT [PK_CmpCompraEncabezado] PRIMARY KEY CLUSTERED ([CmpCompraEncabezadoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CmpCompraEncabezado].[IX_CmpCompraEncabezado_TipoDocumentoID_SerieID_Folio]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CmpCompraEncabezado_TipoDocumentoID_SerieID_Folio]
    ON [dbo].[CmpCompraEncabezado]([TipoDocumentoID] ASC, [PpalSerieID] ASC, [Folio] ASC);


GO
PRINT N'Creando Tabla [dbo].[CmpCompraPago]...';


GO
CREATE TABLE [dbo].[CmpCompraPago] (
    [CmpCompraPagoID]       INT             IDENTITY (1, 1) NOT NULL,
    [CmpCompraEncabezadoID] INT             NOT NULL,
    [BcoMovimientoID]       INT             NOT NULL,
    [Importe]               DECIMAL (18, 2) NOT NULL,
    CONSTRAINT [PK_CmpCompraPago] PRIMARY KEY CLUSTERED ([CmpCompraPagoID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[CmpCrieriosCompras]...';


GO
CREATE TABLE [dbo].[CmpCrieriosCompras] (
    [TipoMovimientoCompraID] INT         NULL,
    [Importe]                VARCHAR (8) NULL,
    [Cuenta]                 INT         NULL,
    [SubCuenta]              CHAR (4)    NULL,
    [SubCuenta2]             INT         NULL,
    [SubSubCuenta]           CHAR (4)    NULL,
    [SubSubCuenta2]          INT         NULL
);


GO
PRINT N'Creando Tabla [dbo].[CmpEstatusProveedor]...';


GO
CREATE TABLE [dbo].[CmpEstatusProveedor] (
    [CmpEstatusProveedorID]    INT          IDENTITY (1, 1) NOT NULL,
    [CmpEstatusProveedorClave] VARCHAR (6)  NULL,
    [Nombre]                   VARCHAR (40) NOT NULL,
    [NombreCorto]              VARCHAR (10) NOT NULL,
    [EstatusPersonaID]         INT          NULL,
    CONSTRAINT [PK_CmpEstatusProveedor] PRIMARY KEY CLUSTERED ([CmpEstatusProveedorID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CmpEstatusProveedor].[IX_CmpEstatusProveedor_CmpEstatusProveedorClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CmpEstatusProveedor_CmpEstatusProveedorClave]
    ON [dbo].[CmpEstatusProveedor]([CmpEstatusProveedorClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CmpEstatusRepresentanteProveedor]...';


GO
CREATE TABLE [dbo].[CmpEstatusRepresentanteProveedor] (
    [CmpEstatusRepresentanteProveedorID]    INT          IDENTITY (1, 1) NOT NULL,
    [CmpEstatusRepresentanteProveedorClave] VARCHAR (6)  NULL,
    [Nombre]                                VARCHAR (40) NOT NULL,
    [NombreCorto]                           VARCHAR (10) NOT NULL,
    [EstatusPersonaID]                      INT          NULL,
    CONSTRAINT [PK_CmpEstatusRepresentanteProveedor] PRIMARY KEY CLUSTERED ([CmpEstatusRepresentanteProveedorID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CmpEstatusRepresentanteProveedor].[IX_CmpEstatusRepresentanteProveedor_CmpEstatusRepresentanteProveedorClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CmpEstatusRepresentanteProveedor_CmpEstatusRepresentanteProveedorClave]
    ON [dbo].[CmpEstatusRepresentanteProveedor]([CmpEstatusRepresentanteProveedorClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CmpMovimientoProveedor]...';


GO
CREATE TABLE [dbo].[CmpMovimientoProveedor] (
    [CmpMovimientoProveedorID]     INT           NOT NULL,
    [CmpCompraEncabezadoID]        INT           NOT NULL,
    [TipoDocumentoID]              INT           NOT NULL,
    [PpalSerieID]                  INT           NOT NULL,
    [Folio]                        INT           NOT NULL,
    [PpalPersonalID]               INT           NOT NULL,
    [Fecha]                        DATETIME      NOT NULL,
    [Referencia]                   VARCHAR (50)  NOT NULL,
    [Concepto]                     VARCHAR (100) NOT NULL,
    [Importe]                      FLOAT (53)    NOT NULL,
    [CmpTipoMovimientoProveedorID] INT           NOT NULL,
    [BcoMovimientoID]              INT           NOT NULL,
    CONSTRAINT [PK_CmpMovimientoProveedor] PRIMARY KEY CLUSTERED ([CmpMovimientoProveedorID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[CmpOrdenCompraDesglose]...';


GO
CREATE TABLE [dbo].[CmpOrdenCompraDesglose] (
    [CmpOrdenCompraDesgloseID] INT           IDENTITY (1, 1) NOT NULL,
    [CmpOrdenCompraDetalleID]  INT           NOT NULL,
    [Renglon]                  INT           NOT NULL,
    [PpalSucursalID]           INT           NOT NULL,
    [PpalCentroCostoID]        INT           NOT NULL,
    [PpalAreaID]               INT           NOT NULL,
    [PpalAlmacenID]            INT           NOT NULL,
    [ConceptoEgresoID]         INT           NOT NULL,
    [PpalCuentaContableID]     INT           NOT NULL,
    [Cantidad]                 FLOAT (53)    NOT NULL,
    [CmpRequisicionDetalleID]  INT           NULL,
    [DescripcionAdicional]     VARCHAR (500) NOT NULL,
    CONSTRAINT [PK_CmpOrdenCompraDesglose] PRIMARY KEY CLUSTERED ([CmpOrdenCompraDesgloseID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CmpOrdenCompraDesglose].[IX_CmpOrdenCompraDesglose_CmpOrdenCompraDetalleID_Renglon]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CmpOrdenCompraDesglose_CmpOrdenCompraDetalleID_Renglon]
    ON [dbo].[CmpOrdenCompraDesglose]([CmpOrdenCompraDetalleID] ASC, [Renglon] ASC);


GO
PRINT N'Creando Tabla [dbo].[CmpOrdenCompraDetalle]...';


GO
CREATE TABLE [dbo].[CmpOrdenCompraDetalle] (
    [CmpOrdenCompraDetalleID]    INT             IDENTITY (1, 1) NOT NULL,
    [CmpOrdenCompraEncabezadoID] INT             NOT NULL,
    [Renglon]                    INT             NOT NULL,
    [PpalProductoID]             INT             NOT NULL,
    [Cantidad]                   DECIMAL (18, 6) NOT NULL,
    [AuxUnidadID]                INT             NOT NULL,
    [Costo]                      DECIMAL (18, 2) NOT NULL,
    [FechaCompromiso]            DATETIME        NOT NULL,
    [DescripcionAdicional]       VARCHAR (500)   NOT NULL,
    CONSTRAINT [PK_CmpOrdenCompraDetalle] PRIMARY KEY CLUSTERED ([CmpOrdenCompraDetalleID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CmpOrdenCompraDetalle].[IX_CmpOrdenCompraDetalle_CmpOrdenCompraEncabezadoID_Renglon]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CmpOrdenCompraDetalle_CmpOrdenCompraEncabezadoID_Renglon]
    ON [dbo].[CmpOrdenCompraDetalle]([CmpOrdenCompraEncabezadoID] ASC, [Renglon] ASC);


GO
PRINT N'Creando Tabla [dbo].[CmpOrdenCompraEncabezado]...';


GO
CREATE TABLE [dbo].[CmpOrdenCompraEncabezado] (
    [CmpOrdenCompraEncabezadoID] INT           IDENTITY (1, 1) NOT NULL,
    [PpalSucursalID]             INT           NOT NULL,
    [TipoDocumentoID]            INT           NOT NULL,
    [PpalSerieID]                INT           NOT NULL,
    [Folio]                      INT           NOT NULL,
    [PpalProveedorID]            INT           NOT NULL,
    [PpalPersonalID]             INT           NOT NULL,
    [Fecha]                      DATETIME      NOT NULL,
    [Referencia]                 VARCHAR (50)  NOT NULL,
    [Concepto]                   VARCHAR (100) NOT NULL,
    [CfgEstatusDocumentoID]      INT           NOT NULL,
    [LinkXML]                    VARCHAR (250) NOT NULL,
    [LinkPDF]                    VARCHAR (250) NOT NULL,
    [EstatusFactura]             CHAR (1)      NOT NULL,
    [PpalCentroCostoID]          INT           NOT NULL,
    [PpalConceptoEgresoID]       INT           NOT NULL,
    [PpalAreaID]                 INT           NULL,
    CONSTRAINT [PK_CmpOrdenCompraEncabezado] PRIMARY KEY CLUSTERED ([CmpOrdenCompraEncabezadoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CmpOrdenCompraEncabezado].[IX_CmpOrdenCompraEncabezado_TipoDocumentoID_SerieID_Folio]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CmpOrdenCompraEncabezado_TipoDocumentoID_SerieID_Folio]
    ON [dbo].[CmpOrdenCompraEncabezado]([TipoDocumentoID] ASC, [PpalSerieID] ASC, [Folio] ASC);


GO
PRINT N'Creando Tabla [dbo].[CmpOrdenCompraFactura]...';


GO
CREATE TABLE [dbo].[CmpOrdenCompraFactura] (
    [CmpOrdenCompraFacturaID]    INT             IDENTITY (1, 1) NOT NULL,
    [CmpOrdenCompraEncabezadoID] INT             NOT NULL,
    [EspFacturaID]               INT             NOT NULL,
    [Importe]                    DECIMAL (18, 2) NOT NULL,
    CONSTRAINT [PK_CmpOrdenCompraFactura] PRIMARY KEY CLUSTERED ([CmpOrdenCompraFacturaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CmpOrdenCompraFactura].[IX_CmpOrdenCompraFactura_EspFacturaID_CmpOrdenCompraEncabezadoID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CmpOrdenCompraFactura_EspFacturaID_CmpOrdenCompraEncabezadoID]
    ON [dbo].[CmpOrdenCompraFactura]([EspFacturaID] ASC, [CmpOrdenCompraEncabezadoID] ASC);


GO
PRINT N'Creando Tabla [dbo].[CmpRequisicionDetalle]...';


GO
CREATE TABLE [dbo].[CmpRequisicionDetalle] (
    [CmpRequisicionDetalleID]    INT             IDENTITY (1, 1) NOT NULL,
    [CmpRequisicionEncabezadoID] INT             NOT NULL,
    [Renglon]                    INT             NOT NULL,
    [PpalProductoID]             INT             NOT NULL,
    [Cantidad]                   DECIMAL (18, 6) NOT NULL,
    [AuxUnidadID]                INT             NOT NULL,
    [PpalAlmacenID]              INT             NOT NULL,
    [PpalConceptoEgresoID]       INT             NOT NULL,
    [PpalCuentaContableID]       INT             NOT NULL,
    [DescripcionAdicional]       VARCHAR (500)   NOT NULL,
    [CfgEstatusDocumentoID]      INT             NOT NULL,
    CONSTRAINT [PK_CmpRequisicionDetalle] PRIMARY KEY CLUSTERED ([CmpRequisicionDetalleID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CmpRequisicionDetalle].[IX_CmpRequisicionDetalle_CmpRequisicionEncabezadoID_Renglon]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CmpRequisicionDetalle_CmpRequisicionEncabezadoID_Renglon]
    ON [dbo].[CmpRequisicionDetalle]([CmpRequisicionEncabezadoID] ASC, [Renglon] ASC);


GO
PRINT N'Creando Tabla [dbo].[CmpRequisicionEncabezado]...';


GO
CREATE TABLE [dbo].[CmpRequisicionEncabezado] (
    [CmpRequisicionEncabezadoID] INT           IDENTITY (1, 1) NOT NULL,
    [TipoDocumentoID]            INT           NOT NULL,
    [PpalSerieID]                INT           NOT NULL,
    [PpalSucursalID]             INT           NOT NULL,
    [Folio]                      INT           NOT NULL,
    [Fecha]                      DATETIME      NOT NULL,
    [Referencia]                 VARCHAR (50)  NOT NULL,
    [PpalPersonalID]             INT           NOT NULL,
    [PpalCentroCostoID]          INT           NOT NULL,
    [PpalAreaID]                 INT           NOT NULL,
    [Concepto]                   VARCHAR (100) NOT NULL,
    [CfgEstatusDocumentoID]      INT           NOT NULL,
    [ExplosionID]                INT           NOT NULL,
    CONSTRAINT [PK_CmpRequisicionEncabezado] PRIMARY KEY CLUSTERED ([CmpRequisicionEncabezadoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CmpRequisicionEncabezado].[IX_CmpRequisicionEncabezado_TipoDocumentoID_SerieID_Folio]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CmpRequisicionEncabezado_TipoDocumentoID_SerieID_Folio]
    ON [dbo].[CmpRequisicionEncabezado]([TipoDocumentoID] ASC, [PpalSerieID] ASC, [Folio] ASC);


GO
PRINT N'Creando Tabla [dbo].[CmpTipoMovimientoProveedor]...';


GO
CREATE TABLE [dbo].[CmpTipoMovimientoProveedor] (
    [CmpTipoMovimientoProveedorID]    INT          IDENTITY (1, 1) NOT NULL,
    [CmpTipoMovimientoProveedorClave] VARCHAR (10) NOT NULL,
    [Nombre]                          VARCHAR (50) NOT NULL,
    [NombreCorto]                     VARCHAR (20) NOT NULL,
    [NaturalezaID]                    INT          NOT NULL,
    CONSTRAINT [PK_CmpTipoMovimientoProveedor] PRIMARY KEY CLUSTERED ([CmpTipoMovimientoProveedorID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CmpTipoMovimientoProveedor].[IX_CmpTipoMovimientoProveedor_CmpTipoMovimientoProveedorClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CmpTipoMovimientoProveedor_CmpTipoMovimientoProveedorClave]
    ON [dbo].[CmpTipoMovimientoProveedor]([CmpTipoMovimientoProveedorClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CmpTipoProveedor]...';


GO
CREATE TABLE [dbo].[CmpTipoProveedor] (
    [CmpTipoProveedorID]    INT          IDENTITY (1, 1) NOT NULL,
    [CmpTipoProveedorClave] VARCHAR (4)  NOT NULL,
    [Nombre]                VARCHAR (50) NOT NULL,
    [NombreCorto]           VARCHAR (20) NOT NULL,
    CONSTRAINT [PK_CmpTipoProveedor] PRIMARY KEY CLUSTERED ([CmpTipoProveedorID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CmpTipoProveedor].[IX_CmpTipoProveedor_CmpTipoProveedorClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CmpTipoProveedor_CmpTipoProveedorClave]
    ON [dbo].[CmpTipoProveedor]([CmpTipoProveedorClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CmpTipoRepresentanteProveedor]...';


GO
CREATE TABLE [dbo].[CmpTipoRepresentanteProveedor] (
    [CmpTipoRepresentanteProveedorID]    INT          IDENTITY (1, 1) NOT NULL,
    [CmpTipoRepresentanteProveedorClave] VARCHAR (5)  NOT NULL,
    [Nombre]                             VARCHAR (50) NOT NULL,
    [NombreCorto]                        VARCHAR (20) NOT NULL,
    CONSTRAINT [PK_CmpTipoRepresentanteProveedor] PRIMARY KEY CLUSTERED ([CmpTipoRepresentanteProveedorID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CmpTipoRepresentanteProveedor].[IX_CmpTipoRepresentanteProveedor_CmpTipoRepresentateProveedorClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CmpTipoRepresentanteProveedor_CmpTipoRepresentateProveedorClave]
    ON [dbo].[CmpTipoRepresentanteProveedor]([CmpTipoRepresentanteProveedorClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CoCmpOrdenCompraEncabezado]...';


GO
CREATE TABLE [dbo].[CoCmpOrdenCompraEncabezado] (
    [CmpOrdenCompraEncabezadoID] INT NOT NULL,
    [CoPartidaID]                INT NOT NULL,
    CONSTRAINT [PK_CoCmpOrdenCompraEncabezado] PRIMARY KEY CLUSTERED ([CmpOrdenCompraEncabezadoID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[CoContratista]...';


GO
CREATE TABLE [dbo].[CoContratista] (
    [CoContratistaID] INT IDENTITY (1, 1) NOT NULL,
    [PpalProveedorID] INT NOT NULL,
    CONSTRAINT [PK_CoContratista] PRIMARY KEY CLUSTERED ([CoContratistaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CoContratista].[IX_CoContratista_PpalProveedorID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoContratista_PpalProveedorID]
    ON [dbo].[CoContratista]([PpalProveedorID] ASC);


GO
PRINT N'Creando Tabla [dbo].[CoContrato]...';


GO
CREATE TABLE [dbo].[CoContrato] (
    [CoContratoID]    INT           NOT NULL,
    [CoContratoClave] VARCHAR (30)  NOT NULL,
    [Nombre]          VARCHAR (80)  NOT NULL,
    [NombreCorto]     VARCHAR (15)  NOT NULL,
    [CoProyectoID]    INT           NOT NULL,
    [PpalProveedorID] INT           NOT NULL,
    [FechaAlta]       DATE          NOT NULL,
    [FechaInicio]     DATE          NOT NULL,
    [FechaFin]        DATE          NOT NULL,
    [TipoContrato]    CHAR (1)      NOT NULL,
    [Comentarios]     VARCHAR (500) NOT NULL,
    CONSTRAINT [PK_CoContrato] PRIMARY KEY CLUSTERED ([CoContratoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CoContrato].[IX_CoContrato_CoProyectoID_CoContratoClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoContrato_CoProyectoID_CoContratoClave]
    ON [dbo].[CoContrato]([CoProyectoID] ASC, [CoContratoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CoContratoPartidaDetalle]...';


GO
CREATE TABLE [dbo].[CoContratoPartidaDetalle] (
    [CoContratoPartidaDetalleID] INT             IDENTITY (1, 1) NOT NULL,
    [CoContratoID]               INT             NOT NULL,
    [CoPartidaDetalleID]         INT             NOT NULL,
    [Cantidad]                   DECIMAL (18, 6) NOT NULL,
    [Precio]                     DECIMAL (18, 6) NOT NULL,
    [Adicional]                  VARCHAR (500)   NOT NULL,
    [SustituirConAdicional]      BIT             NOT NULL,
    [CfgEstatusDocumentoID]      INT             NOT NULL,
    CONSTRAINT [PK_CoContratoPartidaDetalle] PRIMARY KEY CLUSTERED ([CoContratoPartidaDetalleID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[CoContratoRetencion]...';


GO
CREATE TABLE [dbo].[CoContratoRetencion] (
    [CoContratoRetencionID]         INT            IDENTITY (1, 1) NOT NULL,
    [CoContratoRetencionClave]      VARCHAR (10)   NOT NULL,
    [Nombre]                        VARCHAR (50)   NOT NULL,
    [NombreCorto]                   VARCHAR (10)   NOT NULL,
    [CoContratoID]                  INT            NOT NULL,
    [TipoRetencion]                 CHAR (1)       NOT NULL,
    [Porcentaje]                    DECIMAL (5, 2) NOT NULL,
    [EstimacionInicialAmortizacion] SMALLINT       NOT NULL,
    [EstimacionFinalAmortizacion]   SMALLINT       NOT NULL,
    [TipoAmortizacion]              CHAR (1)       NOT NULL,
    [PorcentajeInicialAmortizacion] DECIMAL (5, 2) NOT NULL,
    [PorcentajeFinalAmortizacion]   DECIMAL (5, 2) NOT NULL,
    CONSTRAINT [PK_CoContratoRetencion] PRIMARY KEY CLUSTERED ([CoContratoRetencionID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CoContratoRetencion].[IX_CoContratoRetencion_CoContratoID_CoContratoRetencionClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoContratoRetencion_CoContratoID_CoContratoRetencionClave]
    ON [dbo].[CoContratoRetencion]([CoContratoID] ASC, [CoContratoRetencionClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CoElemento]...';


GO
CREATE TABLE [dbo].[CoElemento] (
    [CoElementoID]        INT          IDENTITY (1, 1) NOT NULL,
    [CoElementoClave]     VARCHAR (10) NOT NULL,
    [Nombre]              VARCHAR (80) NOT NULL,
    [NombreCorto]         VARCHAR (12) NOT NULL,
    [CoLoteID]            INT          NOT NULL,
    [CoTipoPresupuestoID] INT          NOT NULL,
    [CoModeloID]          INT          NOT NULL,
    [CoFachadaID]         INT          NOT NULL,
    [CoContratoIDActual]  INT          NULL,
    CONSTRAINT [PK_CoElemento] PRIMARY KEY CLUSTERED ([CoElementoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CoElemento].[IX_CoElemento_CoLoteID_NombreCorto]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoElemento_CoLoteID_NombreCorto]
    ON [dbo].[CoElemento]([CoLoteID] ASC, [NombreCorto] ASC);


GO
PRINT N'Creando Índice [dbo].[CoElemento].[IX_CoElemento_CoLoteID_Nombre]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoElemento_CoLoteID_Nombre]
    ON [dbo].[CoElemento]([CoLoteID] ASC, [Nombre] ASC);


GO
PRINT N'Creando Índice [dbo].[CoElemento].[IX_CoElemento_CoLoteID_CoElementoClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoElemento_CoLoteID_CoElementoClave]
    ON [dbo].[CoElemento]([CoLoteID] ASC, [CoElementoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CoEtapa]...';


GO
CREATE TABLE [dbo].[CoEtapa] (
    [CoEtapaID]    INT          IDENTITY (1, 1) NOT NULL,
    [CoEtapaClave] VARCHAR (10) NOT NULL,
    [Nombre]       VARCHAR (60) NOT NULL,
    [NombreCorto]  VARCHAR (10) NOT NULL,
    [CoProyectoID] INT          NOT NULL,
    [FechaInicial] DATE         NOT NULL,
    [FechaFinal]   DATE         NOT NULL,
    CONSTRAINT [PK_CoEtapa] PRIMARY KEY CLUSTERED ([CoEtapaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CoEtapa].[IX_CoEtapa_CoProyectoID_CoEtapaClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoEtapa_CoProyectoID_CoEtapaClave]
    ON [dbo].[CoEtapa]([CoProyectoID] ASC, [CoEtapaClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CoFachada]...';


GO
CREATE TABLE [dbo].[CoFachada] (
    [CoFachadaID]    INT          IDENTITY (1, 1) NOT NULL,
    [CoFachadaClave] VARCHAR (10) NOT NULL,
    [Nombre]         VARCHAR (60) NOT NULL,
    [NombreCorto]    VARCHAR (10) NOT NULL,
    [EmpresaID]      INT          NOT NULL,
    CONSTRAINT [PK_CoFachada] PRIMARY KEY CLUSTERED ([CoFachadaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CoFachada].[IX_CoFachada_EmpresaID_CoFachadaClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoFachada_EmpresaID_CoFachadaClave]
    ON [dbo].[CoFachada]([EmpresaID] ASC, [CoFachadaClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CoLote]...';


GO
CREATE TABLE [dbo].[CoLote] (
    [CoLoteID]    INT          IDENTITY (1, 1) NOT NULL,
    [CoLoteClave] VARCHAR (10) NOT NULL,
    [Nombre]      VARCHAR (80) NOT NULL,
    [NombreCorto] VARCHAR (12) NOT NULL,
    [CoSeccionID] INT          NOT NULL,
    CONSTRAINT [PK_CoLote] PRIMARY KEY CLUSTERED ([CoLoteID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CoLote].[IX_CoLote_CoSeccionID_NombreCorto]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoLote_CoSeccionID_NombreCorto]
    ON [dbo].[CoLote]([CoSeccionID] ASC, [NombreCorto] ASC);


GO
PRINT N'Creando Índice [dbo].[CoLote].[IX_CoLote_CoSeccionID_Nombre]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoLote_CoSeccionID_Nombre]
    ON [dbo].[CoLote]([CoSeccionID] ASC, [Nombre] ASC);


GO
PRINT N'Creando Índice [dbo].[CoLote].[IX_CoLote_CoSeccionID_CoLoteClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoLote_CoSeccionID_CoLoteClave]
    ON [dbo].[CoLote]([CoSeccionID] ASC, [CoLoteClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CoModelo]...';


GO
CREATE TABLE [dbo].[CoModelo] (
    [CoModeloID]    INT          IDENTITY (1, 1) NOT NULL,
    [CoModeloClave] VARCHAR (10) NOT NULL,
    [Nombre]        VARCHAR (60) NOT NULL,
    [NombreCorto]   VARCHAR (10) NOT NULL,
    [EmpresaID]     INT          NOT NULL,
    CONSTRAINT [PK_CoModelo] PRIMARY KEY CLUSTERED ([CoModeloID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CoModelo].[IX_CoModelo_EmpresaID_CoModeloClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoModelo_EmpresaID_CoModeloClave]
    ON [dbo].[CoModelo]([EmpresaID] ASC, [CoModeloClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CoPartida]...';


GO
CREATE TABLE [dbo].[CoPartida] (
    [CoPartidaID]                INT          IDENTITY (1, 1) NOT NULL,
    [PadreID]                    INT          NULL,
    [CoPartidaClave]             VARCHAR (5)  NOT NULL,
    [Nombre]                     VARCHAR (40) NOT NULL,
    [NombreCorto]                VARCHAR (10) NOT NULL,
    [CoTipoPresupuestoID]        INT          NOT NULL,
    [PpalAreaIDInicio]           INT          NOT NULL,
    [PpalConceptoEgresoIDInicio] INT          NOT NULL,
    [AplicaIVA]                  CHAR (1)     NOT NULL,
    [CoTipoConstruccionID]       INT          NOT NULL,
    CONSTRAINT [PKCoPartida] PRIMARY KEY CLUSTERED ([CoPartidaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CoPartida].[IX_CoPartida_CoTipoPresupuestoID_CoPartidaClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoPartida_CoTipoPresupuestoID_CoPartidaClave]
    ON [dbo].[CoPartida]([CoTipoPresupuestoID] ASC, [CoPartidaClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CoPartidaBase]...';


GO
CREATE TABLE [dbo].[CoPartidaBase] (
    [CoPartidaBaseID]            INT          IDENTITY (1, 1) NOT NULL,
    [PadreID]                    INT          NULL,
    [CoPartidaBaseClave]         VARCHAR (5)  NOT NULL,
    [Nombre]                     VARCHAR (40) NOT NULL,
    [NombreCorto]                VARCHAR (10) NOT NULL,
    [CoTipoPresupuestoBaseID]    INT          NOT NULL,
    [PpalAreaIDInicio]           INT          NOT NULL,
    [PpalConceptoEgresoIDInicio] INT          NOT NULL,
    [AplicaIVA]                  CHAR (1)     NOT NULL,
    [CoTipoConstruccionID]       INT          NOT NULL,
    CONSTRAINT [PKCoPartidaBase] PRIMARY KEY CLUSTERED ([CoPartidaBaseID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CoPartidaBase].[IX_CoPartidaBase_CoTipoPresupuestoBaseID_CoPartidaBaseClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoPartidaBase_CoTipoPresupuestoBaseID_CoPartidaBaseClave]
    ON [dbo].[CoPartidaBase]([CoTipoPresupuestoBaseID] ASC, [CoPartidaBaseClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CoPartidaDetalle]...';


GO
CREATE TABLE [dbo].[CoPartidaDetalle] (
    [CoPartidaDetalleID]    INT             IDENTITY (1, 1) NOT NULL,
    [CoPartidaID]           INT             NOT NULL,
    [PpalProductoID]        INT             NOT NULL,
    [Cantidad]              DECIMAL (18, 6) NOT NULL,
    [Precio]                DECIMAL (18, 6) NOT NULL,
    [AuxUnidadID]           INT             NOT NULL,
    [Adicional]             VARCHAR (500)   NOT NULL,
    [Observaciones]         VARCHAR (500)   NOT NULL,
    [PpalAreaID]            INT             NOT NULL,
    [SustituirConAdicional] BIT             NOT NULL,
    [PpalConceptoEgresoID]  INT             NOT NULL,
    CONSTRAINT [PK_CoPartidaDetalle] PRIMARY KEY CLUSTERED ([CoPartidaDetalleID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[CoPartidaGeneral]...';


GO
CREATE TABLE [dbo].[CoPartidaGeneral] (
    [CoPartidaGeneralID]         INT          IDENTITY (1, 1) NOT NULL,
    [PadreID]                    INT          NULL,
    [CoPartidaGeneralClave]      VARCHAR (5)  NOT NULL,
    [Nombre]                     VARCHAR (40) NOT NULL,
    [NombreCorto]                VARCHAR (10) NOT NULL,
    [PpalAreaIDInicio]           INT          NOT NULL,
    [PpalConceptoEgresoIDInicio] INT          NOT NULL,
    [AplicaIVA]                  CHAR (1)     NOT NULL,
    [CoTipoConstruccionID]       INT          NOT NULL,
    CONSTRAINT [PKCoPartidaGeneral] PRIMARY KEY CLUSTERED ([CoPartidaGeneralID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CoPartidaGeneral].[IX_CoPartidaGeneral]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoPartidaGeneral]
    ON [dbo].[CoPartidaGeneral]([CoPartidaGeneralClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CoProyecto]...';


GO
CREATE TABLE [dbo].[CoProyecto] (
    [CoProyectoID]          INT           IDENTITY (1, 1) NOT NULL,
    [PpalSucursalID]        INT           NOT NULL,
    [CoProyectoClave]       VARCHAR (12)  NOT NULL,
    [Nombre]                VARCHAR (150) NOT NULL,
    [NombreCorto]           VARCHAR (40)  NOT NULL,
    [NivelPartidaInicio]    TINYINT       NOT NULL,
    [PpalCentroCostoID]     INT           NOT NULL,
    [ManejaElementoInicio]  BIT           NOT NULL,
    [NivelCalendarioInicio] TINYINT       NOT NULL,
    [FechaAlta]             DATE          NOT NULL,
    [EspCP]                 INT           NOT NULL,
    [Inscripcion]           VARCHAR (30)  NOT NULL,
    [Libro]                 VARCHAR (30)  NOT NULL,
    [Seccion]               VARCHAR (30)  NOT NULL,
    [TipoCapturaAvance]     TINYINT       NOT NULL,
    CONSTRAINT [PK_CoProyecto] PRIMARY KEY CLUSTERED ([CoProyectoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CoProyecto].[IX_CoProyecto_PpalSucursalID_ProyectoClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoProyecto_PpalSucursalID_ProyectoClave]
    ON [dbo].[CoProyecto]([PpalSucursalID] ASC, [CoProyectoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CoSeccion]...';


GO
CREATE TABLE [dbo].[CoSeccion] (
    [CoSeccionID]    INT          IDENTITY (1, 1) NOT NULL,
    [CoSeccionClave] VARCHAR (10) NOT NULL,
    [Nombre]         VARCHAR (80) NOT NULL,
    [NombreCorto]    VARCHAR (12) NOT NULL,
    [CoProyectoID]   INT          NOT NULL,
    [ManejaElemento] BIT          NOT NULL,
    CONSTRAINT [PK_CoSeccion] PRIMARY KEY CLUSTERED ([CoSeccionID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CoSeccion].[IX_CoSeccion_CoProyectoID_NombreCorto]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoSeccion_CoProyectoID_NombreCorto]
    ON [dbo].[CoSeccion]([CoProyectoID] ASC, [NombreCorto] ASC);


GO
PRINT N'Creando Índice [dbo].[CoSeccion].[IX_CoSeccion_CoProyectoID_Nombre]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoSeccion_CoProyectoID_Nombre]
    ON [dbo].[CoSeccion]([CoProyectoID] ASC, [Nombre] ASC);


GO
PRINT N'Creando Índice [dbo].[CoSeccion].[IX_CoSeccion_CoProyectoID_CoSeccionClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoSeccion_CoProyectoID_CoSeccionClave]
    ON [dbo].[CoSeccion]([CoProyectoID] ASC, [CoSeccionClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CoTipoConstruccion]...';


GO
CREATE TABLE [dbo].[CoTipoConstruccion] (
    [CoTipoConstruccionID]    INT          IDENTITY (1, 1) NOT NULL,
    [CoTipoConstruccionClave] VARCHAR (5)  NOT NULL,
    [Nombre]                  VARCHAR (50) NOT NULL,
    [NombreCorto]             VARCHAR (10) NOT NULL,
    CONSTRAINT [PK_CoTipoConstruccion] PRIMARY KEY CLUSTERED ([CoTipoConstruccionID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CoTipoConstruccion].[IX_CoTipoConstruccion]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoTipoConstruccion]
    ON [dbo].[CoTipoConstruccion]([CoTipoConstruccionClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CoTipoPresupuesto]...';


GO
CREATE TABLE [dbo].[CoTipoPresupuesto] (
    [CoTipoPresupuestoID]     INT          IDENTITY (1, 1) NOT NULL,
    [CoTipoPresupuestoClave]  VARCHAR (10) NOT NULL,
    [Nombre]                  VARCHAR (80) NOT NULL,
    [NombreCorto]             VARCHAR (12) NOT NULL,
    [CoProyectoID]            INT          NOT NULL,
    [NivelPartida]            TINYINT      NOT NULL,
    [NivelCalendario]         TINYINT      NOT NULL,
    [CfgEstatusDocumentoID]   INT          NOT NULL,
    [CoTipoPresupuestoBaseID] INT          NOT NULL,
    [CoTipoConstruccionID]    INT          NOT NULL,
    CONSTRAINT [PK_CoTipoPresupuesto] PRIMARY KEY CLUSTERED ([CoTipoPresupuestoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CoTipoPresupuesto].[IX_CoTipoPresupuesto_CoProyectoID_CoTipoPresupuestoClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoTipoPresupuesto_CoProyectoID_CoTipoPresupuestoClave]
    ON [dbo].[CoTipoPresupuesto]([CoProyectoID] ASC, [CoTipoPresupuestoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CoTipoPresupuestoBase]...';


GO
CREATE TABLE [dbo].[CoTipoPresupuestoBase] (
    [CoTipoPresupuestoBaseID]    INT          IDENTITY (1, 1) NOT NULL,
    [CoTipoPresupuestoBaseClave] VARCHAR (10) NOT NULL,
    [Nombre]                     VARCHAR (80) NOT NULL,
    [NombreCorto]                VARCHAR (12) NOT NULL,
    [CoTipoConstruccionID]       INT          NOT NULL,
    CONSTRAINT [PK_CoTipoPresupuestoBase] PRIMARY KEY CLUSTERED ([CoTipoPresupuestoBaseID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[CoTipoPresupuestoBase].[IX_CoTipoPresupuestoBase_CoTipoPresupuestoBaseClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoTipoPresupuestoBase_CoTipoPresupuestoBaseClave]
    ON [dbo].[CoTipoPresupuestoBase]([CoTipoPresupuestoBaseClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[CriteriosCompras]...';


GO
CREATE TABLE [dbo].[CriteriosCompras] (
    [TipoMovimientoCompra] INT          NULL,
    [importe]              VARCHAR (10) NULL,
    [cuenta]               INT          NULL,
    [subcuenta]            CHAR (4)     NULL,
    [subcuenta2]           TINYINT      NULL,
    [subsubcuenta]         CHAR (4)     NULL,
    [subsubcuenta2]        TINYINT      NULL
);


GO
PRINT N'Creando Tabla [dbo].[DatoFacturacion]...';


GO
CREATE TABLE [dbo].[DatoFacturacion] (
    [DatoFacturacionID] INT          IDENTITY (1, 1) NOT NULL,
    [EspPersonaID]      INT          NOT NULL,
    [RFC]               VARCHAR (20) NOT NULL,
    [DomicilioID]       INT          NOT NULL,
    CONSTRAINT [PK_DatoFacturacion] PRIMARY KEY CLUSTERED ([DatoFacturacionID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[EspCiudad]...';


GO
CREATE TABLE [dbo].[EspCiudad] (
    [EspCiudadID]    INT          IDENTITY (1, 1) NOT NULL,
    [EspCiudadClave] VARCHAR (7)  NOT NULL,
    [Nombre]         VARCHAR (60) NOT NULL,
    [NombreCorto]    VARCHAR (15) NOT NULL,
    [EspMunicipioID] INT          NOT NULL,
    CONSTRAINT [PK_EspCiudad] PRIMARY KEY CLUSTERED ([EspCiudadID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[EspCiudad].[IX_Ciudad_CiudadClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Ciudad_CiudadClave]
    ON [dbo].[EspCiudad]([EspCiudadClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[EspColonia]...';


GO
CREATE TABLE [dbo].[EspColonia] (
    [EspColoniaID]          INT          IDENTITY (1, 1) NOT NULL,
    [EspColoniaClave]       VARCHAR (7)  NOT NULL,
    [Nombre]                VARCHAR (60) NOT NULL,
    [NombreCorto]           VARCHAR (15) NOT NULL,
    [CfgTipoAsentamientoID] INT          NOT NULL,
    [EspCiudadID]           INT          NOT NULL,
    [EspCP]                 INT          NOT NULL,
    CONSTRAINT [PK_EspColonia] PRIMARY KEY CLUSTERED ([EspColoniaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[EspColonia].[IX_EspColonia]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_EspColonia]
    ON [dbo].[EspColonia]([EspCiudadID] ASC, [EspColoniaClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[EspCP]...';


GO
CREATE TABLE [dbo].[EspCP] (
    [EspCP]       INT NOT NULL,
    [EspCiudadID] INT NOT NULL,
    CONSTRAINT [PK_EspCP] PRIMARY KEY CLUSTERED ([EspCP] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[EspDomicilio]...';


GO
CREATE TABLE [dbo].[EspDomicilio] (
    [EspDomicilioID] INT           IDENTITY (1, 1) NOT NULL,
    [Calle]          VARCHAR (50)  NOT NULL,
    [NumeroExterior] VARCHAR (20)  NOT NULL,
    [NumeroInterior] VARCHAR (20)  NOT NULL,
    [EntreCalle1]    VARCHAR (40)  NOT NULL,
    [EntreCalle2]    VARCHAR (40)  NOT NULL,
    [CodigoPostal]   INT           NOT NULL,
    [Coordenadas]    VARCHAR (40)  NOT NULL,
    [EspCiudadID]    INT           NOT NULL,
    [EspColoniaID]   INT           NOT NULL,
    [Observaciones]  VARCHAR (100) NOT NULL,
    CONSTRAINT [PK_EspDomicilio] PRIMARY KEY CLUSTERED ([EspDomicilioID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[EspDomicilio].[IX_Domicilio_ColoniaID_Calle_NumeroExterior_NumeroInterior]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Domicilio_ColoniaID_Calle_NumeroExterior_NumeroInterior]
    ON [dbo].[EspDomicilio]([EspColoniaID] ASC, [Calle] ASC, [NumeroExterior] ASC, [NumeroInterior] ASC);


GO
PRINT N'Creando Tabla [dbo].[EspEstado]...';


GO
CREATE TABLE [dbo].[EspEstado] (
    [EspEstadoID]    INT          IDENTITY (1, 1) NOT NULL,
    [EspEstadoClave] VARCHAR (6)  NOT NULL,
    [ClaveCURP]      VARCHAR (3)  NOT NULL,
    [Clave2]         VARCHAR (2)  NOT NULL,
    [Clave3]         VARCHAR (3)  NOT NULL,
    [Nombre]         VARCHAR (50) NOT NULL,
    [NombreCorto]    VARCHAR (15) NOT NULL,
    [NombreCompleto] VARCHAR (50) NOT NULL,
    [EspPaisID]      INT          NOT NULL,
    CONSTRAINT [PK_EspEstado] PRIMARY KEY CLUSTERED ([EspEstadoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[EspEstado].[IX_Estado]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Estado]
    ON [dbo].[EspEstado]([EspEstadoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[EspFactura]...';


GO
CREATE TABLE [dbo].[EspFactura] (
    [EspFacturaID]   INT             IDENTITY (1, 1) NOT NULL,
    [UUID]           VARCHAR (50)    NOT NULL,
    [RFC]            VARCHAR (20)    NOT NULL,
    [Serie]          VARCHAR (10)    NOT NULL,
    [Folio]          INT             NOT NULL,
    [Importe]        DECIMAL (18, 2) NOT NULL,
    [Fecha]          DATETIME        NOT NULL,
    [LinkXML]        VARCHAR (250)   NOT NULL,
    [LinkPDF]        VARCHAR (250)   NOT NULL,
    [EstatusFactura] CHAR (1)        NOT NULL,
    [MetodoPago]     VARCHAR (4)     NOT NULL,
    CONSTRAINT [PK_EspFactura] PRIMARY KEY CLUSTERED ([EspFacturaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[EspFactura].[IX_EspFactura_UUID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_EspFactura_UUID]
    ON [dbo].[EspFactura]([UUID] ASC);


GO
PRINT N'Creando Tabla [dbo].[EspMunicipio]...';


GO
CREATE TABLE [dbo].[EspMunicipio] (
    [EspMunicipioID]    INT          IDENTITY (1, 1) NOT NULL,
    [EspMunicipioClave] VARCHAR (6)  NOT NULL,
    [Nombre]            VARCHAR (50) NOT NULL,
    [NombreCorto]       VARCHAR (15) NOT NULL,
    [EspEstadoID]       INT          NOT NULL,
    CONSTRAINT [PK_EspMunicipio] PRIMARY KEY CLUSTERED ([EspMunicipioID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[EspMunicipio].[IX_Municipio_MunicipioClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Municipio_MunicipioClave]
    ON [dbo].[EspMunicipio]([EspMunicipioClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[EspPais]...';


GO
CREATE TABLE [dbo].[EspPais] (
    [EspPaisID]           INT          IDENTITY (1, 1) NOT NULL,
    [EspPaisClave]        VARCHAR (6)  NOT NULL,
    [Nombre]              VARCHAR (50) NOT NULL,
    [NombreCorto]         VARCHAR (15) NOT NULL,
    [CodigoAlfa2]         VARCHAR (2)  NOT NULL,
    [CodigoAlfa3]         VARCHAR (3)  NOT NULL,
    [ClaveTelefonicaPais] VARCHAR (15) NOT NULL,
    CONSTRAINT [PK_EspPais] PRIMARY KEY CLUSTERED ([EspPaisID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[EspPais].[IX_Pais_PaisClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Pais_PaisClave]
    ON [dbo].[EspPais]([EspPaisClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[EspPersona]...';


GO
CREATE TABLE [dbo].[EspPersona] (
    [EspPersonaID]              INT            IDENTITY (1, 1) NOT NULL,
    [FisicaMoral]               CHAR (1)       NOT NULL,
    [NombreComercial]           NVARCHAR (120) NOT NULL,
    [RazonSocial]               NVARCHAR (120) NOT NULL,
    [Nombre]                    NVARCHAR (35)  NOT NULL,
    [ApellidoPaterno]           NVARCHAR (30)  NOT NULL,
    [ApellidoMaterno]           NVARCHAR (30)  NOT NULL,
    [RFC]                       NVARCHAR (13)  NOT NULL,
    [CURP]                      NVARCHAR (18)  NOT NULL,
    [SistemaSexoID]             INT            NOT NULL,
    [FechaNacimiento]           DATE           NOT NULL,
    [EspCiudadNacimientoID]     INT            NOT NULL,
    [AuxEstadoCivilID]          INT            NOT NULL,
    [CasadoCivil]               BIT            NOT NULL,
    [CasadoIglesia]             BIT            NOT NULL,
    [Iniciales]                 VARCHAR (6)    NOT NULL,
    [SobreNombre]               VARCHAR (25)   NOT NULL,
    [NombreCorto]               NVARCHAR (25)  NOT NULL,
    [EspDomicilioIDFacturacion] INT            NULL,
    [SATRegimenFiscalID]        INT            NULL,
    CONSTRAINT [PK_EspPersona] PRIMARY KEY CLUSTERED ([EspPersonaID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[EspPersonaFecha]...';


GO
CREATE TABLE [dbo].[EspPersonaFecha] (
    [EspPersonaFechaID] INT           NOT NULL,
    [Fecha]             DATE          NOT NULL,
    [EspPersonaID]      INT           NOT NULL,
    [CfgTipoFechaID]    INT           NOT NULL,
    [Comentario]        VARCHAR (100) NOT NULL,
    [Predeterminado]    BIT           NOT NULL,
    CONSTRAINT [PK_EspFecha] PRIMARY KEY CLUSTERED ([EspPersonaFechaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[EspPersonaFecha].[IX_PersonaFecha_PersonaID_TipoFechaID_Fecha]...';


GO
CREATE NONCLUSTERED INDEX [IX_PersonaFecha_PersonaID_TipoFechaID_Fecha]
    ON [dbo].[EspPersonaFecha]([EspPersonaID] ASC, [CfgTipoFechaID] ASC, [Fecha] ASC);


GO
PRINT N'Creando Tabla [dbo].[EspTelefono]...';


GO
CREATE TABLE [dbo].[EspTelefono] (
    [EspTelefonoID]            INT           IDENTITY (1, 1) NOT NULL,
    [ClaveTelefonicaPais]      VARCHAR (3)   NOT NULL,
    [NumeroTelefonico]         VARCHAR (10)  NOT NULL,
    [SistemaEstatusTelefonoID] INT           NOT NULL,
    [CfgTipoTelefonoID]        INT           NOT NULL,
    [Comentario]               VARCHAR (100) NOT NULL,
    CONSTRAINT [PK_EspTelefono] PRIMARY KEY CLUSTERED ([EspTelefonoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[EspTelefono].[IX_Telefono_LadaPais_NumeroTelefonico]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Telefono_LadaPais_NumeroTelefonico]
    ON [dbo].[EspTelefono]([ClaveTelefonicaPais] ASC, [NumeroTelefonico] ASC);


GO
PRINT N'Creando Tabla [dbo].[InvMovimientoDesglose]...';


GO
CREATE TABLE [dbo].[InvMovimientoDesglose] (
    [InvMovimientoDesgloseID]           INT        IDENTITY (1, 1) NOT NULL,
    [InvMovimientoDetalleID]            INT        NOT NULL,
    [Renglon]                           INT        NOT NULL,
    [CmpRequisicionDetalleID]           INT        NULL,
    [CmpOrdenCompraDesgloseID]          INT        NULL,
    [CmpCompraDesgloseID]               INT        NULL,
    [PpalSucursalID]                    INT        NOT NULL,
    [PpalCentroCostoID]                 INT        NOT NULL,
    [PpalAreaID]                        INT        NOT NULL,
    [PpalAlmacenID]                     INT        NOT NULL,
    [PpalConceptoEgresoID]              INT        NOT NULL,
    [PpalCuentaContableID]              INT        NOT NULL,
    [cantidad]                          FLOAT (53) NOT NULL,
    [InvMovimientoDesgloseReferenciaID] INT        NULL,
    CONSTRAINT [PK_InvMovimientosDesglose] PRIMARY KEY CLUSTERED ([InvMovimientoDesgloseID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[InvMovimientoDetalle]...';


GO
CREATE TABLE [dbo].[InvMovimientoDetalle] (
    [InvMovimientoDetalleID]           INT        IDENTITY (1, 1) NOT NULL,
    [InvMovimientoEncabezadoID]        INT        NOT NULL,
    [Renglon]                          INT        NOT NULL,
    [PpalProductoID]                   INT        NOT NULL,
    [Cantidad]                         FLOAT (53) NOT NULL,
    [AuxUnidadID]                      INT        NOT NULL,
    [Costo]                            FLOAT (53) NOT NULL,
    [CantidadUnidadBase]               FLOAT (53) NOT NULL,
    [CmpOrdenCompraDetalleID]          INT        NULL,
    [CmpCompraDetalleID]               INT        NULL,
    [InvMovimientoDetalleReferenciaID] INT        NULL,
    CONSTRAINT [PK_movtos_alm_detalles] PRIMARY KEY CLUSTERED ([InvMovimientoDetalleID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[InvMovimientoDetalle].[IX_InvMovimientoDetalle_InvmovimientoEncabezadoID_Renglon]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_InvMovimientoDetalle_InvmovimientoEncabezadoID_Renglon]
    ON [dbo].[InvMovimientoDetalle]([InvMovimientoEncabezadoID] ASC, [Renglon] ASC);


GO
PRINT N'Creando Tabla [dbo].[InvMovimientoEncabezado]...';


GO
CREATE TABLE [dbo].[InvMovimientoEncabezado] (
    [InvMovimientoEncabezadoID]     INT           IDENTITY (1, 1) NOT NULL,
    [PpalSucursalID]                INT           NOT NULL,
    [TipoDocumentoID]               INT           NOT NULL,
    [PpalSerieID]                   INT           NOT NULL,
    [Folio]                         INT           NOT NULL,
    [InvTipoMovimientoInventarioID] INT           NOT NULL,
    [PpalPersonalID]                INT           NOT NULL,
    [Fecha]                         DATETIME      NOT NULL,
    [Referencia]                    VARCHAR (50)  NOT NULL,
    [Concepto]                      VARCHAR (100) NOT NULL,
    [CfgEstatusDocumentoID]         INT           NOT NULL,
    CONSTRAINT [PK_InvMovtoEncabezado] PRIMARY KEY CLUSTERED ([InvMovimientoEncabezadoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[InvMovimientoEncabezado].[IX_InvMovimientoEncabezado_PpalSucursalID_TipoDocumentoID_PpalSerieID_Folio]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_InvMovimientoEncabezado_PpalSucursalID_TipoDocumentoID_PpalSerieID_Folio]
    ON [dbo].[InvMovimientoEncabezado]([PpalSucursalID] ASC, [TipoDocumentoID] ASC, [PpalSerieID] ASC, [Folio] ASC);


GO
PRINT N'Creando Tabla [dbo].[InvTipoMovimientoInventario]...';


GO
CREATE TABLE [dbo].[InvTipoMovimientoInventario] (
    [InvTipoMovimientoInventarioID]    INT          IDENTITY (1, 1) NOT NULL,
    [InvTipoMovimientoInventarioClave] VARCHAR (10) NOT NULL,
    [Nombre]                           VARCHAR (50) NOT NULL,
    [NombreCorto]                      VARCHAR (20) NOT NULL,
    [EntradaSalida]                    CHAR (1)     NOT NULL,
    CONSTRAINT [PK_InvTipoMovimientoInventario] PRIMARY KEY CLUSTERED ([InvTipoMovimientoInventarioID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[InvTipoMovimientoInventario].[IX_InvTipoMovimientoInventario_InvTipoMovimientoInventarioClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_InvTipoMovimientoInventario_InvTipoMovimientoInventarioClave]
    ON [dbo].[InvTipoMovimientoInventario]([InvTipoMovimientoInventarioClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[ListaAsen_SM]...';


GO
CREATE TABLE [dbo].[ListaAsen_SM] (
    [Tipo_Asentamiento]   INT          NOT NULL,
    [Nombre_Asentamiento] VARCHAR (50) NULL,
    CONSTRAINT [PK_ListaAsen_SM] PRIMARY KEY CLUSTERED ([Tipo_Asentamiento] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[ListaCiudades_SM]...';


GO
CREATE TABLE [dbo].[ListaCiudades_SM] (
    [ID_Ciudad]     VARCHAR (10) NOT NULL,
    [Nombre_Ciudad] VARCHAR (70) NULL,
    [ID_Municipio]  VARCHAR (10) NULL,
    [ID_Estado]     INT          NULL,
    [Codigo_CP]     NCHAR (6)    NULL,
    [MunicipioID]   INT          NULL,
    CONSTRAINT [PK_ListaCiudades_SM] PRIMARY KEY CLUSTERED ([ID_Ciudad] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[ListaColonias_SM]...';


GO
CREATE TABLE [dbo].[ListaColonias_SM] (
    [ID_Asentamiento]     NCHAR (10)    NOT NULL,
    [Nombre_Asentamiento] VARCHAR (MAX) NULL,
    [CP_Asentamiento]     INT           NULL,
    [Tipo_Asentamiento]   INT           NULL,
    [ID_Ciudad]           VARCHAR (50)  NOT NULL,
    [ID_Municipio]        VARCHAR (50)  NULL,
    [ID_Estado]           INT           NULL,
    CONSTRAINT [PK_ListaColonias_SM] PRIMARY KEY CLUSTERED ([ID_Asentamiento] ASC, [ID_Ciudad] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[ListaCP_SM]...';


GO
CREATE TABLE [dbo].[ListaCP_SM] (
    [Codigo_CP] NCHAR (7)  NOT NULL,
    [ID_Ciudad] NCHAR (11) NULL,
    [CiudadID]  INT        NULL,
    CONSTRAINT [PK_ListaCP_SM] PRIMARY KEY CLUSTERED ([Codigo_CP] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[ListaEstados_SM]...';


GO
CREATE TABLE [dbo].[ListaEstados_SM] (
    [ID_Estado]       INT          NOT NULL,
    [Nombre_Estado]   VARCHAR (50) NULL,
    [Nombre_Corto2]   VARCHAR (3)  NULL,
    [Nombre_Corto3]   VARCHAR (4)  NULL,
    [Nombre_Renapo]   VARCHAR (2)  NULL,
    [Nombre_Variable] VARCHAR (15) NULL,
    CONSTRAINT [PK_ListaEstados_SM] PRIMARY KEY CLUSTERED ([ID_Estado] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[ListaMunicipios_SM]...';


GO
CREATE TABLE [dbo].[ListaMunicipios_SM] (
    [ID_Municipio]     VARCHAR (50) NOT NULL,
    [Nombre_Municipio] VARCHAR (50) NULL,
    [ID_Estado]        INT          NULL,
    CONSTRAINT [PK_ListaMunicipios_SM] PRIMARY KEY CLUSTERED ([ID_Municipio] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[ListaPaises]...';


GO
CREATE TABLE [dbo].[ListaPaises] (
    [ID_Pais]     INT           NOT NULL,
    [Nombre_Pais] VARCHAR (MAX) NULL,
    [Codigo_Pais] VARCHAR (50)  NULL,
    CONSTRAINT [PK_ListaPaises] PRIMARY KEY CLUSTERED ([ID_Pais] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[ListaPaises_SM$]...';


GO
CREATE TABLE [dbo].[ListaPaises_SM$] (
    [Nombre común]                             NVARCHAR (255) NOT NULL,
    [Nombre ISO oficial del país o territorio] NVARCHAR (255) NULL,
    [Código alfa-2]                            NVARCHAR (255) NULL,
    [Código alfa-3]                            NVARCHAR (255) NOT NULL,
    [Código numérico]                          FLOAT (53)     NULL,
    [Codigo_LADA]                              VARCHAR (15)   NULL,
    CONSTRAINT [PK_ListaPaises_SM$] PRIMARY KEY CLUSTERED ([Nombre común] ASC, [Código alfa-3] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[ListaTodosEstados_SM]...';


GO
CREATE TABLE [dbo].[ListaTodosEstados_SM] (
    [Codigo_CP]       NCHAR (6)    NOT NULL,
    [Nombre_Asenta]   VARCHAR (70) NULL,
    [Tipo_Asenta]     VARCHAR (30) NULL,
    [Nombre_Mun]      VARCHAR (55) NULL,
    [Nombre_Estado]   VARCHAR (60) NULL,
    [Nombre_Ciudad]   VARCHAR (80) NULL,
    [D_CP]            NCHAR (6)    NULL,
    [Codigo_Estado]   NCHAR (3)    NULL,
    [C_Oficina]       NCHAR (6)    NULL,
    [c_CP]            NCHAR (6)    NULL,
    [Codigo_TipoAsen] NCHAR (4)    NULL,
    [Codigo_Mun]      NCHAR (5)    NULL,
    [Id_Asen_Pcons]   NCHAR (6)    NOT NULL,
    [Nombre_Zona]     VARCHAR (15) NULL,
    [Clave_Ciudad]    NCHAR (10)   NULL,
    [Municipio_id]    VARCHAR (10) NULL,
    [ciudad_id]       VARCHAR (10) NULL,
    CONSTRAINT [PK_ListaTodosEstados_SM] PRIMARY KEY CLUSTERED ([Codigo_CP] ASC, [Id_Asen_Pcons] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[MsjChatConfiguracion]...';


GO
CREATE TABLE [dbo].[MsjChatConfiguracion] (
    [Llave]       NVARCHAR (100) NOT NULL,
    [Valor]       NVARCHAR (MAX) NOT NULL,
    [Descripcion] VARCHAR (250)  NULL,
    PRIMARY KEY CLUSTERED ([Llave] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[MsjChatConversacion]...';


GO
CREATE TABLE [dbo].[MsjChatConversacion] (
    [ConversacionID] INT           IDENTITY (1, 1) NOT NULL,
    [Nombre]         NVARCHAR (50) NOT NULL,
    [Borrada]        DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([ConversacionID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[MsjChatConversacionUsuario]...';


GO
CREATE TABLE [dbo].[MsjChatConversacionUsuario] (
    [UsuarioID]             INT NOT NULL,
    [ConversacionID]        INT NOT NULL,
    [PermisoConversacionID] INT NOT NULL,
    CONSTRAINT [PK_MsjChatConversacionUsuario] PRIMARY KEY CLUSTERED ([UsuarioID] ASC),
    CONSTRAINT [AK_MsjChatConversacionUsuario_UsuarioID_ConversacionID] UNIQUE NONCLUSTERED ([UsuarioID] ASC, [ConversacionID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[MsjChatMensaje]...';


GO
CREATE TABLE [dbo].[MsjChatMensaje] (
    [MensajeID]      INT      IDENTITY (1, 1) NOT NULL,
    [UsuarioID]      INT      NOT NULL,
    [ConversacionID] INT      NOT NULL,
    [TipoMensajeID]  INT      NOT NULL,
    [Mensaje]        TEXT     NOT NULL,
    [Creado]         DATETIME NOT NULL,
    [Borrado]        DATETIME NULL,
    PRIMARY KEY CLUSTERED ([MensajeID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[MsjChatPermisoConversacion]...';


GO
CREATE TABLE [dbo].[MsjChatPermisoConversacion] (
    [PermisoConversacionID] INT          IDENTITY (1, 1) NOT NULL,
    [Nombre]                VARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([PermisoConversacionID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[MsjChatTipoMensaje]...';


GO
CREATE TABLE [dbo].[MsjChatTipoMensaje] (
    [TipoMensajeID] INT          IDENTITY (1, 1) NOT NULL,
    [TipoNombre]    VARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([TipoMensajeID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[MsjChatUltimaConsultaConversacion]...';


GO
CREATE TABLE [dbo].[MsjChatUltimaConsultaConversacion] (
    [MsjChatUltimaConsultaConversacion] INT      NOT NULL,
    [UsuarioID]                         INT      NOT NULL,
    [ConversacionID]                    INT      NOT NULL,
    [UltimaConsulta]                    DATETIME NOT NULL,
    CONSTRAINT [PK_MsjChatUltimaConsultaConversacion] PRIMARY KEY CLUSTERED ([MsjChatUltimaConsultaConversacion] ASC),
    CONSTRAINT [AK_MsjChatUltimaConsultaConversacion_UsuarioId_ConversacionID] UNIQUE NONCLUSTERED ([UsuarioID] ASC, [ConversacionID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[MsjComunicaCanalComunicacion]...';


GO
CREATE TABLE [dbo].[MsjComunicaCanalComunicacion] (
    [CanalComunicacionID]    INT           IDENTITY (1, 1) NOT NULL,
    [CanalComunicacionClave] VARCHAR (6)   NOT NULL,
    [Nombre]                 NVARCHAR (50) NOT NULL,
    [NombreCorto]            NVARCHAR (15) NOT NULL,
    [Activo]                 BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([CanalComunicacionID] ASC),
    CONSTRAINT [AK_MsjComunicaCanalComunicacion_CanalComunicacionClave] UNIQUE NONCLUSTERED ([CanalComunicacionClave] ASC),
    CONSTRAINT [AK_MsjComunicaCanalComunicacion_Nombre] UNIQUE NONCLUSTERED ([Nombre] ASC),
    CONSTRAINT [AK_MsjComunicaCanalComunicacion_NombreCorto] UNIQUE NONCLUSTERED ([NombreCorto] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[MsjComunicaConfiguracion]...';


GO
CREATE TABLE [dbo].[MsjComunicaConfiguracion] (
    [Llave]       NVARCHAR (100) NOT NULL,
    [Valor]       NVARCHAR (MAX) NOT NULL,
    [Descripcion] VARCHAR (250)  NULL,
    PRIMARY KEY CLUSTERED ([Llave] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[MsjComunicaDeviceToken]...';


GO
CREATE TABLE [dbo].[MsjComunicaDeviceToken] (
    [DeviceTokenID] INT            IDENTITY (1, 1) NOT NULL,
    [DeviceToken]   NVARCHAR (256) NOT NULL,
    [OS]            VARCHAR (50)   NOT NULL,
    [VersionOS]     NVARCHAR (50)  NULL,
    [VersionApp]    NVARCHAR (50)  NULL,
    [Descripcion]   VARCHAR (500)  NOT NULL,
    [FechaRegistro] DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([DeviceTokenID] ASC),
    CONSTRAINT [AK_MsjComunicaDeviceToken_DeviceToken] UNIQUE NONCLUSTERED ([DeviceTokenID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[MsjComunicaListaDistribucion]...';


GO
CREATE TABLE [dbo].[MsjComunicaListaDistribucion] (
    [ListaDistribucionID]    INT          IDENTITY (1, 1) NOT NULL,
    [ListaDistribucionClave] VARCHAR (6)  NULL,
    [Nombre]                 VARCHAR (50) NOT NULL,
    [NombreCorto]            VARCHAR (15) NOT NULL,
    [Activa]                 BIT          NOT NULL,
    PRIMARY KEY CLUSTERED ([ListaDistribucionID] ASC),
    CONSTRAINT [AK_MsjComunicaListaDistribucion_ListaDistribucionClave] UNIQUE NONCLUSTERED ([ListaDistribucionClave] ASC),
    CONSTRAINT [AK_MsjComunicaListaDistribucion_Nombre] UNIQUE NONCLUSTERED ([Nombre] ASC),
    CONSTRAINT [AK_MsjComunicaListaDistribucion_NombreCorto] UNIQUE NONCLUSTERED ([NombreCorto] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[MsjComunicaListaDistribucionListaDistribucion]...';


GO
CREATE TABLE [dbo].[MsjComunicaListaDistribucionListaDistribucion] (
    [MsjComunicaListaDistribucionListaDistribucionID] INT NOT NULL,
    [ListaDistribucionID]                             INT NOT NULL,
    [MiembroListaDistribucionID]                      INT NOT NULL,
    CONSTRAINT [PK_MsjComunicaListaDistribucionListaDistribucion] PRIMARY KEY CLUSTERED ([MsjComunicaListaDistribucionListaDistribucionID] ASC),
    CONSTRAINT [AK_MsjComunicaListaDistribucionListaDistribucion_ListaDistribucionID] UNIQUE NONCLUSTERED ([ListaDistribucionID] ASC, [MiembroListaDistribucionID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[MsjComunicaListaDistribucionListaDistribucion].[IX_MsjComunicaListaDistribucionListaDistribucion_ListaDistribucionID]...';


GO
CREATE NONCLUSTERED INDEX [IX_MsjComunicaListaDistribucionListaDistribucion_ListaDistribucionID]
    ON [dbo].[MsjComunicaListaDistribucionListaDistribucion]([ListaDistribucionID] ASC);


GO
PRINT N'Creando Tabla [dbo].[MsjComunicaListaDistribucionUsuario]...';


GO
CREATE TABLE [dbo].[MsjComunicaListaDistribucionUsuario] (
    [MsjComunicaListaDistribucionUsuario] INT NOT NULL,
    [ListaDistribucionID]                 INT NOT NULL,
    [UsuarioID]                           INT NOT NULL,
    CONSTRAINT [PK_MsjComunicaListaDistribucionUsuario] PRIMARY KEY CLUSTERED ([MsjComunicaListaDistribucionUsuario] ASC),
    CONSTRAINT [AK_MsjComunicaListaDistribucionUser_ListaDistribucionID_UsuarioID] UNIQUE NONCLUSTERED ([ListaDistribucionID] ASC, [UsuarioID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[MsjComunicaListaDistribucionUsuario].[IX_MsjComunicaListaDistribucionUsuario_ListaDistribucionID]...';


GO
CREATE NONCLUSTERED INDEX [IX_MsjComunicaListaDistribucionUsuario_ListaDistribucionID]
    ON [dbo].[MsjComunicaListaDistribucionUsuario]([ListaDistribucionID] ASC);


GO
PRINT N'Creando Tabla [dbo].[MsjComunicaMensaje]...';


GO
CREATE TABLE [dbo].[MsjComunicaMensaje] (
    [MensajeID]            INT            IDENTITY (1, 1) NOT NULL,
    [CanalComunicacionID]  INT            NOT NULL,
    [TipoMensajeID]        INT            NOT NULL,
    [RemitenteID]          INT            NOT NULL,
    [DestinatarioID]       INT            NOT NULL,
    [FechaRegistro]        DATETIME       NOT NULL,
    [FechaProgramadaEnvio] DATETIME       NULL,
    [FechaEnviado]         DATETIME       NULL,
    [FechaLeido]           DATETIME       NULL,
    [FechaBorrado]         DATETIME       NULL,
    [Tema]                 NVARCHAR (100) NOT NULL,
    [Mensaje]              NVARCHAR (MAX) NOT NULL,
    [RequiereAcuse]        BIT            NOT NULL,
    [Acusado]              BIT            NULL,
    [Error]                NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([MensajeID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[MsjComunicaReporteEnvio]...';


GO
CREATE TABLE [dbo].[MsjComunicaReporteEnvio] (
    [ReporteEnvioID] INT            IDENTITY (1, 1) NOT NULL,
    [RemitenteID]    INT            NOT NULL,
    [Tema]           NVARCHAR (100) NOT NULL,
    [Fecha]          DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([ReporteEnvioID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[MsjComunicaReporteEnvioMensaje]...';


GO
CREATE TABLE [dbo].[MsjComunicaReporteEnvioMensaje] (
    [MsjComunicaReporteEnvioMensaje] INT NOT NULL,
    [ReporteEnvioID]                 INT NOT NULL,
    [MensajeID]                      INT NOT NULL,
    CONSTRAINT [PK_MsjComunicaReporteEnvioMensaje] PRIMARY KEY CLUSTERED ([MsjComunicaReporteEnvioMensaje] ASC),
    CONSTRAINT [FK_MsjComunicaReporteEnvioMensaje_MsjComunicaReporteEnvio_UNIQUE] UNIQUE NONCLUSTERED ([ReporteEnvioID] ASC, [MensajeID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[MsjComunicaReporteEnvioMensaje].[IX_MsjComunicaReporteEnvioMensaje_ReporteEnvioID]...';


GO
CREATE NONCLUSTERED INDEX [IX_MsjComunicaReporteEnvioMensaje_ReporteEnvioID]
    ON [dbo].[MsjComunicaReporteEnvioMensaje]([ReporteEnvioID] ASC);


GO
PRINT N'Creando Tabla [dbo].[MsjComunicaTipoMensaje]...';


GO
CREATE TABLE [dbo].[MsjComunicaTipoMensaje] (
    [TipoMensajeID] INT           IDENTITY (1, 1) NOT NULL,
    [TipoClave]     NVARCHAR (6)  NOT NULL,
    [Nombre]        NVARCHAR (50) NOT NULL,
    [NombreCorto]   NVARCHAR (15) NOT NULL,
    PRIMARY KEY CLUSTERED ([TipoMensajeID] ASC),
    CONSTRAINT [AK_MsjComunicaTipoMensaje_Nombre] UNIQUE NONCLUSTERED ([Nombre] ASC),
    CONSTRAINT [AK_MsjComunicaTipoMensaje_NombreCorto] UNIQUE NONCLUSTERED ([NombreCorto] ASC),
    CONSTRAINT [AK_MsjComunicaTipoMensaje_TipoClave] UNIQUE NONCLUSTERED ([TipoClave] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[MsjComunicaUltimaConsultaMensaje]...';


GO
CREATE TABLE [dbo].[MsjComunicaUltimaConsultaMensaje] (
    [MsjComunicaUltimaConsultaMensajeId] INT      NOT NULL,
    [UsuarioID]                          INT      NOT NULL,
    [FechaUltimaConsulta]                DATETIME NOT NULL,
    CONSTRAINT [PK_MsjComunicaUltimaConsultaMensaje] PRIMARY KEY CLUSTERED ([MsjComunicaUltimaConsultaMensajeId] ASC)
);


GO
PRINT N'Creando Índice [dbo].[MsjComunicaUltimaConsultaMensaje].[IX_MsjComunicaUltimaConsultaMensaje_UsuarioID]...';


GO
CREATE NONCLUSTERED INDEX [IX_MsjComunicaUltimaConsultaMensaje_UsuarioID]
    ON [dbo].[MsjComunicaUltimaConsultaMensaje]([UsuarioID] ASC);


GO
PRINT N'Creando Tabla [dbo].[MsjComunicaUltimaConsultaReporteMensaje]...';


GO
CREATE TABLE [dbo].[MsjComunicaUltimaConsultaReporteMensaje] (
    [UsuarioID]           INT      NOT NULL,
    [FechaUltimaConsulta] DATETIME NOT NULL,
    PRIMARY KEY CLUSTERED ([UsuarioID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[MsjComunicaUsuarioDeviceToken]...';


GO
CREATE TABLE [dbo].[MsjComunicaUsuarioDeviceToken] (
    [MsjComunicaUsuarioDeviceToken] INT NOT NULL,
    [UsuarioID]                     INT NOT NULL,
    [DeviceTokenID]                 INT NOT NULL,
    CONSTRAINT [PK_MsjComunicaUsuarioDeviceToken] PRIMARY KEY CLUSTERED ([MsjComunicaUsuarioDeviceToken] ASC),
    CONSTRAINT [AK_MsjComunicaUsuarioDeviceToken_UsuarioID] UNIQUE NONCLUSTERED ([DeviceTokenID] ASC),
    CONSTRAINT [AK_MsjComunicaUsuarioDeviceToken_UsuarioID_DeviceTokenID] UNIQUE NONCLUSTERED ([UsuarioID] ASC, [DeviceTokenID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[MsjComunicaUsuarioDeviceToken].[IX_MsjComunicaUsuarioDeviceToken_UsuarioID]...';


GO
CREATE NONCLUSTERED INDEX [IX_MsjComunicaUsuarioDeviceToken_UsuarioID]
    ON [dbo].[MsjComunicaUsuarioDeviceToken]([UsuarioID] ASC);


GO
PRINT N'Creando Tabla [dbo].[MsjComunicaUsuarioPreferenciaContacto]...';


GO
CREATE TABLE [dbo].[MsjComunicaUsuarioPreferenciaContacto] (
    [UsuarioID]           INT NOT NULL,
    [CanalComunicacionID] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([UsuarioID] ASC),
    CONSTRAINT [AK_MsjComunicaUsuarioPreferenciaContacto_UsuarioID] UNIQUE NONCLUSTERED ([UsuarioID] ASC, [CanalComunicacionID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[PpalAlmacen]...';


GO
CREATE TABLE [dbo].[PpalAlmacen] (
    [PpalAlmacenID]    INT          IDENTITY (1, 1) NOT NULL,
    [PpalAlmacenClave] VARCHAR (20) NOT NULL,
    [Nombre]           VARCHAR (50) NOT NULL,
    [NombreCorto]      VARCHAR (20) NOT NULL,
    [PpalSucursalID]   INT          NOT NULL,
    [Activo]           BIT          NOT NULL,
    CONSTRAINT [PK_PpalAlmacen] PRIMARY KEY CLUSTERED ([PpalAlmacenID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalAlmacen].[IX_Almacen_SucursalID_AlmacenClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Almacen_SucursalID_AlmacenClave]
    ON [dbo].[PpalAlmacen]([PpalSucursalID] ASC, [PpalAlmacenClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalArea]...';


GO
CREATE TABLE [dbo].[PpalArea] (
    [PpalAreaID]    INT          IDENTITY (1, 1) NOT NULL,
    [PpalAreaClave] VARCHAR (10) NOT NULL,
    [Nombre]        VARCHAR (60) NOT NULL,
    [NombreCorto]   VARCHAR (10) NOT NULL,
    [EmpresaID]     INT          NOT NULL,
    [Activo]        BIT          NOT NULL,
    CONSTRAINT [PK_PpalAreaID] PRIMARY KEY CLUSTERED ([PpalAreaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalArea].[IX_PpalArea_EmpresaID_PpalAreaClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PpalArea_EmpresaID_PpalAreaClave]
    ON [dbo].[PpalArea]([EmpresaID] ASC, [PpalAreaClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalCentroCosto]...';


GO
CREATE TABLE [dbo].[PpalCentroCosto] (
    [PpalCentroCostoID]    INT          IDENTITY (1, 1) NOT NULL,
    [EmpresaID]            INT          NOT NULL,
    [PpalCentroCostoClave] VARCHAR (6)  NOT NULL,
    [Nombre]               VARCHAR (40) NOT NULL,
    [NombreCorto]          VARCHAR (10) NOT NULL,
    [Administracion]       CHAR (1)     NOT NULL,
    [Activo]               BIT          NOT NULL,
    CONSTRAINT [PK_PpalCentroCostoID] PRIMARY KEY CLUSTERED ([PpalCentroCostoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalCentroCosto].[IX_PpalCentroCosto_EmpresaID_PpalCentroCostoClave_]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PpalCentroCosto_EmpresaID_PpalCentroCostoClave_]
    ON [dbo].[PpalCentroCosto]([EmpresaID] ASC, [PpalCentroCostoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalConceptoEgreso]...';


GO
CREATE TABLE [dbo].[PpalConceptoEgreso] (
    [PpalConceptoEgresoID]    INT          IDENTITY (1, 1) NOT NULL,
    [PpalConceptoEgresoClave] VARCHAR (10) NOT NULL,
    [Nombre]                  VARCHAR (60) NOT NULL,
    [NombreCorto]             VARCHAR (10) NOT NULL,
    [CompraFactura]           CHAR (1)     NOT NULL,
    [Desglosar]               CHAR (1)     NOT NULL,
    [EmpresaID]               INT          NULL,
    CONSTRAINT [PK_PpalConceptoEgreso] PRIMARY KEY CLUSTERED ([PpalConceptoEgresoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalConceptoEgreso].[IX_ConceptoEgreso]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_ConceptoEgreso]
    ON [dbo].[PpalConceptoEgreso]([EmpresaID] ASC, [PpalConceptoEgresoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalConceptoIngreso]...';


GO
CREATE TABLE [dbo].[PpalConceptoIngreso] (
    [PpalConceptoIngresoID]    INT          IDENTITY (1, 1) NOT NULL,
    [Nombre]                   VARCHAR (60) NOT NULL,
    [NombreCorto]              VARCHAR (10) NOT NULL,
    [SistemaEmpresaID]         INT          NOT NULL,
    [PpalConceptoIngresoClave] VARCHAR (10) NOT NULL,
    CONSTRAINT [PK_PpalConceptoIngreso] PRIMARY KEY CLUSTERED ([PpalConceptoIngresoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalConceptoIngreso].[IX_ConceptoIngreso_Column]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_ConceptoIngreso_Column]
    ON [dbo].[PpalConceptoIngreso]([SistemaEmpresaID] ASC, [PpalConceptoIngresoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalContactoPersonal]...';


GO
CREATE TABLE [dbo].[PpalContactoPersonal] (
    [PpalContactoPersonalID] INT IDENTITY (1, 1) NOT NULL,
    [PpalPersonalID]         INT NOT NULL,
    [EspPersonaID]           INT NOT NULL,
    [TipoContactoPersonalID] INT NOT NULL,
    CONSTRAINT [PK_PpalContactoPersonalID] PRIMARY KEY CLUSTERED ([PpalContactoPersonalID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalContactoPersonal].[IX_PpalContactoPersonal_PpalPersonalID_PersonalD]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PpalContactoPersonal_PpalPersonalID_PersonalD]
    ON [dbo].[PpalContactoPersonal]([PpalPersonalID] ASC, [EspPersonaID] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalContactoPersonalDomicilio]...';


GO
CREATE TABLE [dbo].[PpalContactoPersonalDomicilio] (
    [PpalContactoPersonalDomicilioID] INT           IDENTITY (1, 1) NOT NULL,
    [PpalContactoPersonalID]          INT           NOT NULL,
    [EspDomicilioID]                  INT           NOT NULL,
    [CfgTipoDomicilioID]              INT           NOT NULL,
    [Comentarios]                     VARCHAR (100) NOT NULL,
    [Predeterminado]                  BIT           NOT NULL,
    CONSTRAINT [PK_PpalContactoPersonalDomicilioID] PRIMARY KEY CLUSTERED ([PpalContactoPersonalDomicilioID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalContactoPersonalDomicilio].[IX_PpalContactoPersonalDomicilio_PpalContactoPersonalID_DomicilioID_TipoDomicilioID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PpalContactoPersonalDomicilio_PpalContactoPersonalID_DomicilioID_TipoDomicilioID]
    ON [dbo].[PpalContactoPersonalDomicilio]([PpalContactoPersonalID] ASC, [EspDomicilioID] ASC, [CfgTipoDomicilioID] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalContactoPersonalFecha]...';


GO
CREATE TABLE [dbo].[PpalContactoPersonalFecha] (
    [PpalContactoPersonalFechaID] INT           IDENTITY (1, 1) NOT NULL,
    [PpalContactoPersonalID]      INT           NOT NULL,
    [Fecha]                       DATE          NOT NULL,
    [CfgTipoFechaID]              INT           NOT NULL,
    [Comentarios]                 VARCHAR (100) NOT NULL,
    [Predeterminado]              BIT           NOT NULL,
    CONSTRAINT [PK_PpalContactoPersonalFechaID] PRIMARY KEY CLUSTERED ([PpalContactoPersonalFechaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalContactoPersonalFecha].[IX_PpalContactoPersonalFecha_PpalContactoPersonalID_TipoFechaID_Fecha]...';


GO
CREATE NONCLUSTERED INDEX [IX_PpalContactoPersonalFecha_PpalContactoPersonalID_TipoFechaID_Fecha]
    ON [dbo].[PpalContactoPersonalFecha]([PpalContactoPersonalID] ASC, [CfgTipoFechaID] ASC, [Fecha] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalContactoPersonalMail]...';


GO
CREATE TABLE [dbo].[PpalContactoPersonalMail] (
    [PpalContactoPersonalMailID] INT           IDENTITY (1, 1) NOT NULL,
    [PpalContactoPersonalID]     INT           NOT NULL,
    [Email]                      VARCHAR (100) NOT NULL,
    [Predeterminado]             BIT           NOT NULL,
    [Comentarios]                VARCHAR (100) NOT NULL,
    [CfgTipoMailID]              INT           NOT NULL,
    CONSTRAINT [PK_PpalContactoPersonalMailID] PRIMARY KEY CLUSTERED ([PpalContactoPersonalMailID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalContactoPersonalMail].[IX_PpalContactoPersonalMail_PpalContactoPersonalID_Email]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PpalContactoPersonalMail_PpalContactoPersonalID_Email]
    ON [dbo].[PpalContactoPersonalMail]([PpalContactoPersonalMailID] ASC, [Email] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalContactoPersonalTelefono]...';


GO
CREATE TABLE [dbo].[PpalContactoPersonalTelefono] (
    [PpalContactoPersonalTelefonoID] INT           IDENTITY (1, 1) NOT NULL,
    [PpalContactoPersonalID]         INT           NOT NULL,
    [EspTelefonoID]                  INT           NOT NULL,
    [Extension]                      VARCHAR (10)  NOT NULL,
    [Predeterminado]                 BIT           NOT NULL,
    [Comentarios]                    VARCHAR (100) NOT NULL,
    [CfgUsoTelefonoID]               INT           NOT NULL,
    CONSTRAINT [PK_PpalContactoPersonalTelefono] PRIMARY KEY CLUSTERED ([PpalContactoPersonalTelefonoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalContactoPersonalTelefono].[IX_PpalContactoPersonalTelefono_PpalContactoPersonalID_TelefonoID_Extension]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PpalContactoPersonalTelefono_PpalContactoPersonalID_TelefonoID_Extension]
    ON [dbo].[PpalContactoPersonalTelefono]([PpalContactoPersonalID] ASC, [EspTelefonoID] ASC, [Extension] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalCuentaContable]...';


GO
CREATE TABLE [dbo].[PpalCuentaContable] (
    [PpalCuentaContableID]    INT          IDENTITY (1, 1) NOT NULL,
    [PpalCuentaContableClave] VARCHAR (20) NOT NULL,
    [Nombre]                  VARCHAR (60) NOT NULL,
    [PadreID]                 INT          NULL,
    [EmpresaID]               INT          NOT NULL,
    CONSTRAINT [PK_PpalCuentaContable] PRIMARY KEY CLUSTERED ([PpalCuentaContableID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalCuentaContable].[IX_PpalCuentaContable_PpalCuentaContableClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PpalCuentaContable_PpalCuentaContableClave]
    ON [dbo].[PpalCuentaContable]([PpalCuentaContableClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalPersonal]...';


GO
CREATE TABLE [dbo].[PpalPersonal] (
    [PpalPersonalID]         INT          IDENTITY (1, 1) NOT NULL,
    [PpalPersonalClave]      VARCHAR (10) NOT NULL,
    [EmpresaID]              INT          NOT NULL,
    [AuxPuestoID]            INT          NOT NULL,
    [ReportaAPpalPersonalID] INT          NOT NULL,
    [PpalAreaID]             INT          NOT NULL,
    [PpalCentroCostoID]      INT          NOT NULL,
    [AuxHorarioPersonalID]   INT          NOT NULL,
    [CfgEstatusPersonalID]   INT          NOT NULL,
    [EspPersonaID]           INT          NOT NULL,
    CONSTRAINT [PK_PpalPersonal] PRIMARY KEY CLUSTERED ([PpalPersonalID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[PpalPersonalDomicilio]...';


GO
CREATE TABLE [dbo].[PpalPersonalDomicilio] (
    [PpalPersonalDomicilioID] INT           IDENTITY (1, 1) NOT NULL,
    [PpalPersonalID]          INT           NOT NULL,
    [EspDomicilioID]          INT           NOT NULL,
    [CfgTipoDomicilioID]      INT           NOT NULL,
    [Comentarios]             VARCHAR (100) NOT NULL,
    [Predeterminado]          BIT           NOT NULL,
    CONSTRAINT [PK_PersonalDomicilio] PRIMARY KEY CLUSTERED ([PpalPersonalDomicilioID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalPersonalDomicilio].[IX_PersonalDomicilio_PersonalID_DomicilioID_TipoDomicilioID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PersonalDomicilio_PersonalID_DomicilioID_TipoDomicilioID]
    ON [dbo].[PpalPersonalDomicilio]([PpalPersonalID] ASC, [EspDomicilioID] ASC, [CfgTipoDomicilioID] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalPersonalFecha]...';


GO
CREATE TABLE [dbo].[PpalPersonalFecha] (
    [PpalPersonalFechaID] INT           IDENTITY (1, 1) NOT NULL,
    [PpalPersonalID]      INT           NOT NULL,
    [Fecha]               DATE          NOT NULL,
    [CfgTipoFechaID]      INT           NOT NULL,
    [Comentarios]         VARCHAR (100) NOT NULL,
    [Predeterminado]      BIT           NOT NULL,
    CONSTRAINT [PK_PersonalFecha] PRIMARY KEY CLUSTERED ([PpalPersonalFechaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalPersonalFecha].[IX_PersonalFecha_PersonalID_TipoFechaID_Fecha]...';


GO
CREATE NONCLUSTERED INDEX [IX_PersonalFecha_PersonalID_TipoFechaID_Fecha]
    ON [dbo].[PpalPersonalFecha]([PpalPersonalID] ASC, [CfgTipoFechaID] ASC, [Fecha] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalPersonalMail]...';


GO
CREATE TABLE [dbo].[PpalPersonalMail] (
    [PpalPersonalMailID] INT           IDENTITY (1, 1) NOT NULL,
    [PpalPersonalID]     INT           NOT NULL,
    [Email]              VARCHAR (100) NOT NULL,
    [CfgTipoMailID]      INT           NOT NULL,
    [Predeterminado]     BIT           NOT NULL,
    [Comentarios]        VARCHAR (100) NOT NULL,
    CONSTRAINT [PK_PpalPersonalMailID] PRIMARY KEY CLUSTERED ([PpalPersonalMailID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalPersonalMail].[IX_PpalPersonalMail_PpalPersonalID_Email]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PpalPersonalMail_PpalPersonalID_Email]
    ON [dbo].[PpalPersonalMail]([PpalPersonalID] ASC, [Email] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalPersonalTelefono]...';


GO
CREATE TABLE [dbo].[PpalPersonalTelefono] (
    [PpalPersonalTelefonoID] INT           IDENTITY (1, 1) NOT NULL,
    [PpalPersonalID]         INT           NOT NULL,
    [EspTelefonoID]          INT           NOT NULL,
    [Extension]              VARCHAR (10)  NOT NULL,
    [Predeterminado]         BIT           NOT NULL,
    [Comentarios]            VARCHAR (100) NOT NULL,
    [CfgUsoTelefonoID]       INT           NOT NULL,
    CONSTRAINT [PK_PpalPersonalTelefono] PRIMARY KEY CLUSTERED ([PpalPersonalTelefonoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalPersonalTelefono].[IX_PpalPersonalTelefono_PersonalID_TelefonoID_Extension]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PpalPersonalTelefono_PersonalID_TelefonoID_Extension]
    ON [dbo].[PpalPersonalTelefono]([PpalPersonalID] ASC, [EspTelefonoID] ASC, [Extension] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalProducto]...';


GO
CREATE TABLE [dbo].[PpalProducto] (
    [PpalProductoID]       INT             IDENTITY (1, 1) NOT NULL,
    [MarcaID]              INT             NOT NULL,
    [Nombre]               NVARCHAR (100)  NOT NULL,
    [NombreCorto]          NVARCHAR (20)   NOT NULL,
    [AuxUnidadID]          INT             NOT NULL,
    [ClaseProductoID]      INT             NOT NULL,
    [CfgTipoProductoID]    INT             NOT NULL,
    [NivelProductoID]      INT             NOT NULL,
    [MetodoCosteoID]       INT             NOT NULL,
    [ManejaLotes]          CHAR (1)        NOT NULL,
    [ManejaSeries]         CHAR (1)        NOT NULL,
    [Reorden]              DECIMAL (18, 6) NOT NULL,
    [CfgFamiliaProductoID] INT             NOT NULL,
    [EstatusProductoID]    INT             NOT NULL,
    [Maximo]               DECIMAL (18, 6) NOT NULL,
    [Minimo]               DECIMAL (18, 6) NOT NULL,
    [CostoPromedio]        DECIMAL (18, 2) NOT NULL,
    [UltimoCosto]          DECIMAL (18, 2) NOT NULL,
    [PpalProductoClave]    VARCHAR (20)    NOT NULL,
    [EmpresaID]            INT             NULL,
    [CfgTasaIVAID]         INT             NOT NULL,
    [ExentoIVA]            CHAR (1)        NOT NULL,
    CONSTRAINT [PK_PpalProductoID] PRIMARY KEY CLUSTERED ([PpalProductoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalProducto].[IX_PpalProducto_EmpresaID_PpalProductoClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PpalProducto_EmpresaID_PpalProductoClave]
    ON [dbo].[PpalProducto]([EmpresaID] ASC, [PpalProductoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalProductoAlmacen]...';


GO
CREATE TABLE [dbo].[PpalProductoAlmacen] (
    [PpalProductoAlmacenID] INT             IDENTITY (1, 1) NOT NULL,
    [PpalProductoID]        INT             NOT NULL,
    [PpalAlmacenID]         INT             NOT NULL,
    [Maximo]                DECIMAL (18, 2) NOT NULL,
    [Minimo]                DECIMAL (18, 2) NOT NULL,
    [Reorden]               DECIMAL (18, 2) NOT NULL,
    [CostoPromedio]         DECIMAL (18, 2) NOT NULL,
    [UltimoCosto]           DECIMAL (18, 2) NOT NULL,
    CONSTRAINT [PK_PpalControlProductoAlmacen] PRIMARY KEY CLUSTERED ([PpalProductoAlmacenID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalProductoAlmacen].[IX_ProductoAlmacen_ProductoID_AlmacenID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_ProductoAlmacen_ProductoID_AlmacenID]
    ON [dbo].[PpalProductoAlmacen]([PpalProductoID] ASC, [PpalAlmacenID] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalProductoEmpresa]...';


GO
CREATE TABLE [dbo].[PpalProductoEmpresa] (
    [PpalProductoEmpresaID] INT          IDENTITY (1, 1) NOT NULL,
    [EmpresaID]             INT          NOT NULL,
    [PpalProductoID]        INT          NOT NULL,
    [ProductoClave]         VARCHAR (20) NOT NULL,
    CONSTRAINT [PK_PpalProductoEmpresa] PRIMARY KEY CLUSTERED ([PpalProductoEmpresaID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[PpalProveedor]...';


GO
CREATE TABLE [dbo].[PpalProveedor] (
    [PpalProveedorID]    INT      IDENTITY (1, 1) NOT NULL,
    [EspPersonaID]       INT      NOT NULL,
    [CmpTipoProveedorID] INT      NOT NULL,
    [AuxGiroEmpresaID]   INT      NOT NULL,
    [AuxMedioContactoID] INT      NOT NULL,
    [AuxVinculoID]       INT      NOT NULL,
    [AplicaRetenciones]  CHAR (1) NOT NULL,
    CONSTRAINT [PK_PpalProveedorID] PRIMARY KEY CLUSTERED ([PpalProveedorID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[PpalProveedorDomicilio]...';


GO
CREATE TABLE [dbo].[PpalProveedorDomicilio] (
    [PpalProveedorDomicilioID] INT           IDENTITY (1, 1) NOT NULL,
    [PpalProveedorID]          INT           NOT NULL,
    [EspDomicilioID]           INT           NOT NULL,
    [Comentario]               VARCHAR (100) NOT NULL,
    [Predeterminado]           BIT           NOT NULL,
    [CfgTipoDomicilioID]       INT           NOT NULL,
    CONSTRAINT [PK_PpalProveedorDomicilioID] PRIMARY KEY CLUSTERED ([PpalProveedorDomicilioID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalProveedorDomicilio].[IX_ProveedorDomicilio_ProveedorID_DomicilioID_TipoDomicilioID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_ProveedorDomicilio_ProveedorID_DomicilioID_TipoDomicilioID]
    ON [dbo].[PpalProveedorDomicilio]([PpalProveedorID] ASC, [EspDomicilioID] ASC, [CfgTipoDomicilioID] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalProveedorEmpresaSucursal]...';


GO
CREATE TABLE [dbo].[PpalProveedorEmpresaSucursal] (
    [PpalProveedorEmpresaSucursalID] INT          IDENTITY (1, 1) NOT NULL,
    [PpalSucursalID]                 INT          NULL,
    [PpalProveedorID]                INT          NOT NULL,
    [PpalProveedorClave]             VARCHAR (10) NOT NULL,
    [Activo]                         BIT          NOT NULL,
    [EmpresaID]                      INT          NULL,
    CONSTRAINT [PK_ProveedorEmpresaSucursal] PRIMARY KEY CLUSTERED ([PpalProveedorEmpresaSucursalID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalProveedorEmpresaSucursal].[IX_PpalProveedorEmpresaSucursal]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PpalProveedorEmpresaSucursal]
    ON [dbo].[PpalProveedorEmpresaSucursal]([EmpresaID] ASC, [PpalSucursalID] ASC, [PpalProveedorClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalProveedorFecha]...';


GO
CREATE TABLE [dbo].[PpalProveedorFecha] (
    [PpalProveedorFechaID] INT           IDENTITY (1, 1) NOT NULL,
    [PpalProveedorID]      INT           NOT NULL,
    [Fecha]                DATE          NOT NULL,
    [CfgTipoFechaID]       INT           NOT NULL,
    [Comentarios]          VARCHAR (100) NOT NULL,
    [Predeterminado]       BIT           NOT NULL,
    CONSTRAINT [PK_PpalProveedorFechaID] PRIMARY KEY CLUSTERED ([PpalProveedorFechaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalProveedorFecha].[IX_PpalProveedorFecha_PpalProveedorID_TipoFechaID_Fecha]...';


GO
CREATE NONCLUSTERED INDEX [IX_PpalProveedorFecha_PpalProveedorID_TipoFechaID_Fecha]
    ON [dbo].[PpalProveedorFecha]([PpalProveedorID] ASC, [CfgTipoFechaID] ASC, [Fecha] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalProveedorMail]...';


GO
CREATE TABLE [dbo].[PpalProveedorMail] (
    [PpalProveedorMailID] INT           IDENTITY (1, 1) NOT NULL,
    [PpalProveedorID]     INT           NOT NULL,
    [CfgTipoMailID]       INT           NOT NULL,
    [Mail]                VARCHAR (100) NOT NULL,
    [Predeterminado]      BIT           NOT NULL,
    [Comentarios]         VARCHAR (100) NOT NULL,
    CONSTRAINT [PK_PpalProveedorMail] PRIMARY KEY CLUSTERED ([PpalProveedorMailID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalProveedorMail].[IX_PpalProveedorMail_PpalProveedorID_Mail]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PpalProveedorMail_PpalProveedorID_Mail]
    ON [dbo].[PpalProveedorMail]([PpalProveedorID] ASC, [Mail] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalProveedorTelefono]...';


GO
CREATE TABLE [dbo].[PpalProveedorTelefono] (
    [PpalProveedorTelefonoID] INT           IDENTITY (1, 1) NOT NULL,
    [PpalProveedorID]         INT           NOT NULL,
    [EspTelefonoID]           INT           NOT NULL,
    [Predeterminado]          BIT           NOT NULL,
    [Comentarios]             VARCHAR (100) NOT NULL,
    [Extension]               VARCHAR (10)  NOT NULL,
    [CfgUsoTelefonoID]        INT           NOT NULL,
    CONSTRAINT [PK_PpalProveedorTelefonoID] PRIMARY KEY CLUSTERED ([PpalProveedorTelefonoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalProveedorTelefono].[IX_PpalProveedorTelefono_PpalProveedorID_TelefonoID_Extension]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PpalProveedorTelefono_PpalProveedorID_TelefonoID_Extension]
    ON [dbo].[PpalProveedorTelefono]([PpalProveedorID] ASC, [EspTelefonoID] ASC, [Extension] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalRepresentanteProveedor]...';


GO
CREATE TABLE [dbo].[PpalRepresentanteProveedor] (
    [PpalRepresentanteProveedorID]    INT          IDENTITY (1, 1) NOT NULL,
    [PpalProveedorID]                 INT          NOT NULL,
    [EspPersonaID]                    INT          NOT NULL,
    [ProfesionID]                     INT          NOT NULL,
    [CmpTipoRepresentanteProveedorID] INT          NOT NULL,
    [Predeterminado]                  BIT          NOT NULL,
    [Puesto]                          VARCHAR (60) NOT NULL,
    CONSTRAINT [PK_PpalRepresentanteProveedorID] PRIMARY KEY CLUSTERED ([PpalRepresentanteProveedorID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[PpalRepresentanteProveedorDomicilio]...';


GO
CREATE TABLE [dbo].[PpalRepresentanteProveedorDomicilio] (
    [PpalRepresentanteProveedorDomicilioID] INT           IDENTITY (1, 1) NOT NULL,
    [PpalRepresentanteProveedorID]          INT           NOT NULL,
    [EspDomicilioID]                        INT           NOT NULL,
    [Comentario]                            VARCHAR (100) NOT NULL,
    [Predeterminado]                        BIT           NOT NULL,
    [CfgTipoDomicilioID]                    INT           NOT NULL,
    CONSTRAINT [PK_PpalRepresentanteProveedorDomicilioID] PRIMARY KEY CLUSTERED ([PpalRepresentanteProveedorDomicilioID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalRepresentanteProveedorDomicilio].[IX_PpalRepresentanteProveedorDomicilio_PpalRepresentanteProveedorID_DomicilioID_TipoDomicilioID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PpalRepresentanteProveedorDomicilio_PpalRepresentanteProveedorID_DomicilioID_TipoDomicilioID]
    ON [dbo].[PpalRepresentanteProveedorDomicilio]([PpalRepresentanteProveedorID] ASC, [EspDomicilioID] ASC, [CfgTipoDomicilioID] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalRepresentanteProveedorFecha]...';


GO
CREATE TABLE [dbo].[PpalRepresentanteProveedorFecha] (
    [PpalRepresentanteProveedorFechaID] INT           IDENTITY (1, 1) NOT NULL,
    [PpalRepresentanteProveedorID]      INT           NOT NULL,
    [Fecha]                             DATE          NOT NULL,
    [CfgTipoFechaID]                    INT           NOT NULL,
    [Comentarios]                       VARCHAR (100) NOT NULL,
    [Predeterminado]                    BIT           NOT NULL,
    CONSTRAINT [PK_PpalRepresentanteProveedorFechaID] PRIMARY KEY CLUSTERED ([PpalRepresentanteProveedorFechaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalRepresentanteProveedorFecha].[IX_PpalRepresentanteProveedorFecha_PpalRepresentanteProveedorID_TipoFechaID_Fecha]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PpalRepresentanteProveedorFecha_PpalRepresentanteProveedorID_TipoFechaID_Fecha]
    ON [dbo].[PpalRepresentanteProveedorFecha]([PpalRepresentanteProveedorID] ASC, [CfgTipoFechaID] ASC, [Fecha] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalRepresentanteProveedorMail]...';


GO
CREATE TABLE [dbo].[PpalRepresentanteProveedorMail] (
    [PpalRepresentanteProveedorMailID] INT           IDENTITY (1, 1) NOT NULL,
    [PpalRepresentanteProveedorID]     INT           NOT NULL,
    [Mail]                             VARCHAR (100) NOT NULL,
    [CfgTipoMailID]                    INT           NOT NULL,
    [Predeterminado]                   BIT           NOT NULL,
    [Comentarios]                      VARCHAR (100) NOT NULL,
    CONSTRAINT [PK_PpalRepresentanteProveedorMailID] PRIMARY KEY CLUSTERED ([PpalRepresentanteProveedorMailID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalRepresentanteProveedorMail].[IX_PpalRepresentanteProveedorMail_PpalRepresentanteProveedorID_Mail]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PpalRepresentanteProveedorMail_PpalRepresentanteProveedorID_Mail]
    ON [dbo].[PpalRepresentanteProveedorMail]([PpalRepresentanteProveedorID] ASC, [Mail] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalRepresentanteProveedorTelefono]...';


GO
CREATE TABLE [dbo].[PpalRepresentanteProveedorTelefono] (
    [PpalRepresentanteProveedorTelefonoID] INT           IDENTITY (1, 1) NOT NULL,
    [PpalRepresentanteProveedorID]         INT           NOT NULL,
    [EspTelefonoID]                        INT           NOT NULL,
    [Extension]                            VARCHAR (10)  NOT NULL,
    [Predeterminado]                       BIT           NOT NULL,
    [Comentarios]                          VARCHAR (100) NOT NULL,
    [CfgUsoTelefonoID]                     INT           NOT NULL,
    CONSTRAINT [PK_PpalRepresentanteProveedorTelefonoID] PRIMARY KEY CLUSTERED ([PpalRepresentanteProveedorTelefonoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalRepresentanteProveedorTelefono].[IX_PpalRepresentanteProveedorTelefono_PpalRepresentanteProveedorID_TelefonoID_Extension]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PpalRepresentanteProveedorTelefono_PpalRepresentanteProveedorID_TelefonoID_Extension]
    ON [dbo].[PpalRepresentanteProveedorTelefono]([PpalRepresentanteProveedorID] ASC, [EspTelefonoID] ASC, [Extension] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalSerie]...';


GO
CREATE TABLE [dbo].[PpalSerie] (
    [PpalSerieID]     INT          IDENTITY (1, 1) NOT NULL,
    [TipoDocumentoID] INT          NOT NULL,
    [PpalSerieClave]  VARCHAR (10) NOT NULL,
    [FolioInicial]    INT          NOT NULL,
    [FolioFinal]      INT          NOT NULL,
    [UltimoFolio]     INT          NOT NULL,
    [Estatus]         BIT          NOT NULL,
    [Predeterminado]  BIT          NOT NULL,
    [PpalSucursalID]  INT          NULL,
    CONSTRAINT [PK_PpalSerieID] PRIMARY KEY CLUSTERED ([PpalSerieID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalSerie].[IX_PpalSerie_PpalSucursalID_TipoDocumentoID_PpalSerieClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PpalSerie_PpalSucursalID_TipoDocumentoID_PpalSerieClave]
    ON [dbo].[PpalSerie]([PpalSucursalID] ASC, [TipoDocumentoID] ASC, [PpalSerieClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[PpalSucursal]...';


GO
CREATE TABLE [dbo].[PpalSucursal] (
    [PpalSucursalID]    INT          IDENTITY (1, 1) NOT NULL,
    [PpalSucursalClave] VARCHAR (8)  NOT NULL,
    [Nombre]            VARCHAR (70) NOT NULL,
    [NombreCorto]       VARCHAR (10) NOT NULL,
    [EmpresaID]         INT          NOT NULL,
    [EspDomicilioID]    INT          NOT NULL,
    CONSTRAINT [PK_sucursales] PRIMARY KEY CLUSTERED ([PpalSucursalID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PpalSucursal].[IX_Sucursal_EmpresaID_SucursalClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Sucursal_EmpresaID_SucursalClave]
    ON [dbo].[PpalSucursal]([EmpresaID] ASC, [PpalSucursalClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[PptoAdiDetEgr]...';


GO
CREATE TABLE [dbo].[PptoAdiDetEgr] (
    [PptoAdiDetEgrID] INT   IDENTITY (1, 1) NOT NULL,
    [PptoAdiEncEgrID] INT   NOT NULL,
    [PptoPerEgrID]    INT   NOT NULL,
    [Importe]         MONEY NULL,
    CONSTRAINT [PK_PptoAdiDetEgr] PRIMARY KEY CLUSTERED ([PptoAdiDetEgrID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PptoAdiDetEgr].[IX_PptoAdiDetEgr]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PptoAdiDetEgr]
    ON [dbo].[PptoAdiDetEgr]([PptoAdiEncEgrID] ASC, [PptoPerEgrID] ASC);


GO
PRINT N'Creando Tabla [dbo].[PptoAdiDetIng]...';


GO
CREATE TABLE [dbo].[PptoAdiDetIng] (
    [PptoAdiDetIngID] INT   IDENTITY (1, 1) NOT NULL,
    [PptoAdiEncIngID] INT   NOT NULL,
    [PptoPerIngID]    INT   NOT NULL,
    [Importe]         MONEY NULL,
    CONSTRAINT [PK_PptoAdiDetIng] PRIMARY KEY CLUSTERED ([PptoAdiDetIngID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PptoAdiDetIng].[IX_PptoAdiDetIng]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PptoAdiDetIng]
    ON [dbo].[PptoAdiDetIng]([PptoAdiEncIngID] ASC, [PptoPerIngID] ASC);


GO
PRINT N'Creando Tabla [dbo].[PptoAdiEncEgr]...';


GO
CREATE TABLE [dbo].[PptoAdiEncEgr] (
    [PptoAdiEncEgrID]    INT           IDENTITY (1, 1) NOT NULL,
    [PptoEncEgrID]       INT           NOT NULL,
    [FechaHora]          DATETIME      NULL,
    [EstatusDocumentoID] VARCHAR (10)  NOT NULL,
    [Comentarios]        VARCHAR (200) NULL,
    CONSTRAINT [PK_PptoAdiEncEgr] PRIMARY KEY CLUSTERED ([PptoAdiEncEgrID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PptoAdiEncEgr].[IX_PptoAdiEncEgr]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PptoAdiEncEgr]
    ON [dbo].[PptoAdiEncEgr]([PptoEncEgrID] ASC, [FechaHora] ASC);


GO
PRINT N'Creando Tabla [dbo].[PptoAdiEncIng]...';


GO
CREATE TABLE [dbo].[PptoAdiEncIng] (
    [PptoAdiEncIngID]    INT           IDENTITY (1, 1) NOT NULL,
    [PptoEncIngID]       INT           NOT NULL,
    [EstatusDocumentoID] VARCHAR (10)  NOT NULL,
    [FechaHora]          DATETIME      NULL,
    [Comentarios]        VARCHAR (200) NULL,
    CONSTRAINT [PK_PptoAdiEncIng] PRIMARY KEY CLUSTERED ([PptoAdiEncIngID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PptoAdiEncIng].[IX_PptoAdiEncIng]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PptoAdiEncIng]
    ON [dbo].[PptoAdiEncIng]([PptoEncIngID] ASC, [FechaHora] ASC);


GO
PRINT N'Creando Tabla [dbo].[PptoConcepto]...';


GO
CREATE TABLE [dbo].[PptoConcepto] (
    [PptoConceptoID] INT           IDENTITY (1, 1) NOT NULL,
    [Concepto]       VARCHAR (500) NOT NULL,
    [EmpresaID]      INT           NOT NULL,
    CONSTRAINT [PK_PptoConcepto] PRIMARY KEY CLUSTERED ([PptoConceptoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PptoConcepto].[IX_PptoConcepto_EmpresaID_Concepto]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PptoConcepto_EmpresaID_Concepto]
    ON [dbo].[PptoConcepto]([EmpresaID] ASC, [Concepto] ASC);


GO
PRINT N'Creando Tabla [dbo].[PptoDedDetEgr]...';


GO
CREATE TABLE [dbo].[PptoDedDetEgr] (
    [PptoDedDetEgrID] INT   IDENTITY (1, 1) NOT NULL,
    [PptoDedEncEgrID] INT   NOT NULL,
    [PptoDetEgrID]    INT   NOT NULL,
    [Importe]         MONEY NULL,
    CONSTRAINT [PK_PptoDedDetEgr] PRIMARY KEY CLUSTERED ([PptoDedDetEgrID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PptoDedDetEgr].[IX_PptoDedDetEgr]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PptoDedDetEgr]
    ON [dbo].[PptoDedDetEgr]([PptoDedEncEgrID] ASC, [PptoDetEgrID] ASC);


GO
PRINT N'Creando Tabla [dbo].[PptoDedDetIng]...';


GO
CREATE TABLE [dbo].[PptoDedDetIng] (
    [PptoDedDetIngID] INT   IDENTITY (1, 1) NOT NULL,
    [PptoDedEncIngID] INT   NOT NULL,
    [PptoDetIngID]    INT   NOT NULL,
    [Importe]         MONEY NULL,
    CONSTRAINT [PK_PptoDedDetIng] PRIMARY KEY CLUSTERED ([PptoDedDetIngID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PptoDedDetIng].[IX_PptoDedDetIng]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PptoDedDetIng]
    ON [dbo].[PptoDedDetIng]([PptoDedEncIngID] ASC, [PptoDetIngID] ASC);


GO
PRINT N'Creando Tabla [dbo].[PptoDedEncEgr]...';


GO
CREATE TABLE [dbo].[PptoDedEncEgr] (
    [PptoDedEncEgrID]    INT           IDENTITY (1, 1) NOT NULL,
    [PptoEncEgrID]       INT           NOT NULL,
    [FechaHora]          DATETIME      NULL,
    [EstatusDocumentoID] VARCHAR (10)  NOT NULL,
    [Comentarios]        VARCHAR (200) NULL,
    CONSTRAINT [PK_PptoDedEncEgr] PRIMARY KEY CLUSTERED ([PptoDedEncEgrID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PptoDedEncEgr].[IX_PptoDedEncEgr]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PptoDedEncEgr]
    ON [dbo].[PptoDedEncEgr]([PptoEncEgrID] ASC, [FechaHora] ASC);


GO
PRINT N'Creando Tabla [dbo].[PptoDedEncIng]...';


GO
CREATE TABLE [dbo].[PptoDedEncIng] (
    [PptoDedEncIngID]    INT           IDENTITY (1, 1) NOT NULL,
    [PptoEncIngID]       INT           NOT NULL,
    [FechaHora]          DATETIME      NULL,
    [EstatusDocumentoID] VARCHAR (10)  NOT NULL,
    [Comentarios]        VARCHAR (200) NULL,
    CONSTRAINT [PK_PptoDedEncIng] PRIMARY KEY CLUSTERED ([PptoDedEncIngID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PptoDedEncIng].[IX_PptoDedEncIng]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PptoDedEncIng]
    ON [dbo].[PptoDedEncIng]([PptoEncIngID] ASC, [FechaHora] ASC);


GO
PRINT N'Creando Tabla [dbo].[PptoDesgEgr]...';


GO
CREATE TABLE [dbo].[PptoDesgEgr] (
    [PptoDesgEgrID]     INT   IDENTITY (1, 1) NOT NULL,
    [PptoPerEgrID]      INT   NULL,
    [PptoConceptoID]    INT   NOT NULL,
    [ImporteSolicitado] MONEY NULL,
    CONSTRAINT [PK_PptoDesgEgr] PRIMARY KEY CLUSTERED ([PptoDesgEgrID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PptoDesgEgr].[IX_PptoDesgEgr]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PptoDesgEgr]
    ON [dbo].[PptoDesgEgr]([PptoPerEgrID] ASC, [PptoConceptoID] ASC);


GO
PRINT N'Creando Tabla [dbo].[PptoDesgIng]...';


GO
CREATE TABLE [dbo].[PptoDesgIng] (
    [PptoDesgIngID]     INT   IDENTITY (1, 1) NOT NULL,
    [PptoPerIngID]      INT   NULL,
    [PptoConceptoID]    INT   NOT NULL,
    [ImporteSolicitado] MONEY NULL,
    CONSTRAINT [PK_PptoDesgIng] PRIMARY KEY CLUSTERED ([PptoDesgIngID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[PptoDetEgr]...';


GO
CREATE TABLE [dbo].[PptoDetEgr] (
    [PptoDetEgrID]         INT IDENTITY (1, 1) NOT NULL,
    [PptoEncEgrID]         INT NOT NULL,
    [ConceptoEgresoID]     INT NOT NULL,
    [PpalCuentaContableID] INT NOT NULL,
    [RubroContableID]      INT NOT NULL,
    CONSTRAINT [PK_PptoDetEgr] PRIMARY KEY CLUSTERED ([PptoDetEgrID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PptoDetEgr].[IX_PptoDetEgr]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PptoDetEgr]
    ON [dbo].[PptoDetEgr]([PptoEncEgrID] ASC, [RubroContableID] ASC, [ConceptoEgresoID] ASC);


GO
PRINT N'Creando Tabla [dbo].[PptoDetIng]...';


GO
CREATE TABLE [dbo].[PptoDetIng] (
    [PptoDetIngID]          INT IDENTITY (1, 1) NOT NULL,
    [PptoEncIngID]          INT NOT NULL,
    [PpalConceptoIngresoID] INT NOT NULL,
    [PpalCuentaContableID]  INT NOT NULL,
    [RubroContableID]       INT NOT NULL,
    CONSTRAINT [PK_PptoDetIng] PRIMARY KEY CLUSTERED ([PptoDetIngID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PptoDetIng].[IX_PptoDetIng]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PptoDetIng]
    ON [dbo].[PptoDetIng]([PptoEncIngID] ASC, [RubroContableID] ASC, [PpalConceptoIngresoID] ASC);


GO
PRINT N'Creando Tabla [dbo].[PptoEncEgr]...';


GO
CREATE TABLE [dbo].[PptoEncEgr] (
    [PptoEncEgrID]         INT          IDENTITY (1, 1) NOT NULL,
    [PpalCentroCostoID]    INT          NOT NULL,
    [EstatusDocumentoID]   VARCHAR (10) NOT NULL,
    [PpalCuentaContableID] INT          NOT NULL,
    CONSTRAINT [PK_PptoEncEgr] PRIMARY KEY CLUSTERED ([PptoEncEgrID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PptoEncEgr].[IX_PptoEncEgr]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PptoEncEgr]
    ON [dbo].[PptoEncEgr]([PpalCentroCostoID] ASC);


GO
PRINT N'Creando Tabla [dbo].[PptoEncIng]...';


GO
CREATE TABLE [dbo].[PptoEncIng] (
    [PptoEncIngID]         INT          IDENTITY (1, 1) NOT NULL,
    [PpalCentroCostoID]    INT          NOT NULL,
    [EstatusDocumentoID]   VARCHAR (10) NOT NULL,
    [PpalCuentaContableID] INT          NOT NULL,
    CONSTRAINT [PK_PptoEncIng] PRIMARY KEY CLUSTERED ([PptoEncIngID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[PptoPerEgr]...';


GO
CREATE TABLE [dbo].[PptoPerEgr] (
    [PptoPerEgrID]          INT   IDENTITY (1, 1) NOT NULL,
    [PptoDetEgrID]          INT   NOT NULL,
    [CfgPeriodoOperativoID] INT   NOT NULL,
    [ImporteMeta]           MONEY NULL,
    [ImporteSolicitado]     MONEY NULL,
    [ImporteBase]           MONEY NULL,
    [ImporteEjercido]       MONEY NULL,
    CONSTRAINT [PK_PptoPerEgr] PRIMARY KEY CLUSTERED ([PptoPerEgrID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[PptoPerIng]...';


GO
CREATE TABLE [dbo].[PptoPerIng] (
    [PptoPerIngID]          INT   IDENTITY (1, 1) NOT NULL,
    [PptoDetIngID]          INT   NOT NULL,
    [CfgPeriodoOperativoID] INT   NOT NULL,
    [ImporteMeta]           MONEY NULL,
    [ImporteSolicitado]     MONEY NULL,
    [ImporteBase]           MONEY NULL,
    [ImporteEjercido]       MONEY NULL,
    CONSTRAINT [PK_PptoPerING] PRIMARY KEY CLUSTERED ([PptoPerIngID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[PptoTrasDetEgr]...';


GO
CREATE TABLE [dbo].[PptoTrasDetEgr] (
    [PptoTrasDetEgrID] INT   IDENTITY (1, 1) NOT NULL,
    [PptoTrasEncEgrID] INT   NOT NULL,
    [PptoDetEgrIDAdi]  INT   NOT NULL,
    [PptoDetEgrIDDed]  INT   NOT NULL,
    [Importe]          MONEY NULL,
    CONSTRAINT [PK_PptoTrasDetEgr] PRIMARY KEY CLUSTERED ([PptoTrasDetEgrID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PptoTrasDetEgr].[IX_PptoTrasDetEgr]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PptoTrasDetEgr]
    ON [dbo].[PptoTrasDetEgr]([PptoTrasEncEgrID] ASC, [PptoDetEgrIDAdi] ASC, [PptoDetEgrIDDed] ASC);


GO
PRINT N'Creando Tabla [dbo].[PptoTrasDetIng]...';


GO
CREATE TABLE [dbo].[PptoTrasDetIng] (
    [PptoTrasDetIngID] INT   IDENTITY (1, 1) NOT NULL,
    [PptoTrasEncIngID] INT   NOT NULL,
    [PptoDetIngIDAdi]  INT   NOT NULL,
    [PptoDetIngIDDed]  INT   NOT NULL,
    [Importe]          MONEY NULL,
    CONSTRAINT [PK_PptoTrasDetIng] PRIMARY KEY CLUSTERED ([PptoTrasDetIngID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PptoTrasDetIng].[IX_PptoTrasDetIng]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PptoTrasDetIng]
    ON [dbo].[PptoTrasDetIng]([PptoTrasEncIngID] ASC, [PptoDetIngIDAdi] ASC, [PptoDetIngIDDed] ASC);


GO
PRINT N'Creando Tabla [dbo].[PptoTrasEncEgr]...';


GO
CREATE TABLE [dbo].[PptoTrasEncEgr] (
    [PptoTrasEncEgrID]   INT           IDENTITY (1, 1) NOT NULL,
    [PptoEncEgrID]       INT           NOT NULL,
    [FechaHora]          DATETIME      NULL,
    [EstatusDocumentoID] VARCHAR (10)  NOT NULL,
    [Comentarios]        VARCHAR (200) NULL,
    CONSTRAINT [PK_PptoTrasEncEgr] PRIMARY KEY CLUSTERED ([PptoTrasEncEgrID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PptoTrasEncEgr].[IX_PptoTrasEncEgr]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PptoTrasEncEgr]
    ON [dbo].[PptoTrasEncEgr]([PptoEncEgrID] ASC, [FechaHora] ASC);


GO
PRINT N'Creando Tabla [dbo].[PptoTrasEncIng]...';


GO
CREATE TABLE [dbo].[PptoTrasEncIng] (
    [PptoTrasEncIngID]   INT           IDENTITY (1, 1) NOT NULL,
    [PptoEncIngID]       INT           NOT NULL,
    [FechaHora]          DATETIME      NOT NULL,
    [EstatusDocumentoID] VARCHAR (10)  NOT NULL,
    [Comentarios]        VARCHAR (200) NULL,
    CONSTRAINT [PK_PptoTrasEncIng] PRIMARY KEY CLUSTERED ([PptoTrasEncIngID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[PptoTrasEncIng].[IX_PptoTrasEncIng]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PptoTrasEncIng]
    ON [dbo].[PptoTrasEncIng]([PptoEncIngID] ASC, [FechaHora] ASC);


GO
PRINT N'Creando Tabla [dbo].[RHCuotaPatronal]...';


GO
CREATE TABLE [dbo].[RHCuotaPatronal] (
    [RHCuotaPatronalId]    INT          NOT NULL,
    [EmpresaID]            INT          NOT NULL,
    [RHCuotaPatronalClave] VARCHAR (6)  NOT NULL,
    [Nombre]               VARCHAR (60) NOT NULL,
    [NombreCorto]          VARCHAR (10) NOT NULL,
    [ConceptoEgresoID]     INT          NOT NULL,
    [FechaInicial]         DATE         NOT NULL,
    [FechaFinal]           DATE         NOT NULL,
    PRIMARY KEY CLUSTERED ([RHCuotaPatronalId] ASC)
);


GO
PRINT N'Creando Índice [dbo].[RHCuotaPatronal].[IX_RHCuotaPatronal]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_RHCuotaPatronal]
    ON [dbo].[RHCuotaPatronal]([EmpresaID] ASC, [RHCuotaPatronalClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[RubroContable]...';


GO
CREATE TABLE [dbo].[RubroContable] (
    [RubroContableID]      INT          IDENTITY (1, 1) NOT NULL,
    [Nombre]               VARCHAR (60) NOT NULL,
    [NombreCorto]          VARCHAR (10) NOT NULL,
    [PpalCuentaContableID] INT          NULL,
    [TituloRubroID]        INT          NOT NULL,
    CONSTRAINT [PK_RubroContable] PRIMARY KEY CLUSTERED ([RubroContableID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[SATRegimenFiscal]...';


GO
CREATE TABLE [dbo].[SATRegimenFiscal] (
    [SATRegimenFiscalID]    INT           IDENTITY (1, 1) NOT NULL,
    [SATRegimenFiscalClave] VARCHAR (10)  NOT NULL,
    [Nombre]                VARCHAR (110) NOT NULL,
    [NombreCorto]           VARCHAR (20)  NOT NULL,
    CONSTRAINT [PK_SATRegimenFiscal] PRIMARY KEY CLUSTERED ([SATRegimenFiscalID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SATRegimenFiscal].[IX_SATRegimenFiscal]...';


GO
CREATE NONCLUSTERED INDEX [IX_SATRegimenFiscal]
    ON [dbo].[SATRegimenFiscal]([SATRegimenFiscalClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SegLogRegla]...';


GO
CREATE TABLE [dbo].[SegLogRegla] (
    [SegLogReglaID] INT          IDENTITY (1, 1) NOT NULL,
    [SegUsuarioID]  INT          NULL,
    [TablaNombre]   VARCHAR (50) NOT NULL,
    [C]             TINYINT      NOT NULL,
    [R]             TINYINT      NOT NULL,
    [U]             TINYINT      NOT NULL,
    [D]             TINYINT      NOT NULL,
    CONSTRAINT [PK_SegLogRegla] PRIMARY KEY CLUSTERED ([SegLogReglaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SegLogRegla].[IX_SistemaLogRegla_TablaNombre_UsuarioID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaLogRegla_TablaNombre_UsuarioID]
    ON [dbo].[SegLogRegla]([TablaNombre] ASC, [SegUsuarioID] ASC);


GO
PRINT N'Creando Tabla [dbo].[SegPerfil]...';


GO
CREATE TABLE [dbo].[SegPerfil] (
    [SegPerfilID]    INT           IDENTITY (1, 1) NOT NULL,
    [SegPerfilClave] NCHAR (4)     NOT NULL,
    [Nombre]         NVARCHAR (50) NOT NULL,
    [NombreCorto]    NVARCHAR (20) NOT NULL,
    CONSTRAINT [PK_SegPerfilID] PRIMARY KEY CLUSTERED ([SegPerfilID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SegPerfil].[IX_SegPerfil_SegPerfilClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SegPerfil_SegPerfilClave]
    ON [dbo].[SegPerfil]([SegPerfilClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SegPerfilOpcion]...';


GO
CREATE TABLE [dbo].[SegPerfilOpcion] (
    [SegPerfilOpcionID] INT IDENTITY (1, 1) NOT NULL,
    [SegPerfilID]       INT NOT NULL,
    [OpcionID]          INT NOT NULL,
    CONSTRAINT [PK_SegPerfilOpcionID] PRIMARY KEY CLUSTERED ([SegPerfilOpcionID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SegPerfilOpcion].[IX_SegPerfilOpcion_SegPerfilID_OpcionID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SegPerfilOpcion_SegPerfilID_OpcionID]
    ON [dbo].[SegPerfilOpcion]([SegPerfilID] ASC, [OpcionID] ASC);


GO
PRINT N'Creando Tabla [dbo].[SegPerfilOpcionAccion]...';


GO
CREATE TABLE [dbo].[SegPerfilOpcionAccion] (
    [SegPerfilOpcionAccionID] INT IDENTITY (1, 1) NOT NULL,
    [SegPerfilOpcionID]       INT NOT NULL,
    [AccionID]                INT NOT NULL,
    CONSTRAINT [PK_SegPerfilOpcionAccionID] PRIMARY KEY CLUSTERED ([SegPerfilOpcionAccionID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SegPerfilOpcionAccion].[IX_SegPerfilOpcionAccion_SegPerfilOpcionID_AccionID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SegPerfilOpcionAccion_SegPerfilOpcionID_AccionID]
    ON [dbo].[SegPerfilOpcionAccion]([SegPerfilOpcionID] ASC, [AccionID] ASC);


GO
PRINT N'Creando Tabla [dbo].[SegUsuario]...';


GO
CREATE TABLE [dbo].[SegUsuario] (
    [SegUsuarioID]      INT            IDENTITY (1, 1) NOT NULL,
    [CorreoElectronico] NVARCHAR (150) NOT NULL,
    [Contrasena]        NVARCHAR (50)  NOT NULL,
    [Nombre]            NVARCHAR (150) NOT NULL,
    [Alias]             NVARCHAR (50)  NOT NULL,
    [Activo]            BIT            NOT NULL,
    [Intentos]          TINYINT        NOT NULL,
    [Bloqueado]         BIT            NOT NULL,
    [UsuarioAD]         NVARCHAR (50)  NOT NULL,
    [Administrador]     BIT            NOT NULL,
    [UltimoAcceso]      DATETIME       NOT NULL,
    [UltimaEmpresaID]   INT            NOT NULL,
    [UltimoModuloID]    INT            NOT NULL,
    [UltimaOpcionID]    INT            NOT NULL,
    [UltimaIP]          NVARCHAR (50)  NOT NULL,
    [LinkFoto]          VARCHAR (250)  NOT NULL,
    [EspPersonaID]      INT            NULL,
    CONSTRAINT [PK_SegUsuario] PRIMARY KEY CLUSTERED ([SegUsuarioID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SegUsuario].[IX_SegUsuario_CorreoElectronico]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SegUsuario_CorreoElectronico]
    ON [dbo].[SegUsuario]([CorreoElectronico] ASC);


GO
PRINT N'Creando Tabla [dbo].[SegUsuarioArea]...';


GO
CREATE TABLE [dbo].[SegUsuarioArea] (
    [SegUsuarioAreaID] INT IDENTITY (1, 1) NOT NULL,
    [SegUsuarioID]     INT NOT NULL,
    [PpalAreaID]       INT NOT NULL,
    CONSTRAINT [PK_SegUsuarioArea] PRIMARY KEY CLUSTERED ([SegUsuarioAreaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SegUsuarioArea].[IX_SegUsuarioArea_SegUsuarioID_PpalAreaID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SegUsuarioArea_SegUsuarioID_PpalAreaID]
    ON [dbo].[SegUsuarioArea]([SegUsuarioID] ASC, [PpalAreaID] ASC);


GO
PRINT N'Creando Tabla [dbo].[SegUsuarioCentroCosto]...';


GO
CREATE TABLE [dbo].[SegUsuarioCentroCosto] (
    [SegUsuarioCentroCostoID] INT IDENTITY (1, 1) NOT NULL,
    [SegUsuarioID]            INT NOT NULL,
    [PpalCentroCostoID]       INT NOT NULL,
    CONSTRAINT [PK_SegUsuarioCentroCosto] PRIMARY KEY CLUSTERED ([SegUsuarioCentroCostoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SegUsuarioCentroCosto].[IX_SegUsuarioCentroCosto_SegUsuarioID_PpalCentroCostoID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SegUsuarioCentroCosto_SegUsuarioID_PpalCentroCostoID]
    ON [dbo].[SegUsuarioCentroCosto]([SegUsuarioID] ASC, [PpalCentroCostoID] ASC);


GO
PRINT N'Creando Tabla [dbo].[SegUsuarioConceptoEgreso]...';


GO
CREATE TABLE [dbo].[SegUsuarioConceptoEgreso] (
    [SegUsuarioConceptoEgresoID] INT IDENTITY (1, 1) NOT NULL,
    [SegUsuarioID]               INT NOT NULL,
    [PpalConceptoEgresoID]       INT NOT NULL,
    CONSTRAINT [PK_SegUsuarioConceptoEgreso] PRIMARY KEY CLUSTERED ([SegUsuarioConceptoEgresoID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[SegUsuarioEstatusDocumento]...';


GO
CREATE TABLE [dbo].[SegUsuarioEstatusDocumento] (
    [SegUsuarioEstatusDocumentoID] INT   IDENTITY (1, 1) NOT NULL,
    [SegUsuarioID]                 INT   NOT NULL,
    [CfgEstatusDocumentoID]        INT   NOT NULL,
    [PpalCentroCostoID]            INT   NULL,
    [PpalAreaID]                   INT   NULL,
    [EmpresaID]                    INT   NULL,
    [PpalAlmacenID]                INT   NULL,
    [PpalSucursalID]               INT   NULL,
    [Monto]                        MONEY NULL,
    CONSTRAINT [PK_SegUsuarioEstatusDocumentoPermiso] PRIMARY KEY CLUSTERED ([SegUsuarioEstatusDocumentoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SegUsuarioEstatusDocumento].[IX_SegUsuarioEstatusDocumento]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SegUsuarioEstatusDocumento]
    ON [dbo].[SegUsuarioEstatusDocumento]([SegUsuarioID] ASC, [CfgEstatusDocumentoID] ASC, [EmpresaID] ASC, [PpalSucursalID] ASC, [PpalAreaID] ASC, [PpalAlmacenID] ASC, [PpalCentroCostoID] ASC);


GO
PRINT N'Creando Tabla [dbo].[SegUsuarioPerfil]...';


GO
CREATE TABLE [dbo].[SegUsuarioPerfil] (
    [SegUsuarioPerfilID] INT IDENTITY (1, 1) NOT NULL,
    [SegUsuarioID]       INT NOT NULL,
    [SegPerfilID]        INT NOT NULL,
    [EmpresaID]          INT NOT NULL,
    CONSTRAINT [PK_SegUsuarioPerfil] PRIMARY KEY CLUSTERED ([SegUsuarioPerfilID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[SegUsuarioSucursal]...';


GO
CREATE TABLE [dbo].[SegUsuarioSucursal] (
    [SegUsuarioSucursalID] INT IDENTITY (1, 1) NOT NULL,
    [SegUsuarioID]         INT NOT NULL,
    [PpalSucursalID]       INT NOT NULL,
    CONSTRAINT [PK_SegUsuarioSucursal] PRIMARY KEY CLUSTERED ([SegUsuarioSucursalID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SegUsuarioSucursal].[IX_SegUsuarioSucursal_SegUsuarioID_PpalSucursalID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SegUsuarioSucursal_SegUsuarioID_PpalSucursalID]
    ON [dbo].[SegUsuarioSucursal]([SegUsuarioID] ASC, [PpalSucursalID] ASC);


GO
PRINT N'Creando Tabla [dbo].[SegUsuarioTipoDocumento]...';


GO
CREATE TABLE [dbo].[SegUsuarioTipoDocumento] (
    [SegUsuarioTipoDocumentoPermisoID] INT   IDENTITY (1, 1) NOT NULL,
    [SegUsuarioID]                     INT   NOT NULL,
    [TipoDocumentoID]                  INT   NOT NULL,
    [PpalCentroCostoID]                INT   NOT NULL,
    [PpalAreaID]                       INT   NOT NULL,
    [EmpresaID]                        INT   NOT NULL,
    [PpalAlmacenID]                    INT   NOT NULL,
    [PpalSucursalID]                   INT   NOT NULL,
    [Preautoriza]                      BIT   NOT NULL,
    [PreautorizarMonto]                MONEY NOT NULL,
    [Autoriza]                         BIT   NOT NULL,
    [AutorizarMonto]                   MONEY NOT NULL,
    CONSTRAINT [PK_SegUsuarioTipoDocumentoPermiso] PRIMARY KEY CLUSTERED ([SegUsuarioTipoDocumentoPermisoID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[SistemaAccion]...';


GO
CREATE TABLE [dbo].[SistemaAccion] (
    [AccionID]    INT           IDENTITY (1, 1) NOT NULL,
    [AccionClave] NVARCHAR (30) NOT NULL,
    [Nombre]      NVARCHAR (50) NOT NULL,
    [NombreCorto] NVARCHAR (20) NOT NULL,
    CONSTRAINT [PK_SistemaAccion] PRIMARY KEY CLUSTERED ([AccionID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaAccion].[IX_SistemaAccionClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaAccionClave]
    ON [dbo].[SistemaAccion]([AccionClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaBitacoraEstatus]...';


GO
CREATE TABLE [dbo].[SistemaBitacoraEstatus] (
    [BitacoraEstatusID]                 INT      IDENTITY (1, 1) NOT NULL,
    [TipoDocumentoID]                   INT      NOT NULL,
    [DocumentoID]                       INT      NOT NULL,
    [UsuarioID]                         INT      NOT NULL,
    [SistemaEstatusDocumentoID]         INT      NOT NULL,
    [SistemaEstatusDocumentoIDAnterior] INT      NOT NULL,
    [FechaHora]                         DATETIME NOT NULL,
    CONSTRAINT [PK_SistemaBitacoraEstatus] PRIMARY KEY CLUSTERED ([BitacoraEstatusID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[SistemaClaseProducto]...';


GO
CREATE TABLE [dbo].[SistemaClaseProducto] (
    [ClaseProductoID]    INT          IDENTITY (1, 1) NOT NULL,
    [ClaseProductoClave] VARCHAR (4)  NOT NULL,
    [Nombre]             VARCHAR (25) NOT NULL,
    [NombreCorto]        VARCHAR (8)  NOT NULL,
    CONSTRAINT [PK_ClaseProducto] PRIMARY KEY CLUSTERED ([ClaseProductoID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[SistemaConfiguracion]...';


GO
CREATE TABLE [dbo].[SistemaConfiguracion] (
    [ConfiguracionID]     INT           IDENTITY (1, 1) NOT NULL,
    [Nombre]              NVARCHAR (50) NOT NULL,
    [MaximoIntentosLogin] TINYINT       NULL,
    [Activa]              BIT           NOT NULL,
    CONSTRAINT [PK_SistemaConfiguracion] PRIMARY KEY CLUSTERED ([ConfiguracionID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[SistemaCS]...';


GO
CREATE TABLE [dbo].[SistemaCS] (
    [Tabla]      NVARCHAR (50) NOT NULL,
    [NS]         NVARCHAR (50) NULL,
    [ModuloID]   INT           NULL,
    [gEntidad]   BIT           NULL,
    [gASPX]      BIT           NULL,
    [gAPI]       BIT           NULL,
    [gAPIClient] BIT           NULL,
    [gSQL]       BIT           NULL,
    [gNegocio]   BIT           NULL,
    [dSQL]       BIT           NULL,
    CONSTRAINT [PK_SistemaCS] PRIMARY KEY CLUSTERED ([Tabla] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[SistemaCSConfig]...';


GO
CREATE TABLE [dbo].[SistemaCSConfig] (
    [NS]            NVARCHAR (50)  NOT NULL,
    [EntidadesDir]  NVARCHAR (150) NULL,
    [APIDir]        NVARCHAR (150) NULL,
    [APIClienteDir] NVARCHAR (150) NULL,
    [SQLDir]        NVARCHAR (150) NULL,
    [ASPXDir]       NVARCHAR (150) NULL,
    [SitemapDir]    NVARCHAR (150) NULL,
    [NegocioDir]    NVARCHAR (150) NULL,
    PRIMARY KEY CLUSTERED ([NS] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[SistemaEmpresa]...';


GO
CREATE TABLE [dbo].[SistemaEmpresa] (
    [EmpresaID]    INT           IDENTITY (1, 1) NOT NULL,
    [Nombre]       VARCHAR (120) NOT NULL,
    [NombreCorto]  VARCHAR (20)  NOT NULL,
    [EmpresaClave] VARCHAR (6)   NOT NULL,
    [EspPersonaID] INT           NOT NULL,
    CONSTRAINT [PK_SistemaEmpresa] PRIMARY KEY CLUSTERED ([EmpresaID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[SistemaEstatusDocumento]...';


GO
CREATE TABLE [dbo].[SistemaEstatusDocumento] (
    [SistemaEstatusDocumentoID]    INT          IDENTITY (1, 1) NOT NULL,
    [SistemaEstatusDocumentoClave] VARCHAR (4)  NOT NULL,
    [Nombre]                       VARCHAR (30) NOT NULL,
    [NombreCorto]                  VARCHAR (10) NOT NULL,
    CONSTRAINT [PK_SistemaEstatusDocumento] PRIMARY KEY CLUSTERED ([SistemaEstatusDocumentoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaEstatusDocumento].[IX_SistemaEstatusDocumento_SistemaEstatusDocumentoClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaEstatusDocumento_SistemaEstatusDocumentoClave]
    ON [dbo].[SistemaEstatusDocumento]([SistemaEstatusDocumentoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaEstatusDocumentoOpcion]...';


GO
CREATE TABLE [dbo].[SistemaEstatusDocumentoOpcion] (
    [EstatusDocumentoOpcionID] INT IDENTITY (1, 1) NOT NULL,
    [OpcionID]                 INT NOT NULL,
    [EstatusTipoDocumentoID]   INT NOT NULL,
    CONSTRAINT [PK_SistemaEstatusDocumentoOpcion] PRIMARY KEY CLUSTERED ([EstatusDocumentoOpcionID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaEstatusDocumentoOpcion].[IX_SistemaEstatusDocumentoOpcion]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaEstatusDocumentoOpcion]
    ON [dbo].[SistemaEstatusDocumentoOpcion]([OpcionID] ASC, [EstatusTipoDocumentoID] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaEstatusPersona]...';


GO
CREATE TABLE [dbo].[SistemaEstatusPersona] (
    [EstatusPersonaID]    INT          IDENTITY (1, 1) NOT NULL,
    [EstatusPersonaClave] VARCHAR (4)  NOT NULL,
    [Nombre]              VARCHAR (30) NOT NULL,
    [NombreCorto]         VARCHAR (10) NOT NULL,
    CONSTRAINT [PK_SistemaEstatusPersona] PRIMARY KEY CLUSTERED ([EstatusPersonaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaEstatusPersona].[IX_SistemaEstatusPersona_EstatusPersonaClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaEstatusPersona_EstatusPersonaClave]
    ON [dbo].[SistemaEstatusPersona]([EstatusPersonaClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaEstatusProducto]...';


GO
CREATE TABLE [dbo].[SistemaEstatusProducto] (
    [EstatusProductoID]    INT          IDENTITY (1, 1) NOT NULL,
    [EstatusProductoClave] VARCHAR (4)  NOT NULL,
    [Nombre]               VARCHAR (25) NOT NULL,
    [NombreCorto]          VARCHAR (8)  NOT NULL,
    CONSTRAINT [PK_EstatusProducto] PRIMARY KEY CLUSTERED ([EstatusProductoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaEstatusProducto].[IX_SistemaEstatusProducto_EstatusProductoClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaEstatusProducto_EstatusProductoClave]
    ON [dbo].[SistemaEstatusProducto]([EstatusProductoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaEstatusRegla]...';


GO
CREATE TABLE [dbo].[SistemaEstatusRegla] (
    [EstatusReglaID]                       INT IDENTITY (1, 1) NOT NULL,
    [SistemaEstatusTipoDocumentoIDPermite] INT NOT NULL,
    [SistemaEstatusTipoDocumentoID]        INT NOT NULL,
    CONSTRAINT [PK_SistemaEstatusRegla] PRIMARY KEY CLUSTERED ([EstatusReglaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaEstatusRegla].[IX_SistemaEstatusRegla_SistemaEstatusTipoDocumentoIDPermite_SistemaEstatusTipoDocumentoID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaEstatusRegla_SistemaEstatusTipoDocumentoIDPermite_SistemaEstatusTipoDocumentoID]
    ON [dbo].[SistemaEstatusRegla]([SistemaEstatusTipoDocumentoIDPermite] ASC, [SistemaEstatusTipoDocumentoID] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaEstatusTelefono]...';


GO
CREATE TABLE [dbo].[SistemaEstatusTelefono] (
    [EstatusTelefonoID]    INT          IDENTITY (1, 1) NOT NULL,
    [EstatusTelefonoClave] VARCHAR (4)  NOT NULL,
    [Nombre]               VARCHAR (25) NOT NULL,
    [NombreCorto]          VARCHAR (8)  NOT NULL,
    CONSTRAINT [PK_EstatusTelefono] PRIMARY KEY CLUSTERED ([EstatusTelefonoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaEstatusTelefono].[IX_SistemaEstatusTelefono_EstatusTelefonoClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaEstatusTelefono_EstatusTelefonoClave]
    ON [dbo].[SistemaEstatusTelefono]([EstatusTelefonoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaEstatusTipoDocumento]...';


GO
CREATE TABLE [dbo].[SistemaEstatusTipoDocumento] (
    [SistemaEstatusTipoDocumentoID] INT IDENTITY (1, 1) NOT NULL,
    [SistemaEstatusDocumentoID]     INT NOT NULL,
    [TipoDocumentoID]               INT NOT NULL,
    [Predeterminado]                BIT NOT NULL,
    [Restringido]                   BIT NOT NULL,
    [Monto]                         BIT NOT NULL,
    [Propietario]                   BIT NOT NULL,
    [Sistema]                       BIT NOT NULL,
    [EmpresaID]                     INT NOT NULL,
    CONSTRAINT [PK_SistemaEstatusTipoDocumento] PRIMARY KEY CLUSTERED ([SistemaEstatusTipoDocumentoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaEstatusTipoDocumento].[IX_SistemaEstatusTipoDocumento_EmpresaID_SistemaEstatusDocumentoID_TipoDocumentoID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaEstatusTipoDocumento_EmpresaID_SistemaEstatusDocumentoID_TipoDocumentoID]
    ON [dbo].[SistemaEstatusTipoDocumento]([EmpresaID] ASC, [SistemaEstatusDocumentoID] ASC, [TipoDocumentoID] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaGrupo]...';


GO
CREATE TABLE [dbo].[SistemaGrupo] (
    [SistemaGrupoID] INT          IDENTITY (1, 1) NOT NULL,
    [Nombre]         VARCHAR (50) NOT NULL,
    [ModuloID]       INT          NOT NULL,
    [Activo]         BIT          NOT NULL,
    CONSTRAINT [PK_SistemaGrupo] PRIMARY KEY CLUSTERED ([SistemaGrupoID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creando Tabla [dbo].[SistemaGrupoEstatus]...';


GO
CREATE TABLE [dbo].[SistemaGrupoEstatus] (
    [SistemaGrupoEstatusID] INT          IDENTITY (1, 1) NOT NULL,
    [SistemaGrupoID]        INT          NOT NULL,
    [Nombre]                VARCHAR (50) NOT NULL,
    [TipoDocumentoID]       INT          NOT NULL,
    [Color]                 VARCHAR (30) NOT NULL,
    [Activo]                BIT          NOT NULL,
    CONSTRAINT [PK_SistemaGrupoEstatus] PRIMARY KEY CLUSTERED ([SistemaGrupoEstatusID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaGrupoEstatus].[IX_SistemaGrupo_SistemaGrupoID_TipoDocumentoID_Nombre]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaGrupo_SistemaGrupoID_TipoDocumentoID_Nombre]
    ON [dbo].[SistemaGrupoEstatus]([SistemaGrupoID] ASC, [TipoDocumentoID] ASC, [Nombre] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaGrupoRegla]...';


GO
CREATE TABLE [dbo].[SistemaGrupoRegla] (
    [SistemaGrupoReglaID]           INT IDENTITY (1, 1) NOT NULL,
    [SistemaGrupoEstatusID]         INT NOT NULL,
    [SistemaEstatusTipoDocumentoID] INT NOT NULL,
    [Activo]                        BIT NOT NULL,
    CONSTRAINT [PK_SistemaReporteRegla] PRIMARY KEY CLUSTERED ([SistemaGrupoReglaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaGrupoRegla].[IX_SistemaGrupoRegla_SistemaGrupoEstatusID_SistemaEstatusTipoDocumentoID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaGrupoRegla_SistemaGrupoEstatusID_SistemaEstatusTipoDocumentoID]
    ON [dbo].[SistemaGrupoRegla]([SistemaGrupoEstatusID] ASC, [SistemaEstatusTipoDocumentoID] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaLog]...';


GO
CREATE TABLE [dbo].[SistemaLog] (
    [SistemaLogID]       INT           IDENTITY (1, 1) NOT NULL,
    [TablaNombre]        VARCHAR (100) NOT NULL,
    [TablaID]            INT           NOT NULL,
    [TablaColumna1]      VARCHAR (100) NOT NULL,
    [TablaColumna2]      VARCHAR (100) NOT NULL,
    [Operacion]          VARCHAR (10)  NOT NULL,
    [UsuarioID]          INT           NOT NULL,
    [Descripcion]        VARCHAR (500) NOT NULL,
    [Cambios]            TEXT          NOT NULL,
    [IpAddress]          VARCHAR (40)  NOT NULL,
    [HostName]           VARCHAR (50)  NOT NULL,
    [FechaHoraCambioUTC] DATETIME2 (7) NOT NULL,
    CONSTRAINT [PK_SistemaLog] PRIMARY KEY CLUSTERED ([SistemaLogID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[SistemaLogBAK]...';


GO
CREATE TABLE [dbo].[SistemaLogBAK] (
    [SistemaLogID]       INT           IDENTITY (1, 1) NOT NULL,
    [TablaNombre]        VARCHAR (100) NOT NULL,
    [TablaID]            INT           NOT NULL,
    [TablaColumna1]      VARCHAR (100) NOT NULL,
    [TablaColumna2]      VARCHAR (100) NOT NULL,
    [Operacion]          VARCHAR (10)  NOT NULL,
    [UsuarioID]          INT           NOT NULL,
    [Descripcion]        VARCHAR (500) NOT NULL,
    [Cambios]            TEXT          NOT NULL,
    [IpAddress]          VARCHAR (40)  NOT NULL,
    [HostName]           VARCHAR (50)  NOT NULL,
    [FechaHoraCambioUTC] DATETIME2 (7) NOT NULL,
    CONSTRAINT [PK__tmp_ms_x__90845A4CD90BA975] PRIMARY KEY CLUSTERED ([SistemaLogID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[SistemaMetodoCosteo]...';


GO
CREATE TABLE [dbo].[SistemaMetodoCosteo] (
    [MetodoCosteoID]    INT          IDENTITY (1, 1) NOT NULL,
    [MetodoCosteoClave] VARCHAR (4)  NOT NULL,
    [Nombre]            VARCHAR (25) NOT NULL,
    [NombreCorto]       VARCHAR (8)  NOT NULL,
    CONSTRAINT [PK_MetodoCosteo] PRIMARY KEY CLUSTERED ([MetodoCosteoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaMetodoCosteo].[IX_SistemaMetodoCosteo]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaMetodoCosteo]
    ON [dbo].[SistemaMetodoCosteo]([MetodoCosteoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaModulo]...';


GO
CREATE TABLE [dbo].[SistemaModulo] (
    [ModuloID]       INT            IDENTITY (1, 1) NOT NULL,
    [ModuloClave]    VARCHAR (4)    NOT NULL,
    [Nombre]         NVARCHAR (50)  NOT NULL,
    [NombreCorto]    NVARCHAR (20)  NOT NULL,
    [RecursoWebSite] NVARCHAR (150) NOT NULL,
    [Icono]          NVARCHAR (50)  NOT NULL,
    CONSTRAINT [PK_SistemaModulo] PRIMARY KEY CLUSTERED ([ModuloID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaModulo].[IX_SistemaModulo_ModuloClave]...';


GO
CREATE NONCLUSTERED INDEX [IX_SistemaModulo_ModuloClave]
    ON [dbo].[SistemaModulo]([ModuloClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaNaturaleza]...';


GO
CREATE TABLE [dbo].[SistemaNaturaleza] (
    [NaturalezaID]    INT          IDENTITY (1, 1) NOT NULL,
    [NaturalezaClave] VARCHAR (6)  NOT NULL,
    [Nombre]          VARCHAR (30) NOT NULL,
    [NombreCorto]     VARCHAR (10) NOT NULL,
    CONSTRAINT [PK_SistemaNaturaleza] PRIMARY KEY CLUSTERED ([NaturalezaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaNaturaleza].[IX_SistemaNaturaleza_NaturalezaClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaNaturaleza_NaturalezaClave]
    ON [dbo].[SistemaNaturaleza]([NaturalezaClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaNivelProducto]...';


GO
CREATE TABLE [dbo].[SistemaNivelProducto] (
    [NivelProductoID]    INT          IDENTITY (1, 1) NOT NULL,
    [NivelProductoClave] VARCHAR (4)  NOT NULL,
    [Nombre]             VARCHAR (25) NOT NULL,
    [NombreCorto]        VARCHAR (8)  NOT NULL,
    CONSTRAINT [PK_NivelProducto] PRIMARY KEY CLUSTERED ([NivelProductoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaNivelProducto].[IX_SistemaNivelProducto]...';


GO
CREATE NONCLUSTERED INDEX [IX_SistemaNivelProducto]
    ON [dbo].[SistemaNivelProducto]([NivelProductoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaOpcion]...';


GO
CREATE TABLE [dbo].[SistemaOpcion] (
    [OpcionID]       INT            IDENTITY (1, 1) NOT NULL,
    [ModuloID]       INT            NOT NULL,
    [PadreID]        INT            NULL,
    [Nombre]         NVARCHAR (50)  NOT NULL,
    [NombreCorto]    NVARCHAR (20)  NOT NULL,
    [RecursoWebsite] NVARCHAR (150) NOT NULL,
    [Activo]         BIT            NOT NULL,
    [Protegido]      BIT            NOT NULL,
    [Popup]          BIT            NOT NULL,
    [VisibleMenu]    BIT            NOT NULL,
    [Icono]          NVARCHAR (50)  NOT NULL,
    [Orden]          SMALLINT       NOT NULL,
    CONSTRAINT [PK_SistemaOpcion] PRIMARY KEY CLUSTERED ([OpcionID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[SistemaOpcion2]...';


GO
CREATE TABLE [dbo].[SistemaOpcion2] (
    [OpcionID]       INT            IDENTITY (1, 1) NOT NULL,
    [ModuloID]       INT            NOT NULL,
    [PadreID]        INT            NULL,
    [Nombre]         NVARCHAR (50)  NOT NULL,
    [NombreCorto]    NVARCHAR (20)  NOT NULL,
    [RecursoWebsite] NVARCHAR (150) NOT NULL,
    [Activo]         BIT            NOT NULL,
    [Protegido]      BIT            NOT NULL,
    [Popup]          BIT            NOT NULL,
    [VisibleMenu]    BIT            NOT NULL,
    [Icono]          NVARCHAR (50)  NOT NULL,
    [Orden]          SMALLINT       NOT NULL,
    CONSTRAINT [PK_SistemaOpcion2] PRIMARY KEY CLUSTERED ([OpcionID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[SistemaOpcionLista]...';


GO
CREATE TABLE [dbo].[SistemaOpcionLista] (
    [OpcionListaID] INT IDENTITY (1, 1) NOT NULL,
    [OpcionID]      INT NOT NULL,
    [SPListaID]     INT NOT NULL,
    CONSTRAINT [PK_SistemaOpcionLista] PRIMARY KEY CLUSTERED ([OpcionListaID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[SistemaOpcionTipoOpcion]...';


GO
CREATE TABLE [dbo].[SistemaOpcionTipoOpcion] (
    [OpcionTipoOpcionID] INT IDENTITY (1, 1) NOT NULL,
    [OpcionID]           INT NOT NULL,
    [TipoOpcionID]       INT NOT NULL,
    CONSTRAINT [PK_SistemaOpcionTipoOpcion] PRIMARY KEY CLUSTERED ([OpcionTipoOpcionID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaOpcionTipoOpcion].[IX_SistemaOpcionTipoOpcion_OpcionID_TipoOpcionID]...';


GO
CREATE NONCLUSTERED INDEX [IX_SistemaOpcionTipoOpcion_OpcionID_TipoOpcionID]
    ON [dbo].[SistemaOpcionTipoOpcion]([OpcionID] ASC, [TipoOpcionID] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaParamCosmos]...';


GO
CREATE TABLE [dbo].[SistemaParamCosmos] (
    [SistemaParamCosmosID]   INT           IDENTITY (1, 1) NOT NULL,
    [ClaveNoAsignado]        VARCHAR (4)   NOT NULL,
    [TituloMensajeRespuesta] VARCHAR (100) NOT NULL,
    CONSTRAINT [PK_SistemaParamCosmos] PRIMARY KEY CLUSTERED ([SistemaParamCosmosID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[SistemaParametro]...';


GO
CREATE TABLE [dbo].[SistemaParametro] (
    [SistemaParametroID] INT          IDENTITY (1, 1) NOT NULL,
    [Nombre]             VARCHAR (50) NOT NULL,
    [ModuloID]           INT          NOT NULL,
    [Valor]              VARCHAR (20) NOT NULL,
    CONSTRAINT [PK_SistemaParametro] PRIMARY KEY CLUSTERED ([SistemaParametroID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[SistemaSexo]...';


GO
CREATE TABLE [dbo].[SistemaSexo] (
    [SexoID]      INT          IDENTITY (1, 1) NOT NULL,
    [SexoClave]   VARCHAR (6)  NOT NULL,
    [Nombre]      VARCHAR (30) NOT NULL,
    [NombreCorto] VARCHAR (10) NOT NULL,
    CONSTRAINT [PK_SistemaSexo] PRIMARY KEY CLUSTERED ([SexoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaSexo].[IX_Sexo]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Sexo]
    ON [dbo].[SistemaSexo]([SexoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaSPLista]...';


GO
CREATE TABLE [dbo].[SistemaSPLista] (
    [SPListaID] INT          IDENTITY (1, 1) NOT NULL,
    [Nombre]    VARCHAR (50) NOT NULL,
    [SP]        VARCHAR (80) NOT NULL,
    CONSTRAINT [PK_SistemaSPLista] PRIMARY KEY CLUSTERED ([SPListaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaSPLista].[IX_SistemaSPLista_SP]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaSPLista_SP]
    ON [dbo].[SistemaSPLista]([SP] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaSPListaParametro]...';


GO
CREATE TABLE [dbo].[SistemaSPListaParametro] (
    [SPListaParametroID] INT          IDENTITY (1, 1) NOT NULL,
    [SPListaID]          INT          NOT NULL,
    [Parametro]          VARCHAR (30) NOT NULL,
    CONSTRAINT [PK_SistemaSPListaParametro] PRIMARY KEY CLUSTERED ([SPListaParametroID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaSPListaParametro].[IX_SistemaSPListaParametro]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaSPListaParametro]
    ON [dbo].[SistemaSPListaParametro]([SPListaID] ASC, [Parametro] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaTipoContactoPersonal]...';


GO
CREATE TABLE [dbo].[SistemaTipoContactoPersonal] (
    [TipoContactoPersonalID]    INT          IDENTITY (1, 1) NOT NULL,
    [TipoContactoPersonalClave] VARCHAR (4)  NOT NULL,
    [Nombre]                    VARCHAR (30) NOT NULL,
    [NombreCorto]               VARCHAR (10) NOT NULL,
    [Conyuge]                   BIT          NOT NULL,
    CONSTRAINT [PK_SistemaPersonalTipoContacto] PRIMARY KEY CLUSTERED ([TipoContactoPersonalID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaTipoContactoPersonal].[IX_SistemaTipoContactoPersonal_TipoContactoPersonalClave]...';


GO
CREATE NONCLUSTERED INDEX [IX_SistemaTipoContactoPersonal_TipoContactoPersonalClave]
    ON [dbo].[SistemaTipoContactoPersonal]([TipoContactoPersonalClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaTipoDocumento]...';


GO
CREATE TABLE [dbo].[SistemaTipoDocumento] (
    [TipoDocumentoID]       INT          IDENTITY (1, 1) NOT NULL,
    [TipoDocumentoClave]    VARCHAR (10) NOT NULL,
    [Nombre]                VARCHAR (30) NOT NULL,
    [NombreCorto]           VARCHAR (30) NOT NULL,
    [Activo]                BIT          NOT NULL,
    [ModuloID]              INT          NOT NULL,
    [AsignarFolioAlGuardar] BIT          NOT NULL,
    CONSTRAINT [PK_TipoDocumento] PRIMARY KEY CLUSTERED ([TipoDocumentoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaTipoDocumento].[IX_SistemaTipoDocumento_TipoDocumentoClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaTipoDocumento_TipoDocumentoClave]
    ON [dbo].[SistemaTipoDocumento]([TipoDocumentoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaTipoDocumentoRegla]...';


GO
CREATE TABLE [dbo].[SistemaTipoDocumentoRegla] (
    [TipoDocumentoReglaID]                 INT IDENTITY (1, 1) NOT NULL,
    [SistemaEstatusTipoDocumentoIDPermite] INT NOT NULL,
    [SistemaEstatusTipoDocumentoID]        INT NOT NULL,
    CONSTRAINT [PK_SistemaTipoDocumentoRegla] PRIMARY KEY CLUSTERED ([TipoDocumentoReglaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaTipoDocumentoRegla].[IX_SistemaTipoDocumentoRegla_SistemaEstatusTipoDocumentoIDPermite_SistemaEstatusTipoDocumentoID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaTipoDocumentoRegla_SistemaEstatusTipoDocumentoIDPermite_SistemaEstatusTipoDocumentoID]
    ON [dbo].[SistemaTipoDocumentoRegla]([SistemaEstatusTipoDocumentoIDPermite] ASC, [SistemaEstatusTipoDocumentoID] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaTipoDomicilio]...';


GO
CREATE TABLE [dbo].[SistemaTipoDomicilio] (
    [SistemaTipoDomicilioID]    INT          IDENTITY (1, 1) NOT NULL,
    [SistemaTipoDomicilioClave] VARCHAR (10) NOT NULL,
    [Nombre]                    VARCHAR (30) NOT NULL,
    [NombreCorto]               VARCHAR (10) NOT NULL,
    [Estatus]                   BIT          NOT NULL,
    CONSTRAINT [PK_SistemaTipoDomicilio] PRIMARY KEY CLUSTERED ([SistemaTipoDomicilioID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaTipoDomicilio].[IX_SistemaTipoDomicilio_SistemaTipoDomicilioClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaTipoDomicilio_SistemaTipoDomicilioClave]
    ON [dbo].[SistemaTipoDomicilio]([SistemaTipoDomicilioClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaTipoFecha]...';


GO
CREATE TABLE [dbo].[SistemaTipoFecha] (
    [TipoFechaID]    INT          IDENTITY (1, 1) NOT NULL,
    [TipoFechaClave] VARCHAR (10) NOT NULL,
    [Nombre]         VARCHAR (30) NOT NULL,
    [NombreCorto]    VARCHAR (10) NOT NULL,
    [Estatus]        BIT          NOT NULL,
    CONSTRAINT [PK_SistemaTipoFecha] PRIMARY KEY CLUSTERED ([TipoFechaID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaTipoFecha].[IX_SistemaTipoFecha_SistemaTipoFechaClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaTipoFecha_SistemaTipoFechaClave]
    ON [dbo].[SistemaTipoFecha]([TipoFechaClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaTipoMail]...';


GO
CREATE TABLE [dbo].[SistemaTipoMail] (
    [SistemaTipoMailID]    INT          IDENTITY (1, 1) NOT NULL,
    [SistemaTipoMailClave] VARCHAR (10) NOT NULL,
    [Nombre]               VARCHAR (30) NOT NULL,
    [NombreCorto]          VARCHAR (10) NOT NULL,
    [Estatus]              BIT          NOT NULL,
    CONSTRAINT [PK_SistemaTipoMail] PRIMARY KEY CLUSTERED ([SistemaTipoMailID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaTipoMail].[IX_SistemaTipoMail_TipoMailClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaTipoMail_TipoMailClave]
    ON [dbo].[SistemaTipoMail]([SistemaTipoMailClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaTipoOpcion]...';


GO
CREATE TABLE [dbo].[SistemaTipoOpcion] (
    [TipoOpcionID] INT           IDENTITY (1, 1) NOT NULL,
    [Nombre]       NVARCHAR (50) NOT NULL,
    [NombreCorto]  NVARCHAR (20) NOT NULL,
    CONSTRAINT [PK_SistemaTipoOpcion] PRIMARY KEY CLUSTERED ([TipoOpcionID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[SistemaTipoOpcionAccion]...';


GO
CREATE TABLE [dbo].[SistemaTipoOpcionAccion] (
    [TipoOpcionAccionID] INT IDENTITY (1, 1) NOT NULL,
    [TipoOpcionID]       INT NOT NULL,
    [AccionID]           INT NOT NULL,
    CONSTRAINT [PK_SistemaTipoOpcionAccion] PRIMARY KEY CLUSTERED ([TipoOpcionAccionID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[SistemaTipoRepresentanteCliente]...';


GO
CREATE TABLE [dbo].[SistemaTipoRepresentanteCliente] (
    [TipoRepresentanteClienteID]    INT          NOT NULL,
    [TipoRepresentanteClienteClave] VARCHAR (5)  NOT NULL,
    [Nombre]                        VARCHAR (30) NOT NULL,
    [NombreCorto]                   VARCHAR (10) NOT NULL,
    PRIMARY KEY CLUSTERED ([TipoRepresentanteClienteID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaTipoRepresentanteCliente].[IX_SistemaTipoRepresentanteCliente_TipoRepresentanteClienteClave]...';


GO
CREATE NONCLUSTERED INDEX [IX_SistemaTipoRepresentanteCliente_TipoRepresentanteClienteClave]
    ON [dbo].[SistemaTipoRepresentanteCliente]([TipoRepresentanteClienteClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaTipoRepresentanteProveedor]...';


GO
CREATE TABLE [dbo].[SistemaTipoRepresentanteProveedor] (
    [TipoRepresentanteProveedorID]    INT          IDENTITY (1, 1) NOT NULL,
    [TipoRepresentanteProveedorClave] VARCHAR (4)  NOT NULL,
    [Nombre]                          VARCHAR (30) NOT NULL,
    [NombreCorto]                     VARCHAR (10) NOT NULL,
    CONSTRAINT [PK_SistemaTipoRepresentanteProveedor] PRIMARY KEY CLUSTERED ([TipoRepresentanteProveedorID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaTipoRepresentanteProveedor].[IX_SistemaTipoRepresentanteProveedor_TipoRepresentanteProveedorClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaTipoRepresentanteProveedor_TipoRepresentanteProveedorClave]
    ON [dbo].[SistemaTipoRepresentanteProveedor]([TipoRepresentanteProveedorClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaTipoTelefono]...';


GO
CREATE TABLE [dbo].[SistemaTipoTelefono] (
    [SistemaTipoTelefonoID]    INT          IDENTITY (1, 1) NOT NULL,
    [SistemaTipoTelefonoClave] VARCHAR (10) NOT NULL,
    [Nombre]                   VARCHAR (30) NOT NULL,
    [NombreCorto]              VARCHAR (10) NOT NULL,
    [Estatus]                  BIT          NOT NULL,
    CONSTRAINT [PK_SistemaTipoTelefono] PRIMARY KEY CLUSTERED ([SistemaTipoTelefonoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaTipoTelefono].[IX_SistemaTipoTelefono_TipoTelefonoClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaTipoTelefono_TipoTelefonoClave]
    ON [dbo].[SistemaTipoTelefono]([SistemaTipoTelefonoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaUsoTelefono]...';


GO
CREATE TABLE [dbo].[SistemaUsoTelefono] (
    [SistemaUsoTelefonoID]    INT          IDENTITY (1, 1) NOT NULL,
    [SistemaUsoTelefonoClave] VARCHAR (10) NOT NULL,
    [Nombre]                  VARCHAR (30) NOT NULL,
    [NombreCorto]             VARCHAR (10) NOT NULL,
    [Estatus]                 BIT          NOT NULL,
    CONSTRAINT [PK_SistemaUsoTelefonoID] PRIMARY KEY CLUSTERED ([SistemaUsoTelefonoID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[SistemaUsoTelefono].[IX_SistemaUsoTelefono_SistemaUsoTelefonoClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SistemaUsoTelefono_SistemaUsoTelefonoClave]
    ON [dbo].[SistemaUsoTelefono]([SistemaUsoTelefonoClave] ASC);


GO
PRINT N'Creando Tabla [dbo].[SistemaUsuarioIntentos]...';


GO
CREATE TABLE [dbo].[SistemaUsuarioIntentos] (
    [UsuarioID]  INT           NOT NULL,
    [Fecha]      DATETIME      NOT NULL,
    [IP]         NVARCHAR (50) NOT NULL,
    [Contrasena] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_SistemaUsuarioIntentos] PRIMARY KEY CLUSTERED ([UsuarioID] ASC, [Fecha] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[SistemaUsuarioOpcionBitacora]...';


GO
CREATE TABLE [dbo].[SistemaUsuarioOpcionBitacora] (
    [UsuarioOpcionBitacoraID] INT      IDENTITY (1, 1) NOT NULL,
    [SegUsuarioID]            INT      NOT NULL,
    [Fecha]                   DATETIME NOT NULL,
    [EmpresaID]               INT      NOT NULL,
    [ModuloID]                INT      NOT NULL,
    [OpcionID]                INT      NOT NULL,
    CONSTRAINT [PK_SistemaUsuarioOpcionBitacora] PRIMARY KEY CLUSTERED ([UsuarioOpcionBitacoraID] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[TestTable]...';


GO
CREATE TABLE [dbo].[TestTable] (
    [Column_1] INT IDENTITY (1, 1) NOT NULL,
    [Column_2] INT NOT NULL,
    [Column_3] INT NOT NULL,
    [Column_4] INT NOT NULL,
    [Column_5] INT NOT NULL,
    [Column_6] INT NOT NULL,
    [Column_7] INT NOT NULL,
    [Column_8] INT NOT NULL,
    [Column_9] INT NOT NULL,
    [Column_A] INT NOT NULL,
    [Column_B] INT NOT NULL,
    [Column_C] INT NOT NULL,
    [Column_D] INT NOT NULL,
    [Column_E] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Column_1] ASC)
);


GO
PRINT N'Creando Tabla [dbo].[TituloRubro]...';


GO
CREATE TABLE [dbo].[TituloRubro] (
    [TituloRubroID]           INT          IDENTITY (1, 1) NOT NULL,
    [TituloRubroClave]        VARCHAR (6)  NOT NULL,
    [Nombre]                  VARCHAR (60) NOT NULL,
    [NombreCorto]             VARCHAR (10) NOT NULL,
    [CalculoRemanente]        BIT          NOT NULL,
    [NaturalezaID]            INT          NOT NULL,
    [EmpresaID]               INT          NOT NULL,
    [CfgEjercicioOperativoID] INT          NOT NULL,
    [Ingreso_o_Egreso]        VARCHAR (1)  NOT NULL,
    CONSTRAINT [PK_TìtuloRubro] PRIMARY KEY CLUSTERED ([TituloRubroID] ASC)
);


GO
PRINT N'Creando Índice [dbo].[TituloRubro].[IX_TituloRubro_EmpresaID_TituloRubroClave]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_TituloRubro_EmpresaID_TituloRubroClave]
    ON [dbo].[TituloRubro]([EmpresaID] ASC, [TituloRubroClave] ASC);


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[AcSalidaTerminal]...';


GO
ALTER TABLE [dbo].[AcSalidaTerminal]
    ADD DEFAULT ((1)) FOR [Activa];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CalCalendario]...';


GO
ALTER TABLE [dbo].[CalCalendario]
    ADD DEFAULT ((0)) FOR [Borrado];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CalCalendarioPersona]...';


GO
ALTER TABLE [dbo].[CalCalendarioPersona]
    ADD DEFAULT ((3)) FOR [CalendarioPermisoInt];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CfgParamConfigUsuarioCosmos]...';


GO
ALTER TABLE [dbo].[CfgParamConfigUsuarioCosmos]
    ADD DEFAULT (' ') FOR [TextoArea];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CfgParamConfigUsuarioCosmos]...';


GO
ALTER TABLE [dbo].[CfgParamConfigUsuarioCosmos]
    ADD DEFAULT (' ') FOR [TextoAreas];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CfgParamConfigUsuarioCosmos]...';


GO
ALTER TABLE [dbo].[CfgParamConfigUsuarioCosmos]
    ADD DEFAULT (' ') FOR [TextoAreaAlias];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CfgParamConfigUsuarioCosmos]...';


GO
ALTER TABLE [dbo].[CfgParamConfigUsuarioCosmos]
    ADD DEFAULT (' ') FOR [TextoAreasAlias];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CfgParamConfigUsuarioCosmos]...';


GO
ALTER TABLE [dbo].[CfgParamConfigUsuarioCosmos]
    ADD DEFAULT (' ') FOR [TextoAreasPrefijo];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CfgParamConfigUsuarioCosmos]...';


GO
ALTER TABLE [dbo].[CfgParamConfigUsuarioCosmos]
    ADD DEFAULT (' ') FOR [TextoAreaPrefijo];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CfgParamConfigUsuarioCosmos]...';


GO
ALTER TABLE [dbo].[CfgParamConfigUsuarioCosmos]
    ADD DEFAULT (' ') FOR [TextoCentroCosto];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CfgParamConfigUsuarioCosmos]...';


GO
ALTER TABLE [dbo].[CfgParamConfigUsuarioCosmos]
    ADD DEFAULT (' ') FOR [TextoCentrosCosto];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CfgParamConfigUsuarioCosmos]...';


GO
ALTER TABLE [dbo].[CfgParamConfigUsuarioCosmos]
    ADD DEFAULT (' ') FOR [TextoCentroCostoAlias];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CfgParamConfigUsuarioCosmos]...';


GO
ALTER TABLE [dbo].[CfgParamConfigUsuarioCosmos]
    ADD DEFAULT (' ') FOR [TextoCentrosCostoAlias];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CfgParamConfigUsuarioCosmos]...';


GO
ALTER TABLE [dbo].[CfgParamConfigUsuarioCosmos]
    ADD DEFAULT (' ') FOR [TextoCentroCostoPrefijo];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CfgParamConfigUsuarioCosmos]...';


GO
ALTER TABLE [dbo].[CfgParamConfigUsuarioCosmos]
    ADD DEFAULT (' ') FOR [TextoCentrosCostoPrefijo];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CfgParamConfigUsuarioCosmos]...';


GO
ALTER TABLE [dbo].[CfgParamConfigUsuarioCosmos]
    ADD DEFAULT (' ') FOR [TextoSucursal];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CfgParamConfigUsuarioCosmos]...';


GO
ALTER TABLE [dbo].[CfgParamConfigUsuarioCosmos]
    ADD DEFAULT (' ') FOR [TextoSucursales];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CfgParamConfigUsuarioCosmos]...';


GO
ALTER TABLE [dbo].[CfgParamConfigUsuarioCosmos]
    ADD DEFAULT (' ') FOR [TextoSucursalAlias];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CfgParamConfigUsuarioCosmos]...';


GO
ALTER TABLE [dbo].[CfgParamConfigUsuarioCosmos]
    ADD DEFAULT (' ') FOR [TextoSucursalesAlias];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CfgParamConfigUsuarioCosmos]...';


GO
ALTER TABLE [dbo].[CfgParamConfigUsuarioCosmos]
    ADD DEFAULT (' ') FOR [TextoSucursalPrefijo];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CfgParamConfigUsuarioCosmos]...';


GO
ALTER TABLE [dbo].[CfgParamConfigUsuarioCosmos]
    ADD DEFAULT (' ') FOR [TextoSucursalesPrefijo];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_CfgTasaIVA_PorcentajeIVA]...';


GO
ALTER TABLE [dbo].[CfgTasaIVA]
    ADD CONSTRAINT [DF_CfgTasaIVA_PorcentajeIVA] DEFAULT ((0)) FOR [PorcentajeIVA];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_CmpCompraEncabezado_LinkXML]...';


GO
ALTER TABLE [dbo].[CmpCompraEncabezado]
    ADD CONSTRAINT [DF_CmpCompraEncabezado_LinkXML] DEFAULT ('') FOR [LinkXML];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_CmpCompraEncabezado_LinkPDF]...';


GO
ALTER TABLE [dbo].[CmpCompraEncabezado]
    ADD CONSTRAINT [DF_CmpCompraEncabezado_LinkPDF] DEFAULT ('') FOR [LinkPDF];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_CmpCompraEncabezado_EstatusFactura]...';


GO
ALTER TABLE [dbo].[CmpCompraEncabezado]
    ADD CONSTRAINT [DF_CmpCompraEncabezado_EstatusFactura] DEFAULT ('N') FOR [EstatusFactura];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_CmpCompraEncabezado_PpalCentroCostoID]...';


GO
ALTER TABLE [dbo].[CmpCompraEncabezado]
    ADD CONSTRAINT [DF_CmpCompraEncabezado_PpalCentroCostoID] DEFAULT ((0)) FOR [PpalCentroCostoID];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_CmpCompraEncabezado_PpalConceptoEgresoID]...';


GO
ALTER TABLE [dbo].[CmpCompraEncabezado]
    ADD CONSTRAINT [DF_CmpCompraEncabezado_PpalConceptoEgresoID] DEFAULT ((0)) FOR [PpalConceptoEgresoID];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_CmpOrdenCompraEncabezado_LinkXML]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraEncabezado]
    ADD CONSTRAINT [DF_CmpOrdenCompraEncabezado_LinkXML] DEFAULT ('') FOR [LinkXML];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_CmpOrdenCompraEncabezado_LinkPDF]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraEncabezado]
    ADD CONSTRAINT [DF_CmpOrdenCompraEncabezado_LinkPDF] DEFAULT ('') FOR [LinkPDF];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_CmpOrdenCompraEncabezado_EstatusFactura]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraEncabezado]
    ADD CONSTRAINT [DF_CmpOrdenCompraEncabezado_EstatusFactura] DEFAULT ('N') FOR [EstatusFactura];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_CmpOrdenCompraEncabezado_PpalCentroCostoID]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraEncabezado]
    ADD CONSTRAINT [DF_CmpOrdenCompraEncabezado_PpalCentroCostoID] DEFAULT ((0)) FOR [PpalCentroCostoID];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_CmpOrdenCompraEncabezado_PpalConceptoEgresoID]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraEncabezado]
    ADD CONSTRAINT [DF_CmpOrdenCompraEncabezado_PpalConceptoEgresoID] DEFAULT ((0)) FOR [PpalConceptoEgresoID];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CoPartida]...';


GO
ALTER TABLE [dbo].[CoPartida]
    ADD DEFAULT ((0)) FOR [PpalAreaIDInicio];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CoPartida]...';


GO
ALTER TABLE [dbo].[CoPartida]
    ADD DEFAULT ((0)) FOR [PpalConceptoEgresoIDInicio];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CoPartidaBase]...';


GO
ALTER TABLE [dbo].[CoPartidaBase]
    ADD DEFAULT ((0)) FOR [PpalAreaIDInicio];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CoPartidaBase]...';


GO
ALTER TABLE [dbo].[CoPartidaBase]
    ADD DEFAULT ((0)) FOR [PpalConceptoEgresoIDInicio];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CoPartidaDetalle]...';


GO
ALTER TABLE [dbo].[CoPartidaDetalle]
    ADD DEFAULT ((0)) FOR [PpalAreaID];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CoPartidaDetalle]...';


GO
ALTER TABLE [dbo].[CoPartidaDetalle]
    ADD DEFAULT ((0)) FOR [SustituirConAdicional];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CoPartidaDetalle]...';


GO
ALTER TABLE [dbo].[CoPartidaDetalle]
    ADD DEFAULT ((0)) FOR [PpalConceptoEgresoID];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CoPartidaGeneral]...';


GO
ALTER TABLE [dbo].[CoPartidaGeneral]
    ADD DEFAULT ((0)) FOR [PpalAreaIDInicio];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CoPartidaGeneral]...';


GO
ALTER TABLE [dbo].[CoPartidaGeneral]
    ADD DEFAULT ((0)) FOR [PpalConceptoEgresoIDInicio];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CoProyecto]...';


GO
ALTER TABLE [dbo].[CoProyecto]
    ADD DEFAULT (getdate()) FOR [FechaAlta];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CoProyecto]...';


GO
ALTER TABLE [dbo].[CoProyecto]
    ADD DEFAULT ((0)) FOR [EspCP];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CoProyecto]...';


GO
ALTER TABLE [dbo].[CoProyecto]
    ADD DEFAULT ('') FOR [Inscripcion];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CoProyecto]...';


GO
ALTER TABLE [dbo].[CoProyecto]
    ADD DEFAULT ('') FOR [Libro];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CoProyecto]...';


GO
ALTER TABLE [dbo].[CoProyecto]
    ADD DEFAULT ('') FOR [Seccion];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CoProyecto]...';


GO
ALTER TABLE [dbo].[CoProyecto]
    ADD DEFAULT ((0)) FOR [TipoCapturaAvance];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[CoTipoPresupuesto]...';


GO
ALTER TABLE [dbo].[CoTipoPresupuesto]
    ADD DEFAULT ((0)) FOR [CfgEstatusDocumentoID];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_CoTipoPresupuesto_CoTipoPresupuestoBaseID]...';


GO
ALTER TABLE [dbo].[CoTipoPresupuesto]
    ADD CONSTRAINT [DF_CoTipoPresupuesto_CoTipoPresupuestoBaseID] DEFAULT ((0)) FOR [CoTipoPresupuestoBaseID];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_Persona_NombreCorto]...';


GO
ALTER TABLE [dbo].[EspPersona]
    ADD CONSTRAINT [DF_Persona_NombreCorto] DEFAULT ('') FOR [NombreCorto];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_Telefono_EstatusTelefonoID]...';


GO
ALTER TABLE [dbo].[EspTelefono]
    ADD CONSTRAINT [DF_Telefono_EstatusTelefonoID] DEFAULT ((1)) FOR [SistemaEstatusTelefonoID];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[MsjComunicaMensaje]...';


GO
ALTER TABLE [dbo].[MsjComunicaMensaje]
    ADD DEFAULT ((0)) FOR [RequiereAcuse];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_PpalProducto_CfgTasaIVAID]...';


GO
ALTER TABLE [dbo].[PpalProducto]
    ADD CONSTRAINT [DF_PpalProducto_CfgTasaIVAID] DEFAULT ((0)) FOR [CfgTasaIVAID];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_PpalProducto_ExcentoIVA]...';


GO
ALTER TABLE [dbo].[PpalProducto]
    ADD CONSTRAINT [DF_PpalProducto_ExcentoIVA] DEFAULT ('N') FOR [ExentoIVA];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_PpalProveedor_AplicaRetenciones]...';


GO
ALTER TABLE [dbo].[PpalProveedor]
    ADD CONSTRAINT [DF_PpalProveedor_AplicaRetenciones] DEFAULT ('N') FOR [AplicaRetenciones];


GO
PRINT N'Creando Restricción DEFAULT restricción sin nombre en [dbo].[SegLogRegla]...';


GO
ALTER TABLE [dbo].[SegLogRegla]
    ADD DEFAULT ((0)) FOR [SegUsuarioID];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_SistemaLogRegla_C]...';


GO
ALTER TABLE [dbo].[SegLogRegla]
    ADD CONSTRAINT [DF_SistemaLogRegla_C] DEFAULT ((0)) FOR [C];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_SistemaLogRegla_R]...';


GO
ALTER TABLE [dbo].[SegLogRegla]
    ADD CONSTRAINT [DF_SistemaLogRegla_R] DEFAULT ((0)) FOR [R];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_SistemaLogRegla_U]...';


GO
ALTER TABLE [dbo].[SegLogRegla]
    ADD CONSTRAINT [DF_SistemaLogRegla_U] DEFAULT ((0)) FOR [U];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_SistemaLogRegla_D]...';


GO
ALTER TABLE [dbo].[SegLogRegla]
    ADD CONSTRAINT [DF_SistemaLogRegla_D] DEFAULT ((0)) FOR [D];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_SistemaPerfil_PerfilClave]...';


GO
ALTER TABLE [dbo].[SegPerfil]
    ADD CONSTRAINT [DF_SistemaPerfil_PerfilClave] DEFAULT (N'"') FOR [SegPerfilClave];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_SistemaEmpresa_EmpresaClave]...';


GO
ALTER TABLE [dbo].[SistemaEmpresa]
    ADD CONSTRAINT [DF_SistemaEmpresa_EmpresaClave] DEFAULT ('') FOR [EmpresaClave];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_SistemaLog_FechaHoraCambioUTC]...';


GO
ALTER TABLE [dbo].[SistemaLog]
    ADD CONSTRAINT [DF_SistemaLog_FechaHoraCambioUTC] DEFAULT (sysutcdatetime()) FOR [FechaHoraCambioUTC];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF__tmp_ms_xx__Fecha__417994D0]...';


GO
ALTER TABLE [dbo].[SistemaLogBAK]
    ADD CONSTRAINT [DF__tmp_ms_xx__Fecha__417994D0] DEFAULT (sysutcdatetime()) FOR [FechaHoraCambioUTC];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_SistemaModulo_ModuloClave]...';


GO
ALTER TABLE [dbo].[SistemaModulo]
    ADD CONSTRAINT [DF_SistemaModulo_ModuloClave] DEFAULT ('"') FOR [ModuloClave];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_SistemaOpcion_Activo]...';


GO
ALTER TABLE [dbo].[SistemaOpcion]
    ADD CONSTRAINT [DF_SistemaOpcion_Activo] DEFAULT ((1)) FOR [Activo];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_SistemaOpcion_Protegido]...';


GO
ALTER TABLE [dbo].[SistemaOpcion]
    ADD CONSTRAINT [DF_SistemaOpcion_Protegido] DEFAULT ((1)) FOR [Protegido];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_SistemaOpcion_Popup]...';


GO
ALTER TABLE [dbo].[SistemaOpcion]
    ADD CONSTRAINT [DF_SistemaOpcion_Popup] DEFAULT ((0)) FOR [Popup];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_SistemaOpcion_VisibleMenu]...';


GO
ALTER TABLE [dbo].[SistemaOpcion]
    ADD CONSTRAINT [DF_SistemaOpcion_VisibleMenu] DEFAULT ((1)) FOR [VisibleMenu];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_SistemaOpcion2_Activo]...';


GO
ALTER TABLE [dbo].[SistemaOpcion2]
    ADD CONSTRAINT [DF_SistemaOpcion2_Activo] DEFAULT ((1)) FOR [Activo];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_SistemaOpcion2_Protegido]...';


GO
ALTER TABLE [dbo].[SistemaOpcion2]
    ADD CONSTRAINT [DF_SistemaOpcion2_Protegido] DEFAULT ((1)) FOR [Protegido];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_SistemaOpcion2_Popup]...';


GO
ALTER TABLE [dbo].[SistemaOpcion2]
    ADD CONSTRAINT [DF_SistemaOpcion2_Popup] DEFAULT ((0)) FOR [Popup];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_SistemaOpcion2_VisibleMenu]...';


GO
ALTER TABLE [dbo].[SistemaOpcion2]
    ADD CONSTRAINT [DF_SistemaOpcion2_VisibleMenu] DEFAULT ((1)) FOR [VisibleMenu];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_ParamCosmos_TituloMensajeRespuesta]...';


GO
ALTER TABLE [dbo].[SistemaParamCosmos]
    ADD CONSTRAINT [DF_ParamCosmos_TituloMensajeRespuesta] DEFAULT ('') FOR [TituloMensajeRespuesta];


GO
PRINT N'Creando Restricción DEFAULT [dbo].[DF_SistemaTipoContactoPersonal_TipoContactoPersonalClave]...';


GO
ALTER TABLE [dbo].[SistemaTipoContactoPersonal]
    ADD CONSTRAINT [DF_SistemaTipoContactoPersonal_TipoContactoPersonalClave] DEFAULT ('') FOR [TipoContactoPersonalClave];


GO
PRINT N'Creando Clave externa [dbo].[FK_AcAdmision_DocumentoEntregado_DocumentoID]...';


GO
ALTER TABLE [dbo].[AcAdmisionDocumentoEntregado]
    ADD CONSTRAINT [FK_AcAdmision_DocumentoEntregado_DocumentoID] FOREIGN KEY ([DocumentoID]) REFERENCES [dbo].[AcDocumento] ([DocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcAdmision_DocumentoEntregado_TipoDocumentoID]...';


GO
ALTER TABLE [dbo].[AcAdmisionDocumentoEntregado]
    ADD CONSTRAINT [FK_AcAdmision_DocumentoEntregado_TipoDocumentoID] FOREIGN KEY ([TipoDocumentoID]) REFERENCES [dbo].[AcTipoDocumento] ([TipoDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcCiclo_AcCalendario]...';


GO
ALTER TABLE [dbo].[AcCiclo]
    ADD CONSTRAINT [FK_AcCiclo_AcCalendario] FOREIGN KEY ([CalendarioID]) REFERENCES [dbo].[AcCalendario] ([CalendarioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcCiclo_AcCiclo]...';


GO
ALTER TABLE [dbo].[AcCiclo]
    ADD CONSTRAINT [FK_AcCiclo_AcCiclo] FOREIGN KEY ([CicloIDAnterior]) REFERENCES [dbo].[AcCiclo] ([CicloID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcCiclo_AcCicloTipo]...';


GO
ALTER TABLE [dbo].[AcCiclo]
    ADD CONSTRAINT [FK_AcCiclo_AcCicloTipo] FOREIGN KEY ([CicloTipoID]) REFERENCES [dbo].[AcCicloTipo] ([CicloTipoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcDiaAsueto_AcCiclo]...';


GO
ALTER TABLE [dbo].[AcDiaAsueto]
    ADD CONSTRAINT [FK_AcDiaAsueto_AcCiclo] FOREIGN KEY ([CicloID]) REFERENCES [dbo].[AcCiclo] ([CicloID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcAdmision_DocumentoRequerido_DocumentoID]...';


GO
ALTER TABLE [dbo].[AcDocumentosRequeridos]
    ADD CONSTRAINT [FK_AcAdmision_DocumentoRequerido_DocumentoID] FOREIGN KEY ([DocumentoID]) REFERENCES [dbo].[AcDocumento] ([DocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcAdmision_DocumentoRequerido_SeccionID]...';


GO
ALTER TABLE [dbo].[AcDocumentosRequeridos]
    ADD CONSTRAINT [FK_AcAdmision_DocumentoRequerido_SeccionID] FOREIGN KEY ([SeccionID]) REFERENCES [dbo].[AcSeccion] ([SeccionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcAdmision_DocumentoRequerido_TipoDocumentoID]...';


GO
ALTER TABLE [dbo].[AcDocumentosRequeridos]
    ADD CONSTRAINT [FK_AcAdmision_DocumentoRequerido_TipoDocumentoID] FOREIGN KEY ([TipoDocumentoID]) REFERENCES [dbo].[AcTipoDocumento] ([TipoDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcOfertaAcademica_AcCiclo]...';


GO
ALTER TABLE [dbo].[AcOfertaAcademica]
    ADD CONSTRAINT [FK_AcOfertaAcademica_AcCiclo] FOREIGN KEY ([CicloID]) REFERENCES [dbo].[AcCiclo] ([CicloID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcOfertaAcademica_AcPlantel]...';


GO
ALTER TABLE [dbo].[AcOfertaAcademica]
    ADD CONSTRAINT [FK_AcOfertaAcademica_AcPlantel] FOREIGN KEY ([PlantelID]) REFERENCES [dbo].[AcPlantel] ([PlantelID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcOfertaAcademica_AcSeccion]...';


GO
ALTER TABLE [dbo].[AcOfertaAcademica]
    ADD CONSTRAINT [FK_AcOfertaAcademica_AcSeccion] FOREIGN KEY ([SeccionID]) REFERENCES [dbo].[AcSeccion] ([SeccionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcOfertaAcademicaPlanEstudioTurno_AcOfertaAcademica]...';


GO
ALTER TABLE [dbo].[AcOfertaAcademicaPlanEstudioTurno]
    ADD CONSTRAINT [FK_AcOfertaAcademicaPlanEstudioTurno_AcOfertaAcademica] FOREIGN KEY ([OfertaAcademicaID]) REFERENCES [dbo].[AcOfertaAcademica] ([OfertaAcademicaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcOfertaAcademicaPlanEstudioTurno_AcPlanEstudio]...';


GO
ALTER TABLE [dbo].[AcOfertaAcademicaPlanEstudioTurno]
    ADD CONSTRAINT [FK_AcOfertaAcademicaPlanEstudioTurno_AcPlanEstudio] FOREIGN KEY ([PlanEstudioID]) REFERENCES [dbo].[AcPlanEstudio] ([PlanEstudioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcOfertaAcademicaPlanEstudioTurno_AcRvoeID]...';


GO
ALTER TABLE [dbo].[AcOfertaAcademicaPlanEstudioTurno]
    ADD CONSTRAINT [FK_AcOfertaAcademicaPlanEstudioTurno_AcRvoeID] FOREIGN KEY ([RvoeID]) REFERENCES [dbo].[AcRvoe] ([RvoeID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcOfertaAcademicaPlanEstudioTurno_AcTurnoID]...';


GO
ALTER TABLE [dbo].[AcOfertaAcademicaPlanEstudioTurno]
    ADD CONSTRAINT [FK_AcOfertaAcademicaPlanEstudioTurno_AcTurnoID] FOREIGN KEY ([TurnoID]) REFERENCES [dbo].[AcTurno] ([TurnoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcPeriodoVacacional_AcCiclo]...';


GO
ALTER TABLE [dbo].[AcPeriodoVacacional]
    ADD CONSTRAINT [FK_AcPeriodoVacacional_AcCiclo] FOREIGN KEY ([CicloID]) REFERENCES [dbo].[AcCiclo] ([CicloID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcPlanEstudio_AcSeccion]...';


GO
ALTER TABLE [dbo].[AcPlanEstudio]
    ADD CONSTRAINT [FK_AcPlanEstudio_AcSeccion] FOREIGN KEY ([SeccionID]) REFERENCES [dbo].[AcSeccion] ([SeccionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcProgramaEstudio_AcAsignatura]...';


GO
ALTER TABLE [dbo].[AcProgramaEstudio]
    ADD CONSTRAINT [FK_AcProgramaEstudio_AcAsignatura] FOREIGN KEY ([AsignaturaID]) REFERENCES [dbo].[AcAsignatura] ([AsignaturaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcProgramaEstudio_AcPlanEstudio]...';


GO
ALTER TABLE [dbo].[AcProgramaEstudio]
    ADD CONSTRAINT [FK_AcProgramaEstudio_AcPlanEstudio] FOREIGN KEY ([PlanEstudioID]) REFERENCES [dbo].[AcPlanEstudio] ([PlanEstudioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcRequisitoProgramaEstudio_AcProgramaEstudio]...';


GO
ALTER TABLE [dbo].[AcRequisitoProgramaEstudio]
    ADD CONSTRAINT [FK_AcRequisitoProgramaEstudio_AcProgramaEstudio] FOREIGN KEY ([ProgramaEstudioID]) REFERENCES [dbo].[AcProgramaEstudio] ([ProgramaEstudioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcRequisitoProgramaEstudio_AcSalidaTermnial]...';


GO
ALTER TABLE [dbo].[AcRequisitoProgramaEstudio]
    ADD CONSTRAINT [FK_AcRequisitoProgramaEstudio_AcSalidaTermnial] FOREIGN KEY ([SalidaTerminalProgramaEstudioID]) REFERENCES [dbo].[AcSalidaTerminalProgramaEstudio] ([SalidaTerminalProgramaEstudioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcRvoePlanEstudio_AcPlanEstudio]...';


GO
ALTER TABLE [dbo].[AcRvoePlanEstudio]
    ADD CONSTRAINT [FK_AcRvoePlanEstudio_AcPlanEstudio] FOREIGN KEY ([PlanEstudioID]) REFERENCES [dbo].[AcPlanEstudio] ([PlanEstudioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcRvoePlanEstudio_AcRvoe]...';


GO
ALTER TABLE [dbo].[AcRvoePlanEstudio]
    ADD CONSTRAINT [FK_AcRvoePlanEstudio_AcRvoe] FOREIGN KEY ([RvoeID]) REFERENCES [dbo].[AcRvoe] ([RvoeID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcSalidaTerminal_AcPlanEstudio]...';


GO
ALTER TABLE [dbo].[AcSalidaTerminal]
    ADD CONSTRAINT [FK_AcSalidaTerminal_AcPlanEstudio] FOREIGN KEY ([PlanEstudioID]) REFERENCES [dbo].[AcPlanEstudio] ([PlanEstudioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcSalidaTerminalProgramaEstudio_AcProgramaEstudio]...';


GO
ALTER TABLE [dbo].[AcSalidaTerminalProgramaEstudio]
    ADD CONSTRAINT [FK_AcSalidaTerminalProgramaEstudio_AcProgramaEstudio] FOREIGN KEY ([ProgramaEstudioID]) REFERENCES [dbo].[AcProgramaEstudio] ([ProgramaEstudioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcSalidaTerminalProgramaEstudio_AcSalidaTerminal]...';


GO
ALTER TABLE [dbo].[AcSalidaTerminalProgramaEstudio]
    ADD CONSTRAINT [FK_AcSalidaTerminalProgramaEstudio_AcSalidaTerminal] FOREIGN KEY ([SalidaTerminalID]) REFERENCES [dbo].[AcSalidaTerminal] ([SalidaTerminalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AcSeccion_AcNivelEducativo]...';


GO
ALTER TABLE [dbo].[AcSeccion]
    ADD CONSTRAINT [FK_AcSeccion_AcNivelEducativo] FOREIGN KEY ([NivelEducativoID]) REFERENCES [dbo].[AcNivelEducativo] ([NivelEducativoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_HorarioPersonal_SistemaEmpresa]...';


GO
ALTER TABLE [dbo].[AuxHorarioPersonal]
    ADD CONSTRAINT [FK_HorarioPersonal_SistemaEmpresa] FOREIGN KEY ([EmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_AuxPuesto_SistemaEmpresa]...';


GO
ALTER TABLE [dbo].[AuxPuesto]
    ADD CONSTRAINT [FK_AuxPuesto_SistemaEmpresa] FOREIGN KEY ([EmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_BcoCuenta_BcoSucursal]...';


GO
ALTER TABLE [dbo].[BcoCuenta]
    ADD CONSTRAINT [FK_BcoCuenta_BcoSucursal] FOREIGN KEY ([BcoSucursalID]) REFERENCES [dbo].[BcoSucursal] ([BcoSucursalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_BcoMovimiento_AuxFormaPago]...';


GO
ALTER TABLE [dbo].[BcoMovimiento]
    ADD CONSTRAINT [FK_BcoMovimiento_AuxFormaPago] FOREIGN KEY ([AuxFormaPagoID]) REFERENCES [dbo].[AuxFormaPago] ([AuxFormaPagoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_BcoMovimiento_BcoCuenta]...';


GO
ALTER TABLE [dbo].[BcoMovimiento]
    ADD CONSTRAINT [FK_BcoMovimiento_BcoCuenta] FOREIGN KEY ([BcoCuentaID]) REFERENCES [dbo].[BcoCuenta] ([BcoCuentaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_BcoMovimiento_BcoTipoMovimiento]...';


GO
ALTER TABLE [dbo].[BcoMovimiento]
    ADD CONSTRAINT [FK_BcoMovimiento_BcoTipoMovimiento] FOREIGN KEY ([BcoTipoMovimientoID]) REFERENCES [dbo].[BcoTipoMovimiento] ([BcoTipoMovimientoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_BcoMovimiento_PpalPersonal]...';


GO
ALTER TABLE [dbo].[BcoMovimiento]
    ADD CONSTRAINT [FK_BcoMovimiento_PpalPersonal] FOREIGN KEY ([PpalPersonalID]) REFERENCES [dbo].[PpalPersonal] ([PpalPersonalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_BcoMovimiento_PpalSerie]...';


GO
ALTER TABLE [dbo].[BcoMovimiento]
    ADD CONSTRAINT [FK_BcoMovimiento_PpalSerie] FOREIGN KEY ([PpalSerieID]) REFERENCES [dbo].[PpalSerie] ([PpalSerieID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_BcoMovimientoBanco_PpalPersonal]...';


GO
ALTER TABLE [dbo].[BcoMovimientoBanco]
    ADD CONSTRAINT [FK_BcoMovimientoBanco_PpalPersonal] FOREIGN KEY ([PpalPersonalID]) REFERENCES [dbo].[PpalPersonal] ([PpalPersonalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_BcoMovimientoBanco_PpalSerie]...';


GO
ALTER TABLE [dbo].[BcoMovimientoBanco]
    ADD CONSTRAINT [FK_BcoMovimientoBanco_PpalSerie] FOREIGN KEY ([PpalSerieID]) REFERENCES [dbo].[PpalSerie] ([PpalSerieID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_BcoSucursal_AuxBanco]...';


GO
ALTER TABLE [dbo].[BcoSucursal]
    ADD CONSTRAINT [FK_BcoSucursal_AuxBanco] FOREIGN KEY ([AuxBancoID]) REFERENCES [dbo].[AuxBanco] ([AuxBancoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CalCalendarioEvento_CalCalendario]...';


GO
ALTER TABLE [dbo].[CalCalendarioEvento]
    ADD CONSTRAINT [FK_CalCalendarioEvento_CalCalendario] FOREIGN KEY ([CalendarioID]) REFERENCES [dbo].[CalCalendario] ([CalendarioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CalCalendarioEvento_CalEvento]...';


GO
ALTER TABLE [dbo].[CalCalendarioEvento]
    ADD CONSTRAINT [FK_CalCalendarioEvento_CalEvento] FOREIGN KEY ([EventoID]) REFERENCES [dbo].[CalEvento] ([EventoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CalCalendarioPersona_CalCalendario]...';


GO
ALTER TABLE [dbo].[CalCalendarioPersona]
    ADD CONSTRAINT [FK_CalCalendarioPersona_CalCalendario] FOREIGN KEY ([CalendarioID]) REFERENCES [dbo].[CalCalendario] ([CalendarioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CalCalendarioPersona_Persona]...';


GO
ALTER TABLE [dbo].[CalCalendarioPersona]
    ADD CONSTRAINT [FK_CalCalendarioPersona_Persona] FOREIGN KEY ([EspPersonaID]) REFERENCES [dbo].[EspPersona] ([EspPersonaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CalEvento_CalEventoStatus]...';


GO
ALTER TABLE [dbo].[CalEvento]
    ADD CONSTRAINT [FK_CalEvento_CalEventoStatus] FOREIGN KEY ([StatusID]) REFERENCES [dbo].[CalEventoStatus] ([EventoStatusID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CalEvento_CalEventoTipo]...';


GO
ALTER TABLE [dbo].[CalEvento]
    ADD CONSTRAINT [FK_CalEvento_CalEventoTipo] FOREIGN KEY ([EventoTipoID]) REFERENCES [dbo].[CalEventoTipo] ([EventoTipoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgEjercicioOperativo_SistemaEmpresa]...';


GO
ALTER TABLE [dbo].[CfgEjercicioOperativo]
    ADD CONSTRAINT [FK_CfgEjercicioOperativo_SistemaEmpresa] FOREIGN KEY ([EmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgEsquemaImpuestoRetencionDetalle_CfgEsquemaImpuestoRetencion]...';


GO
ALTER TABLE [dbo].[CfgEsquemaImpuestoRetencionDetalle]
    ADD CONSTRAINT [FK_CfgEsquemaImpuestoRetencionDetalle_CfgEsquemaImpuestoRetencion] FOREIGN KEY ([CfgEsquemaImpuestoRetencionID]) REFERENCES [dbo].[CfgEsquemaImpuestoRetencion] ([CfgEsquemaImpuestoRetencionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgEsquemaImpuestoRetencionDetalle_CfgImpuestoRetencion]...';


GO
ALTER TABLE [dbo].[CfgEsquemaImpuestoRetencionDetalle]
    ADD CONSTRAINT [FK_CfgEsquemaImpuestoRetencionDetalle_CfgImpuestoRetencion] FOREIGN KEY ([CfgImpuestoRetencionID]) REFERENCES [dbo].[CfgImpuestoRetencion] ([CfgImpuestoRetencionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_EstatusCliente_SistemaEstatusPersona]...';


GO
ALTER TABLE [dbo].[CfgEstatusCliente]
    ADD CONSTRAINT [FK_EstatusCliente_SistemaEstatusPersona] FOREIGN KEY ([EstatusPersonaID]) REFERENCES [dbo].[SistemaEstatusPersona] ([EstatusPersonaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_EstatusContactoPersonal_SistemaEstatusPersona]...';


GO
ALTER TABLE [dbo].[CfgEstatusContactoPersonal]
    ADD CONSTRAINT [FK_EstatusContactoPersonal_SistemaEstatusPersona] FOREIGN KEY ([EstatusPersonaID]) REFERENCES [dbo].[SistemaEstatusPersona] ([EstatusPersonaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgEstatusDocumento_SistemaEstatusTipoDocumento]...';


GO
ALTER TABLE [dbo].[CfgEstatusDocumento]
    ADD CONSTRAINT [FK_CfgEstatusDocumento_SistemaEstatusTipoDocumento] FOREIGN KEY ([SistemaEstatusTipoDocumentoID]) REFERENCES [dbo].[SistemaEstatusTipoDocumento] ([SistemaEstatusTipoDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_EstatusPersonal_SistemaEstatusPersona]...';


GO
ALTER TABLE [dbo].[CfgEstatusPersonal]
    ADD CONSTRAINT [FK_EstatusPersonal_SistemaEstatusPersona] FOREIGN KEY ([EstatusPersonaID]) REFERENCES [dbo].[SistemaEstatusPersona] ([EstatusPersonaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_EstatusRepresentanteCliente_SistemaEstatusPersona]...';


GO
ALTER TABLE [dbo].[CfgEstatusRepresentanteCliente]
    ADD CONSTRAINT [FK_EstatusRepresentanteCliente_SistemaEstatusPersona] FOREIGN KEY ([EstatusPersonaID]) REFERENCES [dbo].[SistemaEstatusPersona] ([EstatusPersonaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_AuxEstadoCivil]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_AuxEstadoCivil] FOREIGN KEY ([AuxEstadoCivilIDInicio]) REFERENCES [dbo].[AuxEstadoCivil] ([AuxEstadoCivilID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_AuxFormaPago]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_AuxFormaPago] FOREIGN KEY ([AuxFormaPagoIDInicio]) REFERENCES [dbo].[AuxFormaPago] ([AuxFormaPagoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_AuxHorarioPersonal]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_AuxHorarioPersonal] FOREIGN KEY ([AuxHorarioPersonalIDInicio]) REFERENCES [dbo].[AuxHorarioPersonal] ([AuxHorarioPersonalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_AuxIdioma]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_AuxIdioma] FOREIGN KEY ([AuxIdiomaIDInicio]) REFERENCES [dbo].[AuxIdioma] ([AuxIdiomaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_AuxMarca]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_AuxMarca] FOREIGN KEY ([AuxMarcaIDInicio]) REFERENCES [dbo].[AuxMarca] ([AuxMarcaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_AuxMedioContacto]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_AuxMedioContacto] FOREIGN KEY ([AuxMedioContactoIDInicio]) REFERENCES [dbo].[AuxMedioContacto] ([AuxMedioContactoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_AuxProfesion]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_AuxProfesion] FOREIGN KEY ([AuxProfesionIDInicio]) REFERENCES [dbo].[AuxProfesion] ([AuxProfesionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_AuxUnidad]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_AuxUnidad] FOREIGN KEY ([AuxUnidadIDInicio]) REFERENCES [dbo].[AuxUnidad] ([AuxUnidadID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_AuxVinculo]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_AuxVinculo] FOREIGN KEY ([AuxVinculoIDInicio]) REFERENCES [dbo].[AuxVinculo] ([AuxVinculoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_AuxZona]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_AuxZona] FOREIGN KEY ([AuxZonaIDInicio]) REFERENCES [dbo].[AuxZona] ([AuxZonaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CfgEstatusCliente]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CfgEstatusCliente] FOREIGN KEY ([CfgEstatusClienteIDInicio]) REFERENCES [dbo].[CfgEstatusCliente] ([CfgEstatusClienteID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CfgEstatusContactoPersonal]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CfgEstatusContactoPersonal] FOREIGN KEY ([CfgEstatusContactoPersonalIDInicio]) REFERENCES [dbo].[CfgEstatusContactoPersonal] ([CfgEstatusContactoPersonalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CfgEstatusDocumento]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CfgEstatusDocumento] FOREIGN KEY ([CfgEstatusDocumentoIDInicio]) REFERENCES [dbo].[CfgEstatusDocumento] ([CfgEstatusDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CfgEstatusPersonal]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CfgEstatusPersonal] FOREIGN KEY ([CfgEstatusPersonalIDInicio]) REFERENCES [dbo].[CfgEstatusPersonal] ([CfgEstatusPersonalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CfgFamiliaProducto]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CfgFamiliaProducto] FOREIGN KEY ([CfgFamiliaProductoIDInicio]) REFERENCES [dbo].[CfgFamiliaProducto] ([CfgFamiliaProductoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CfgParamInicioUsuarioCosmos]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CfgParamInicioUsuarioCosmos] FOREIGN KEY ([ParamInicioUsuarioCosmosID]) REFERENCES [dbo].[CfgParamInicioUsuarioCosmos] ([ParamInicioUsuarioCosmosID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CfgParamInicioUsuarioCosmos2]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CfgParamInicioUsuarioCosmos2] FOREIGN KEY ([PpalAreaIDInicio]) REFERENCES [dbo].[PpalArea] ([PpalAreaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CfgTipoCliente]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CfgTipoCliente] FOREIGN KEY ([CfgTipoClienteIDInicio]) REFERENCES [dbo].[CfgTipoCliente] ([CfgTipoClienteID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CfgTipoContactoPersonal]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CfgTipoContactoPersonal] FOREIGN KEY ([CfgTipoContactoPersonalIDInicio]) REFERENCES [dbo].[CfgTipoContactoPersonal] ([CfgTipoContactoPersonalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CfgTipoDomicilio]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CfgTipoDomicilio] FOREIGN KEY ([CfgTipoDomicilioIDInicio]) REFERENCES [dbo].[CfgTipoDomicilio] ([CfgTipoDomicilioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CfgTipoFecha]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CfgTipoFecha] FOREIGN KEY ([CfgTipoFechaIDInicio]) REFERENCES [dbo].[CfgTipoFecha] ([CfgTipoFechaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CfgTipoHorario]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CfgTipoHorario] FOREIGN KEY ([CfgTipoHorarioIDInicio]) REFERENCES [dbo].[CfgTipoHorario] ([CfgTipoHorarioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CfgTipoMail]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CfgTipoMail] FOREIGN KEY ([CfgTipoMailIDInicio]) REFERENCES [dbo].[CfgTipoMail] ([CfgTipoMailID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CfgTipoProducto]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CfgTipoProducto] FOREIGN KEY ([CfgTipoProductoIDInicio]) REFERENCES [dbo].[CfgTipoProducto] ([CfgTipoProductoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CfgTipoRepresentanteCliente]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CfgTipoRepresentanteCliente] FOREIGN KEY ([CfgTipoRepresentanteClienteIDInicio]) REFERENCES [dbo].[CfgTipoRepresentanteCliente] ([CfgTipoRepresentanteClienteID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CfgTipoTelefono]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CfgTipoTelefono] FOREIGN KEY ([CfgTipoTelefonoIDInicio]) REFERENCES [dbo].[CfgTipoTelefono] ([CfgTipoTelefonoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CfgUsoTelefono]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CfgUsoTelefono] FOREIGN KEY ([CfgUsoTelefonoIDInicio]) REFERENCES [dbo].[CfgUsoTelefono] ([CfgUsoTelefonoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CmpEstatusProveedor]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CmpEstatusProveedor] FOREIGN KEY ([CmpEstatusProveedorIDInicio]) REFERENCES [dbo].[CmpEstatusProveedor] ([CmpEstatusProveedorID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CmpEstatusRepresentanteProveedor]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CmpEstatusRepresentanteProveedor] FOREIGN KEY ([CmpEstatusRepresentanteProveedorIDInicio]) REFERENCES [dbo].[CmpEstatusRepresentanteProveedor] ([CmpEstatusRepresentanteProveedorID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CmpTipoProveedor]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CmpTipoProveedor] FOREIGN KEY ([CmpTipoProveedorIDInicio]) REFERENCES [dbo].[CmpTipoProveedor] ([CmpTipoProveedorID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_CmpTipoRepresentanteProveedor]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_CmpTipoRepresentanteProveedor] FOREIGN KEY ([CmpTipoRepresentanteProveedorIDInicio]) REFERENCES [dbo].[CmpTipoRepresentanteProveedor] ([CmpTipoRepresentanteProveedorID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_EspCiudad]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_EspCiudad] FOREIGN KEY ([EspCiudadIDInicio]) REFERENCES [dbo].[EspCiudad] ([EspCiudadID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_EspEstado]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_EspEstado] FOREIGN KEY ([EspEstadoIDInicio]) REFERENCES [dbo].[EspEstado] ([EspEstadoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_EspMunicipio]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_EspMunicipio] FOREIGN KEY ([EspMunicipioIDInicio]) REFERENCES [dbo].[EspMunicipio] ([EspMunicipioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_EspPais]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_EspPais] FOREIGN KEY ([EspPaisIDInicio]) REFERENCES [dbo].[EspPais] ([EspPaisID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_PpalCentroCosto]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_PpalCentroCosto] FOREIGN KEY ([PpalCentroCostoIDInicio]) REFERENCES [dbo].[PpalCentroCosto] ([PpalCentroCostoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_PpalConceptoEgreso]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_PpalConceptoEgreso] FOREIGN KEY ([PpalConceptoEgresoIDInicio]) REFERENCES [dbo].[PpalConceptoEgreso] ([PpalConceptoEgresoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_PpalConceptoIngreso]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_PpalConceptoIngreso] FOREIGN KEY ([PpalConceptoIngresoIDInicio]) REFERENCES [dbo].[PpalConceptoIngreso] ([PpalConceptoIngresoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_PpalSucursal]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_PpalSucursal] FOREIGN KEY ([PpalSucursalIDInicio]) REFERENCES [dbo].[PpalSucursal] ([PpalSucursalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgParamInicioUsuarioCosmos_SistemaSexo]...';


GO
ALTER TABLE [dbo].[CfgParamInicioUsuarioCosmos]
    ADD CONSTRAINT [FK_CfgParamInicioUsuarioCosmos_SistemaSexo] FOREIGN KEY ([SistemaSexoIDInicio]) REFERENCES [dbo].[SistemaSexo] ([SexoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgTipoDomicilio_SistemaTipoDomicilio]...';


GO
ALTER TABLE [dbo].[CfgTipoDomicilio]
    ADD CONSTRAINT [FK_CfgTipoDomicilio_SistemaTipoDomicilio] FOREIGN KEY ([CfgSistemaTipoDomicilioID]) REFERENCES [dbo].[SistemaTipoDomicilio] ([SistemaTipoDomicilioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgTipoFecha_SistemaTipoFecha]...';


GO
ALTER TABLE [dbo].[CfgTipoFecha]
    ADD CONSTRAINT [FK_CfgTipoFecha_SistemaTipoFecha] FOREIGN KEY ([TipoFechaID]) REFERENCES [dbo].[SistemaTipoFecha] ([TipoFechaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgTipoHorario_SistemaEmpresa]...';


GO
ALTER TABLE [dbo].[CfgTipoHorario]
    ADD CONSTRAINT [FK_CfgTipoHorario_SistemaEmpresa] FOREIGN KEY ([EmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgTipoMail_SistemaTipoMail]...';


GO
ALTER TABLE [dbo].[CfgTipoMail]
    ADD CONSTRAINT [FK_CfgTipoMail_SistemaTipoMail] FOREIGN KEY ([CfgSistemaTipoMailID]) REFERENCES [dbo].[SistemaTipoMail] ([SistemaTipoMailID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgTipoRepresentanteProveedor_SistemaTipoRepresentanteProveedor]...';


GO
ALTER TABLE [dbo].[CfgTipoRepresentanteProveedor]
    ADD CONSTRAINT [FK_CfgTipoRepresentanteProveedor_SistemaTipoRepresentanteProveedor] FOREIGN KEY ([TipoRepresentanteProveedorID]) REFERENCES [dbo].[SistemaTipoRepresentanteProveedor] ([TipoRepresentanteProveedorID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgTipoTelefono_SistemaTipoTelefono]...';


GO
ALTER TABLE [dbo].[CfgTipoTelefono]
    ADD CONSTRAINT [FK_CfgTipoTelefono_SistemaTipoTelefono] FOREIGN KEY ([SistemaTipoTelefonoID]) REFERENCES [dbo].[SistemaTipoTelefono] ([SistemaTipoTelefonoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CfgUsoTelefono_SistemaUsoTelefono]...';


GO
ALTER TABLE [dbo].[CfgUsoTelefono]
    ADD CONSTRAINT [FK_CfgUsoTelefono_SistemaUsoTelefono] FOREIGN KEY ([SistemaUsoTelefonoID]) REFERENCES [dbo].[SistemaUsoTelefono] ([SistemaUsoTelefonoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpAnticipoDetalle_CmpAnticipoEncabezado]...';


GO
ALTER TABLE [dbo].[CmpAnticipoDetalle]
    ADD CONSTRAINT [FK_CmpAnticipoDetalle_CmpAnticipoEncabezado] FOREIGN KEY ([CmpAnticipoEncabezadoID]) REFERENCES [dbo].[CmpAnticipoEncabezado] ([CmpAnticipoEncabezadoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpAnticipoDetalle_PpalArea]...';


GO
ALTER TABLE [dbo].[CmpAnticipoDetalle]
    ADD CONSTRAINT [FK_CmpAnticipoDetalle_PpalArea] FOREIGN KEY ([PpalAreaID]) REFERENCES [dbo].[PpalArea] ([PpalAreaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpAnticipoDetalle_PpalCentroCosto]...';


GO
ALTER TABLE [dbo].[CmpAnticipoDetalle]
    ADD CONSTRAINT [FK_CmpAnticipoDetalle_PpalCentroCosto] FOREIGN KEY ([PpalCentroCostoID]) REFERENCES [dbo].[PpalCentroCosto] ([PpalCentroCostoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpAnticipoDetalle_PpalConceptoEgreso]...';


GO
ALTER TABLE [dbo].[CmpAnticipoDetalle]
    ADD CONSTRAINT [FK_CmpAnticipoDetalle_PpalConceptoEgreso] FOREIGN KEY ([PpalConceptoEgresoID]) REFERENCES [dbo].[PpalConceptoEgreso] ([PpalConceptoEgresoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpAnticipoDetalle_PpalCuentaContable]...';


GO
ALTER TABLE [dbo].[CmpAnticipoDetalle]
    ADD CONSTRAINT [FK_CmpAnticipoDetalle_PpalCuentaContable] FOREIGN KEY ([PpalCuentaContableID]) REFERENCES [dbo].[PpalCuentaContable] ([PpalCuentaContableID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpAnticipoEncabezado_CmpTipoMovimientoProveedor]...';


GO
ALTER TABLE [dbo].[CmpAnticipoEncabezado]
    ADD CONSTRAINT [FK_CmpAnticipoEncabezado_CmpTipoMovimientoProveedor] FOREIGN KEY ([CmpTipoMovimientoProveedorID]) REFERENCES [dbo].[CmpTipoMovimientoProveedor] ([CmpTipoMovimientoProveedorID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpAnticipoEncabezado_PpalPersonal]...';


GO
ALTER TABLE [dbo].[CmpAnticipoEncabezado]
    ADD CONSTRAINT [FK_CmpAnticipoEncabezado_PpalPersonal] FOREIGN KEY ([PpalPersonalID]) REFERENCES [dbo].[PpalPersonal] ([PpalPersonalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpAnticipoEncabezado_PpalProveedor]...';


GO
ALTER TABLE [dbo].[CmpAnticipoEncabezado]
    ADD CONSTRAINT [FK_CmpAnticipoEncabezado_PpalProveedor] FOREIGN KEY ([PpalProveedorID]) REFERENCES [dbo].[PpalProveedor] ([PpalProveedorID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpAnticipoEncabezado_PpalSerie]...';


GO
ALTER TABLE [dbo].[CmpAnticipoEncabezado]
    ADD CONSTRAINT [FK_CmpAnticipoEncabezado_PpalSerie] FOREIGN KEY ([PpalSerieID]) REFERENCES [dbo].[PpalSerie] ([PpalSerieID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpAnticipoEncabezado_PpalSucursal]...';


GO
ALTER TABLE [dbo].[CmpAnticipoEncabezado]
    ADD CONSTRAINT [FK_CmpAnticipoEncabezado_PpalSucursal] FOREIGN KEY ([PpalSucursalID]) REFERENCES [dbo].[PpalSucursal] ([PpalSucursalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpAnticipoEncabezado_SistemaTipoDocumento]...';


GO
ALTER TABLE [dbo].[CmpAnticipoEncabezado]
    ADD CONSTRAINT [FK_CmpAnticipoEncabezado_SistemaTipoDocumento] FOREIGN KEY ([TipoDocumentoID]) REFERENCES [dbo].[SistemaTipoDocumento] ([TipoDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraDesglose_Almacen]...';


GO
ALTER TABLE [dbo].[CmpCompraDesglose]
    ADD CONSTRAINT [FK_CmpCompraDesglose_Almacen] FOREIGN KEY ([PpalAlmacenID]) REFERENCES [dbo].[PpalAlmacen] ([PpalAlmacenID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraDesglose_CmpCompraDetalle]...';


GO
ALTER TABLE [dbo].[CmpCompraDesglose]
    ADD CONSTRAINT [FK_CmpCompraDesglose_CmpCompraDetalle] FOREIGN KEY ([CmpCompraDetalleID]) REFERENCES [dbo].[CmpCompraDetalle] ([CmpCompraDetalleID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraDesglose_CmpOrdenCompraDesglose]...';


GO
ALTER TABLE [dbo].[CmpCompraDesglose]
    ADD CONSTRAINT [FK_CmpCompraDesglose_CmpOrdenCompraDesglose] FOREIGN KEY ([CmpOrdenCompraDesgloseID]) REFERENCES [dbo].[CmpOrdenCompraDesglose] ([CmpOrdenCompraDesgloseID]) ON DELETE SET NULL;


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraDesglose_ConceptoEgreso]...';


GO
ALTER TABLE [dbo].[CmpCompraDesglose]
    ADD CONSTRAINT [FK_CmpCompraDesglose_ConceptoEgreso] FOREIGN KEY ([PpalConceptoEgresoID]) REFERENCES [dbo].[PpalConceptoEgreso] ([PpalConceptoEgresoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraDesglose_PpalArea]...';


GO
ALTER TABLE [dbo].[CmpCompraDesglose]
    ADD CONSTRAINT [FK_CmpCompraDesglose_PpalArea] FOREIGN KEY ([PpalAreaID]) REFERENCES [dbo].[PpalArea] ([PpalAreaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraDesglose_PpalCentroCosto]...';


GO
ALTER TABLE [dbo].[CmpCompraDesglose]
    ADD CONSTRAINT [FK_CmpCompraDesglose_PpalCentroCosto] FOREIGN KEY ([PpalCentroCostoID]) REFERENCES [dbo].[PpalCentroCosto] ([PpalCentroCostoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraDesglose_PpalCuentaContable]...';


GO
ALTER TABLE [dbo].[CmpCompraDesglose]
    ADD CONSTRAINT [FK_CmpCompraDesglose_PpalCuentaContable] FOREIGN KEY ([PpalCuentaContableID]) REFERENCES [dbo].[PpalCuentaContable] ([PpalCuentaContableID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraDesglose_PpalSucursal]...';


GO
ALTER TABLE [dbo].[CmpCompraDesglose]
    ADD CONSTRAINT [FK_CmpCompraDesglose_PpalSucursal] FOREIGN KEY ([PpalSucursalID]) REFERENCES [dbo].[PpalSucursal] ([PpalSucursalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraDetalle_AuxUnidad]...';


GO
ALTER TABLE [dbo].[CmpCompraDetalle]
    ADD CONSTRAINT [FK_CmpCompraDetalle_AuxUnidad] FOREIGN KEY ([AuxUnidadID]) REFERENCES [dbo].[AuxUnidad] ([AuxUnidadID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraDetalle_CmpCompraEncabezado]...';


GO
ALTER TABLE [dbo].[CmpCompraDetalle]
    ADD CONSTRAINT [FK_CmpCompraDetalle_CmpCompraEncabezado] FOREIGN KEY ([CmpCompraEncabezadoID]) REFERENCES [dbo].[CmpCompraEncabezado] ([CmpCompraEncabezadoID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraDetalle_PpalProducto]...';


GO
ALTER TABLE [dbo].[CmpCompraDetalle]
    ADD CONSTRAINT [FK_CmpCompraDetalle_PpalProducto] FOREIGN KEY ([PpalProductoID]) REFERENCES [dbo].[PpalProducto] ([PpalProductoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraEncabezado_CfgEstatusDocumentoID]...';


GO
ALTER TABLE [dbo].[CmpCompraEncabezado]
    ADD CONSTRAINT [FK_CmpCompraEncabezado_CfgEstatusDocumentoID] FOREIGN KEY ([CfgEstatusDocumentoID]) REFERENCES [dbo].[CfgEstatusDocumento] ([CfgEstatusDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraEncabezado_CmpCompraEncabezado]...';


GO
ALTER TABLE [dbo].[CmpCompraEncabezado]
    ADD CONSTRAINT [FK_CmpCompraEncabezado_CmpCompraEncabezado] FOREIGN KEY ([CmpCompraEncabezadoID]) REFERENCES [dbo].[CmpCompraEncabezado] ([CmpCompraEncabezadoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraEncabezado_CmpTipoMovimientoProveedor]...';


GO
ALTER TABLE [dbo].[CmpCompraEncabezado]
    ADD CONSTRAINT [FK_CmpCompraEncabezado_CmpTipoMovimientoProveedor] FOREIGN KEY ([CmpTipoMovimientoProveedorID]) REFERENCES [dbo].[CmpTipoMovimientoProveedor] ([CmpTipoMovimientoProveedorID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraEncabezado_PpalCentroCosto]...';


GO
ALTER TABLE [dbo].[CmpCompraEncabezado]
    ADD CONSTRAINT [FK_CmpCompraEncabezado_PpalCentroCosto] FOREIGN KEY ([PpalCentroCostoID]) REFERENCES [dbo].[PpalCentroCosto] ([PpalCentroCostoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraEncabezado_PpalConceptoEgreso]...';


GO
ALTER TABLE [dbo].[CmpCompraEncabezado]
    ADD CONSTRAINT [FK_CmpCompraEncabezado_PpalConceptoEgreso] FOREIGN KEY ([PpalConceptoEgresoID]) REFERENCES [dbo].[PpalConceptoEgreso] ([PpalConceptoEgresoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraEncabezado_PpalProveedor]...';


GO
ALTER TABLE [dbo].[CmpCompraEncabezado]
    ADD CONSTRAINT [FK_CmpCompraEncabezado_PpalProveedor] FOREIGN KEY ([PpalProveedorID]) REFERENCES [dbo].[PpalProveedor] ([PpalProveedorID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraEncabezado_PpalSerie]...';


GO
ALTER TABLE [dbo].[CmpCompraEncabezado]
    ADD CONSTRAINT [FK_CmpCompraEncabezado_PpalSerie] FOREIGN KEY ([PpalSerieID]) REFERENCES [dbo].[PpalSerie] ([PpalSerieID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraEncabezado_PpalSucursal]...';


GO
ALTER TABLE [dbo].[CmpCompraEncabezado]
    ADD CONSTRAINT [FK_CmpCompraEncabezado_PpalSucursal] FOREIGN KEY ([PpalSucursalID]) REFERENCES [dbo].[PpalSucursal] ([PpalSucursalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraEncabezado_TipoDocumentoID]...';


GO
ALTER TABLE [dbo].[CmpCompraEncabezado]
    ADD CONSTRAINT [FK_CmpCompraEncabezado_TipoDocumentoID] FOREIGN KEY ([TipoDocumentoID]) REFERENCES [dbo].[SistemaTipoDocumento] ([TipoDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraPago_BcoMovimiento]...';


GO
ALTER TABLE [dbo].[CmpCompraPago]
    ADD CONSTRAINT [FK_CmpCompraPago_BcoMovimiento] FOREIGN KEY ([BcoMovimientoID]) REFERENCES [dbo].[BcoMovimiento] ([BcoMovimientoID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpCompraPago_CmpCompraEncabezado]...';


GO
ALTER TABLE [dbo].[CmpCompraPago]
    ADD CONSTRAINT [FK_CmpCompraPago_CmpCompraEncabezado] FOREIGN KEY ([CmpCompraEncabezadoID]) REFERENCES [dbo].[CmpCompraEncabezado] ([CmpCompraEncabezadoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpEstatusProveedor_SistemaEstatusPersona]...';


GO
ALTER TABLE [dbo].[CmpEstatusProveedor]
    ADD CONSTRAINT [FK_CmpEstatusProveedor_SistemaEstatusPersona] FOREIGN KEY ([EstatusPersonaID]) REFERENCES [dbo].[SistemaEstatusPersona] ([EstatusPersonaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpEstatusRepresentanteProveedor_SistemaEstatusPersona]...';


GO
ALTER TABLE [dbo].[CmpEstatusRepresentanteProveedor]
    ADD CONSTRAINT [FK_CmpEstatusRepresentanteProveedor_SistemaEstatusPersona] FOREIGN KEY ([EstatusPersonaID]) REFERENCES [dbo].[SistemaEstatusPersona] ([EstatusPersonaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraDesglose_Almacen]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraDesglose]
    ADD CONSTRAINT [FK_CmpOrdenCompraDesglose_Almacen] FOREIGN KEY ([PpalAlmacenID]) REFERENCES [dbo].[PpalAlmacen] ([PpalAlmacenID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraDesglose_CmpOrdenCompraDetalle]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraDesglose]
    ADD CONSTRAINT [FK_CmpOrdenCompraDesglose_CmpOrdenCompraDetalle] FOREIGN KEY ([CmpOrdenCompraDetalleID]) REFERENCES [dbo].[CmpOrdenCompraDetalle] ([CmpOrdenCompraDetalleID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraDesglose_CmpRequisicionDetalle]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraDesglose]
    ADD CONSTRAINT [FK_CmpOrdenCompraDesglose_CmpRequisicionDetalle] FOREIGN KEY ([CmpRequisicionDetalleID]) REFERENCES [dbo].[CmpRequisicionDetalle] ([CmpRequisicionDetalleID]) ON DELETE SET NULL;


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraDesglose_ConceptoEgreso]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraDesglose]
    ADD CONSTRAINT [FK_CmpOrdenCompraDesglose_ConceptoEgreso] FOREIGN KEY ([ConceptoEgresoID]) REFERENCES [dbo].[PpalConceptoEgreso] ([PpalConceptoEgresoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraDesglose_PpalArea]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraDesglose]
    ADD CONSTRAINT [FK_CmpOrdenCompraDesglose_PpalArea] FOREIGN KEY ([PpalAreaID]) REFERENCES [dbo].[PpalArea] ([PpalAreaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraDesglose_PpalCentroCosto]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraDesglose]
    ADD CONSTRAINT [FK_CmpOrdenCompraDesglose_PpalCentroCosto] FOREIGN KEY ([PpalCentroCostoID]) REFERENCES [dbo].[PpalCentroCosto] ([PpalCentroCostoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraDesglose_PpalCuentaContable]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraDesglose]
    ADD CONSTRAINT [FK_CmpOrdenCompraDesglose_PpalCuentaContable] FOREIGN KEY ([PpalCuentaContableID]) REFERENCES [dbo].[PpalCuentaContable] ([PpalCuentaContableID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraDesglose_PpalSucursal]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraDesglose]
    ADD CONSTRAINT [FK_CmpOrdenCompraDesglose_PpalSucursal] FOREIGN KEY ([PpalSucursalID]) REFERENCES [dbo].[PpalSucursal] ([PpalSucursalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraDetalle_AuxUnidad]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraDetalle]
    ADD CONSTRAINT [FK_CmpOrdenCompraDetalle_AuxUnidad] FOREIGN KEY ([AuxUnidadID]) REFERENCES [dbo].[AuxUnidad] ([AuxUnidadID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraDetalle_CmpOrdenCompraDetalle]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraDetalle]
    ADD CONSTRAINT [FK_CmpOrdenCompraDetalle_CmpOrdenCompraDetalle] FOREIGN KEY ([CmpOrdenCompraDetalleID]) REFERENCES [dbo].[CmpOrdenCompraDetalle] ([CmpOrdenCompraDetalleID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraDetalle_CmpOrdenCompraEncabezado]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraDetalle]
    ADD CONSTRAINT [FK_CmpOrdenCompraDetalle_CmpOrdenCompraEncabezado] FOREIGN KEY ([CmpOrdenCompraEncabezadoID]) REFERENCES [dbo].[CmpOrdenCompraEncabezado] ([CmpOrdenCompraEncabezadoID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraDetalle_PpalProducto]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraDetalle]
    ADD CONSTRAINT [FK_CmpOrdenCompraDetalle_PpalProducto] FOREIGN KEY ([PpalProductoID]) REFERENCES [dbo].[PpalProducto] ([PpalProductoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraEncabezado_CfgEstatusDocumento]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraEncabezado]
    ADD CONSTRAINT [FK_CmpOrdenCompraEncabezado_CfgEstatusDocumento] FOREIGN KEY ([CfgEstatusDocumentoID]) REFERENCES [dbo].[CfgEstatusDocumento] ([CfgEstatusDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraEncabezado_PpalArea]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraEncabezado]
    ADD CONSTRAINT [FK_CmpOrdenCompraEncabezado_PpalArea] FOREIGN KEY ([PpalAreaID]) REFERENCES [dbo].[PpalArea] ([PpalAreaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraEncabezado_PpalCentroCosto]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraEncabezado]
    ADD CONSTRAINT [FK_CmpOrdenCompraEncabezado_PpalCentroCosto] FOREIGN KEY ([PpalCentroCostoID]) REFERENCES [dbo].[PpalCentroCosto] ([PpalCentroCostoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraEncabezado_PpalConceptoEgreso]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraEncabezado]
    ADD CONSTRAINT [FK_CmpOrdenCompraEncabezado_PpalConceptoEgreso] FOREIGN KEY ([PpalConceptoEgresoID]) REFERENCES [dbo].[PpalConceptoEgreso] ([PpalConceptoEgresoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraEncabezado_PpalPersonal]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraEncabezado]
    ADD CONSTRAINT [FK_CmpOrdenCompraEncabezado_PpalPersonal] FOREIGN KEY ([PpalPersonalID]) REFERENCES [dbo].[PpalPersonal] ([PpalPersonalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraEncabezado_PpalProveedor]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraEncabezado]
    ADD CONSTRAINT [FK_CmpOrdenCompraEncabezado_PpalProveedor] FOREIGN KEY ([PpalProveedorID]) REFERENCES [dbo].[PpalProveedor] ([PpalProveedorID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraEncabezado_PpalSerie]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraEncabezado]
    ADD CONSTRAINT [FK_CmpOrdenCompraEncabezado_PpalSerie] FOREIGN KEY ([PpalSerieID]) REFERENCES [dbo].[PpalSerie] ([PpalSerieID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraEncabezado_PpalSucursal]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraEncabezado]
    ADD CONSTRAINT [FK_CmpOrdenCompraEncabezado_PpalSucursal] FOREIGN KEY ([PpalSucursalID]) REFERENCES [dbo].[PpalSucursal] ([PpalSucursalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraEncabezado_SistemaTipoDocumento]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraEncabezado]
    ADD CONSTRAINT [FK_CmpOrdenCompraEncabezado_SistemaTipoDocumento] FOREIGN KEY ([TipoDocumentoID]) REFERENCES [dbo].[SistemaTipoDocumento] ([TipoDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraFactura_CmpOrdenCompraEncabezado]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraFactura]
    ADD CONSTRAINT [FK_CmpOrdenCompraFactura_CmpOrdenCompraEncabezado] FOREIGN KEY ([CmpOrdenCompraEncabezadoID]) REFERENCES [dbo].[CmpOrdenCompraEncabezado] ([CmpOrdenCompraEncabezadoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpOrdenCompraFactura_EspFactura]...';


GO
ALTER TABLE [dbo].[CmpOrdenCompraFactura]
    ADD CONSTRAINT [FK_CmpOrdenCompraFactura_EspFactura] FOREIGN KEY ([EspFacturaID]) REFERENCES [dbo].[EspFactura] ([EspFacturaID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpRequisicionDetalle_Almacen]...';


GO
ALTER TABLE [dbo].[CmpRequisicionDetalle]
    ADD CONSTRAINT [FK_CmpRequisicionDetalle_Almacen] FOREIGN KEY ([PpalAlmacenID]) REFERENCES [dbo].[PpalAlmacen] ([PpalAlmacenID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpRequisicionDetalle_AuxUnidad]...';


GO
ALTER TABLE [dbo].[CmpRequisicionDetalle]
    ADD CONSTRAINT [FK_CmpRequisicionDetalle_AuxUnidad] FOREIGN KEY ([AuxUnidadID]) REFERENCES [dbo].[AuxUnidad] ([AuxUnidadID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpRequisicionDetalle_CfgEstatusDocumento]...';


GO
ALTER TABLE [dbo].[CmpRequisicionDetalle]
    ADD CONSTRAINT [FK_CmpRequisicionDetalle_CfgEstatusDocumento] FOREIGN KEY ([CfgEstatusDocumentoID]) REFERENCES [dbo].[CfgEstatusDocumento] ([CfgEstatusDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpRequisicionDetalle_CmpRequisicionDetalle]...';


GO
ALTER TABLE [dbo].[CmpRequisicionDetalle]
    ADD CONSTRAINT [FK_CmpRequisicionDetalle_CmpRequisicionDetalle] FOREIGN KEY ([CmpRequisicionDetalleID]) REFERENCES [dbo].[CmpRequisicionDetalle] ([CmpRequisicionDetalleID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpRequisicionDetalle_CmpRequisicionEncabezado]...';


GO
ALTER TABLE [dbo].[CmpRequisicionDetalle]
    ADD CONSTRAINT [FK_CmpRequisicionDetalle_CmpRequisicionEncabezado] FOREIGN KEY ([CmpRequisicionEncabezadoID]) REFERENCES [dbo].[CmpRequisicionEncabezado] ([CmpRequisicionEncabezadoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpRequisicionDetalle_ConceptoEgreso]...';


GO
ALTER TABLE [dbo].[CmpRequisicionDetalle]
    ADD CONSTRAINT [FK_CmpRequisicionDetalle_ConceptoEgreso] FOREIGN KEY ([PpalConceptoEgresoID]) REFERENCES [dbo].[PpalConceptoEgreso] ([PpalConceptoEgresoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpRequisicionDetalle_PpalCuentaContable]...';


GO
ALTER TABLE [dbo].[CmpRequisicionDetalle]
    ADD CONSTRAINT [FK_CmpRequisicionDetalle_PpalCuentaContable] FOREIGN KEY ([PpalCuentaContableID]) REFERENCES [dbo].[PpalCuentaContable] ([PpalCuentaContableID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpRequisicionDetalle_PpalProducto]...';


GO
ALTER TABLE [dbo].[CmpRequisicionDetalle]
    ADD CONSTRAINT [FK_CmpRequisicionDetalle_PpalProducto] FOREIGN KEY ([PpalProductoID]) REFERENCES [dbo].[PpalProducto] ([PpalProductoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpRequisicionEncabezado_CfgEstatusDocumento]...';


GO
ALTER TABLE [dbo].[CmpRequisicionEncabezado]
    ADD CONSTRAINT [FK_CmpRequisicionEncabezado_CfgEstatusDocumento] FOREIGN KEY ([CfgEstatusDocumentoID]) REFERENCES [dbo].[CfgEstatusDocumento] ([CfgEstatusDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpRequisicionEncabezado_PpalArea]...';


GO
ALTER TABLE [dbo].[CmpRequisicionEncabezado]
    ADD CONSTRAINT [FK_CmpRequisicionEncabezado_PpalArea] FOREIGN KEY ([PpalAreaID]) REFERENCES [dbo].[PpalArea] ([PpalAreaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpRequisicionEncabezado_PpalCentroCosto]...';


GO
ALTER TABLE [dbo].[CmpRequisicionEncabezado]
    ADD CONSTRAINT [FK_CmpRequisicionEncabezado_PpalCentroCosto] FOREIGN KEY ([PpalCentroCostoID]) REFERENCES [dbo].[PpalCentroCosto] ([PpalCentroCostoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpRequisicionEncabezado_PpalPersonal]...';


GO
ALTER TABLE [dbo].[CmpRequisicionEncabezado]
    ADD CONSTRAINT [FK_CmpRequisicionEncabezado_PpalPersonal] FOREIGN KEY ([PpalPersonalID]) REFERENCES [dbo].[PpalPersonal] ([PpalPersonalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpRequisicionEncabezado_PpalSerie]...';


GO
ALTER TABLE [dbo].[CmpRequisicionEncabezado]
    ADD CONSTRAINT [FK_CmpRequisicionEncabezado_PpalSerie] FOREIGN KEY ([PpalSerieID]) REFERENCES [dbo].[PpalSerie] ([PpalSerieID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpRequisicionEncabezado_PpalSucursal]...';


GO
ALTER TABLE [dbo].[CmpRequisicionEncabezado]
    ADD CONSTRAINT [FK_CmpRequisicionEncabezado_PpalSucursal] FOREIGN KEY ([PpalSucursalID]) REFERENCES [dbo].[PpalSucursal] ([PpalSucursalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CmpRequisicionEncabezado_SistemaTipoDocumento]...';


GO
ALTER TABLE [dbo].[CmpRequisicionEncabezado]
    ADD CONSTRAINT [FK_CmpRequisicionEncabezado_SistemaTipoDocumento] FOREIGN KEY ([TipoDocumentoID]) REFERENCES [dbo].[SistemaTipoDocumento] ([TipoDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoCmpOrdenCompraEncabezado_CmpOrdenCompraEncabezado]...';


GO
ALTER TABLE [dbo].[CoCmpOrdenCompraEncabezado]
    ADD CONSTRAINT [FK_CoCmpOrdenCompraEncabezado_CmpOrdenCompraEncabezado] FOREIGN KEY ([CmpOrdenCompraEncabezadoID]) REFERENCES [dbo].[CmpOrdenCompraEncabezado] ([CmpOrdenCompraEncabezadoID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_CoCmpOrdenCompraEncabezado_CoPartida]...';


GO
ALTER TABLE [dbo].[CoCmpOrdenCompraEncabezado]
    ADD CONSTRAINT [FK_CoCmpOrdenCompraEncabezado_CoPartida] FOREIGN KEY ([CoPartidaID]) REFERENCES [dbo].[CoPartida] ([CoPartidaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoContratista_PpalProveedor]...';


GO
ALTER TABLE [dbo].[CoContratista]
    ADD CONSTRAINT [FK_CoContratista_PpalProveedor] FOREIGN KEY ([PpalProveedorID]) REFERENCES [dbo].[PpalProveedor] ([PpalProveedorID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoContrato_CoProyecto]...';


GO
ALTER TABLE [dbo].[CoContrato]
    ADD CONSTRAINT [FK_CoContrato_CoProyecto] FOREIGN KEY ([CoProyectoID]) REFERENCES [dbo].[CoProyecto] ([CoProyectoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoContrato_PpalProveedor]...';


GO
ALTER TABLE [dbo].[CoContrato]
    ADD CONSTRAINT [FK_CoContrato_PpalProveedor] FOREIGN KEY ([PpalProveedorID]) REFERENCES [dbo].[PpalProveedor] ([PpalProveedorID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoContratoRetencion_CoContrato]...';


GO
ALTER TABLE [dbo].[CoContratoRetencion]
    ADD CONSTRAINT [FK_CoContratoRetencion_CoContrato] FOREIGN KEY ([CoContratoID]) REFERENCES [dbo].[CoContrato] ([CoContratoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoElemento_CoContrato]...';


GO
ALTER TABLE [dbo].[CoElemento]
    ADD CONSTRAINT [FK_CoElemento_CoContrato] FOREIGN KEY ([CoContratoIDActual]) REFERENCES [dbo].[CoContrato] ([CoContratoID]) ON DELETE SET NULL;


GO
PRINT N'Creando Clave externa [dbo].[FK_CoElemento_CoFachada]...';


GO
ALTER TABLE [dbo].[CoElemento]
    ADD CONSTRAINT [FK_CoElemento_CoFachada] FOREIGN KEY ([CoFachadaID]) REFERENCES [dbo].[CoFachada] ([CoFachadaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoElemento_CoLote]...';


GO
ALTER TABLE [dbo].[CoElemento]
    ADD CONSTRAINT [FK_CoElemento_CoLote] FOREIGN KEY ([CoLoteID]) REFERENCES [dbo].[CoLote] ([CoLoteID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoElemento_CoModelo]...';


GO
ALTER TABLE [dbo].[CoElemento]
    ADD CONSTRAINT [FK_CoElemento_CoModelo] FOREIGN KEY ([CoModeloID]) REFERENCES [dbo].[CoModelo] ([CoModeloID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoElemento_CoTipoPresupuesto]...';


GO
ALTER TABLE [dbo].[CoElemento]
    ADD CONSTRAINT [FK_CoElemento_CoTipoPresupuesto] FOREIGN KEY ([CoTipoPresupuestoID]) REFERENCES [dbo].[CoTipoPresupuesto] ([CoTipoPresupuestoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoEtapa_CoProyecto]...';


GO
ALTER TABLE [dbo].[CoEtapa]
    ADD CONSTRAINT [FK_CoEtapa_CoProyecto] FOREIGN KEY ([CoProyectoID]) REFERENCES [dbo].[CoProyecto] ([CoProyectoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoFachada_SistemaEmpresa]...';


GO
ALTER TABLE [dbo].[CoFachada]
    ADD CONSTRAINT [FK_CoFachada_SistemaEmpresa] FOREIGN KEY ([EmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoLote_CoSeccion]...';


GO
ALTER TABLE [dbo].[CoLote]
    ADD CONSTRAINT [FK_CoLote_CoSeccion] FOREIGN KEY ([CoSeccionID]) REFERENCES [dbo].[CoSeccion] ([CoSeccionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoModelo_SistemaEmpresa]...';


GO
ALTER TABLE [dbo].[CoModelo]
    ADD CONSTRAINT [FK_CoModelo_SistemaEmpresa] FOREIGN KEY ([EmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoPartida_ConceptoEgreso]...';


GO
ALTER TABLE [dbo].[CoPartida]
    ADD CONSTRAINT [FK_CoPartida_ConceptoEgreso] FOREIGN KEY ([PpalConceptoEgresoIDInicio]) REFERENCES [dbo].[PpalConceptoEgreso] ([PpalConceptoEgresoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoPartida_CoPartida]...';


GO
ALTER TABLE [dbo].[CoPartida]
    ADD CONSTRAINT [FK_CoPartida_CoPartida] FOREIGN KEY ([PadreID]) REFERENCES [dbo].[CoPartida] ([CoPartidaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoPartida_CoTipoConstruccion]...';


GO
ALTER TABLE [dbo].[CoPartida]
    ADD CONSTRAINT [FK_CoPartida_CoTipoConstruccion] FOREIGN KEY ([CoTipoConstruccionID]) REFERENCES [dbo].[CoTipoConstruccion] ([CoTipoConstruccionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoPartida_CoTipoPresupuesto]...';


GO
ALTER TABLE [dbo].[CoPartida]
    ADD CONSTRAINT [FK_CoPartida_CoTipoPresupuesto] FOREIGN KEY ([CoTipoPresupuestoID]) REFERENCES [dbo].[CoTipoPresupuesto] ([CoTipoPresupuestoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoPartida_PpalArea]...';


GO
ALTER TABLE [dbo].[CoPartida]
    ADD CONSTRAINT [FK_CoPartida_PpalArea] FOREIGN KEY ([PpalAreaIDInicio]) REFERENCES [dbo].[PpalArea] ([PpalAreaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoPartidaBase_ConceptoEgreso]...';


GO
ALTER TABLE [dbo].[CoPartidaBase]
    ADD CONSTRAINT [FK_CoPartidaBase_ConceptoEgreso] FOREIGN KEY ([PpalConceptoEgresoIDInicio]) REFERENCES [dbo].[PpalConceptoEgreso] ([PpalConceptoEgresoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoPartidaBase_CoPartidaBase]...';


GO
ALTER TABLE [dbo].[CoPartidaBase]
    ADD CONSTRAINT [FK_CoPartidaBase_CoPartidaBase] FOREIGN KEY ([PadreID]) REFERENCES [dbo].[CoPartidaBase] ([CoPartidaBaseID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoPartidaBase_CoTipoConstruccion]...';


GO
ALTER TABLE [dbo].[CoPartidaBase]
    ADD CONSTRAINT [FK_CoPartidaBase_CoTipoConstruccion] FOREIGN KEY ([CoTipoConstruccionID]) REFERENCES [dbo].[CoTipoConstruccion] ([CoTipoConstruccionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoPartidaBase_CoTipoPresupuestoBase]...';


GO
ALTER TABLE [dbo].[CoPartidaBase]
    ADD CONSTRAINT [FK_CoPartidaBase_CoTipoPresupuestoBase] FOREIGN KEY ([CoTipoPresupuestoBaseID]) REFERENCES [dbo].[CoTipoPresupuestoBase] ([CoTipoPresupuestoBaseID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoPartidaBase_PpalArea]...';


GO
ALTER TABLE [dbo].[CoPartidaBase]
    ADD CONSTRAINT [FK_CoPartidaBase_PpalArea] FOREIGN KEY ([PpalAreaIDInicio]) REFERENCES [dbo].[PpalArea] ([PpalAreaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoPartidaDetalle_AuxUnidad]...';


GO
ALTER TABLE [dbo].[CoPartidaDetalle]
    ADD CONSTRAINT [FK_CoPartidaDetalle_AuxUnidad] FOREIGN KEY ([AuxUnidadID]) REFERENCES [dbo].[AuxUnidad] ([AuxUnidadID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoPartidaDetalle_CoPartida]...';


GO
ALTER TABLE [dbo].[CoPartidaDetalle]
    ADD CONSTRAINT [FK_CoPartidaDetalle_CoPartida] FOREIGN KEY ([CoPartidaID]) REFERENCES [dbo].[CoPartida] ([CoPartidaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoPartidaDetalle_PpalArea]...';


GO
ALTER TABLE [dbo].[CoPartidaDetalle]
    ADD CONSTRAINT [FK_CoPartidaDetalle_PpalArea] FOREIGN KEY ([PpalAreaID]) REFERENCES [dbo].[PpalArea] ([PpalAreaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoPartidaDetalle_PpalProducto]...';


GO
ALTER TABLE [dbo].[CoPartidaDetalle]
    ADD CONSTRAINT [FK_CoPartidaDetalle_PpalProducto] FOREIGN KEY ([PpalProductoID]) REFERENCES [dbo].[PpalProducto] ([PpalProductoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoPartidaGeneral_ConceptoEgreso]...';


GO
ALTER TABLE [dbo].[CoPartidaGeneral]
    ADD CONSTRAINT [FK_CoPartidaGeneral_ConceptoEgreso] FOREIGN KEY ([PpalConceptoEgresoIDInicio]) REFERENCES [dbo].[PpalConceptoEgreso] ([PpalConceptoEgresoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoPartidaGeneral_CoPartidaGeneral]...';


GO
ALTER TABLE [dbo].[CoPartidaGeneral]
    ADD CONSTRAINT [FK_CoPartidaGeneral_CoPartidaGeneral] FOREIGN KEY ([PadreID]) REFERENCES [dbo].[CoPartidaGeneral] ([CoPartidaGeneralID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoPartidaGeneral_CoTipoConstruccion]...';


GO
ALTER TABLE [dbo].[CoPartidaGeneral]
    ADD CONSTRAINT [FK_CoPartidaGeneral_CoTipoConstruccion] FOREIGN KEY ([CoTipoConstruccionID]) REFERENCES [dbo].[CoTipoConstruccion] ([CoTipoConstruccionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoPartidaGeneral_PpalArea]...';


GO
ALTER TABLE [dbo].[CoPartidaGeneral]
    ADD CONSTRAINT [FK_CoPartidaGeneral_PpalArea] FOREIGN KEY ([PpalAreaIDInicio]) REFERENCES [dbo].[PpalArea] ([PpalAreaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoProyecto_EspCP]...';


GO
ALTER TABLE [dbo].[CoProyecto]
    ADD CONSTRAINT [FK_CoProyecto_EspCP] FOREIGN KEY ([EspCP]) REFERENCES [dbo].[EspCP] ([EspCP]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoProyecto_PpalCentroCosto]...';


GO
ALTER TABLE [dbo].[CoProyecto]
    ADD CONSTRAINT [FK_CoProyecto_PpalCentroCosto] FOREIGN KEY ([PpalCentroCostoID]) REFERENCES [dbo].[PpalCentroCosto] ([PpalCentroCostoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoProyecto_PpalSucursal]...';


GO
ALTER TABLE [dbo].[CoProyecto]
    ADD CONSTRAINT [FK_CoProyecto_PpalSucursal] FOREIGN KEY ([PpalSucursalID]) REFERENCES [dbo].[PpalSucursal] ([PpalSucursalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoSeccion_CoProyecto]...';


GO
ALTER TABLE [dbo].[CoSeccion]
    ADD CONSTRAINT [FK_CoSeccion_CoProyecto] FOREIGN KEY ([CoProyectoID]) REFERENCES [dbo].[CoProyecto] ([CoProyectoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoTipoPresupuesto_CoProyecto]...';


GO
ALTER TABLE [dbo].[CoTipoPresupuesto]
    ADD CONSTRAINT [FK_CoTipoPresupuesto_CoProyecto] FOREIGN KEY ([CoProyectoID]) REFERENCES [dbo].[CoProyecto] ([CoProyectoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoTipoPresupuesto_CoTipoConstruccion]...';


GO
ALTER TABLE [dbo].[CoTipoPresupuesto]
    ADD CONSTRAINT [FK_CoTipoPresupuesto_CoTipoConstruccion] FOREIGN KEY ([CoTipoConstruccionID]) REFERENCES [dbo].[CoTipoConstruccion] ([CoTipoConstruccionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoTipoPresupuesto_CoTipoPresupuestoBase]...';


GO
ALTER TABLE [dbo].[CoTipoPresupuesto]
    ADD CONSTRAINT [FK_CoTipoPresupuesto_CoTipoPresupuestoBase] FOREIGN KEY ([CoTipoPresupuestoBaseID]) REFERENCES [dbo].[CoTipoPresupuestoBase] ([CoTipoPresupuestoBaseID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CoTipoPresupuestoBase_CoTipoConstruccion]...';


GO
ALTER TABLE [dbo].[CoTipoPresupuestoBase]
    ADD CONSTRAINT [FK_CoTipoPresupuestoBase_CoTipoConstruccion] FOREIGN KEY ([CoTipoConstruccionID]) REFERENCES [dbo].[CoTipoConstruccion] ([CoTipoConstruccionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_DatoFacturacion_Domicilio]...';


GO
ALTER TABLE [dbo].[DatoFacturacion]
    ADD CONSTRAINT [FK_DatoFacturacion_Domicilio] FOREIGN KEY ([DomicilioID]) REFERENCES [dbo].[EspDomicilio] ([EspDomicilioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_DatoFacturacion_Persona]...';


GO
ALTER TABLE [dbo].[DatoFacturacion]
    ADD CONSTRAINT [FK_DatoFacturacion_Persona] FOREIGN KEY ([EspPersonaID]) REFERENCES [dbo].[EspPersona] ([EspPersonaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_Ciudad_EspMunicipio]...';


GO
ALTER TABLE [dbo].[EspCiudad]
    ADD CONSTRAINT [FK_Ciudad_EspMunicipio] FOREIGN KEY ([EspMunicipioID]) REFERENCES [dbo].[EspMunicipio] ([EspMunicipioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK__EspColonia__CfgTipoAsentamiento]...';


GO
ALTER TABLE [dbo].[EspColonia]
    ADD CONSTRAINT [FK__EspColonia__CfgTipoAsentamiento] FOREIGN KEY ([CfgTipoAsentamientoID]) REFERENCES [dbo].[CfgTipoAsentamiento] ([CfgTipoAsentamientoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK__EspColonia__EspCiudad]...';


GO
ALTER TABLE [dbo].[EspColonia]
    ADD CONSTRAINT [FK__EspColonia__EspCiudad] FOREIGN KEY ([EspCiudadID]) REFERENCES [dbo].[EspCiudad] ([EspCiudadID]);


GO
PRINT N'Creando Clave externa [dbo].[FK__EspColonia__EspCP]...';


GO
ALTER TABLE [dbo].[EspColonia]
    ADD CONSTRAINT [FK__EspColonia__EspCP] FOREIGN KEY ([EspCP]) REFERENCES [dbo].[EspCP] ([EspCP]);


GO
PRINT N'Creando Clave externa [dbo].[FK_EspCP_EspCiudad]...';


GO
ALTER TABLE [dbo].[EspCP]
    ADD CONSTRAINT [FK_EspCP_EspCiudad] FOREIGN KEY ([EspCiudadID]) REFERENCES [dbo].[EspCiudad] ([EspCiudadID]);


GO
PRINT N'Creando Clave externa [dbo].[FK__EspDomicilio__EspColonia]...';


GO
ALTER TABLE [dbo].[EspDomicilio]
    ADD CONSTRAINT [FK__EspDomicilio__EspColonia] FOREIGN KEY ([EspColoniaID]) REFERENCES [dbo].[EspColonia] ([EspColoniaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_Domicilio_EspCiudad]...';


GO
ALTER TABLE [dbo].[EspDomicilio]
    ADD CONSTRAINT [FK_Domicilio_EspCiudad] FOREIGN KEY ([EspCiudadID]) REFERENCES [dbo].[EspCiudad] ([EspCiudadID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_EspEstado_EspPais]...';


GO
ALTER TABLE [dbo].[EspEstado]
    ADD CONSTRAINT [FK_EspEstado_EspPais] FOREIGN KEY ([EspPaisID]) REFERENCES [dbo].[EspPais] ([EspPaisID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_EspMunicipio_EspEstado]...';


GO
ALTER TABLE [dbo].[EspMunicipio]
    ADD CONSTRAINT [FK_EspMunicipio_EspEstado] FOREIGN KEY ([EspEstadoID]) REFERENCES [dbo].[EspEstado] ([EspEstadoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_EspPersona_EspDomicilio]...';


GO
ALTER TABLE [dbo].[EspPersona]
    ADD CONSTRAINT [FK_EspPersona_EspDomicilio] FOREIGN KEY ([EspDomicilioIDFacturacion]) REFERENCES [dbo].[EspDomicilio] ([EspDomicilioID]) ON DELETE SET NULL ON UPDATE SET NULL;


GO
PRINT N'Creando Clave externa [dbo].[FK_EspPersona_SATRegimenFiscal]...';


GO
ALTER TABLE [dbo].[EspPersona]
    ADD CONSTRAINT [FK_EspPersona_SATRegimenFiscal] FOREIGN KEY ([SATRegimenFiscalID]) REFERENCES [dbo].[SATRegimenFiscal] ([SATRegimenFiscalID]) ON UPDATE SET NULL;


GO
PRINT N'Creando Clave externa [dbo].[FK_EspPersona_SistemaSexo]...';


GO
ALTER TABLE [dbo].[EspPersona]
    ADD CONSTRAINT [FK_EspPersona_SistemaSexo] FOREIGN KEY ([SistemaSexoID]) REFERENCES [dbo].[SistemaSexo] ([SexoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_Persona_EspCiudad]...';


GO
ALTER TABLE [dbo].[EspPersona]
    ADD CONSTRAINT [FK_Persona_EspCiudad] FOREIGN KEY ([EspCiudadNacimientoID]) REFERENCES [dbo].[EspCiudad] ([EspCiudadID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_Persona_EstadoCivil]...';


GO
ALTER TABLE [dbo].[EspPersona]
    ADD CONSTRAINT [FK_Persona_EstadoCivil] FOREIGN KEY ([AuxEstadoCivilID]) REFERENCES [dbo].[AuxEstadoCivil] ([AuxEstadoCivilID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_Fecha_CfgTipoFecha]...';


GO
ALTER TABLE [dbo].[EspPersonaFecha]
    ADD CONSTRAINT [FK_Fecha_CfgTipoFecha] FOREIGN KEY ([CfgTipoFechaID]) REFERENCES [dbo].[CfgTipoFecha] ([CfgTipoFechaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_Fecha_Persona]...';


GO
ALTER TABLE [dbo].[EspPersonaFecha]
    ADD CONSTRAINT [FK_Fecha_Persona] FOREIGN KEY ([EspPersonaID]) REFERENCES [dbo].[EspPersona] ([EspPersonaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_Telefono_CfgTipoTelefono]...';


GO
ALTER TABLE [dbo].[EspTelefono]
    ADD CONSTRAINT [FK_Telefono_CfgTipoTelefono] FOREIGN KEY ([CfgTipoTelefonoID]) REFERENCES [dbo].[CfgTipoTelefono] ([CfgTipoTelefonoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_Telefono_SistemaEstatusTelefono]...';


GO
ALTER TABLE [dbo].[EspTelefono]
    ADD CONSTRAINT [FK_Telefono_SistemaEstatusTelefono] FOREIGN KEY ([SistemaEstatusTelefonoID]) REFERENCES [dbo].[SistemaEstatusTelefono] ([EstatusTelefonoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_InvMovimientoDesglose_InvMovimientoDetalle]...';


GO
ALTER TABLE [dbo].[InvMovimientoDesglose]
    ADD CONSTRAINT [FK_InvMovimientoDesglose_InvMovimientoDetalle] FOREIGN KEY ([InvMovimientoDetalleID]) REFERENCES [dbo].[InvMovimientoDetalle] ([InvMovimientoDetalleID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_InvMovimientoDesglose_PpalAlmacen]...';


GO
ALTER TABLE [dbo].[InvMovimientoDesglose]
    ADD CONSTRAINT [FK_InvMovimientoDesglose_PpalAlmacen] FOREIGN KEY ([PpalAlmacenID]) REFERENCES [dbo].[PpalAlmacen] ([PpalAlmacenID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_InvMovimientoDesglose_PpalArea]...';


GO
ALTER TABLE [dbo].[InvMovimientoDesglose]
    ADD CONSTRAINT [FK_InvMovimientoDesglose_PpalArea] FOREIGN KEY ([PpalAreaID]) REFERENCES [dbo].[PpalArea] ([PpalAreaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_InvMovimientoDesglose_PpalCentroCosto]...';


GO
ALTER TABLE [dbo].[InvMovimientoDesglose]
    ADD CONSTRAINT [FK_InvMovimientoDesglose_PpalCentroCosto] FOREIGN KEY ([PpalCentroCostoID]) REFERENCES [dbo].[PpalCentroCosto] ([PpalCentroCostoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_InvMovimientoDesglose_PpalConceptoEgreso]...';


GO
ALTER TABLE [dbo].[InvMovimientoDesglose]
    ADD CONSTRAINT [FK_InvMovimientoDesglose_PpalConceptoEgreso] FOREIGN KEY ([PpalConceptoEgresoID]) REFERENCES [dbo].[PpalConceptoEgreso] ([PpalConceptoEgresoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_InvMovimientoDesglose_PpalCuentaContable]...';


GO
ALTER TABLE [dbo].[InvMovimientoDesglose]
    ADD CONSTRAINT [FK_InvMovimientoDesglose_PpalCuentaContable] FOREIGN KEY ([PpalCuentaContableID]) REFERENCES [dbo].[PpalCuentaContable] ([PpalCuentaContableID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_InvMovimientoDesglose_PpalSucursal]...';


GO
ALTER TABLE [dbo].[InvMovimientoDesglose]
    ADD CONSTRAINT [FK_InvMovimientoDesglose_PpalSucursal] FOREIGN KEY ([PpalSucursalID]) REFERENCES [dbo].[PpalSucursal] ([PpalSucursalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_InvMovimientoDetalle_AuxUnidad]...';


GO
ALTER TABLE [dbo].[InvMovimientoDetalle]
    ADD CONSTRAINT [FK_InvMovimientoDetalle_AuxUnidad] FOREIGN KEY ([AuxUnidadID]) REFERENCES [dbo].[AuxUnidad] ([AuxUnidadID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_InvMovimientoDetalle_CmpCompraDetalle]...';


GO
ALTER TABLE [dbo].[InvMovimientoDetalle]
    ADD CONSTRAINT [FK_InvMovimientoDetalle_CmpCompraDetalle] FOREIGN KEY ([CmpCompraDetalleID]) REFERENCES [dbo].[CmpCompraDetalle] ([CmpCompraDetalleID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_InvMovimientoDetalle_CmpOrdenCompraDetalle]...';


GO
ALTER TABLE [dbo].[InvMovimientoDetalle]
    ADD CONSTRAINT [FK_InvMovimientoDetalle_CmpOrdenCompraDetalle] FOREIGN KEY ([CmpOrdenCompraDetalleID]) REFERENCES [dbo].[CmpOrdenCompraDetalle] ([CmpOrdenCompraDetalleID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_InvMovimientoDetalle_InvMovimientoDetalle]...';


GO
ALTER TABLE [dbo].[InvMovimientoDetalle]
    ADD CONSTRAINT [FK_InvMovimientoDetalle_InvMovimientoDetalle] FOREIGN KEY ([InvMovimientoEncabezadoID]) REFERENCES [dbo].[InvMovimientoEncabezado] ([InvMovimientoEncabezadoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_InvMovimientoDetalle_PpalProducto]...';


GO
ALTER TABLE [dbo].[InvMovimientoDetalle]
    ADD CONSTRAINT [FK_InvMovimientoDetalle_PpalProducto] FOREIGN KEY ([PpalProductoID]) REFERENCES [dbo].[PpalProducto] ([PpalProductoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_InvMovimientoEncabezado_CfgEstatusDocumento]...';


GO
ALTER TABLE [dbo].[InvMovimientoEncabezado]
    ADD CONSTRAINT [FK_InvMovimientoEncabezado_CfgEstatusDocumento] FOREIGN KEY ([CfgEstatusDocumentoID]) REFERENCES [dbo].[CfgEstatusDocumento] ([CfgEstatusDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_InvMovimientoEncabezado_InvTipoMovimientoInventario]...';


GO
ALTER TABLE [dbo].[InvMovimientoEncabezado]
    ADD CONSTRAINT [FK_InvMovimientoEncabezado_InvTipoMovimientoInventario] FOREIGN KEY ([InvTipoMovimientoInventarioID]) REFERENCES [dbo].[InvTipoMovimientoInventario] ([InvTipoMovimientoInventarioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_InvMovimientoEncabezado_PpalPersonal]...';


GO
ALTER TABLE [dbo].[InvMovimientoEncabezado]
    ADD CONSTRAINT [FK_InvMovimientoEncabezado_PpalPersonal] FOREIGN KEY ([PpalPersonalID]) REFERENCES [dbo].[PpalPersonal] ([PpalPersonalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_InvMovimientoEncabezado_PpalSerie]...';


GO
ALTER TABLE [dbo].[InvMovimientoEncabezado]
    ADD CONSTRAINT [FK_InvMovimientoEncabezado_PpalSerie] FOREIGN KEY ([PpalSerieID]) REFERENCES [dbo].[PpalSerie] ([PpalSerieID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_InvMovimientoEncabezado_PpalSucursal]...';


GO
ALTER TABLE [dbo].[InvMovimientoEncabezado]
    ADD CONSTRAINT [FK_InvMovimientoEncabezado_PpalSucursal] FOREIGN KEY ([PpalSucursalID]) REFERENCES [dbo].[PpalSucursal] ([PpalSucursalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_InvMovimientoEncabezado_SistemaTipoDocumento]...';


GO
ALTER TABLE [dbo].[InvMovimientoEncabezado]
    ADD CONSTRAINT [FK_InvMovimientoEncabezado_SistemaTipoDocumento] FOREIGN KEY ([TipoDocumentoID]) REFERENCES [dbo].[SistemaTipoDocumento] ([TipoDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjChatConversacionUsuario_MsjChatConversacion]...';


GO
ALTER TABLE [dbo].[MsjChatConversacionUsuario]
    ADD CONSTRAINT [FK_MsjChatConversacionUsuario_MsjChatConversacion] FOREIGN KEY ([ConversacionID]) REFERENCES [dbo].[MsjChatConversacion] ([ConversacionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjChatConversacionUsuario_MsjChatPermisoConversacion]...';


GO
ALTER TABLE [dbo].[MsjChatConversacionUsuario]
    ADD CONSTRAINT [FK_MsjChatConversacionUsuario_MsjChatPermisoConversacion] FOREIGN KEY ([PermisoConversacionID]) REFERENCES [dbo].[MsjChatPermisoConversacion] ([PermisoConversacionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjChatConversacionUsuario_SegUsuario]...';


GO
ALTER TABLE [dbo].[MsjChatConversacionUsuario]
    ADD CONSTRAINT [FK_MsjChatConversacionUsuario_SegUsuario] FOREIGN KEY ([UsuarioID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjChatMessages_MsjChatConversacion]...';


GO
ALTER TABLE [dbo].[MsjChatMensaje]
    ADD CONSTRAINT [FK_MsjChatMessages_MsjChatConversacion] FOREIGN KEY ([ConversacionID]) REFERENCES [dbo].[MsjChatConversacion] ([ConversacionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjChatMessages_MsjChatTipoMensaje]...';


GO
ALTER TABLE [dbo].[MsjChatMensaje]
    ADD CONSTRAINT [FK_MsjChatMessages_MsjChatTipoMensaje] FOREIGN KEY ([TipoMensajeID]) REFERENCES [dbo].[MsjChatTipoMensaje] ([TipoMensajeID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjChatMessages_SegUsuario]...';


GO
ALTER TABLE [dbo].[MsjChatMensaje]
    ADD CONSTRAINT [FK_MsjChatMessages_SegUsuario] FOREIGN KEY ([UsuarioID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjChatUltimaConsultaConversacion_MsjChatConversacion]...';


GO
ALTER TABLE [dbo].[MsjChatUltimaConsultaConversacion]
    ADD CONSTRAINT [FK_MsjChatUltimaConsultaConversacion_MsjChatConversacion] FOREIGN KEY ([ConversacionID]) REFERENCES [dbo].[MsjChatConversacion] ([ConversacionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjChatUltimaConsultaConversacion_SegUsuario]...';


GO
ALTER TABLE [dbo].[MsjChatUltimaConsultaConversacion]
    ADD CONSTRAINT [FK_MsjChatUltimaConsultaConversacion_SegUsuario] FOREIGN KEY ([UsuarioID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjComunicaListaDistribucionListaDistribucion_MsjComunicaListaDistribucion]...';


GO
ALTER TABLE [dbo].[MsjComunicaListaDistribucionListaDistribucion]
    ADD CONSTRAINT [FK_MsjComunicaListaDistribucionListaDistribucion_MsjComunicaListaDistribucion] FOREIGN KEY ([ListaDistribucionID]) REFERENCES [dbo].[MsjComunicaListaDistribucion] ([ListaDistribucionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjComunicaListaDistribucionListaDistribucion_MsjComunicaListaDistribucion_1]...';


GO
ALTER TABLE [dbo].[MsjComunicaListaDistribucionListaDistribucion]
    ADD CONSTRAINT [FK_MsjComunicaListaDistribucionListaDistribucion_MsjComunicaListaDistribucion_1] FOREIGN KEY ([MiembroListaDistribucionID]) REFERENCES [dbo].[MsjComunicaListaDistribucion] ([ListaDistribucionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjComunicaListaDistribucionUser_ListaDistribucionID]...';


GO
ALTER TABLE [dbo].[MsjComunicaListaDistribucionUsuario]
    ADD CONSTRAINT [FK_MsjComunicaListaDistribucionUser_ListaDistribucionID] FOREIGN KEY ([ListaDistribucionID]) REFERENCES [dbo].[MsjComunicaListaDistribucion] ([ListaDistribucionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjComunicaListaDistribucionUser_SegUsuario_1]...';


GO
ALTER TABLE [dbo].[MsjComunicaListaDistribucionUsuario]
    ADD CONSTRAINT [FK_MsjComunicaListaDistribucionUser_SegUsuario_1] FOREIGN KEY ([UsuarioID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjComunicaMensaje_MsjComunicaCanalComunicacion]...';


GO
ALTER TABLE [dbo].[MsjComunicaMensaje]
    ADD CONSTRAINT [FK_MsjComunicaMensaje_MsjComunicaCanalComunicacion] FOREIGN KEY ([CanalComunicacionID]) REFERENCES [dbo].[MsjComunicaCanalComunicacion] ([CanalComunicacionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjComunicaMensaje_MsjComunicaTipoMensaje]...';


GO
ALTER TABLE [dbo].[MsjComunicaMensaje]
    ADD CONSTRAINT [FK_MsjComunicaMensaje_MsjComunicaTipoMensaje] FOREIGN KEY ([TipoMensajeID]) REFERENCES [dbo].[MsjComunicaTipoMensaje] ([TipoMensajeID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjComunicaMensaje_SegUsuario]...';


GO
ALTER TABLE [dbo].[MsjComunicaMensaje]
    ADD CONSTRAINT [FK_MsjComunicaMensaje_SegUsuario] FOREIGN KEY ([RemitenteID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjComunicaMensaje_SegUsuario_1]...';


GO
ALTER TABLE [dbo].[MsjComunicaMensaje]
    ADD CONSTRAINT [FK_MsjComunicaMensaje_SegUsuario_1] FOREIGN KEY ([DestinatarioID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjComunicaReporteEnvio_SegUsuario]...';


GO
ALTER TABLE [dbo].[MsjComunicaReporteEnvio]
    ADD CONSTRAINT [FK_MsjComunicaReporteEnvio_SegUsuario] FOREIGN KEY ([RemitenteID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjComunicaReporteEnvioMensaje_MsjComunicaMensaje]...';


GO
ALTER TABLE [dbo].[MsjComunicaReporteEnvioMensaje]
    ADD CONSTRAINT [FK_MsjComunicaReporteEnvioMensaje_MsjComunicaMensaje] FOREIGN KEY ([MensajeID]) REFERENCES [dbo].[MsjComunicaMensaje] ([MensajeID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjComunicaReporteEnvioMensaje_MsjComunicaReporteEnvio]...';


GO
ALTER TABLE [dbo].[MsjComunicaReporteEnvioMensaje]
    ADD CONSTRAINT [FK_MsjComunicaReporteEnvioMensaje_MsjComunicaReporteEnvio] FOREIGN KEY ([ReporteEnvioID]) REFERENCES [dbo].[MsjComunicaReporteEnvio] ([ReporteEnvioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjComunicaUltimaConsultaMensaje_SegUsuario]...';


GO
ALTER TABLE [dbo].[MsjComunicaUltimaConsultaMensaje]
    ADD CONSTRAINT [FK_MsjComunicaUltimaConsultaMensaje_SegUsuario] FOREIGN KEY ([UsuarioID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjComunicaUltimaConsultaReporteMensaje_SegUsuario]...';


GO
ALTER TABLE [dbo].[MsjComunicaUltimaConsultaReporteMensaje]
    ADD CONSTRAINT [FK_MsjComunicaUltimaConsultaReporteMensaje_SegUsuario] FOREIGN KEY ([UsuarioID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjComunicaUsuarioDeviceToken_MsjComunicaDeviceToken]...';


GO
ALTER TABLE [dbo].[MsjComunicaUsuarioDeviceToken]
    ADD CONSTRAINT [FK_MsjComunicaUsuarioDeviceToken_MsjComunicaDeviceToken] FOREIGN KEY ([DeviceTokenID]) REFERENCES [dbo].[MsjComunicaDeviceToken] ([DeviceTokenID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjComunicaUsuarioDeviceToken_SegUsuario]...';


GO
ALTER TABLE [dbo].[MsjComunicaUsuarioDeviceToken]
    ADD CONSTRAINT [FK_MsjComunicaUsuarioDeviceToken_SegUsuario] FOREIGN KEY ([UsuarioID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjComunicaUsuarioPreferenciaContacto_MsjComunicaCanalComunicacion]...';


GO
ALTER TABLE [dbo].[MsjComunicaUsuarioPreferenciaContacto]
    ADD CONSTRAINT [FK_MsjComunicaUsuarioPreferenciaContacto_MsjComunicaCanalComunicacion] FOREIGN KEY ([CanalComunicacionID]) REFERENCES [dbo].[MsjComunicaCanalComunicacion] ([CanalComunicacionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_MsjComunicaUsuarioPreferenciaContacto_SegUsuario]...';


GO
ALTER TABLE [dbo].[MsjComunicaUsuarioPreferenciaContacto]
    ADD CONSTRAINT [FK_MsjComunicaUsuarioPreferenciaContacto_SegUsuario] FOREIGN KEY ([UsuarioID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_Almacen_PpalSucursal]...';


GO
ALTER TABLE [dbo].[PpalAlmacen]
    ADD CONSTRAINT [FK_Almacen_PpalSucursal] FOREIGN KEY ([PpalSucursalID]) REFERENCES [dbo].[PpalSucursal] ([PpalSucursalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalArea_SistemaEmpresa]...';


GO
ALTER TABLE [dbo].[PpalArea]
    ADD CONSTRAINT [FK_PpalArea_SistemaEmpresa] FOREIGN KEY ([EmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalCentroCosto_SistemaEmpresa]...';


GO
ALTER TABLE [dbo].[PpalCentroCosto]
    ADD CONSTRAINT [FK_PpalCentroCosto_SistemaEmpresa] FOREIGN KEY ([EmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_ConceptoEgreso_SistemaEmpresa]...';


GO
ALTER TABLE [dbo].[PpalConceptoEgreso]
    ADD CONSTRAINT [FK_ConceptoEgreso_SistemaEmpresa] FOREIGN KEY ([EmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_ConceptoIngreso_SistemaEmpresa]...';


GO
ALTER TABLE [dbo].[PpalConceptoIngreso]
    ADD CONSTRAINT [FK_ConceptoIngreso_SistemaEmpresa] FOREIGN KEY ([SistemaEmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalContactoPersonal_Persona]...';


GO
ALTER TABLE [dbo].[PpalContactoPersonal]
    ADD CONSTRAINT [FK_PpalContactoPersonal_Persona] FOREIGN KEY ([EspPersonaID]) REFERENCES [dbo].[EspPersona] ([EspPersonaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalContactoPersonal_SistemaPersonalTipoContacto]...';


GO
ALTER TABLE [dbo].[PpalContactoPersonal]
    ADD CONSTRAINT [FK_PpalContactoPersonal_SistemaPersonalTipoContacto] FOREIGN KEY ([TipoContactoPersonalID]) REFERENCES [dbo].[SistemaTipoContactoPersonal] ([TipoContactoPersonalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalContactoPersonalDomicilio_CfgTipoDomicilio]...';


GO
ALTER TABLE [dbo].[PpalContactoPersonalDomicilio]
    ADD CONSTRAINT [FK_PpalContactoPersonalDomicilio_CfgTipoDomicilio] FOREIGN KEY ([CfgTipoDomicilioID]) REFERENCES [dbo].[CfgTipoDomicilio] ([CfgTipoDomicilioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalContactoPersonalDomicilio_Domicilio]...';


GO
ALTER TABLE [dbo].[PpalContactoPersonalDomicilio]
    ADD CONSTRAINT [FK_PpalContactoPersonalDomicilio_Domicilio] FOREIGN KEY ([EspDomicilioID]) REFERENCES [dbo].[EspDomicilio] ([EspDomicilioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalContactoPersonalDomicilio_PpalContactoPersonal]...';


GO
ALTER TABLE [dbo].[PpalContactoPersonalDomicilio]
    ADD CONSTRAINT [FK_PpalContactoPersonalDomicilio_PpalContactoPersonal] FOREIGN KEY ([PpalContactoPersonalID]) REFERENCES [dbo].[PpalContactoPersonal] ([PpalContactoPersonalID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalContactoPersonal_ContactoPersonalFecha]...';


GO
ALTER TABLE [dbo].[PpalContactoPersonalFecha]
    ADD CONSTRAINT [FK_PpalContactoPersonal_ContactoPersonalFecha] FOREIGN KEY ([PpalContactoPersonalID]) REFERENCES [dbo].[PpalContactoPersonal] ([PpalContactoPersonalID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalContactoPersonalFecha_CfgTipoFecha]...';


GO
ALTER TABLE [dbo].[PpalContactoPersonalFecha]
    ADD CONSTRAINT [FK_PpalContactoPersonalFecha_CfgTipoFecha] FOREIGN KEY ([CfgTipoFechaID]) REFERENCES [dbo].[CfgTipoFecha] ([CfgTipoFechaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalContactoPersonalMail_CfgTipoMail]...';


GO
ALTER TABLE [dbo].[PpalContactoPersonalMail]
    ADD CONSTRAINT [FK_PpalContactoPersonalMail_CfgTipoMail] FOREIGN KEY ([CfgTipoMailID]) REFERENCES [dbo].[CfgTipoMail] ([CfgTipoMailID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalContactoPersonalMail_PpalContactoPersonal]...';


GO
ALTER TABLE [dbo].[PpalContactoPersonalMail]
    ADD CONSTRAINT [FK_PpalContactoPersonalMail_PpalContactoPersonal] FOREIGN KEY ([PpalContactoPersonalID]) REFERENCES [dbo].[PpalContactoPersonal] ([PpalContactoPersonalID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalContactoPersonalTelefono_CfgUsoTelefonoID]...';


GO
ALTER TABLE [dbo].[PpalContactoPersonalTelefono]
    ADD CONSTRAINT [FK_PpalContactoPersonalTelefono_CfgUsoTelefonoID] FOREIGN KEY ([CfgUsoTelefonoID]) REFERENCES [dbo].[CfgUsoTelefono] ([CfgUsoTelefonoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalContactoPersonalTelefono_PpalContactoPersonal]...';


GO
ALTER TABLE [dbo].[PpalContactoPersonalTelefono]
    ADD CONSTRAINT [FK_PpalContactoPersonalTelefono_PpalContactoPersonal] FOREIGN KEY ([PpalContactoPersonalID]) REFERENCES [dbo].[PpalContactoPersonal] ([PpalContactoPersonalID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalContactoPersonalTelefono_Telefono]...';


GO
ALTER TABLE [dbo].[PpalContactoPersonalTelefono]
    ADD CONSTRAINT [FK_PpalContactoPersonalTelefono_Telefono] FOREIGN KEY ([EspTelefonoID]) REFERENCES [dbo].[EspTelefono] ([EspTelefonoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_CuentaContable_SistemaEmpresa]...';


GO
ALTER TABLE [dbo].[PpalCuentaContable]
    ADD CONSTRAINT [FK_CuentaContable_SistemaEmpresa] FOREIGN KEY ([EmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalPersonal_AuxHorarioPersonal]...';


GO
ALTER TABLE [dbo].[PpalPersonal]
    ADD CONSTRAINT [FK_PpalPersonal_AuxHorarioPersonal] FOREIGN KEY ([AuxHorarioPersonalID]) REFERENCES [dbo].[AuxHorarioPersonal] ([AuxHorarioPersonalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalPersonal_AuxPuesto]...';


GO
ALTER TABLE [dbo].[PpalPersonal]
    ADD CONSTRAINT [FK_PpalPersonal_AuxPuesto] FOREIGN KEY ([AuxPuestoID]) REFERENCES [dbo].[AuxPuesto] ([AuxPuestoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalPersonal_CfgEstatusPersonal]...';


GO
ALTER TABLE [dbo].[PpalPersonal]
    ADD CONSTRAINT [FK_PpalPersonal_CfgEstatusPersonal] FOREIGN KEY ([CfgEstatusPersonalID]) REFERENCES [dbo].[CfgEstatusPersonal] ([CfgEstatusPersonalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalPersonal_Persona]...';


GO
ALTER TABLE [dbo].[PpalPersonal]
    ADD CONSTRAINT [FK_PpalPersonal_Persona] FOREIGN KEY ([EspPersonaID]) REFERENCES [dbo].[EspPersona] ([EspPersonaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalPersonal_PpalArea]...';


GO
ALTER TABLE [dbo].[PpalPersonal]
    ADD CONSTRAINT [FK_PpalPersonal_PpalArea] FOREIGN KEY ([PpalAreaID]) REFERENCES [dbo].[PpalArea] ([PpalAreaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalPersonal_PpalCentroCosto]...';


GO
ALTER TABLE [dbo].[PpalPersonal]
    ADD CONSTRAINT [FK_PpalPersonal_PpalCentroCosto] FOREIGN KEY ([PpalCentroCostoID]) REFERENCES [dbo].[PpalCentroCosto] ([PpalCentroCostoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalPersonal_SistemaEmpresa]...';


GO
ALTER TABLE [dbo].[PpalPersonal]
    ADD CONSTRAINT [FK_PpalPersonal_SistemaEmpresa] FOREIGN KEY ([EmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PersonalDomicilio_CfgTipoDomicilio]...';


GO
ALTER TABLE [dbo].[PpalPersonalDomicilio]
    ADD CONSTRAINT [FK_PersonalDomicilio_CfgTipoDomicilio] FOREIGN KEY ([CfgTipoDomicilioID]) REFERENCES [dbo].[CfgTipoDomicilio] ([CfgTipoDomicilioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PersonalDomicilio_Domicilio]...';


GO
ALTER TABLE [dbo].[PpalPersonalDomicilio]
    ADD CONSTRAINT [FK_PersonalDomicilio_Domicilio] FOREIGN KEY ([EspDomicilioID]) REFERENCES [dbo].[EspDomicilio] ([EspDomicilioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PersonalFecha_CfgTipoFecha]...';


GO
ALTER TABLE [dbo].[PpalPersonalFecha]
    ADD CONSTRAINT [FK_PersonalFecha_CfgTipoFecha] FOREIGN KEY ([CfgTipoFechaID]) REFERENCES [dbo].[CfgTipoFecha] ([CfgTipoFechaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalPersonalFecha_PpalPersonal]...';


GO
ALTER TABLE [dbo].[PpalPersonalFecha]
    ADD CONSTRAINT [FK_PpalPersonalFecha_PpalPersonal] FOREIGN KEY ([PpalPersonalID]) REFERENCES [dbo].[PpalPersonal] ([PpalPersonalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalPersonalMail_CfgTipoMail]...';


GO
ALTER TABLE [dbo].[PpalPersonalMail]
    ADD CONSTRAINT [FK_PpalPersonalMail_CfgTipoMail] FOREIGN KEY ([CfgTipoMailID]) REFERENCES [dbo].[CfgTipoMail] ([CfgTipoMailID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalPersonalMail_PpalPersonal]...';


GO
ALTER TABLE [dbo].[PpalPersonalMail]
    ADD CONSTRAINT [FK_PpalPersonalMail_PpalPersonal] FOREIGN KEY ([PpalPersonalID]) REFERENCES [dbo].[PpalPersonal] ([PpalPersonalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalPersonalTelefono_CfgUsoTelefonoID]...';


GO
ALTER TABLE [dbo].[PpalPersonalTelefono]
    ADD CONSTRAINT [FK_PpalPersonalTelefono_CfgUsoTelefonoID] FOREIGN KEY ([CfgUsoTelefonoID]) REFERENCES [dbo].[CfgUsoTelefono] ([CfgUsoTelefonoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalPersonalTelefono_PpalPersonal]...';


GO
ALTER TABLE [dbo].[PpalPersonalTelefono]
    ADD CONSTRAINT [FK_PpalPersonalTelefono_PpalPersonal] FOREIGN KEY ([PpalPersonalID]) REFERENCES [dbo].[PpalPersonal] ([PpalPersonalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalPersonalTelefono_Telefono]...';


GO
ALTER TABLE [dbo].[PpalPersonalTelefono]
    ADD CONSTRAINT [FK_PpalPersonalTelefono_Telefono] FOREIGN KEY ([EspTelefonoID]) REFERENCES [dbo].[EspTelefono] ([EspTelefonoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProducto_AuxMarca]...';


GO
ALTER TABLE [dbo].[PpalProducto]
    ADD CONSTRAINT [FK_PpalProducto_AuxMarca] FOREIGN KEY ([MarcaID]) REFERENCES [dbo].[AuxMarca] ([AuxMarcaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProducto_AuxUnidad]...';


GO
ALTER TABLE [dbo].[PpalProducto]
    ADD CONSTRAINT [FK_PpalProducto_AuxUnidad] FOREIGN KEY ([AuxUnidadID]) REFERENCES [dbo].[AuxUnidad] ([AuxUnidadID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProducto_CfgFamiliaProducto]...';


GO
ALTER TABLE [dbo].[PpalProducto]
    ADD CONSTRAINT [FK_PpalProducto_CfgFamiliaProducto] FOREIGN KEY ([CfgFamiliaProductoID]) REFERENCES [dbo].[CfgFamiliaProducto] ([CfgFamiliaProductoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProducto_CfgTipoProducto]...';


GO
ALTER TABLE [dbo].[PpalProducto]
    ADD CONSTRAINT [FK_PpalProducto_CfgTipoProducto] FOREIGN KEY ([CfgTipoProductoID]) REFERENCES [dbo].[CfgTipoProducto] ([CfgTipoProductoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProducto_SistemaClaseProducto]...';


GO
ALTER TABLE [dbo].[PpalProducto]
    ADD CONSTRAINT [FK_PpalProducto_SistemaClaseProducto] FOREIGN KEY ([ClaseProductoID]) REFERENCES [dbo].[SistemaClaseProducto] ([ClaseProductoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProducto_SistemaEmpresa]...';


GO
ALTER TABLE [dbo].[PpalProducto]
    ADD CONSTRAINT [FK_PpalProducto_SistemaEmpresa] FOREIGN KEY ([EmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]) ON DELETE SET NULL;


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProducto_SistemaEstatusProducto]...';


GO
ALTER TABLE [dbo].[PpalProducto]
    ADD CONSTRAINT [FK_PpalProducto_SistemaEstatusProducto] FOREIGN KEY ([EstatusProductoID]) REFERENCES [dbo].[SistemaEstatusProducto] ([EstatusProductoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProducto_SistemaMetodoCosteo]...';


GO
ALTER TABLE [dbo].[PpalProducto]
    ADD CONSTRAINT [FK_PpalProducto_SistemaMetodoCosteo] FOREIGN KEY ([MetodoCosteoID]) REFERENCES [dbo].[SistemaMetodoCosteo] ([MetodoCosteoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProducto_SistemaNivelProducto2]...';


GO
ALTER TABLE [dbo].[PpalProducto]
    ADD CONSTRAINT [FK_PpalProducto_SistemaNivelProducto2] FOREIGN KEY ([NivelProductoID]) REFERENCES [dbo].[SistemaNivelProducto] ([NivelProductoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_ControlProductoAlmacen_Almacen]...';


GO
ALTER TABLE [dbo].[PpalProductoAlmacen]
    ADD CONSTRAINT [FK_ControlProductoAlmacen_Almacen] FOREIGN KEY ([PpalAlmacenID]) REFERENCES [dbo].[PpalAlmacen] ([PpalAlmacenID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_ProductoAlmacen_PpalProducto]...';


GO
ALTER TABLE [dbo].[PpalProductoAlmacen]
    ADD CONSTRAINT [FK_ProductoAlmacen_PpalProducto] FOREIGN KEY ([PpalProductoID]) REFERENCES [dbo].[PpalProducto] ([PpalProductoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_ProductoEmpresa_PpalProducto]...';


GO
ALTER TABLE [dbo].[PpalProductoEmpresa]
    ADD CONSTRAINT [FK_ProductoEmpresa_PpalProducto] FOREIGN KEY ([PpalProductoID]) REFERENCES [dbo].[PpalProducto] ([PpalProductoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_ProductoEmpresa_SistemaEmpresa]...';


GO
ALTER TABLE [dbo].[PpalProductoEmpresa]
    ADD CONSTRAINT [FK_ProductoEmpresa_SistemaEmpresa] FOREIGN KEY ([EmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProveedor_AuxMedioContacto]...';


GO
ALTER TABLE [dbo].[PpalProveedor]
    ADD CONSTRAINT [FK_PpalProveedor_AuxMedioContacto] FOREIGN KEY ([AuxMedioContactoID]) REFERENCES [dbo].[AuxMedioContacto] ([AuxMedioContactoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProveedor_AuxVinculo]...';


GO
ALTER TABLE [dbo].[PpalProveedor]
    ADD CONSTRAINT [FK_PpalProveedor_AuxVinculo] FOREIGN KEY ([AuxVinculoID]) REFERENCES [dbo].[AuxVinculo] ([AuxVinculoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProveedor_CmpTipoProveedor]...';


GO
ALTER TABLE [dbo].[PpalProveedor]
    ADD CONSTRAINT [FK_PpalProveedor_CmpTipoProveedor] FOREIGN KEY ([CmpTipoProveedorID]) REFERENCES [dbo].[CmpTipoProveedor] ([CmpTipoProveedorID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProveedor_GiroEmpresa]...';


GO
ALTER TABLE [dbo].[PpalProveedor]
    ADD CONSTRAINT [FK_PpalProveedor_GiroEmpresa] FOREIGN KEY ([AuxGiroEmpresaID]) REFERENCES [dbo].[AuxGiroEmpresa] ([AuxGiroEmpresaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProveedor_Persona]...';


GO
ALTER TABLE [dbo].[PpalProveedor]
    ADD CONSTRAINT [FK_PpalProveedor_Persona] FOREIGN KEY ([EspPersonaID]) REFERENCES [dbo].[EspPersona] ([EspPersonaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProveedorDomicilio_CfgTipoDomicilio]...';


GO
ALTER TABLE [dbo].[PpalProveedorDomicilio]
    ADD CONSTRAINT [FK_PpalProveedorDomicilio_CfgTipoDomicilio] FOREIGN KEY ([CfgTipoDomicilioID]) REFERENCES [dbo].[CfgTipoDomicilio] ([CfgTipoDomicilioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProveedorDomicilio_Domicilio]...';


GO
ALTER TABLE [dbo].[PpalProveedorDomicilio]
    ADD CONSTRAINT [FK_PpalProveedorDomicilio_Domicilio] FOREIGN KEY ([EspDomicilioID]) REFERENCES [dbo].[EspDomicilio] ([EspDomicilioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_ProveedorDomicilio_PpalProveedor]...';


GO
ALTER TABLE [dbo].[PpalProveedorDomicilio]
    ADD CONSTRAINT [FK_ProveedorDomicilio_PpalProveedor] FOREIGN KEY ([PpalProveedorID]) REFERENCES [dbo].[PpalProveedor] ([PpalProveedorID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProveedorEmpresaSucursal_PpalProveedor]...';


GO
ALTER TABLE [dbo].[PpalProveedorEmpresaSucursal]
    ADD CONSTRAINT [FK_PpalProveedorEmpresaSucursal_PpalProveedor] FOREIGN KEY ([PpalProveedorID]) REFERENCES [dbo].[PpalProveedor] ([PpalProveedorID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProveedorFecha_CfgTipoFecha]...';


GO
ALTER TABLE [dbo].[PpalProveedorFecha]
    ADD CONSTRAINT [FK_PpalProveedorFecha_CfgTipoFecha] FOREIGN KEY ([CfgTipoFechaID]) REFERENCES [dbo].[CfgTipoFecha] ([CfgTipoFechaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProveedorFecha_PpalProveedor]...';


GO
ALTER TABLE [dbo].[PpalProveedorFecha]
    ADD CONSTRAINT [FK_PpalProveedorFecha_PpalProveedor] FOREIGN KEY ([PpalProveedorID]) REFERENCES [dbo].[PpalProveedor] ([PpalProveedorID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProveedorMail_CfgTipoMail]...';


GO
ALTER TABLE [dbo].[PpalProveedorMail]
    ADD CONSTRAINT [FK_PpalProveedorMail_CfgTipoMail] FOREIGN KEY ([CfgTipoMailID]) REFERENCES [dbo].[CfgTipoMail] ([CfgTipoMailID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProveedorMail_PpalProveedor]...';


GO
ALTER TABLE [dbo].[PpalProveedorMail]
    ADD CONSTRAINT [FK_PpalProveedorMail_PpalProveedor] FOREIGN KEY ([PpalProveedorID]) REFERENCES [dbo].[PpalProveedor] ([PpalProveedorID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProveedorTelefono_CfgUsoTelefono]...';


GO
ALTER TABLE [dbo].[PpalProveedorTelefono]
    ADD CONSTRAINT [FK_PpalProveedorTelefono_CfgUsoTelefono] FOREIGN KEY ([CfgUsoTelefonoID]) REFERENCES [dbo].[CfgUsoTelefono] ([CfgUsoTelefonoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProveedorTelefono_PpalProveedor]...';


GO
ALTER TABLE [dbo].[PpalProveedorTelefono]
    ADD CONSTRAINT [FK_PpalProveedorTelefono_PpalProveedor] FOREIGN KEY ([PpalProveedorID]) REFERENCES [dbo].[PpalProveedor] ([PpalProveedorID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalProveedorTelefono_Telefono]...';


GO
ALTER TABLE [dbo].[PpalProveedorTelefono]
    ADD CONSTRAINT [FK_PpalProveedorTelefono_Telefono] FOREIGN KEY ([EspTelefonoID]) REFERENCES [dbo].[EspTelefono] ([EspTelefonoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalRepresentanteProveedor_AuxProfesion]...';


GO
ALTER TABLE [dbo].[PpalRepresentanteProveedor]
    ADD CONSTRAINT [FK_PpalRepresentanteProveedor_AuxProfesion] FOREIGN KEY ([ProfesionID]) REFERENCES [dbo].[AuxProfesion] ([AuxProfesionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalRepresentanteProveedor_CmpTipoRepresentanteProveedor]...';


GO
ALTER TABLE [dbo].[PpalRepresentanteProveedor]
    ADD CONSTRAINT [FK_PpalRepresentanteProveedor_CmpTipoRepresentanteProveedor] FOREIGN KEY ([CmpTipoRepresentanteProveedorID]) REFERENCES [dbo].[CmpTipoRepresentanteProveedor] ([CmpTipoRepresentanteProveedorID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalRepresentanteProveedor_Persona]...';


GO
ALTER TABLE [dbo].[PpalRepresentanteProveedor]
    ADD CONSTRAINT [FK_PpalRepresentanteProveedor_Persona] FOREIGN KEY ([EspPersonaID]) REFERENCES [dbo].[EspPersona] ([EspPersonaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalRepresentanteProveedor_PpalProveedor]...';


GO
ALTER TABLE [dbo].[PpalRepresentanteProveedor]
    ADD CONSTRAINT [FK_PpalRepresentanteProveedor_PpalProveedor] FOREIGN KEY ([PpalProveedorID]) REFERENCES [dbo].[PpalProveedor] ([PpalProveedorID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalRepresentanteProveedorDomicilio_CfgTipoDomicilio]...';


GO
ALTER TABLE [dbo].[PpalRepresentanteProveedorDomicilio]
    ADD CONSTRAINT [FK_PpalRepresentanteProveedorDomicilio_CfgTipoDomicilio] FOREIGN KEY ([CfgTipoDomicilioID]) REFERENCES [dbo].[CfgTipoDomicilio] ([CfgTipoDomicilioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalRepresentanteProveedorDomicilio_Domicilio]...';


GO
ALTER TABLE [dbo].[PpalRepresentanteProveedorDomicilio]
    ADD CONSTRAINT [FK_PpalRepresentanteProveedorDomicilio_Domicilio] FOREIGN KEY ([EspDomicilioID]) REFERENCES [dbo].[EspDomicilio] ([EspDomicilioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalRepresentanteProveedorDomicilio_PpalRepresentanteProveedor]...';


GO
ALTER TABLE [dbo].[PpalRepresentanteProveedorDomicilio]
    ADD CONSTRAINT [FK_PpalRepresentanteProveedorDomicilio_PpalRepresentanteProveedor] FOREIGN KEY ([PpalRepresentanteProveedorID]) REFERENCES [dbo].[PpalRepresentanteProveedor] ([PpalRepresentanteProveedorID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalRepresentanteProveedorFecha_CfgTipoFecha]...';


GO
ALTER TABLE [dbo].[PpalRepresentanteProveedorFecha]
    ADD CONSTRAINT [FK_PpalRepresentanteProveedorFecha_CfgTipoFecha] FOREIGN KEY ([CfgTipoFechaID]) REFERENCES [dbo].[CfgTipoFecha] ([CfgTipoFechaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalRepresentanteProveedorFecha_PpalRepresentanteProveedor]...';


GO
ALTER TABLE [dbo].[PpalRepresentanteProveedorFecha]
    ADD CONSTRAINT [FK_PpalRepresentanteProveedorFecha_PpalRepresentanteProveedor] FOREIGN KEY ([PpalRepresentanteProveedorID]) REFERENCES [dbo].[PpalRepresentanteProveedor] ([PpalRepresentanteProveedorID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalRepresentanteProveedorMail_CfgTipoMail]...';


GO
ALTER TABLE [dbo].[PpalRepresentanteProveedorMail]
    ADD CONSTRAINT [FK_PpalRepresentanteProveedorMail_CfgTipoMail] FOREIGN KEY ([CfgTipoMailID]) REFERENCES [dbo].[CfgTipoMail] ([CfgTipoMailID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalRepresentanteProveedorMail_PpalRepresentanteProveedor]...';


GO
ALTER TABLE [dbo].[PpalRepresentanteProveedorMail]
    ADD CONSTRAINT [FK_PpalRepresentanteProveedorMail_PpalRepresentanteProveedor] FOREIGN KEY ([PpalRepresentanteProveedorID]) REFERENCES [dbo].[PpalRepresentanteProveedor] ([PpalRepresentanteProveedorID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalRepresentanteProveedorTelefono_CfgUsoTelefonoID]...';


GO
ALTER TABLE [dbo].[PpalRepresentanteProveedorTelefono]
    ADD CONSTRAINT [FK_PpalRepresentanteProveedorTelefono_CfgUsoTelefonoID] FOREIGN KEY ([CfgUsoTelefonoID]) REFERENCES [dbo].[CfgUsoTelefono] ([CfgUsoTelefonoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalRepresentanteProveedorTelefono_PpalRepresentanteProveedor]...';


GO
ALTER TABLE [dbo].[PpalRepresentanteProveedorTelefono]
    ADD CONSTRAINT [FK_PpalRepresentanteProveedorTelefono_PpalRepresentanteProveedor] FOREIGN KEY ([PpalRepresentanteProveedorID]) REFERENCES [dbo].[PpalRepresentanteProveedor] ([PpalRepresentanteProveedorID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalRepresentanteProveedorTelefono_Telefono]...';


GO
ALTER TABLE [dbo].[PpalRepresentanteProveedorTelefono]
    ADD CONSTRAINT [FK_PpalRepresentanteProveedorTelefono_Telefono] FOREIGN KEY ([EspTelefonoID]) REFERENCES [dbo].[EspTelefono] ([EspTelefonoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalSerie_PpalSucursal]...';


GO
ALTER TABLE [dbo].[PpalSerie]
    ADD CONSTRAINT [FK_PpalSerie_PpalSucursal] FOREIGN KEY ([PpalSucursalID]) REFERENCES [dbo].[PpalSucursal] ([PpalSucursalID]) ON DELETE SET NULL;


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalSucursal_Domicilio]...';


GO
ALTER TABLE [dbo].[PpalSucursal]
    ADD CONSTRAINT [FK_PpalSucursal_Domicilio] FOREIGN KEY ([EspDomicilioID]) REFERENCES [dbo].[EspDomicilio] ([EspDomicilioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PpalSucursal_SistemaEmpresa]...';


GO
ALTER TABLE [dbo].[PpalSucursal]
    ADD CONSTRAINT [FK_PpalSucursal_SistemaEmpresa] FOREIGN KEY ([EmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoAdiDetEgr_PptoAdiEncEgr]...';


GO
ALTER TABLE [dbo].[PptoAdiDetEgr]
    ADD CONSTRAINT [FK_PptoAdiDetEgr_PptoAdiEncEgr] FOREIGN KEY ([PptoAdiEncEgrID]) REFERENCES [dbo].[PptoAdiEncEgr] ([PptoAdiEncEgrID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoAdiDetEgr_PptoPerEgr]...';


GO
ALTER TABLE [dbo].[PptoAdiDetEgr]
    ADD CONSTRAINT [FK_PptoAdiDetEgr_PptoPerEgr] FOREIGN KEY ([PptoPerEgrID]) REFERENCES [dbo].[PptoPerEgr] ([PptoPerEgrID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoAdiDetIng_PptoAdiEncIng]...';


GO
ALTER TABLE [dbo].[PptoAdiDetIng]
    ADD CONSTRAINT [FK_PptoAdiDetIng_PptoAdiEncIng] FOREIGN KEY ([PptoAdiEncIngID]) REFERENCES [dbo].[PptoAdiEncIng] ([PptoAdiEncIngID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoAdiDetIng_PptoPerIng]...';


GO
ALTER TABLE [dbo].[PptoAdiDetIng]
    ADD CONSTRAINT [FK_PptoAdiDetIng_PptoPerIng] FOREIGN KEY ([PptoPerIngID]) REFERENCES [dbo].[PptoPerIng] ([PptoPerIngID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoAdiEncEgr_PptoEncEgr]...';


GO
ALTER TABLE [dbo].[PptoAdiEncEgr]
    ADD CONSTRAINT [FK_PptoAdiEncEgr_PptoEncEgr] FOREIGN KEY ([PptoEncEgrID]) REFERENCES [dbo].[PptoEncEgr] ([PptoEncEgrID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoAdiEncIng_PptoEncIng]...';


GO
ALTER TABLE [dbo].[PptoAdiEncIng]
    ADD CONSTRAINT [FK_PptoAdiEncIng_PptoEncIng] FOREIGN KEY ([PptoEncIngID]) REFERENCES [dbo].[PptoEncIng] ([PptoEncIngID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoConcepto_SistemaEmpresa]...';


GO
ALTER TABLE [dbo].[PptoConcepto]
    ADD CONSTRAINT [FK_PptoConcepto_SistemaEmpresa] FOREIGN KEY ([EmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoDedDetEgr_PptoDedEncEgr]...';


GO
ALTER TABLE [dbo].[PptoDedDetEgr]
    ADD CONSTRAINT [FK_PptoDedDetEgr_PptoDedEncEgr] FOREIGN KEY ([PptoDedEncEgrID]) REFERENCES [dbo].[PptoDedEncEgr] ([PptoDedEncEgrID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoDedDetEgr_PptoDetEgr]...';


GO
ALTER TABLE [dbo].[PptoDedDetEgr]
    ADD CONSTRAINT [FK_PptoDedDetEgr_PptoDetEgr] FOREIGN KEY ([PptoDetEgrID]) REFERENCES [dbo].[PptoDetEgr] ([PptoDetEgrID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoDedDetIng_PptoDedEncIng]...';


GO
ALTER TABLE [dbo].[PptoDedDetIng]
    ADD CONSTRAINT [FK_PptoDedDetIng_PptoDedEncIng] FOREIGN KEY ([PptoDedEncIngID]) REFERENCES [dbo].[PptoDedEncIng] ([PptoDedEncIngID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoDedDetIng_PptoDetIng]...';


GO
ALTER TABLE [dbo].[PptoDedDetIng]
    ADD CONSTRAINT [FK_PptoDedDetIng_PptoDetIng] FOREIGN KEY ([PptoDetIngID]) REFERENCES [dbo].[PptoDetIng] ([PptoDetIngID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoDedEncEgr_PptoEncEgr]...';


GO
ALTER TABLE [dbo].[PptoDedEncEgr]
    ADD CONSTRAINT [FK_PptoDedEncEgr_PptoEncEgr] FOREIGN KEY ([PptoEncEgrID]) REFERENCES [dbo].[PptoEncEgr] ([PptoEncEgrID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoDedEncIng_PptoEncIng]...';


GO
ALTER TABLE [dbo].[PptoDedEncIng]
    ADD CONSTRAINT [FK_PptoDedEncIng_PptoEncIng] FOREIGN KEY ([PptoEncIngID]) REFERENCES [dbo].[PptoEncIng] ([PptoEncIngID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoDesgEgr_PptoConcepto]...';


GO
ALTER TABLE [dbo].[PptoDesgEgr]
    ADD CONSTRAINT [FK_PptoDesgEgr_PptoConcepto] FOREIGN KEY ([PptoConceptoID]) REFERENCES [dbo].[PptoConcepto] ([PptoConceptoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoDesgEgr_PptoPerEgr]...';


GO
ALTER TABLE [dbo].[PptoDesgEgr]
    ADD CONSTRAINT [FK_PptoDesgEgr_PptoPerEgr] FOREIGN KEY ([PptoPerEgrID]) REFERENCES [dbo].[PptoPerEgr] ([PptoPerEgrID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoDesgIng_PptoConcepto]...';


GO
ALTER TABLE [dbo].[PptoDesgIng]
    ADD CONSTRAINT [FK_PptoDesgIng_PptoConcepto] FOREIGN KEY ([PptoConceptoID]) REFERENCES [dbo].[PptoConcepto] ([PptoConceptoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoDesgIng_PptoPerIng]...';


GO
ALTER TABLE [dbo].[PptoDesgIng]
    ADD CONSTRAINT [FK_PptoDesgIng_PptoPerIng] FOREIGN KEY ([PptoPerIngID]) REFERENCES [dbo].[PptoPerIng] ([PptoPerIngID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoDetEgr_ConceptoEgreso]...';


GO
ALTER TABLE [dbo].[PptoDetEgr]
    ADD CONSTRAINT [FK_PptoDetEgr_ConceptoEgreso] FOREIGN KEY ([ConceptoEgresoID]) REFERENCES [dbo].[PpalConceptoEgreso] ([PpalConceptoEgresoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoDetEgr_CuentaContable]...';


GO
ALTER TABLE [dbo].[PptoDetEgr]
    ADD CONSTRAINT [FK_PptoDetEgr_CuentaContable] FOREIGN KEY ([PpalCuentaContableID]) REFERENCES [dbo].[PpalCuentaContable] ([PpalCuentaContableID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoDetEgr_PptoEncEgr]...';


GO
ALTER TABLE [dbo].[PptoDetEgr]
    ADD CONSTRAINT [FK_PptoDetEgr_PptoEncEgr] FOREIGN KEY ([PptoEncEgrID]) REFERENCES [dbo].[PptoEncEgr] ([PptoEncEgrID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoDetEgr_RubroContable]...';


GO
ALTER TABLE [dbo].[PptoDetEgr]
    ADD CONSTRAINT [FK_PptoDetEgr_RubroContable] FOREIGN KEY ([RubroContableID]) REFERENCES [dbo].[RubroContable] ([RubroContableID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoDetIng_ConceptoIngreso]...';


GO
ALTER TABLE [dbo].[PptoDetIng]
    ADD CONSTRAINT [FK_PptoDetIng_ConceptoIngreso] FOREIGN KEY ([PpalConceptoIngresoID]) REFERENCES [dbo].[PpalConceptoIngreso] ([PpalConceptoIngresoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoDetIng_CuentaContable]...';


GO
ALTER TABLE [dbo].[PptoDetIng]
    ADD CONSTRAINT [FK_PptoDetIng_CuentaContable] FOREIGN KEY ([PpalCuentaContableID]) REFERENCES [dbo].[PpalCuentaContable] ([PpalCuentaContableID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoDetIng_PptoEncIng]...';


GO
ALTER TABLE [dbo].[PptoDetIng]
    ADD CONSTRAINT [FK_PptoDetIng_PptoEncIng] FOREIGN KEY ([PptoEncIngID]) REFERENCES [dbo].[PptoEncIng] ([PptoEncIngID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoDetIng_RubroContable]...';


GO
ALTER TABLE [dbo].[PptoDetIng]
    ADD CONSTRAINT [FK_PptoDetIng_RubroContable] FOREIGN KEY ([RubroContableID]) REFERENCES [dbo].[RubroContable] ([RubroContableID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoEncEgr_CuentaContable]...';


GO
ALTER TABLE [dbo].[PptoEncEgr]
    ADD CONSTRAINT [FK_PptoEncEgr_CuentaContable] FOREIGN KEY ([PpalCuentaContableID]) REFERENCES [dbo].[PpalCuentaContable] ([PpalCuentaContableID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoEncEgr_PpalCentroCosto]...';


GO
ALTER TABLE [dbo].[PptoEncEgr]
    ADD CONSTRAINT [FK_PptoEncEgr_PpalCentroCosto] FOREIGN KEY ([PpalCentroCostoID]) REFERENCES [dbo].[PpalCentroCosto] ([PpalCentroCostoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoEncIng_CuentaContable]...';


GO
ALTER TABLE [dbo].[PptoEncIng]
    ADD CONSTRAINT [FK_PptoEncIng_CuentaContable] FOREIGN KEY ([PpalCuentaContableID]) REFERENCES [dbo].[PpalCuentaContable] ([PpalCuentaContableID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoEncIng_PpalCentroCosto]...';


GO
ALTER TABLE [dbo].[PptoEncIng]
    ADD CONSTRAINT [FK_PptoEncIng_PpalCentroCosto] FOREIGN KEY ([PpalCentroCostoID]) REFERENCES [dbo].[PpalCentroCosto] ([PpalCentroCostoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoPerEgr_CfgPeriodoOperarivo]...';


GO
ALTER TABLE [dbo].[PptoPerEgr]
    ADD CONSTRAINT [FK_PptoPerEgr_CfgPeriodoOperarivo] FOREIGN KEY ([CfgPeriodoOperativoID]) REFERENCES [dbo].[CfgPeriodoOperativo] ([CfgPeriodoOperativoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoPerEgr_PptoDetEgr]...';


GO
ALTER TABLE [dbo].[PptoPerEgr]
    ADD CONSTRAINT [FK_PptoPerEgr_PptoDetEgr] FOREIGN KEY ([PptoDetEgrID]) REFERENCES [dbo].[PptoDetEgr] ([PptoDetEgrID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoPerIng_CfgPeriodoOperarivo]...';


GO
ALTER TABLE [dbo].[PptoPerIng]
    ADD CONSTRAINT [FK_PptoPerIng_CfgPeriodoOperarivo] FOREIGN KEY ([CfgPeriodoOperativoID]) REFERENCES [dbo].[CfgPeriodoOperativo] ([CfgPeriodoOperativoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoPerIng_PptoDetIng]...';


GO
ALTER TABLE [dbo].[PptoPerIng]
    ADD CONSTRAINT [FK_PptoPerIng_PptoDetIng] FOREIGN KEY ([PptoDetIngID]) REFERENCES [dbo].[PptoDetIng] ([PptoDetIngID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoTrasDetEgr_PptoDetEgr]...';


GO
ALTER TABLE [dbo].[PptoTrasDetEgr]
    ADD CONSTRAINT [FK_PptoTrasDetEgr_PptoDetEgr] FOREIGN KEY ([PptoDetEgrIDAdi]) REFERENCES [dbo].[PptoDetEgr] ([PptoDetEgrID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoTrasDetEgr_PptoDetEgr1]...';


GO
ALTER TABLE [dbo].[PptoTrasDetEgr]
    ADD CONSTRAINT [FK_PptoTrasDetEgr_PptoDetEgr1] FOREIGN KEY ([PptoDetEgrIDDed]) REFERENCES [dbo].[PptoDetEgr] ([PptoDetEgrID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoTrasDetEgr_PptoTrasEncEgr]...';


GO
ALTER TABLE [dbo].[PptoTrasDetEgr]
    ADD CONSTRAINT [FK_PptoTrasDetEgr_PptoTrasEncEgr] FOREIGN KEY ([PptoTrasEncEgrID]) REFERENCES [dbo].[PptoTrasEncEgr] ([PptoTrasEncEgrID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoTrasDetIng_PptoDetIng]...';


GO
ALTER TABLE [dbo].[PptoTrasDetIng]
    ADD CONSTRAINT [FK_PptoTrasDetIng_PptoDetIng] FOREIGN KEY ([PptoDetIngIDAdi]) REFERENCES [dbo].[PptoDetIng] ([PptoDetIngID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoTrasDetIng_PptoDetIng1]...';


GO
ALTER TABLE [dbo].[PptoTrasDetIng]
    ADD CONSTRAINT [FK_PptoTrasDetIng_PptoDetIng1] FOREIGN KEY ([PptoDetIngIDAdi]) REFERENCES [dbo].[PptoDetIng] ([PptoDetIngID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoTrasDetIng_PptoDetIng2]...';


GO
ALTER TABLE [dbo].[PptoTrasDetIng]
    ADD CONSTRAINT [FK_PptoTrasDetIng_PptoDetIng2] FOREIGN KEY ([PptoDetIngIDDed]) REFERENCES [dbo].[PptoDetIng] ([PptoDetIngID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoTrasDetIng_PptoTrasEncIng]...';


GO
ALTER TABLE [dbo].[PptoTrasDetIng]
    ADD CONSTRAINT [FK_PptoTrasDetIng_PptoTrasEncIng] FOREIGN KEY ([PptoTrasEncIngID]) REFERENCES [dbo].[PptoTrasEncIng] ([PptoTrasEncIngID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoTrasEncEgr_PptoEncEgr]...';


GO
ALTER TABLE [dbo].[PptoTrasEncEgr]
    ADD CONSTRAINT [FK_PptoTrasEncEgr_PptoEncEgr] FOREIGN KEY ([PptoEncEgrID]) REFERENCES [dbo].[PptoEncEgr] ([PptoEncEgrID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_PptoTrasEncIng_PptoEncIng]...';


GO
ALTER TABLE [dbo].[PptoTrasEncIng]
    ADD CONSTRAINT [FK_PptoTrasEncIng_PptoEncIng] FOREIGN KEY ([PptoEncIngID]) REFERENCES [dbo].[PptoEncIng] ([PptoEncIngID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_RHCuotaPatronal_ConceptoEgreso]...';


GO
ALTER TABLE [dbo].[RHCuotaPatronal]
    ADD CONSTRAINT [FK_RHCuotaPatronal_ConceptoEgreso] FOREIGN KEY ([ConceptoEgresoID]) REFERENCES [dbo].[PpalConceptoEgreso] ([PpalConceptoEgresoID]) ON UPDATE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_RubroContable_CuentaContable]...';


GO
ALTER TABLE [dbo].[RubroContable]
    ADD CONSTRAINT [FK_RubroContable_CuentaContable] FOREIGN KEY ([PpalCuentaContableID]) REFERENCES [dbo].[PpalCuentaContable] ([PpalCuentaContableID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_RubroContable_TìtuloRubro]...';


GO
ALTER TABLE [dbo].[RubroContable]
    ADD CONSTRAINT [FK_RubroContable_TìtuloRubro] FOREIGN KEY ([TituloRubroID]) REFERENCES [dbo].[TituloRubro] ([TituloRubroID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SegLogRegla_SegUsuarioID]...';


GO
ALTER TABLE [dbo].[SegLogRegla]
    ADD CONSTRAINT [FK_SegLogRegla_SegUsuarioID] FOREIGN KEY ([SegUsuarioID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]) ON DELETE SET NULL;


GO
PRINT N'Creando Clave externa [dbo].[FK_SegPerfilOpcion_SegPerfil]...';


GO
ALTER TABLE [dbo].[SegPerfilOpcion]
    ADD CONSTRAINT [FK_SegPerfilOpcion_SegPerfil] FOREIGN KEY ([SegPerfilID]) REFERENCES [dbo].[SegPerfil] ([SegPerfilID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SegPerfilOpcion_SistemaOpcion]...';


GO
ALTER TABLE [dbo].[SegPerfilOpcion]
    ADD CONSTRAINT [FK_SegPerfilOpcion_SistemaOpcion] FOREIGN KEY ([OpcionID]) REFERENCES [dbo].[SistemaOpcion] ([OpcionID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_SegPerfilOpcionAccion_SegPerfilOpcion]...';


GO
ALTER TABLE [dbo].[SegPerfilOpcionAccion]
    ADD CONSTRAINT [FK_SegPerfilOpcionAccion_SegPerfilOpcion] FOREIGN KEY ([SegPerfilOpcionID]) REFERENCES [dbo].[SegPerfilOpcion] ([SegPerfilOpcionID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_SegPerfilOpcionAccion_SistemaAccion]...';


GO
ALTER TABLE [dbo].[SegPerfilOpcionAccion]
    ADD CONSTRAINT [FK_SegPerfilOpcionAccion_SistemaAccion] FOREIGN KEY ([AccionID]) REFERENCES [dbo].[SistemaAccion] ([AccionID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_SegUsuario_EspPersona]...';


GO
ALTER TABLE [dbo].[SegUsuario]
    ADD CONSTRAINT [FK_SegUsuario_EspPersona] FOREIGN KEY ([EspPersonaID]) REFERENCES [dbo].[EspPersona] ([EspPersonaID]) ON DELETE SET NULL;


GO
PRINT N'Creando Clave externa [dbo].[FK_SegUsuarioArea_PpalArea]...';


GO
ALTER TABLE [dbo].[SegUsuarioArea]
    ADD CONSTRAINT [FK_SegUsuarioArea_PpalArea] FOREIGN KEY ([PpalAreaID]) REFERENCES [dbo].[PpalArea] ([PpalAreaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SegUsuarioArea_SegUsuario]...';


GO
ALTER TABLE [dbo].[SegUsuarioArea]
    ADD CONSTRAINT [FK_SegUsuarioArea_SegUsuario] FOREIGN KEY ([SegUsuarioID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_SegUsuarioCentroCosto_PpalCentroCosto]...';


GO
ALTER TABLE [dbo].[SegUsuarioCentroCosto]
    ADD CONSTRAINT [FK_SegUsuarioCentroCosto_PpalCentroCosto] FOREIGN KEY ([PpalCentroCostoID]) REFERENCES [dbo].[PpalCentroCosto] ([PpalCentroCostoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SegUsuarioCentroCosto_SegUsuario]...';


GO
ALTER TABLE [dbo].[SegUsuarioCentroCosto]
    ADD CONSTRAINT [FK_SegUsuarioCentroCosto_SegUsuario] FOREIGN KEY ([SegUsuarioID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_SegUsuarioConceptoEgreso_PpalConceptoEgreso]...';


GO
ALTER TABLE [dbo].[SegUsuarioConceptoEgreso]
    ADD CONSTRAINT [FK_SegUsuarioConceptoEgreso_PpalConceptoEgreso] FOREIGN KEY ([PpalConceptoEgresoID]) REFERENCES [dbo].[PpalConceptoEgreso] ([PpalConceptoEgresoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SegUsuarioConceptoEgreso_SegUsuario]...';


GO
ALTER TABLE [dbo].[SegUsuarioConceptoEgreso]
    ADD CONSTRAINT [FK_SegUsuarioConceptoEgreso_SegUsuario] FOREIGN KEY ([SegUsuarioID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_SegUsuarioEstatusDocumento_Almacen]...';


GO
ALTER TABLE [dbo].[SegUsuarioEstatusDocumento]
    ADD CONSTRAINT [FK_SegUsuarioEstatusDocumento_Almacen] FOREIGN KEY ([PpalAlmacenID]) REFERENCES [dbo].[PpalAlmacen] ([PpalAlmacenID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SegUsuarioEstatusDocumento_CfgEstatusDocumento]...';


GO
ALTER TABLE [dbo].[SegUsuarioEstatusDocumento]
    ADD CONSTRAINT [FK_SegUsuarioEstatusDocumento_CfgEstatusDocumento] FOREIGN KEY ([CfgEstatusDocumentoID]) REFERENCES [dbo].[CfgEstatusDocumento] ([CfgEstatusDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SegUsuarioEstatusDocumento_PpalArea]...';


GO
ALTER TABLE [dbo].[SegUsuarioEstatusDocumento]
    ADD CONSTRAINT [FK_SegUsuarioEstatusDocumento_PpalArea] FOREIGN KEY ([PpalAreaID]) REFERENCES [dbo].[PpalArea] ([PpalAreaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SegUsuarioEstatusDocumento_PpalCentroCosto]...';


GO
ALTER TABLE [dbo].[SegUsuarioEstatusDocumento]
    ADD CONSTRAINT [FK_SegUsuarioEstatusDocumento_PpalCentroCosto] FOREIGN KEY ([PpalCentroCostoID]) REFERENCES [dbo].[PpalCentroCosto] ([PpalCentroCostoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SegUsuarioEstatusDocumento_PpalSucursal]...';


GO
ALTER TABLE [dbo].[SegUsuarioEstatusDocumento]
    ADD CONSTRAINT [FK_SegUsuarioEstatusDocumento_PpalSucursal] FOREIGN KEY ([PpalSucursalID]) REFERENCES [dbo].[PpalSucursal] ([PpalSucursalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SegUsuarioEstatusDocumento_SegUsuario]...';


GO
ALTER TABLE [dbo].[SegUsuarioEstatusDocumento]
    ADD CONSTRAINT [FK_SegUsuarioEstatusDocumento_SegUsuario] FOREIGN KEY ([SegUsuarioID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_SegUsuarioEstatusDocumento_SistemaEmpresa]...';


GO
ALTER TABLE [dbo].[SegUsuarioEstatusDocumento]
    ADD CONSTRAINT [FK_SegUsuarioEstatusDocumento_SistemaEmpresa] FOREIGN KEY ([EmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SegUsuarioPerfil_SegPerfil]...';


GO
ALTER TABLE [dbo].[SegUsuarioPerfil]
    ADD CONSTRAINT [FK_SegUsuarioPerfil_SegPerfil] FOREIGN KEY ([SegPerfilID]) REFERENCES [dbo].[SegPerfil] ([SegPerfilID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SegUsuarioPerfil_SegUsuario]...';


GO
ALTER TABLE [dbo].[SegUsuarioPerfil]
    ADD CONSTRAINT [FK_SegUsuarioPerfil_SegUsuario] FOREIGN KEY ([SegUsuarioID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_SegUsuarioPerfil_SistemaEmpresa]...';


GO
ALTER TABLE [dbo].[SegUsuarioPerfil]
    ADD CONSTRAINT [FK_SegUsuarioPerfil_SistemaEmpresa] FOREIGN KEY ([EmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SegUsuarioSucursal_PpalSucursal]...';


GO
ALTER TABLE [dbo].[SegUsuarioSucursal]
    ADD CONSTRAINT [FK_SegUsuarioSucursal_PpalSucursal] FOREIGN KEY ([PpalSucursalID]) REFERENCES [dbo].[PpalSucursal] ([PpalSucursalID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SegUsuarioSucursal_SegUsuario]...';


GO
ALTER TABLE [dbo].[SegUsuarioSucursal]
    ADD CONSTRAINT [FK_SegUsuarioSucursal_SegUsuario] FOREIGN KEY ([SegUsuarioID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaBitacoraEstatus_SegUsuario]...';


GO
ALTER TABLE [dbo].[SistemaBitacoraEstatus]
    ADD CONSTRAINT [FK_SistemaBitacoraEstatus_SegUsuario] FOREIGN KEY ([UsuarioID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaBitacoraEstatus_SistemaEstatusDocumento]...';


GO
ALTER TABLE [dbo].[SistemaBitacoraEstatus]
    ADD CONSTRAINT [FK_SistemaBitacoraEstatus_SistemaEstatusDocumento] FOREIGN KEY ([SistemaEstatusDocumentoIDAnterior]) REFERENCES [dbo].[SistemaEstatusDocumento] ([SistemaEstatusDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaBitacoraEstatus_SistemaTipoDocumento]...';


GO
ALTER TABLE [dbo].[SistemaBitacoraEstatus]
    ADD CONSTRAINT [FK_SistemaBitacoraEstatus_SistemaTipoDocumento] FOREIGN KEY ([TipoDocumentoID]) REFERENCES [dbo].[SistemaTipoDocumento] ([TipoDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaCS_SistemaCSConfig]...';


GO
ALTER TABLE [dbo].[SistemaCS]
    ADD CONSTRAINT [FK_SistemaCS_SistemaCSConfig] FOREIGN KEY ([NS]) REFERENCES [dbo].[SistemaCSConfig] ([NS]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaCS_SistemaModulo]...';


GO
ALTER TABLE [dbo].[SistemaCS]
    ADD CONSTRAINT [FK_SistemaCS_SistemaModulo] FOREIGN KEY ([ModuloID]) REFERENCES [dbo].[SistemaModulo] ([ModuloID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaCS_SistemaModulo1]...';


GO
ALTER TABLE [dbo].[SistemaCS]
    ADD CONSTRAINT [FK_SistemaCS_SistemaModulo1] FOREIGN KEY ([ModuloID]) REFERENCES [dbo].[SistemaModulo] ([ModuloID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaEstatusDocumentoOpcion_SistemaEstatusDocumento]...';


GO
ALTER TABLE [dbo].[SistemaEstatusDocumentoOpcion]
    ADD CONSTRAINT [FK_SistemaEstatusDocumentoOpcion_SistemaEstatusDocumento] FOREIGN KEY ([EstatusTipoDocumentoID]) REFERENCES [dbo].[SistemaEstatusTipoDocumento] ([SistemaEstatusTipoDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaEstatusDocumentoOpcion_SistemaOpcion]...';


GO
ALTER TABLE [dbo].[SistemaEstatusDocumentoOpcion]
    ADD CONSTRAINT [FK_SistemaEstatusDocumentoOpcion_SistemaOpcion] FOREIGN KEY ([OpcionID]) REFERENCES [dbo].[SistemaOpcion] ([OpcionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaEstatusRegla_SistemaEstatusTipoDocumento]...';


GO
ALTER TABLE [dbo].[SistemaEstatusRegla]
    ADD CONSTRAINT [FK_SistemaEstatusRegla_SistemaEstatusTipoDocumento] FOREIGN KEY ([SistemaEstatusTipoDocumentoID]) REFERENCES [dbo].[SistemaEstatusTipoDocumento] ([SistemaEstatusTipoDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaEstatusTipoDocumento_SistemaEmpresa]...';


GO
ALTER TABLE [dbo].[SistemaEstatusTipoDocumento]
    ADD CONSTRAINT [FK_SistemaEstatusTipoDocumento_SistemaEmpresa] FOREIGN KEY ([EmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaEstatusTipoDocumento_SistemaEstatusDocumento]...';


GO
ALTER TABLE [dbo].[SistemaEstatusTipoDocumento]
    ADD CONSTRAINT [FK_SistemaEstatusTipoDocumento_SistemaEstatusDocumento] FOREIGN KEY ([SistemaEstatusDocumentoID]) REFERENCES [dbo].[SistemaEstatusDocumento] ([SistemaEstatusDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaGrupo_SistemaModulo]...';


GO
ALTER TABLE [dbo].[SistemaGrupo]
    ADD CONSTRAINT [FK_SistemaGrupo_SistemaModulo] FOREIGN KEY ([ModuloID]) REFERENCES [dbo].[SistemaModulo] ([ModuloID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaGrupoEstatus_SistemaGrupo]...';


GO
ALTER TABLE [dbo].[SistemaGrupoEstatus]
    ADD CONSTRAINT [FK_SistemaGrupoEstatus_SistemaGrupo] FOREIGN KEY ([SistemaGrupoID]) REFERENCES [dbo].[SistemaGrupo] ([SistemaGrupoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaGrupoEstatus_SistemaTipoDocumento]...';


GO
ALTER TABLE [dbo].[SistemaGrupoEstatus]
    ADD CONSTRAINT [FK_SistemaGrupoEstatus_SistemaTipoDocumento] FOREIGN KEY ([TipoDocumentoID]) REFERENCES [dbo].[SistemaTipoDocumento] ([TipoDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaGrupoRegla_SistemaEstatusTipoDocumento]...';


GO
ALTER TABLE [dbo].[SistemaGrupoRegla]
    ADD CONSTRAINT [FK_SistemaGrupoRegla_SistemaEstatusTipoDocumento] FOREIGN KEY ([SistemaEstatusTipoDocumentoID]) REFERENCES [dbo].[SistemaEstatusTipoDocumento] ([SistemaEstatusTipoDocumentoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaGrupoRegla_SistemaGrupoEstatus]...';


GO
ALTER TABLE [dbo].[SistemaGrupoRegla]
    ADD CONSTRAINT [FK_SistemaGrupoRegla_SistemaGrupoEstatus] FOREIGN KEY ([SistemaGrupoEstatusID]) REFERENCES [dbo].[SistemaGrupoEstatus] ([SistemaGrupoEstatusID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaLog_SegUsuario]...';


GO
ALTER TABLE [dbo].[SistemaLog]
    ADD CONSTRAINT [FK_SistemaLog_SegUsuario] FOREIGN KEY ([UsuarioID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaLogBAK_SegUsuario]...';


GO
ALTER TABLE [dbo].[SistemaLogBAK]
    ADD CONSTRAINT [FK_SistemaLogBAK_SegUsuario] FOREIGN KEY ([UsuarioID]) REFERENCES [dbo].[SegUsuario] ([SegUsuarioID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaOpcion_SistemaModulo]...';


GO
ALTER TABLE [dbo].[SistemaOpcion]
    ADD CONSTRAINT [FK_SistemaOpcion_SistemaModulo] FOREIGN KEY ([ModuloID]) REFERENCES [dbo].[SistemaModulo] ([ModuloID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaOpcion2_SistemaModulo]...';


GO
ALTER TABLE [dbo].[SistemaOpcion2]
    ADD CONSTRAINT [FK_SistemaOpcion2_SistemaModulo] FOREIGN KEY ([ModuloID]) REFERENCES [dbo].[SistemaModulo] ([ModuloID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaOpcionLista_SistemaOpcion]...';


GO
ALTER TABLE [dbo].[SistemaOpcionLista]
    ADD CONSTRAINT [FK_SistemaOpcionLista_SistemaOpcion] FOREIGN KEY ([OpcionID]) REFERENCES [dbo].[SistemaOpcion] ([OpcionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaOpcionLista_SistemaSPLista]...';


GO
ALTER TABLE [dbo].[SistemaOpcionLista]
    ADD CONSTRAINT [FK_SistemaOpcionLista_SistemaSPLista] FOREIGN KEY ([SPListaID]) REFERENCES [dbo].[SistemaSPLista] ([SPListaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaOpcionTipoOpcion_SistemaOpcion]...';


GO
ALTER TABLE [dbo].[SistemaOpcionTipoOpcion]
    ADD CONSTRAINT [FK_SistemaOpcionTipoOpcion_SistemaOpcion] FOREIGN KEY ([OpcionID]) REFERENCES [dbo].[SistemaOpcion] ([OpcionID]) ON DELETE CASCADE;


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaOpcionTipoOpcion_SistemaTipoOpcion]...';


GO
ALTER TABLE [dbo].[SistemaOpcionTipoOpcion]
    ADD CONSTRAINT [FK_SistemaOpcionTipoOpcion_SistemaTipoOpcion] FOREIGN KEY ([TipoOpcionID]) REFERENCES [dbo].[SistemaTipoOpcion] ([TipoOpcionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaParametro_SistemaModulo]...';


GO
ALTER TABLE [dbo].[SistemaParametro]
    ADD CONSTRAINT [FK_SistemaParametro_SistemaModulo] FOREIGN KEY ([ModuloID]) REFERENCES [dbo].[SistemaModulo] ([ModuloID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaSPListaParametro_SistemaSPLista]...';


GO
ALTER TABLE [dbo].[SistemaSPListaParametro]
    ADD CONSTRAINT [FK_SistemaSPListaParametro_SistemaSPLista] FOREIGN KEY ([SPListaID]) REFERENCES [dbo].[SistemaSPLista] ([SPListaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaTipoDocumento_SistemaModulo]...';


GO
ALTER TABLE [dbo].[SistemaTipoDocumento]
    ADD CONSTRAINT [FK_SistemaTipoDocumento_SistemaModulo] FOREIGN KEY ([ModuloID]) REFERENCES [dbo].[SistemaModulo] ([ModuloID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaTipoOpcionAccion_SistemaAccion]...';


GO
ALTER TABLE [dbo].[SistemaTipoOpcionAccion]
    ADD CONSTRAINT [FK_SistemaTipoOpcionAccion_SistemaAccion] FOREIGN KEY ([AccionID]) REFERENCES [dbo].[SistemaAccion] ([AccionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaTipoOpcionAccion_SistemaTipoOpcion]...';


GO
ALTER TABLE [dbo].[SistemaTipoOpcionAccion]
    ADD CONSTRAINT [FK_SistemaTipoOpcionAccion_SistemaTipoOpcion] FOREIGN KEY ([TipoOpcionID]) REFERENCES [dbo].[SistemaTipoOpcion] ([TipoOpcionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaUsuarioOpcionBitacora_SistemaEmpresa]...';


GO
ALTER TABLE [dbo].[SistemaUsuarioOpcionBitacora]
    ADD CONSTRAINT [FK_SistemaUsuarioOpcionBitacora_SistemaEmpresa] FOREIGN KEY ([EmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaUsuarioOpcionBitacora_SistemaModulo]...';


GO
ALTER TABLE [dbo].[SistemaUsuarioOpcionBitacora]
    ADD CONSTRAINT [FK_SistemaUsuarioOpcionBitacora_SistemaModulo] FOREIGN KEY ([ModuloID]) REFERENCES [dbo].[SistemaModulo] ([ModuloID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_SistemaUsuarioOpcionBitacora_SistemaOpcion]...';


GO
ALTER TABLE [dbo].[SistemaUsuarioOpcionBitacora]
    ADD CONSTRAINT [FK_SistemaUsuarioOpcionBitacora_SistemaOpcion] FOREIGN KEY ([OpcionID]) REFERENCES [dbo].[SistemaOpcion] ([OpcionID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_TìtuloRubro_CfgEjercicioOperativo]...';


GO
ALTER TABLE [dbo].[TituloRubro]
    ADD CONSTRAINT [FK_TìtuloRubro_CfgEjercicioOperativo] FOREIGN KEY ([CfgEjercicioOperativoID]) REFERENCES [dbo].[CfgEjercicioOperativo] ([CfgEjercicioOperativoID]);


GO
PRINT N'Creando Clave externa [dbo].[FK_TìtuloRubro_Empresa]...';


GO
ALTER TABLE [dbo].[TituloRubro]
    ADD CONSTRAINT [FK_TìtuloRubro_Empresa] FOREIGN KEY ([EmpresaID]) REFERENCES [dbo].[SistemaEmpresa] ([EmpresaID]);


GO
PRINT N'Creando Restricción CHECK [dbo].[CK_TìtuloRubro_Ingreso_o_Egreso]...';


GO
ALTER TABLE [dbo].[TituloRubro]
    ADD CONSTRAINT [CK_TìtuloRubro_Ingreso_o_Egreso] CHECK ([Ingreso_o_Egreso]='I' OR [Ingreso_o_Egreso]='E');


GO
PRINT N'Creando Desencadenador [dbo].[TriggerUpdate]...';


GO
CREATE TRIGGER [TriggerUpdate]
	ON [dbo].[TestTable]
	AFTER UPDATE 
AS
 
IF UPDATE(Column_1)
BEGIN
   ;THROW 51000, 'You can''t update the primary key', 1;  
END
 
IF UPDATE(Column_2)
BEGIN
   PRINT 'Column_2 was updated'
END
 
IF UPDATE(Column_3)
BEGIN
   PRINT 'Column_3 was updated'
END
 
IF UPDATE(Column_4)
BEGIN
   PRINT 'Column_4 was updated'
END
GO
PRINT N'Creando Vista [dbo].[vCiudad]...';


GO



CREATE VIEW [dbo].[vCiudad] 
AS

SELECT	a.EspCiudadID, a.EspCiudadClave, a.Nombre as CiudadNombre, a.NombreCorto as CiudadNombreCorto, 
		b.EspMunicipioID, b.EspMunicipioClave, b.Nombre as MunicipioNombre, b.NombreCorto as MunicipioNombreCorto,
		c.EspEstadoID, c.EspEstadoClave, c.Nombre as EstadoNombre, c.NombreCorto as EstadoNombreCorto,
		d.EspPaisID, d.EspPaisClave, d.Nombre as PaisNombre, d.NombreCorto as PaisNombreCorto,
		(a.Nombre + ', ' + b.Nombre  + ', ' + c.Nombre  + ', ' + d.Nombre) as NombreCompleto
FROM	EspCiudad a 
		INNER JOIN EspMunicipio b  ON a.EspMunicipioID = b.EspMunicipioID
		INNER JOIN EspEstado c ON b.EspEstadoID = c.EspEstadoID
		INNER JOIN EspPais d ON c.EspPaisID = d.EspPaisID
GO
PRINT N'Creando Vista [dbo].[vDomicilio]...';


GO




CREATE VIEW [dbo].[vDomicilio] 
AS

SELECT	a.EspDomicilioID, a.Calle, a.NumeroExterior, a.NumeroInterior, a.EntreCalle1, a.EntreCalle2, a.CodigoPostal, c.Nombre as ColoniaNombre, a.Coordenadas, 
		b.EspCiudadID,
		UPPER(RTRIM(LTRIM((
		RTRIM(LTRIM(COALESCE(Calle, ''))) + ' ' + 
		RTRIM(LTRIM(COALESCE(NumeroExterior, ''))) + ' ' + 
		RTRIM(LTRIM(COALESCE(NumeroInterior, ''))) + ' ' + 
		(CASE RTRIM(LTRIM(COALESCE(c.Nombre, ''))) WHEN '' THEN '' ELSE 'COL. ' + RTRIM(LTRIM(COALESCE(c.Nombre, ''))) END) + ' '  +
		(CASE RTRIM(LTRIM(COALESCE(CodigoPostal, ''))) WHEN '' THEN '' ELSE 'C.P. ' + RTRIM(LTRIM(COALESCE(CodigoPostal, ''))) END) + ' '  +
		b.NombreCompleto
		)))) as DomicilioCompleto
FROM	EspDomicilio a 
		LEFT OUTER JOIN EspColonia c ON a.EspColoniaID = c.EspColoniaID
		LEFT OUTER JOIN vCiudad b ON a.EspCiudadID = b.EspCiudadID
GO
PRINT N'Creando Vista [dbo].[vFamiliaProducto]...';


GO

CREATE VIEW [dbo].[vFamiliaProducto]
AS

SELECT	a.*, 
		((CASE WHEN d.Nombre IS NULL THEN '' ELSE d.Nombre + ' > ' END) +
		(CASE WHEN c.Nombre IS NULL THEN '' ELSE c.Nombre + ' > ' END) +
		(CASE WHEN b.Nombre IS NULL THEN '' ELSE b.Nombre + ' > ' END) +
		a.Nombre) as NombreCompleto
FROM	CfgFamiliaProducto a 
			LEFT OUTER JOIN CfgFamiliaProducto b ON a.PadreID = b.CfgFamiliaProductoID
			LEFT OUTER JOIN CfgFamiliaProducto c ON b.PadreID = c.CfgFamiliaProductoID
			LEFT OUTER JOIN CfgFamiliaProducto d ON c.PadreID = d.CfgFamiliaProductoID
			LEFT OUTER JOIN CfgFamiliaProducto e ON d.PadreID = e.CfgFamiliaProductoID
GO
PRINT N'Creando Vista [dbo].[vPersona]...';


GO

CREATE VIEW [dbo].[vPersona]
AS
SELECT	a.*, 
		(CASE WHEN a.FisicaMoral = 'F' THEN LTRIM(RTRIM((LTRIM(RTRIM(COALESCE(Nombre, ''))) + ' ' + LTRIM(RTRIM(COALESCE(ApellidoPaterno, ''))) + ' ' + LTRIM(RTRIM(COALESCE(ApellidoMaterno, ''))))))
		WHEN a.FisicaMoral = 'M' THEN COALESCE(NULLIF(NombreComercial,''), RazonSocial) END) AS NombreCompleto
FROM	EspPersona a
GO
PRINT N'Creando Vista [dbo].[vProveedor]...';


GO



/*select * from persona
select * from proveedor*/
CREATE VIEW [dbo].[vProveedor]
AS
SELECT        PpalProveedorID, EspPersonaID, CmpTipoProveedorID, AuxGiroEmpresaID, AuxMedioContactoID, AuxVinculoID
FROM            dbo.PpalProveedor
GO
PRINT N'Creando Vista [dbo].[vSeguridad]...';


GO

CREATE VIEW [dbo].[vSeguridad]
AS
SELECT	M.ModuloID,		M.ModuloClave,		M.Nombre as ModuloNombre,		M.NombreCorto as ModuloNombreCorto,
		O.OpcionID,							O.Nombre as OpcionNombre,		O.NombreCorto as OpcionNombreCorto,		O.Orden,
		A.AccionID,		A.AccionClave,		A.Nombre as AccionNombre,		A.NombreCorto as AccionNombreCorto,
		P.SegPerfilID,	P.SegPerfilClave,	P.Nombre as PerfilNombre,		P.NombreCorto as PerfilNombreCorto, 
		U.SegUsuarioID,						U.Nombre as UsuarioNombre,		U.Activo,			U.Bloqueado,		U.Administrador,
		E.EmpresaID,	E.EmpresaClave,		E.Nombre as EmpresaNombre,		E.NombreCorto as EmpresaNombreCorto	
		---Prueba de Vista---
		,O.PadreID,
		O.RecursoWebsite,								O.Protegido,		O.Popup,								O.VisibleMenu,
		O.Icono
		---Termina Prueba-----
FROM	SegUsuarioPerfil UP
		LEFT OUTER JOIN SegPerfilOpcion PO ON UP.SegPerfilID = PO.SegPerfilID
		LEFT OUTER JOIN SegPerfilOpcionAccion POA ON PO.SegPerfilOpcionID = POA.SegPerfilOpcionID
		LEFT OUTER JOIN SegPerfil P ON UP.SegPerfilID = P.SegPerfilID
		LEFT OUTER JOIN SistemaOpcion O ON PO.OpcionID = O.OpcionID
		LEFT OUTER JOIN SistemaModulo M ON M.ModuloID = O.ModuloID
		LEFT OUTER JOIN SistemaAccion A ON POA.AccionID = A.AccionID
		LEFT OUTER JOIN SegUsuario U ON UP.SegUsuarioID = U.SegUsuarioID
		LEFT OUTER JOIN SistemaEmpresa E ON UP.EmpresaID = E.EmpresaID
UNION
SELECT	M.ModuloID,		M.ModuloClave,		M.Nombre as ModuloNombre,		M.NombreCorto as ModuloNombreCorto,
		O.OpcionID,							O.Nombre as OpcionNombre,		O.NombreCorto as OpcionNombreCorto,		O.Orden,
		A.AccionID,		A.AccionClave,		A.Nombre as AccionNombre,		A.NombreCorto as AccionNombreCorto,
		NULL,	NULL,	NULL as PerfilNombre,		NULL as PerfilNombreCorto, 
		NULL,						NULL as UsuarioNombre,		NULL,			NULL,		NULL,
		NULL,	NULL,		NULL as EmpresaNombre,		NULL as EmpresaNombreCorto	
		---Prueba de Vista---
		,O.PadreID,
		O.RecursoWebsite,								O.Protegido,		O.Popup,								O.VisibleMenu,
		O.Icono
		---Termina Prueba-----
FROM	SistemaModulo M
		LEFT OUTER JOIN SistemaOpcion O ON M.ModuloID = O.ModuloID
		LEFT OUTER JOIN SistemaOpcionTipoOpcion OTo ON O.OpcionID = OTo.OpcionID
		LEFT OUTER JOIN SistemaTipoOpcion TiO ON OTo.TipoOpcionID = TiO.TipoOpcionID
		LEFT OUTER JOIN SistemaTipoOpcionAccion ToA ON OTo.TipoOpcionID = ToA.TipoOpcionID
		LEFT OUTER JOIN SistemaAccion A ON ToA.AccionID = A.AccionID
GO
PRINT N'Creando Vista [dbo].[vSeguridadUsuarioPerfil]...';


GO
CREATE VIEW vSeguridadUsuarioPerfil
AS

SELECT	a.SegUsuarioID, a.Nombre, a.Activo, a.Bloqueado, a.Administrador, 
		b.SegPerfilID, c.Nombre as PerfilNombre, c.NombreCorto as PerfilNombreCorto,
		b.EmpresaID, d.Nombre as EmpresaNombre, d.NombreCorto as EmpresaNombreCorto
FROM	SegUsuario a
		LEFT OUTER JOIN SegUsuarioPerfil b ON a.SegUsuarioID = b.SegUsuarioID
		LEFT OUTER JOIN SegPerfil c ON b.SegPerfilID = c.SegPerfilID
		LEFT OUTER JOIN SistemaEmpresa d ON b.EmpresaID = d.EmpresaID
WHERE	COALESCE(a.Administrador,0) = 0
UNION ALL
SELECT	a.SegUsuarioID, a.Nombre, a.Activo, a.Bloqueado, a.Administrador, 
		b.SegPerfilID, b.Nombre, b.NombreCorto, c.EmpresaID, c.Nombre, c.NombreCorto
FROM	SegUsuario a
		CROSS JOIN SegPerfil b
		CROSS JOIN SistemaEmpresa c 
WHERE	COALESCE(a.Administrador,0) = 1
GO
PRINT N'Creando Vista [dbo].[vSeguridadUsuarioOpcion]...';


GO

CREATE VIEW vSeguridadUsuarioOpcion
AS

SELECT	a.SegUsuarioID, a.Nombre, a.Activo, a.Bloqueado, a.Administrador, 
		a.SegPerfilID, a.PerfilNombre, a.PerfilNombreCorto,
		a.EmpresaID, a.EmpresaNombre, a.EmpresaNombreCorto,
		c.OpcionID, c.ModuloID, d.ModuloClave, d.Nombre as ModuloNombre, d.NombreCorto as ModuloNombreCorto, 
		c.PadreID, c.Nombre as OpcionNombre, c.NombreCorto as OpcionNombreCorto, c.RecursoWebsite, 
		c.Activo as OpcionActivo, c.Protegido, c.Popup, c.VisibleMenu, c.Icono, c.Orden, 
		f.TipoOpcionID, f.Nombre as TipoOpcionNombre, f.NombreCorto as TipoOpcionNombreCorto, 
		h.AccionID, h.AccionClave, h.Nombre as AccionNombre, h.NombreCorto as AccionNombreCorto,
		d.RecursoWebSite as ModuloRecursoWebSite, d.Icono as ModuloIcono
FROM	vSeguridadUsuarioPerfil a
		LEFT OUTER JOIN SegPerfilOpcion b ON a.SegPerfilID = b.SegPerfilID
		LEFT OUTER JOIN SistemaOpcion c ON b.OpcionID = c.OpcionID
		LEFT OUTER JOIN SistemaModulo d ON c.ModuloID = d.ModuloID
		LEFT OUTER JOIN SistemaOpcionTipoOpcion e ON c.OpcionID = e.OpcionID
		LEFT OUTER JOIN SistemaTipoOpcion f ON e.TipoOpcionID = f.TipoOpcionID
		LEFT OUTER JOIN SistemaTipoOpcionAccion g ON f.TipoOpcionID = g.TipoOpcionID
		LEFT OUTER JOIN SistemaAccion h ON g.AccionID = h.AccionID
WHERE	a.Administrador = 0
UNION ALL
SELECT	a.SegUsuarioID, a.Nombre, a.Activo, a.Bloqueado, a.Administrador,
		a.SegPerfilID, a.PerfilNombre, a.PerfilNombreCorto,
		a.EmpresaID, a.EmpresaNombre, a.EmpresaNombreCorto,
		c.OpcionID, c.ModuloID, d.ModuloClave, d.Nombre as ModuloNombre, d.NombreCorto as ModuloNombreCorto, 
		c.PadreID, c.Nombre as OpcionNombre, c.NombreCorto as OpcionNombreCorto, c.RecursoWebsite, 
		c.Activo as OpcionActivo, c.Protegido, c.Popup, c.VisibleMenu, c.Icono, c.Orden,
		f.TipoOpcionID, f.Nombre as TipoOpcionNombre, f.NombreCorto as TipoOpcionNombreCorto,
		h.AccionID, h.AccionClave, h.Nombre as AccionNombre, h.NombreCorto as AccionNombreCorto,
		d.RecursoWebSite as ModuloRecursoWebSite, d.Icono as ModuloIcono
FROM	vSeguridadUsuarioPerfil a
		CROSS JOIN SistemaOpcion c 
		LEFT OUTER JOIN SistemaModulo d ON c.ModuloID = d.ModuloID
		LEFT OUTER JOIN SistemaOpcionTipoOpcion e ON c.OpcionID = e.OpcionID
		LEFT OUTER JOIN SistemaTipoOpcion f ON e.TipoOpcionID = f.TipoOpcionID
		LEFT OUTER JOIN SistemaTipoOpcionAccion g ON f.TipoOpcionID = g.TipoOpcionID
		LEFT OUTER JOIN SistemaAccion h ON g.AccionID = h.AccionID
WHERE	a.Administrador = 1
GO
PRINT N'Creando Función [dbo].[FDecodificaError]...';


GO
CREATE Function [dbo].[FDecodificaError] 
(
	@ERROR_NUMBER int, 
	@ERROR_MESSAGE nvarchar(500),
	@ERROR_SEVERITY int,
	@ERROR_STATE int,
	@ERROR_PROCEDURE varchar(200),
	@ERROR_LINE int
	)
RETURNS nvarchar(500)
AS
BEGIN
	RETURN @ERROR_MESSAGE
END
GO
PRINT N'Creando Procedimiento [dbo].[Academico_Institucion_Educativa_Consultar]...';


GO


create procedure [dbo].[Academico_Institucion_Educativa_Consultar]

	@InstitucionEducativaID as int

as

	select * 
	from   AcInstitucionEducativa
	where  InstitucionEducativaID = @InstitucionEducativaID

return 0
GO
PRINT N'Creando Procedimiento [dbo].[Academico_Institucion_Educativa_Listado]...';


GO
CREATE PROCEDURE [dbo].[Academico_Institucion_Educativa_Listado]

AS
	select     
		 	 [InstitucionEducativaID] 
			,[InstitucionEducativaClave]
			,[Nombre] 
			,[NombreCorto]  
			,[ExtraTexto1]  
			,[ExtraTexto2]   
			,[ExtraTexto3]
			,[ExtraFecha1] 
			,[ExtraFecha2] 
			,[ExtraDecimal1]
			,[ExtraDecimal2]
			,[ExtraDecimal3]
	from   AcInstitucionEducativa

return 0
GO
PRINT N'Creando Procedimiento [dbo].[Academico_Programa_Academico_Consultar]...';


GO


create procedure [dbo].[Academico_Programa_Academico_Consultar]

	@ProgramaAcademicoID as int

as

	select * 
	from   AcProgramaAcademico
	where  ProgramaAcademicoID = @ProgramaAcademicoID

return 0
GO
PRINT N'Creando Procedimiento [dbo].[Academico_Programa_Academico_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[Academico_Programa_Academico_Eliminar]
@ProgramaAcademicoID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    AcProgramaAcademico
    WHERE   ProgramaAcademicoID = @ProgramaAcademicoID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[Academico_Programa_Academico_Guardar]...';


GO
CREATE PROCEDURE [dbo].[Academico_Programa_Academico_Guardar]

    @ProgramaAcademicoID    INT,
    @ProgramaAcademicoClave VARCHAR (6),
    @Nombre           VARCHAR (80),
    @NombreCorto      VARCHAR (15),
    @ExtraTexto1      VARCHAR (500),
    @ExtraTexto2      VARCHAR (500),
    @ExtraTexto3      VARCHAR (500),
    @ExtraFecha1      DATETIME,
    @ExtraFecha2      DATETIME

AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    IF EXISTS(SELECT ProgramaAcademicoID FROM AcProgramaAcademico WHERE ProgramaAcademicoID = @ProgramaAcademicoID)
    BEGIN
        UPDATE  AcProgramaAcademico
        SET     
				@ProgramaAcademicoClave = @ProgramaAcademicoClave,
				Nombre           = @Nombre,
				NombreCorto      = @NombreCorto,
				ExtraTexto1      = @ExtraTexto1,
				ExtraTexto2      = @ExtraTexto2,
				ExtraTexto3		 = @ExtraTexto3,
				ExtraFecha1		 = @ExtraFecha1,
				ExtraFecha2		 = @ExtraFecha2
        WHERE   ProgramaAcademicoID	 = ProgramaAcademicoID
    END
    ELSE
    BEGIN        
        INSERT  INTO AcProgramaAcademico(
				ProgramaAcademicoClave,
				Nombre,
				NombreCorto,
				ExtraTexto1,
				ExtraTexto2,
				ExtraTexto3,
				ExtraFecha1,
				ExtraFecha2
				)
        VALUES  (
				@ProgramaAcademicoClave,
				@Nombre,
				@NombreCorto,
				@ExtraTexto1,
				@ExtraTexto2,
				@ExtraTexto3,
				@ExtraFecha1,
				@ExtraFecha2
				)
        
        SET     @ProgramaAcademicoID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @ProgramaAcademicoID as ProgramaAcademicoID
GO
PRINT N'Creando Procedimiento [dbo].[Academico_Programa_Academico_Listado]...';


GO
CREATE PROCEDURE [dbo].[Academico_Programa_Academico_Listado]

AS
	select     
		 	 [ProgramaAcademicoID] 
			,[ProgramaAcademicoClave]
			,[Nombre] 
			,[NombreCorto]  
			,[ExtraTexto1]  
			,[ExtraTexto2]   
			,[ExtraTexto3]
			,[ExtraFecha1] 
			,[ExtraFecha2]
	from   AcProgramaAcademico

return 0
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusDocumento_Consultar]...';


GO


CREATE PROCEDURE [dbo].[CfgEstatusDocumento_Consultar]
@CfgEstatusDocumentoID int
AS

SELECT  CfgEstatusDocumentoID,CfgEstatusDocumentoClave,Nombre,NombreCorto,SistemaEstatusTipoDocumentoID,Predeterminado
FROM    CfgEstatusDocumento
WHERE   CfgEstatusDocumentoID = @CfgEstatusDocumentoID
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusDocumento_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CfgEstatusDocumento_Eliminar]
@ModificacionUsuarioID int = null,
@CfgEstatusDocumentoID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    CfgEstatusDocumento
    WHERE   CfgEstatusDocumentoID = @CfgEstatusDocumentoID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CmpRequisicionDetalle_ListadoRequisicionEncabezadoID]...';


GO


CREATE PROCEDURE [dbo].[CmpRequisicionDetalle_ListadoRequisicionEncabezadoID]
@CmpRequisicionEncabezadoID int
AS

SELECT  CmpRequisicionDetalleID,CmpRequisicionEncabezadoID,Renglon,PpalProductoID,Cantidad,AuxUnidadID,PpalAlmacenID,PpalConceptoEgresoID,PpalCuentaContableID,DescripcionAdicional,CfgEstatusDocumentoID
FROM    CmpRequisicionDetalle 
WHERE	CmpRequisicionEncabezadoID = @CmpRequisicionEncabezadoID
ORDER	BY Renglon
GO
PRINT N'Creando Procedimiento [dbo].[Compras_Requisicion_ListadoFiltros]...';


GO
CREATE PROCEDURE [dbo].[Compras_Requisicion_ListadoFiltros]
@EmpresaID int, 
@SucursalID int, 
@FechaInicial smalldatetime,
@FechaFinal smalldatetime,
@EstatusDocumento nvarchar(max)
AS

SET NOCOUNT ON 

SELECT	a.*, d.PpalSerieClave as Serie, e.Nombre as EstatusDocumento, c.Nombre as Area, 
		(SELECT COUNT(b.CmpRequisicionEncabezadoID) FROM CmpRequisicionDetalle b WHERE b.CmpRequisicionEncabezadoID = a.CmpRequisicionEncabezadoID) as Movimientos
FROM	CmpRequisicionEncabezado a 			
			INNER JOIN PpalSerie d ON a.PpalSerieID = d.PpalSerieID
			LEFT OUTER JOIN CfgEstatusDocumento e ON a.CfgEstatusDocumentoID = e.CfgEstatusDocumentoID
			LEFT OUTER JOIN PpalArea c ON a.PpalAreaID = c.PpalAreaID
ORDER	BY a.Fecha DESC

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[EspDomicilio_ValidarUnico]...';


GO


CREATE PROCEDURE [dbo].[EspDomicilio_ValidarUnico]
@CodigoPostal int,
@NumeroInterior varchar (20),
@NumeroExterior varchar (20),
@CiudadID int 

AS
DECLARE @DomicilioID int
SET @DomicilioID = (SELECT EspDomicilioID FROM EspDomicilio 
					WHERE CodigoPostal = @CodigoPostal and NumeroInterior = @NumeroInterior and NumeroExterior = @NumeroExterior and
						EspCiudadID = @CiudadID)

SELECT EspDomicilioID
FROM EspDomicilio
Where CodigoPostal = @CodigoPostal and NumeroInterior = @NumeroInterior and NumeroExterior = @NumeroExterior and
		EspCiudadID = @CiudadID
GO
PRINT N'Creando Procedimiento [dbo].[EspDomicilio_ValidarUnicoRol]...';


GO


CREATE PROCEDURE [dbo].[EspDomicilio_ValidarUnicoRol]
@DomicilioID int
AS


Select 'Representante Proveedor' as Rol, 
	CASE WHEN P_1.FisicaMoral = 'F' THEN P_1.Nombre + ' ' + P_1.ApellidoPaterno + ' ' + P_1.ApellidoMaterno  ELSE P_1.RazonSocial END + ' / ' +
	CASE WHEN P_2.FisicaMoral = 'F' THEN P_2.Nombre + ' ' + P_2.ApellidoPaterno + ' ' + P_2.ApellidoMaterno  ELSE P_2.RazonSocial END AS NombreRol
	from PpalRepresentanteProveedorDomicilio PRPD
	inner join PpalRepresentanteProveedor PRP ON PRPD.PpalRepresentanteProveedorID = PRP.PpalRepresentanteProveedorID 
	inner join PpalProveedor PP ON PRP.PpalProveedorID = PP.PpalProveedorID
	inner join EspPersona P_1 ON PP.EspPersonaID = P_1.EspPersonaID
	inner join EspPersona P_2 ON PRP.EspPersonaID = P_2.EspPersonaID
	where PRPD.EspDomicilioID = @DomicilioID
UNION ALL
Select 'Proveedor' as Rol, 
	CASE WHEN P.FisicaMoral = 'F' THEN P.Nombre + ' ' + P.ApellidoPaterno + ' ' + P.ApellidoMaterno  ELSE P.RazonSocial END AS NombreRol
	from PpalProveedorDomicilio PPD
	inner join PpalProveedor PP ON PPD.PpalProveedorID = PP.PpalProveedorID
	inner join EspPersona P ON PP.EspPersonaID = P.EspPersonaID
	where PPD.EspDomicilioID = @DomicilioID

UNION All
Select 'Contacto Personal' as Rol, 
	CASE WHEN P_1.FisicaMoral = 'F' THEN P_1.Nombre + ' ' + P_1.ApellidoPaterno + ' ' + P_1.ApellidoMaterno  ELSE P_1.RazonSocial END + ' / ' +
	CASE WHEN P_2.FisicaMoral = 'F' THEN P_2.Nombre + ' ' + P_2.ApellidoPaterno + ' ' + P_2.ApellidoMaterno  ELSE P_2.RazonSocial END AS NombreRol
	from PpalContactoPersonalDomicilio PCPT
	inner join PpalContactoPersonal PCP ON PCPT.PpalContactoPersonalID = PCP.PpalContactoPersonalID 
	inner join PpalPersonal PP ON PCP.PpalPersonalID = PP.PpalPersonalID
	inner join EspPersona P_1 ON PP.EspPersonaID = P_1.EspPersonaID
	inner join EspPersona P_2 ON PCP.EspPersonaID = P_2.EspPersonaID
	where PCPT.EspDomicilioID = @DomicilioID
UNION ALL
Select 'Personal' as Rol, 
	CASE WHEN P.FisicaMoral = 'F' THEN P.Nombre + ' ' + P.ApellidoPaterno + ' ' + P.ApellidoMaterno  ELSE P.RazonSocial END AS NombreRol
	from PpalPersonalDomicilio PPT
	inner join PpalPersonal PP ON PPT.PpalPersonalID = PP.PpalPersonalID
	inner join EspPersona P ON PP.EspPersonaID = P.EspPersonaID
	where PPT.EspDomicilioID = @DomicilioID
GO
PRINT N'Creando Procedimiento [dbo].[EspPersona_Guardar]...';


GO
CREATE PROCEDURE [dbo].[EspPersona_Guardar]
@EspPersonaID int,
@FisicaMoral char(1),
@NombreComercial nvarchar(120),
@RazonSocial nvarchar(120),
@Nombre nvarchar(35),
@ApellidoPaterno nvarchar(30),
@ApellidoMaterno nvarchar(30),
@RFC nvarchar(13),
@CURP nvarchar(18),
@SexoID int = 0,
@FechaNacimiento date = null,
@CiudadNacimientoID int = 0,
@EstadoCivilID int = 0,
@CasadoCivil bit,
@CasadoIglesia bit,
@Iniciales varchar(6),
@SobreNombre varchar(25),
@NombreCorto varchar(25),
@EspDomicilioIDFacturacion int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress					varchar(40)		= null
	,@HostName					varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspPersona',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@EspPersonaID_ int = @EspPersonaID,
		@FisicaMoral_ char(1),
		@NombreComercial_ nvarchar(120),
		@RazonSocial_ nvarchar(120),
		@Nombre_ nvarchar(35),
		@ApellidoPaterno_ nvarchar(30),
		@ApellidoMaterno_ nvarchar(30),
		@RFC_ nvarchar(13),
		@CURP_ nvarchar(18),
		@SistemaSexoID_ int = 0,
		@FechaNacimiento_ date = null,
		@CiudadNacimientoID_ int = 0,
		@EstadoCivilID_ int = 0,
		@CasadoCivil_ bit,
		@CasadoIglesia_ bit,
		@Iniciales_ varchar(6),
		@SobreNombre_ varchar(25),
		@NombreCorto_ varchar(25),
		@EspDomicilioIDFacturacion_ int = 0,
-- Variables para validación de duplicados
		@Duplicado varchar(100)
--BEGIN TRY
--	BEGIN TRANSACTION

SET @IDAActualizar = @EspPersonaID
-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
/*IF @IDAActualizar > 0
BEGIN
	-- Lee Valores anteriores para Bitácora
	SELECT	@EspPersonaID_ = EspPersonaID,				@FisicaMoral_ = FisicaMoral,			@NombreComercial_ = NombreComercial,
			@RazonSocial_ = RazonSocial,			@Nombre_ = Nombre,						@ApellidoPaterno_ = ApellidoPaterno,
			@ApellidoMaterno_ = ApellidoMaterno,	@RFC_ = RFC,							@CURP_ = CURP,
			@SistemaSexoID_ = SistemaSexoID,		@FechaNacimiento_ = FechaNacimiento,	@CiudadNacimientoID_ = EspCiudadNacimientoID,
			@EstadoCivilID_ = AuxEstadoCivilID,		@CasadoCivil_ = CasadoCivil,			@CasadoIglesia_ = CasadoIglesia,
			@Iniciales_ = Iniciales,				@SobreNombre_ = SobreNombre,			@NombreCorto_ = NombreCorto,
			@EspDomicilioIDFacturacion_ = EspDomicilioIDFacturacion
		FROM	EspPersona WHERE EspPersonaID = @IDAActualizar
	-- Si no se encontró registro a actualizar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar)
	ELSE
	BEGIN
		-- Si existe ID -> Valida RFC, CURP y Razón Social no duplicados
		IF @RFC > ''
		BEGIN
			SELECT @Duplicado = MAX( CASE WHEN FisicaMoral = 'F' THEN 
					Nombre + ' ' + ApellidoPaterno + ' ' + ApellidoMaterno ELSE RazonSocial END )
			  FROM EspPersona
			 WHERE RFC = @RFC AND EspPersonaID <> @EspPersonaID;
			IF @Duplicado > ''
				SELECT @Errores = 999990, @Mensaje = CONCAT('RFC DUPLICADO EN : ', @Duplicado);
		END
		IF @Errores = 0
		BEGIN
			IF @CURP > ''
			BEGIN
				SELECT @Duplicado = MAX( CASE WHEN FisicaMoral = 'F' THEN 
						Nombre + ' ' + ApellidoPaterno + ' ' + ApellidoMaterno ELSE RazonSocial END )
					FROM EspPersona
					WHERE CURP = @CURP AND EspPersonaID <> @EspPersonaID;
				IF @Duplicado > ''
					SELECT @Errores = 999990, @Mensaje = CONCAT('CURP DUPLICADO EN : ', @Duplicado);
			END
		END
		IF @Errores = 0
		BEGIN
			IF @RazonSocial > ''
			BEGIN
				SELECT @Duplicado = MAX( RFC )
					FROM EspPersona
					WHERE RazonSocial = @RazonSocial AND EspPersonaID <> @EspPersonaID;
				IF @Duplicado > ''
					SELECT @Errores = 999990, @Mensaje = CONCAT('RAZÓN SOCIAL DUPLICADO EN : ', @Duplicado);
			END
		END
	END
END */
-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
IF @Errores = 0
BEGIN
	-- Si la llave existe hace UPDATE y si no, hace INSERT
	IF @IDAActualizar > 0
	BEGIN
		UPDATE  EspPersona
		SET    
				FisicaMoral = @FisicaMoral,
				NombreComercial = @NombreComercial,
				RazonSocial = @RazonSocial,
				Nombre = @Nombre,
				ApellidoPaterno = @ApellidoPaterno,
				ApellidoMaterno = @ApellidoMaterno,
				RFC = @RFC,
				CURP = @CURP,
				SistemaSexoID = @SexoID,
				FechaNacimiento = @FechaNacimiento,
				EspCiudadNacimientoID = @CiudadNacimientoID,
				AuxEstadoCivilID = @EstadoCivilID,
				CasadoCivil = @CasadoCivil,
				CasadoIglesia = @CasadoIglesia,
				Iniciales = @Iniciales,
				SobreNombre = @SobreNombre,
				NombreCorto = @NombreCorto,
				EspDomicilioIDFacturacion = @EspDomicilioIDFacturacion
		WHERE   EspPersonaID = @EspPersonaID
	END
	ELSE
	BEGIN        
		INSERT  INTO EspPersona(          
				FisicaMoral,
				NombreComercial,
				RazonSocial,
				Nombre,
				ApellidoPaterno,
				ApellidoMaterno,
				RFC,
				CURP,
				SistemaSexoID,
				FechaNacimiento,
				EspCiudadNacimientoID,
				AuxEstadoCivilID,
				CasadoCivil,
				CasadoIglesia,
				Iniciales,
				SobreNombre,
				NombreCorto,
				EspDomicilioIDFacturacion)
		VALUES  (        
				@FisicaMoral,
				@NombreComercial,
				@RazonSocial,
				@Nombre,
				@ApellidoPaterno,
				@ApellidoMaterno,
				@RFC,
				@CURP,
				@SexoID,
				@FechaNacimiento,
				@CiudadNacimientoID,
				@EstadoCivilID,
				@CasadoCivil,
				@CasadoIglesia,
				@Iniciales,
				@SobreNombre,
				@NombreCorto,
				@EspDomicilioIDFacturacion)
        
		SET     @EspPersonaID = SCOPE_IDENTITY()
	END
/*	IF @@RowCount > 0
	BEGIN
		/* Procesa Bitácora */
		-- Determina si fue UPDATE o INSERT
		IF @EspPersonaID_ > 0  SET @Operacion = 'Update' 	
					ELSE SET @Operacion = 'Create' 

		-- Revisa si el cambio debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- logMessage = Cambios efectuados
			SET @logMessage = Concat('FisicaMoral::', @FisicaMoral_, ':', @FisicaMoral, ';')
			SET @logMessage = Concat(@logMessage, 'NombreComercial::', @NombreComercial_, ':', @NombreComercial, ';')
			SET @logMessage = Concat(@logMessage, 'RazonSocial::', @RazonSocial_, ':', @RazonSocial, ';')
			SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
			SET @logMessage = Concat(@logMessage, 'ApellidoPaterno::', @ApellidoPaterno_, ':', @ApellidoPaterno, ';')
			SET @logMessage = Concat(@logMessage, 'ApellidoMaterno::', @ApellidoMaterno_, ':', @ApellidoMaterno, ';')
			SET @logMessage = Concat(@logMessage, 'RFC::', @RFC_, ':', @RFC, ';')
			SET @logMessage = Concat(@logMessage, 'CURP::', @CURP_, ':', @CURP, ';')
			SET @logMessage = Concat(@logMessage, 'SexoID::', @SistemaSexoID_, ':', @SexoID, ';')
			SET @logMessage = Concat(@logMessage, 'FechaNacimiento::', @FechaNacimiento_, ':', @FechaNacimiento, ';')
			SET @logMessage = Concat(@logMessage, 'CiudadNacimientoID::', @CiudadNacimientoID_, ':', @CiudadNacimientoID, ';')
			SET @logMessage = Concat(@logMessage, 'EstadoCivilID::', @EstadoCivilID_, ':', @EstadoCivilID, ';')
			SET @logMessage = Concat(@logMessage, 'CasadoCivil::', @CasadoCivil_, ':', @CasadoCivil, ';')
			SET @logMessage = Concat(@logMessage, 'CasadoIglesia::', @CasadoIglesia_, ':', @CasadoIglesia, ';')
			SET @logMessage = Concat(@logMessage, 'Iniciales::', @Iniciales_, ':', @Iniciales, ';')
			SET @logMessage = Concat(@logMessage, 'SobreNombre::', @SobreNombre_, ':', @SobreNombre, ';')
			SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAActualizar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END */
END
--END TRY
-- Si hubo error los procesa y lo regresa
--BEGIN CATCH
--    SELECT @Errores = ERROR_NUMBER(), 
--			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
--END CATCH 
--IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
--IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

/*SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID */

RETURN  @EspPersonaID
GO
PRINT N'Creando Procedimiento [dbo].[EspPersona_ValidarNombreUnico]...';


GO


CREATE PROCEDURE [dbo].[EspPersona_ValidarNombreUnico]
@Nombre varchar(30),
@ApellidoPaterno varchar(30),
@ApellidoMaterno varchar(30)
AS
DECLARE @PersonaID int, @Asignado int
--SET @PersonaID = (SELECT PersonaID FROM Persona WHERE RazonSocial = @RazonSocial Group by PersonaID)
SELECT P.EspPersonaID, P.RFC, P.CURP, P.FechaNacimiento,P.AuxEstadoCivilID, ec.Nombre as EstadoCivilNombre,P.Nombre,
P.ApellidoPaterno, P.ApellidoMaterno, P.*
FROM EspPersona P
inner join AuxEstadoCivil ec on P.AuxEstadoCivilID = ec.AuxEstadoCivilID
WHERE P.Nombre = @Nombre and P.ApellidoPaterno = @ApellidoPaterno and P.ApellidoMaterno = @ApellidoMaterno
GO
PRINT N'Creando Procedimiento [dbo].[EspPersona_ValidarRazonSocialUnico]...';


GO


CREATE PROCEDURE [dbo].[EspPersona_ValidarRazonSocialUnico]
@RazonSocial varchar(10)
AS
DECLARE @PersonaID int, @Asignado int
--SET @PersonaID = (SELECT PersonaID FROM Persona WHERE RazonSocial = @RazonSocial Group by PersonaID)
SELECT P.EspPersonaID, P.RFC, P.CURP, P.FechaNacimiento,P.AuxEstadoCivilID, ec.Nombre as EstadoCivilNombre,P.*
FROM EspPersona P
inner join AuxEstadoCivil ec on P.AuxEstadoCivilID = ec.AuxEstadoCivilID
WHERE RazonSocial = @RazonSocial
GO
PRINT N'Creando Procedimiento [dbo].[EspPersona_ValidarUnicoRol]...';


GO
CREATE PROCEDURE [dbo].[EspPersona_ValidarUnicoRol]
@EspPersonaID int 
AS


Select 'Representante Proveedor' as Rol, 
	CASE WHEN P_1.FisicaMoral = 'F' THEN P_1.Nombre + ' ' + P_1.ApellidoPaterno + ' ' + P_1.ApellidoMaterno  ELSE P_1.RazonSocial END + ' / ' +
	CASE WHEN P_2.FisicaMoral = 'F' THEN P_2.Nombre + ' ' + P_2.ApellidoPaterno + ' ' + P_2.ApellidoMaterno  ELSE P_2.RazonSocial END AS NombreRol,
	PRP.Puesto as Otro
	from PpalRepresentanteProveedor PRP
	inner join PpalProveedor PP ON PRP.PpalProveedorID = PP.PpalProveedorID
	inner join EspPersona P_1 ON PP.EspPersonaID = P_1.EspPersonaID
	inner join EspPersona P_2 ON PRP.EspPersonaID = P_2.EspPersonaID
	where PRP.EspPersonaID = @EspPersonaID
UNION ALL
Select 'Proveedor' as Rol, 
	CASE WHEN P.FisicaMoral = 'F' THEN P.Nombre + ' ' + P.ApellidoPaterno + ' ' + P.ApellidoMaterno  ELSE P.RazonSocial END AS NombreRol,
	GE.Nombre as Otro
	from PpalProveedor PP
	inner join EspPersona P ON PP.EspPersonaID = P.EspPersonaID
	inner join AuxGiroEmpresa GE on PP.AuxGiroEmpresaID = GE.AuxGiroEmpresaID
	where PP.EspPersonaID = @EspPersonaID

UNION All
Select 'Contacto Personal' as Rol, 
	CASE WHEN P_1.FisicaMoral = 'F' THEN P_1.Nombre + ' ' + P_1.ApellidoPaterno + ' ' + P_1.ApellidoMaterno  ELSE P_1.RazonSocial END + ' / ' +
	CASE WHEN P_2.FisicaMoral = 'F' THEN P_2.Nombre + ' ' + P_2.ApellidoPaterno + ' ' + P_2.ApellidoMaterno  ELSE P_2.RazonSocial END AS NombreRol,
	CP.Nombre as Otro
	from PpalContactoPersonal PCP
	inner join PpalPersonal PP ON PCP.PpalPersonalID = PP.PpalPersonalID
	inner join EspPersona P_1 ON PP.EspPersonaID = P_1.EspPersonaID
	inner join EspPersona P_2 ON PCP.EspPersonaID = P_2.EspPersonaID
	inner join SistemaTipoContactoPersonal CP on PCP.TipoContactoPersonalID = CP.TipoContactoPersonalID
	where PCP.EspPersonaID = @EspPersonaID
UNION ALL
Select 'Personal' as Rol, 
	CASE WHEN P.FisicaMoral = 'F' THEN P.Nombre + ' ' + P.ApellidoPaterno + ' ' + P.ApellidoMaterno  ELSE P.RazonSocial END AS NombreRol,
	pu.Nombre as Otro
	from PpalPersonal PP
	inner join EspPersona P ON PP.EspPersonaID = P.EspPersonaID
	inner join AuxPuesto pu on PP.AuxPuestoID = pu.AuxPuestoID
	where PP.EspPersonaID = @EspPersonaID
GO
PRINT N'Creando Procedimiento [dbo].[EspTelefono_ValidarUnico]...';


GO


CREATE PROCEDURE [dbo].[EspTelefono_ValidarUnico]
@ClaveTelefonicaPais varchar(10),
@NumeroTelefonico varchar(10)
AS
DECLARE @TelefonoID int, @Asignado int
SET @TelefonoID = (SELECT EspTelefonoID FROM EspTelefono WHERE ClaveTelefonicaPais = @ClaveTelefonicaPais and NumeroTelefonico = @NumeroTelefonico)
SELECT T.EspTelefonoID, T.ClaveTelefonicaPais, T.NumeroTelefonico,T.SistemaEstatusTelefonoID,T.Comentario,T.CfgTipoTelefonoID,
		tpt.Nombre as TipoTelefonoNombre, et.Nombre as EstatusTelefonoNombre
FROM EspTelefono T
inner join CfgTipoTelefono tpt on T.CfgTipoTelefonoID = tpt.CfgTipoTelefonoID
inner join SistemaEstatusTelefono et on T.SistemaEstatusTelefonoID = et.EstatusTelefonoID

WHERE EspTelefonoID = @TelefonoID
GO
PRINT N'Creando Procedimiento [dbo].[EspTelefono_ValidarUnicoRol]...';


GO
CREATE PROCEDURE [dbo].[EspTelefono_ValidarUnicoRol]
@TelefonoID int 
AS


Select 'Representante Proveedor' as Rol, 
	CASE WHEN P_1.FisicaMoral = 'F' THEN P_1.Nombre + ' ' + P_1.ApellidoPaterno + ' ' + P_1.ApellidoMaterno  ELSE P_1.RazonSocial END + ' / ' +
	CASE WHEN P_2.FisicaMoral = 'F' THEN P_2.Nombre + ' ' + P_2.ApellidoPaterno + ' ' + P_2.ApellidoMaterno  ELSE P_2.RazonSocial END AS NombreRol
	from PpalRepresentanteProveedorTelefono PRPT
	inner join PpalRepresentanteProveedor PRP ON PRPT.PpalRepresentanteProveedorID = PRP.PpalRepresentanteProveedorID 
	inner join PpalProveedor PP ON PRP.PpalProveedorID = PP.PpalProveedorID
	inner join EspPersona P_1 ON PP.EspPersonaID = P_1.EspPersonaID
	inner join EspPersona P_2 ON PRP.EspPersonaID = P_2.EspPersonaID
	where PRPT.EspTelefonoID = @TelefonoID
UNION ALL
Select 'Proveedor' as Rol, 
	CASE WHEN P.FisicaMoral = 'F' THEN P.Nombre + ' ' + P.ApellidoPaterno + ' ' + P.ApellidoMaterno  ELSE P.RazonSocial END AS NombreRol
	from PpalProveedorTelefono PPT
	inner join PpalProveedor PP ON PPT.PpalProveedorID = PP.PpalProveedorID
	inner join EspPersona P ON PP.EspPersonaID = P.EspPersonaID
	where PPT.EspTelefonoID = @TelefonoID

UNION All
Select 'Contacto Personal' as Rol, 
	CASE WHEN P_1.FisicaMoral = 'F' THEN P_1.Nombre + ' ' + P_1.ApellidoPaterno + ' ' + P_1.ApellidoMaterno  ELSE P_1.RazonSocial END + ' / ' +
	CASE WHEN P_2.FisicaMoral = 'F' THEN P_2.Nombre + ' ' + P_2.ApellidoPaterno + ' ' + P_2.ApellidoMaterno  ELSE P_2.RazonSocial END AS NombreRol
	from PpalContactoPersonalTelefono PCPT
	inner join PpalContactoPersonal PCP ON PCPT.PpalContactoPersonalID = PCP.PpalContactoPersonalID 
	inner join PpalPersonal PP ON PCP.PpalPersonalID = PP.PpalPersonalID
	inner join EspPersona P_1 ON PP.EspPersonaID = P_1.EspPersonaID
	inner join EspPersona P_2 ON PCP.EspPersonaID = P_2.EspPersonaID
	where PCPT.EspTelefonoID = @TelefonoID
UNION ALL
Select 'Personal' as Rol, 
	CASE WHEN P.FisicaMoral = 'F' THEN P.Nombre + ' ' + P.ApellidoPaterno + ' ' + P.ApellidoMaterno  ELSE P.RazonSocial END AS NombreRol
	from PpalPersonalTelefono PPT
	inner join PpalPersonal PP ON PPT.PpalPersonalID = PP.PpalPersonalID
	inner join EspPersona P ON PP.EspPersonaID = P.EspPersonaID
	where PPT.EspTelefonoID = @TelefonoID
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_Conversacion_Consultar]...';


GO

Create Procedure [dbo].[Mensajeria_Chat_Conversacion_Consultar]

	@ConversacionID int

As

	Select * 
	From MsjChatConversacion
	Where ConversacionID = @ConversacionID

Return 0
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_Conversacion_Eliminar]...';


GO

CREATE Procedure [dbo].[Mensajeria_Chat_Conversacion_Eliminar]

	@ConversacionID int
	
	/************************************************/
	/* Campos para Log */
	,@UserIDForLog		int
	,@Descripcion		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
	/************************************************/

As

Declare @TablaNombreIDForLog   nvarchar(100) = 'MsjChatConversacion'
Declare @Errores bit, @MensajeSistema nvarchar(300)

Begin Transaction 

Begin Try

	declare @isChangeBeLogged bit
	declare @logMessage       varchar(Max) = ''

	/****************************************************************************/
	/* Log */

	Exec	@isChangeBeLogged	=   Sistema_Log_Regla_Consultar_LogBit_D
			@UsuarioID				=	@UserIDForLog,
			@TablaNombre		=   @TablaNombreIDForLog
	/****************************************************************************/

	Update MsjChatConversacion
	Set Borrada = GetUTCDate()
	Where ConversacionID = @ConversacionID    
	
	Commit Transaction
	
	Select @Errores = 0, @MensajeSistema = ''

	/****************************************************************************/
	/* Log */
	If @isChangeBeLogged = 1 And @@RowCount > 0 

	Begin

		Execute 	 [dbo].[Sistema_Log_Guardar] @TablaNombre		= @TablaNombreIDForLog
												,@TablaID			= @ConversacionID
												,@TablaColumna1		= Null
												,@TablaColumna2		= Null
												,@Operacion			= 'Delete'
												,@UsuarioID			= @UserIDForLog
												,@Descripcion		= @Descripcion
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	End
	/****************************************************************************/

End Try
Begin Catch
    RollBack Transaction
    Select @Errores = 1, @MensajeSistema = ERROR_MESSAGE()
End Catch 

Select  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@MensajeSistema, '') as Mensaje,
        @ConversacionID as ConversacionID
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_Conversacion_Guardar]...';


GO

CREATE Procedure [dbo].[Mensajeria_Chat_Conversacion_Guardar]

	 @ConversacionID		int				= null
	,@Nombre				int
	
	/************************************************/
	/* Campos para Log */
	,@UserIDForLog		int
	,@Descripcion		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
	/************************************************/

As

Declare @TablaNombreIDForLog   nvarchar(100) = 'MsjChatConversacion'
Declare @Errores bit, @MensajeSistema nvarchar(300)

Begin Transaction 

Begin Try

	declare @isChangeBeLogged bit
	declare @logMessage       varchar(Max) = ''

    If Exists(Select ConversacionID From MsjChatConversacion Where ConversacionID = @ConversacionID)
    Begin

		/****************************************************************************/
		/* Log */

		Exec	@isChangeBeLogged	=   Sistema_Log_Regla_Consultar_LogBit_U
				@UsuarioID				=	@UserIDForLog,
				@TablaNombre		=   @TablaNombreIDForLog

		if @isChangeBeLogged = 1

		Begin

			declare 	@ConversacionID_ int
			declare 	@Nombre_ int

			Select 	@ConversacionID_ = ConversacionID,
					@Nombre_ = Nombre
			From MsjChatConversacion 
			Where ConversacionID = @ConversacionID
		
			if @ConversacionID != @ConversacionID_ set @logMessage = Concat(@logMessage, 'ConversacionID::', @ConversacionID_, ':', @ConversacionID, ';')
			if @Nombre != @Nombre_ set @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')

			 Print @logMessage
			
		End
		/* Log */
		/****************************************************************************/


        Update  MsjChatConversacion
        Set     Nombre = @Nombre
        Where   ConversacionID = @ConversacionID


		/****************************************************************************/
		/* Log */
		If @isChangeBeLogged = 1 And @@RowCount > 0 And Len(@logMessage) > 0

		Begin

			Execute 	 [dbo].[Sistema_Log_Guardar] @TablaNombre		= @TablaNombreIDForLog
													,@TablaID			= @ConversacionID
													,@TablaColumna1		= Null
													,@TablaColumna2		= Null
													,@Operacion			= 'Update'
													,@UsuarioID			= @UserIDForLog
													,@Descripcion		= @Descripcion
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		End
		/****************************************************************************/

    End
    Else
    Begin     
	
        Insert  Into MsjChatConversacion(
				Nombre
				)
        Values  (
				@Nombre
				)
        
        Set     @ConversacionID = SCOPE_IDENTITY()


		/****************************************************************************/
		/* Log */

		Exec	@isChangeBeLogged	=   Sistema_Log_Regla_Consultar_LogBit_C
				@UsuarioID				=	@UserIDForLog,
				@TablaNombre		=   @TablaNombreIDForLog

		If @isChangeBeLogged = 1 And @@RowCount > 0

			set @logMessage = Concat(@logMessage, 'ConversacionID::', '', ':', @ConversacionID, ';')
			set @logMessage = Concat(@logMessage, 'Nombre::', '', ':', @Nombre, ';')

			 Print @logMessage

		Begin

			Execute 	 [dbo].[Sistema_Log_Guardar] @TablaNombre		= @TablaNombreIDForLog
													,@TablaID			= @ConversacionID
													,@TablaColumna1		= Null
													,@TablaColumna2		= Null
													,@Operacion			= 'Insert'
													,@UsuarioID			= @UserIDForLog
													,@Descripcion		= @Descripcion
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		End
		/****************************************************************************/

    End
    Commit Transaction
End Try
Begin Catch
    RollBack Transaction
    Select @Errores = 1, @MensajeSistema = ERROR_MESSAGE()
End Catch 

Select  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@MensajeSistema, '') as Mensaje,
        @ConversacionID as ConversacionID
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_Conversacion_Listado]...';


GO

Create Procedure [dbo].[Mensajeria_Chat_Conversacion_Listado]

	@ConRegistrosBorrados bit = 0

As

	If (@ConRegistrosBorrados = 0)
		Begin
	
			Select	 *
			From   MsjChatConversacion
			Where  MsjChatConversacion.Borrada is null

		End
	Else
		Begin

			Select	 *
			From   MsjChatConversacion

		End

return 0
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_ConversacionUsuario_Consultar]...';


GO

Create Procedure [dbo].[Mensajeria_Chat_ConversacionUsuario_Consultar]

	 @UsuarioID			int
	,@ConversacionID	int

As

	Select	[PermisoConversacionID]
	From	MsjChatConversacionUsuario
	Where	MsjChatConversacionUsuario.UsuarioID      = @UsuarioID And
			MsjChatConversacionUsuario.ConversacionID = @ConversacionID

Return 0
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_ConversacionUsuario_Eliminar]...';


GO

CREATE Procedure [dbo].[Mensajeria_Chat_ConversacionUsuario_Eliminar]

	@UsuarioID				int,
	@ConversacionID			int
	
	/************************************************/
	/* Campos para Log */
	,@UserIDForLog		int
	,@Descripcion		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
	/************************************************/

As

Declare @TablaNombreIDForLog   nvarchar(100) = 'MsjChatConversacionUsuario'
Declare @Errores bit, @MensajeSistema nvarchar(300)

Begin Transaction 

Begin Try

	declare @isChangeBeLogged bit
	declare @logMessage       varchar(Max) = ''

	/****************************************************************************/
	/* Log */

	Exec	@isChangeBeLogged	=   Sistema_Log_Regla_Consultar_LogBit_D
			@UsuarioID				=	@UserIDForLog,
			@TablaNombre		=   @TablaNombreIDForLog
	/****************************************************************************/

	Delete	MsjChatConversacionUsuario
	Where	UsuarioID = @UsuarioID And
			ConversacionID = @ConversacionID  
	
	Commit Transaction
	
	Select @Errores = 0, @MensajeSistema = ''

	/****************************************************************************/
	/* Log */
	If @isChangeBeLogged = 1 And @@RowCount > 0 

	Begin

		Execute 	 [dbo].[Sistema_Log_Guardar] @TablaNombre		= @TablaNombreIDForLog
												,@TablaID			= Null
												,@TablaColumna1		= @UsuarioID
												,@TablaColumna2		= @ConversacionID
												,@Operacion			= 'Delete'
												,@UsuarioID			= @UserIDForLog
												,@Descripcion		= @Descripcion
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	End
	/****************************************************************************/

End Try
Begin Catch
    RollBack Transaction
    Select @Errores = 1, @MensajeSistema = ERROR_MESSAGE()
End Catch 

Select  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@MensajeSistema, '') as Mensaje,
        @ConversacionID as ConversacionID
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_ConversacionUsuario_Guardar]...';


GO

CREATE Procedure [dbo].[Mensajeria_Chat_ConversacionUsuario_Guardar]

	 @UsuarioID				int
	,@ConversacionID		int
	,@PermisoConversacionID	int
	
	/************************************************/
	/* Campos para Log */
	,@UserIDForLog		int
	,@Descripcion		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
	/************************************************/
As

Declare @TablaNombreIDForLog   nvarchar(100) = 'MsjChatConversacionUsuario'
Declare @Errores bit, @MensajeSistema nvarchar(300)

Begin Transaction 

Begin Try

	declare @isChangeBeLogged bit
	declare @logMessage       varchar(Max) = ''

    If Exists(Select UsuarioID From MsjChatConversacionUsuario Where UsuarioID = @UsuarioID And ConversacionID = @ConversacionID)
    Begin

		/****************************************************************************/
		/* Log */

		Exec	@isChangeBeLogged	=   Sistema_Log_Regla_Consultar_LogBit_U
				@UsuarioID				=	@UserIDForLog,
				@TablaNombre		=   @TablaNombreIDForLog

		if @isChangeBeLogged = 1

		Begin

			declare 	@UsuarioID_				int
			declare 	@ConversacionID_		int
			declare 	@PermisoConversacionID_ int

			Select 	@PermisoConversacionID_		= PermisoConversacionID
			From	MsjChatConversacionUsuario 
			Where	UsuarioID = @UsuarioID And 
					ConversacionID = @ConversacionID
		
			if @PermisoConversacionID != @PermisoConversacionID_ set @logMessage = Concat(@logMessage, 'PermisoConversacionID::', @PermisoConversacionID_, ':', @PermisoConversacionID, ';')

			 Print @logMessage
			
		End
		/* Log */
		/****************************************************************************/


        Update  MsjChatConversacionUsuario
        Set     PermisoConversacionID = @PermisoConversacionID
        Where   UsuarioID = @UsuarioID And ConversacionID = @ConversacionID


		/****************************************************************************/
		/* Log */
		If @isChangeBeLogged = 1 And @@RowCount > 0 And Len(@logMessage) > 0

		Begin

			Execute 	 [dbo].[Sistema_Log_Guardar] @TablaNombre		= @TablaNombreIDForLog
													,@TablaID			= Null
													,@TablaColumna1		= @UsuarioID
													,@TablaColumna2		= @ConversacionID
													,@Operacion			= 'Update'
													,@UsuarioID			= @UserIDForLog
													,@Descripcion		= @Descripcion
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		End
		/****************************************************************************/

    End
    Else
    Begin     
	
        Insert  Into MsjChatConversacionUsuario (
				 UsuarioID
				,ConversacionID
				,PermisoConversacionID
				)
        Values  (
				 @UsuarioID
				,@ConversacionID
				,@PermisoConversacionID
				)
        
        Set     @UsuarioID = SCOPE_IDENTITY()


		/****************************************************************************/
		/* Log */

		Exec	@isChangeBeLogged	=   Sistema_Log_Regla_Consultar_LogBit_C
				@UsuarioID				=	@UserIDForLog,
				@TablaNombre		=   @TablaNombreIDForLog

		If @isChangeBeLogged = 1 And @@RowCount > 0

			set @logMessage = Concat(@logMessage, 'UsuarioID::', '', ':', @UsuarioID, ';')
			set @logMessage = Concat(@logMessage, 'ConversacionID::', '', ':', @ConversacionID, ';')
			set @logMessage = Concat(@logMessage, 'PermisoConversacionID::', '', ':', @PermisoConversacionID, ';')

			 Print @logMessage

		Begin

			Execute 	 [dbo].[Sistema_Log_Guardar] @TablaNombre		= @TablaNombreIDForLog
													,@TablaID			= Null
													,@TablaColumna1		= @UsuarioID
													,@TablaColumna2		= @ConversacionID
													,@Operacion			= 'Insert'
													,@UsuarioID			= @UserIDForLog
													,@Descripcion		= @Descripcion
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		End
		/****************************************************************************/

    End
    Commit Transaction
End Try
Begin Catch
    RollBack Transaction
    Select @Errores = 1, @MensajeSistema = ERROR_MESSAGE()
End Catch 

Select  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@MensajeSistema, '') as Mensaje,
        @UsuarioID as UsuarioID
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_ConversacionUsuario_Listado]...';


GO

Create Procedure [dbo].[Mensajeria_Chat_ConversacionUsuario_Listado]

As

	Select	*
	From	MsjChatConversacionUsuario

return 0
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_Mensaje_Consultar]...';


GO

Create Procedure [dbo].[Mensajeria_Chat_Mensaje_Consultar]

	@MensajeID int

As

	Select * 
	From MsjChatMensaje
	Where MensajeID = @MensajeID

Return 0
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_Mensaje_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[Mensajeria_Chat_Mensaje_Eliminar]

	@MensajeID int
	
	/************************************************/
	/* Campos para Log */
	,@UserIDForLog		int
	,@Descripcion		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
	/************************************************/

As

Declare @Errores bit, @MensajeSistema nvarchar(300)

Begin Transaction 

Begin Try

	declare @isChangeBeLogged bit
	declare @logMessage       varchar(Max) = ''

	/****************************************************************************/
	/* Log */

	Exec	@isChangeBeLogged	=   Sistema_Log_Regla_Consultar_LogBit_D
			@UsuarioID				=	@UserIDForLog,
			@TablaNombre		=  'MsjChatMensaje'
	/****************************************************************************/

	Update MsjChatMensaje
	Set Borrado = GetUTCDate()
	Where MensajeID = @MensajeID    
	
	Commit Transaction
	
	Select @Errores = 0, @MensajeSistema = ''

	/****************************************************************************/
	/* Log */
	If @isChangeBeLogged = 1 And @@RowCount > 0 

	Begin

		Execute 	 [dbo].[Sistema_Log_Guardar] @TablaNombre		= 'MsjChatMensaje'
												,@TablaID			= @MensajeID
												,@TablaColumna1		= Null
												,@TablaColumna2		= Null
												,@Operacion			= 'Delete'
												,@UsuarioID			= @UserIDForLog
												,@Descripcion		= @Descripcion
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	End
	/****************************************************************************/

End Try
Begin Catch
    RollBack Transaction
    Select @Errores = 1, @MensajeSistema = ERROR_MESSAGE()
End Catch 

Select  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@MensajeSistema, '') as Mensaje,
        @MensajeID as MensajeID
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_Mensaje_Guardar]...';


GO

CREATE Procedure [dbo].[Mensajeria_Chat_Mensaje_Guardar]

	 @MensajeID			int			= null
    ,@UsuarioID			int
    ,@ConversacionID	int
    ,@TipoMensajeID		int
    ,@Mensaje			text
	
	/************************************************/
	/* Campos para Log */
	,@UserIDForLog		int
	,@Descripcion		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
	/************************************************/
As

Declare @TablaNombreIDForLog   nvarchar(100) = 'MsjChatMensaje'
Declare @Errores bit, @MensajeSistema nvarchar(300)

Begin Transaction 

Begin Try

	declare @isChangeBeLogged bit
	declare @logMessage       varchar(Max) = ''

    If Exists(Select MensajeID From MsjChatMensaje Where MensajeID = @MensajeID)
    Begin

		/****************************************************************************/
		/* Log */

		Exec	@isChangeBeLogged	=   Sistema_Log_Regla_Consultar_LogBit_U
				@UsuarioID				=	@UserIDForLog,
				@TablaNombre		=   @TablaNombreIDForLog

		if @isChangeBeLogged = 1

		Begin

			declare 	@MensajeID_			int
			declare 	@UsuarioID_			int
			declare 	@ConversacionID_	int
			declare 	@TipoMensajeID_		int
			declare 	@Mensaje_			nvarchar(Max)

			Select 	@MensajeID_				= MensajeID,
					@UsuarioID_				= UsuarioID,
					@ConversacionID_		= ConversacionID,
					@TipoMensajeID_			= TipoMensajeID,
					@Mensaje_				= Mensaje
			From MsjChatMensaje 
			Where MensajeID = @MensajeID
		
			if @MensajeID != @MensajeID_			set @logMessage = Concat(@logMessage, 'MensajeID::',		@MensajeID_, ':',		@MensajeID, ';')
			if @UsuarioID != @UsuarioID_			set @logMessage = Concat(@logMessage, 'UsuarioID::',		@UsuarioID_, ':',		@UsuarioID, ';')
			if @ConversacionID != @ConversacionID_	set @logMessage = Concat(@logMessage, 'ConversacionID::',	@ConversacionID_, ':',	@ConversacionID, ';')
			if @TipoMensajeID != @TipoMensajeID_	set @logMessage = Concat(@logMessage, 'TipoMensajeID::',	@TipoMensajeID_, ':',	@TipoMensajeID, ';')

			/* No se puede declarar una variable tipo Text */
			/* Y no se puede comprar una variable nvarchar(Max) con Text  */ 
			--if @Mensaje != @Mensaje_				set @logMessage = Concat(@logMessage, 'Mensaje::',			@Mensaje_, ':',			@Mensaje, ';')

			 Print @logMessage
			
		End
		/* Log */
		/****************************************************************************/


        Update  MsjChatMensaje
        Set     UsuarioID = @UsuarioID,
				ConversacionID = @ConversacionID,
				TipoMensajeID = @TipoMensajeID,
				Mensaje = @Mensaje
        Where   MensajeID = @MensajeID


		/****************************************************************************/
		/* Log */
		If @isChangeBeLogged = 1 And @@RowCount > 0 And Len(@logMessage) > 0

		Begin

			Execute 	 [dbo].[Sistema_Log_Guardar] @TablaNombre		= @TablaNombreIDForLog
													,@TablaID			= @MensajeID
													,@TablaColumna1		= Null
													,@TablaColumna2		= Null
													,@Operacion			= 'Update'
													,@UsuarioID			= @UserIDForLog
													,@Descripcion		= @Descripcion
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		End
		/****************************************************************************/

    End
    Else
    Begin     
	
        Insert  Into MsjChatMensaje (
				UsuarioID,
				ConversacionID,
				TipoMensajeID,
				Mensaje,
				Creado
				)
        Values  (
				@UsuarioID,
				@ConversacionID,
				@TipoMensajeID,
				@Mensaje,
				SysUTCDateTime()
				)
        
        Set     @MensajeID = SCOPE_IDENTITY()


		/****************************************************************************/
		/* Log */

		Exec	@isChangeBeLogged	=   Sistema_Log_Regla_Consultar_LogBit_C
				@UsuarioID				=	@UserIDForLog,
				@TablaNombre		=   @TablaNombreIDForLog

		If @isChangeBeLogged = 1 And @@RowCount > 0

			set @logMessage = Concat(@logMessage, 'MensajeID::', '', ':',		@MensajeID, ';')
			set @logMessage = Concat(@logMessage, 'UsuarioID::', '', ':',		@UsuarioID, ';')
			set @logMessage = Concat(@logMessage, 'ConversacionID::', '', ':',	@ConversacionID, ';')
			set @logMessage = Concat(@logMessage, 'TipoMensajeID::', '', ':',	@TipoMensajeID, ';')
			set @logMessage = Concat(@logMessage, 'Mensaje::', '', ':',			@Mensaje, ';')

			 Print @logMessage

		Begin

			Execute 	 [dbo].[Sistema_Log_Guardar] @TablaNombre		= @TablaNombreIDForLog
													,@TablaID			= @MensajeID
													,@TablaColumna1		= Null
													,@TablaColumna2		= Null
													,@Operacion			= 'Insert'
													,@UsuarioID			= @UserIDForLog
													,@Descripcion		= @Descripcion
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		End
		/****************************************************************************/

    End
    Commit Transaction
End Try
Begin Catch
    RollBack Transaction
    Select @Errores = 1, @MensajeSistema = ERROR_MESSAGE()
End Catch 

Select  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@MensajeSistema, '') as Mensaje,
        @MensajeID as MensajeID
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_Mensaje_Listado]...';


GO

Create Procedure [dbo].[Mensajeria_Chat_Mensaje_Listado]

	@ConRegistrosBorrados bit = 0

As

	If (@ConRegistrosBorrados = 0)
		Begin
	
			Select	 [MensajeID]
					,[UsuarioID]
					,[ConversacionID]
					,[TipoMensajeID]
					,[Mensaje]
					,[Creado]
					,[Borrado]
			From   MsjChatMensaje
			Where  MsjChatMensaje.Borrado is null

		End
	Else
		Begin

			Select	 [MensajeID]
					,[UsuarioID]
					,[ConversacionID]
					,[TipoMensajeID]
					,[Mensaje]
					,[Creado]
					,[Borrado]
			From   MsjChatMensaje

		End

return 0
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_PermisoConversacion_Consultar]...';


GO

Create Procedure [dbo].[Mensajeria_Chat_PermisoConversacion_Consultar]

	@PermisoConversacionID		int

As

	Select	* 
	From	MsjChatPermisoConversacion
	Where	PermisoConversacionID = @PermisoConversacionID

Return 0
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_PermisoConversacion_Eliminar]...';


GO

CREATE Procedure [dbo].[Mensajeria_Chat_PermisoConversacion_Eliminar]

	@PermisoConversacionID		int

	/************************************************/
	/* Campos para Log */
	,@UserIDForLog		int
	,@Descripcion		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
	/************************************************/

As

Declare @TablaNombreIDForLog   nvarchar(100) = 'MsjChatPermisoConversacion'
Declare @Errores bit, @MensajeSistema nvarchar(300)

Begin Transaction 

Begin Try

	declare @isChangeBeLogged bit
	declare @logMessage       varchar(Max) = ''

	/****************************************************************************/
	/* Log */

	Exec	@isChangeBeLogged	=   Sistema_Log_Regla_Consultar_LogBit_D
			@UsuarioID				=	@UserIDForLog,
			@TablaNombre		=   @TablaNombreIDForLog
	/****************************************************************************/

	Delete	MsjChatPermisoConversacion
	Where	PermisoConversacionID = @PermisoConversacionID 
	
	Commit Transaction
	
	Select @Errores = 0, @MensajeSistema = ''

	/****************************************************************************/
	/* Log */
	If @isChangeBeLogged = 1 And @@RowCount > 0 

	Begin

		Execute 	 [dbo].[Sistema_Log_Guardar] @TablaNombre		= @TablaNombreIDForLog
												,@TablaID			= @PermisoConversacionID
												,@TablaColumna1		= Null
												,@TablaColumna2		= Null
												,@Operacion			= 'Delete'
												,@UsuarioID			= @UserIDForLog
												,@Descripcion		= @Descripcion
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	End
	/****************************************************************************/

End Try
Begin Catch
    RollBack Transaction
    Select @Errores = 1, @MensajeSistema = ERROR_MESSAGE()
End Catch 

Select  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@MensajeSistema, '') as Mensaje,
        @PermisoConversacionID as PermisoConversacionID
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_PermisoConversacion_Listado]...';


GO

Create Procedure [dbo].[Mensajeria_Chat_PermisoConversacion_Listado]

As

	Select	*
	From	MsjChatPermisoConversacion

return 0
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_TipoMensaje_Consultar]...';


GO

Create Procedure [dbo].[Mensajeria_Chat_TipoMensaje_Consultar]

	@TipoMensajeID		int

As

	Select	* 
	From	MsjChatTipoMensaje
	Where	TipoMensajeID = @TipoMensajeID

Return 0
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_TipoMensaje_Eliminar]...';


GO

CREATE Procedure [dbo].[Mensajeria_Chat_TipoMensaje_Eliminar]

	@TipoMensajeID				int
	
	/************************************************/
	/* Campos para Log */
	,@UserIDForLog		int
	,@Descripcion		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
	/************************************************/

As

Declare @TablaNombreIDForLog   nvarchar(100) = 'MsjChatTipoMensaje'
Declare @Errores bit, @MensajeSistema nvarchar(300)

Begin Transaction 

Begin Try

	declare @isChangeBeLogged bit
	declare @logMessage       varchar(Max) = ''

	/****************************************************************************/
	/* Log */

	Exec	@isChangeBeLogged	=   Sistema_Log_Regla_Consultar_LogBit_D
			@UsuarioID				=	@UserIDForLog,
			@TablaNombre		=   @TablaNombreIDForLog
	/****************************************************************************/

	Delete	MsjChatTipoMensaje
	Where	TipoMensajeID = @TipoMensajeID 
	
	Commit Transaction
	
	Select @Errores = 0, @MensajeSistema = ''

	/****************************************************************************/
	/* Log */
	If @isChangeBeLogged = 1 And @@RowCount > 0 

	Begin

		Execute 	 [dbo].[Sistema_Log_Guardar] @TablaNombre		= @TablaNombreIDForLog
												,@TablaID			= @TipoMensajeID
												,@TablaColumna1		= Null
												,@TablaColumna2		= Null
												,@Operacion			= 'Delete'
												,@UsuarioID			= @UserIDForLog
												,@Descripcion		= @Descripcion
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	End
	/****************************************************************************/

End Try
Begin Catch
    RollBack Transaction
    Select @Errores = 1, @MensajeSistema = ERROR_MESSAGE()
End Catch 

Select  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@MensajeSistema, '') as Mensaje,
        @TipoMensajeID as TipoMensajeID
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_TipoMensaje_Guardar]...';


GO

CREATE Procedure [dbo].[Mensajeria_Chat_TipoMensaje_Guardar]

	--[TipoMensajeID] INT NOT NULL PRIMARY KEY IDENTITY, 
 --   [TipoNombre] CHAR(50) NOT NULL

	 @TipoMensajeID		int				= null
	,@TipoNombre		char(50)
	
	/************************************************/
	/* Campos para Log */
	,@UserIDForLog		int
	,@Descripcion		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
	/************************************************/
As

Declare @TablaNombreIDForLog   nvarchar(100) = 'MsjChatTipoMensaje'
Declare @Errores bit, @MensajeSistema nvarchar(300)

Begin Transaction 

Begin Try

	declare @isChangeBeLogged bit
	declare @logMessage       varchar(Max) = ''

    If Exists(Select TipoMensajeID From MsjChatTipoMensaje Where TipoMensajeID = @TipoMensajeID)
    Begin

		/****************************************************************************/
		/* Log */

		Exec	@isChangeBeLogged	=   Sistema_Log_Regla_Consultar_LogBit_U
				@UsuarioID				=	@UserIDForLog,
				@TablaNombre		=   @TablaNombreIDForLog

		if @isChangeBeLogged = 1

		Begin

			declare 	@TipoMensajeID_ int
			declare 	@TipoNombre_ int

			Select 	@TipoMensajeID_		= TipoMensajeID,
					@TipoNombre_		= TipoNombre
			From MsjChatTipoMensaje 
			Where TipoMensajeID = @TipoMensajeID
		
			if @TipoMensajeID != @TipoMensajeID_ set @logMessage = Concat(@logMessage, 'TipoMensajeID::', @TipoMensajeID_, ':', @TipoMensajeID, ';')
			if @TipoNombre != @TipoNombre_ set @logMessage = Concat(@logMessage, 'TipoNombre::', @TipoNombre_, ':', @TipoNombre, ';')

			 Print @logMessage
			
		End
		/* Log */
		/****************************************************************************/


        Update  MsjChatTipoMensaje
        Set     TipoNombre = @TipoNombre
        Where   TipoMensajeID = @TipoMensajeID


		/****************************************************************************/
		/* Log */
		If @isChangeBeLogged = 1 And @@RowCount > 0 And Len(@logMessage) > 0

		Begin

			Execute 	 [dbo].[Sistema_Log_Guardar] @TablaNombre		= @TablaNombreIDForLog
													,@TablaID			= @TipoMensajeID
													,@TablaColumna1		= Null
													,@TablaColumna2		= Null
													,@Operacion			= 'Update'
													,@UsuarioID			= @UserIDForLog
													,@Descripcion		= @Descripcion
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		End
		/****************************************************************************/

    End
    Else
    Begin     
	
        Insert  Into MsjChatTipoMensaje (
				TipoNombre
				)
        Values  (
				@TipoNombre
				)
        
        Set     @TipoMensajeID = SCOPE_IDENTITY()


		/****************************************************************************/
		/* Log */

		Exec	@isChangeBeLogged	=   Sistema_Log_Regla_Consultar_LogBit_C
				@UsuarioID				=	@UserIDForLog,
				@TablaNombre		=   @TablaNombreIDForLog

		If @isChangeBeLogged = 1 And @@RowCount > 0

			set @logMessage = Concat(@logMessage, 'TipoMensajeID::', '', ':', @TipoMensajeID, ';')
			set @logMessage = Concat(@logMessage, 'TipoNombre::', '', ':', @TipoNombre, ';')

			 Print @logMessage

		Begin

			Execute 	 [dbo].[Sistema_Log_Guardar] @TablaNombre		= @TablaNombreIDForLog
													,@TablaID			= @TipoMensajeID
													,@TablaColumna1		= Null
													,@TablaColumna2		= Null
													,@Operacion			= 'Insert'
													,@UsuarioID			= @UserIDForLog
													,@Descripcion		= @Descripcion
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		End
		/****************************************************************************/

    End
    Commit Transaction
End Try
Begin Catch
    RollBack Transaction
    Select @Errores = 1, @MensajeSistema = ERROR_MESSAGE()
End Catch 

Select  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@MensajeSistema, '') as Mensaje,
        @TipoMensajeID as TipoMensajeID
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_TipoMensaje_Listado]...';


GO

Create Procedure [dbo].[Mensajeria_Chat_TipoMensaje_Listado]

As

	Select	*
	From	MsjChatTipoMensaje

return 0
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_UltimaConsultaConversacion_Eliminar]...';


GO

CREATE Procedure [dbo].[Mensajeria_Chat_UltimaConsultaConversacion_Eliminar]

	@UsuarioID				int,
	@ConversacionID			int
	
	/************************************************/
	/* Campos para Log */
	,@UserIDForLog		int
	,@Descripcion		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
	/************************************************/

As

Declare @TablaNombreIDForLog   nvarchar(100) = 'MsjChatUltimaConsultaConversacion'
Declare @Errores bit, @MensajeSistema nvarchar(300)

Begin Transaction 

Begin Try

	declare @isChangeBeLogged bit
	declare @logMessage       varchar(Max) = ''

	/****************************************************************************/
	/* Log */

	Exec	@isChangeBeLogged	=   Sistema_Log_Regla_Consultar_LogBit_D
			@UsuarioID				=	@UserIDForLog,
			@TablaNombre		=   @TablaNombreIDForLog
	/****************************************************************************/

	Delete	MsjChatUltimaConsultaConversacion
	Where	UsuarioID = @UsuarioID And
			ConversacionID = @ConversacionID  
	
	Commit Transaction
	
	Select @Errores = 0, @MensajeSistema = ''

	/****************************************************************************/
	/* Log */
	If @isChangeBeLogged = 1 And @@RowCount > 0 

	Begin

		Execute 	 [dbo].[Sistema_Log_Guardar] @TablaNombre		= @TablaNombreIDForLog
												,@TablaID			= Null
												,@TablaColumna1		= @UsuarioID
												,@TablaColumna2		= @ConversacionID
												,@Operacion			= 'Delete'
												,@UsuarioID			= @UserIDForLog
												,@Descripcion		= @Descripcion
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	End
	/****************************************************************************/

End Try
Begin Catch
    RollBack Transaction
    Select @Errores = 1, @MensajeSistema = ERROR_MESSAGE()
End Catch 

Select  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@MensajeSistema, '') as Mensaje,
        @ConversacionID as ConversacionID
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_UltimaConsultaConversacion_Guardar]...';


GO

CREATE Procedure [dbo].[Mensajeria_Chat_UltimaConsultaConversacion_Guardar]

	 @UsuarioID				int
	,@ConversacionID		int
	,@UltimaConsulta		datetime = SysUtcDateTime
	
	/************************************************/
	/* Campos para Log */
	,@UserIDForLog		int
	,@Descripcion		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
	/************************************************/
As

Declare @TablaNombreIDForLog   nvarchar(100) = 'MsjChatUltimaConsultaConversacion'
Declare @Errores bit, @MensajeSistema nvarchar(300)

Begin Transaction 

Begin Try

	declare @isChangeBeLogged bit
	declare @logMessage       varchar(Max) = ''

    If Exists(Select UsuarioID From MsjChatUltimaConsultaConversacion Where UsuarioID = @UsuarioID And ConversacionID = @ConversacionID)
    Begin

		/****************************************************************************/
		/* Log */

		Exec	@isChangeBeLogged	=   Sistema_Log_Regla_Consultar_LogBit_U
				@UsuarioID				=	@UserIDForLog,
				@TablaNombre		=   @TablaNombreIDForLog

		if @isChangeBeLogged = 1

		Begin

			declare 	@UsuarioID_ int
			declare 	@ConversacionID_ int
			declare 	@UltimaConsulta_ datetime

			Select 	@UltimaConsulta_		= UltimaConsulta
			From	MsjChatUltimaConsultaConversacion 
			Where	UsuarioID = @UsuarioID And 
					ConversacionID = @ConversacionID
		
			if @UltimaConsulta != @UltimaConsulta_ set @logMessage = Concat(@logMessage, 'UltimaConsulta::', @UltimaConsulta_, ':', @UltimaConsulta, ';')

			 Print @logMessage
			
		End
		/* Log */
		/****************************************************************************/


        Update  MsjChatUltimaConsultaConversacion
        Set     UltimaConsulta = @UltimaConsulta
        Where   UsuarioID = @UsuarioID And ConversacionID = @ConversacionID


		/****************************************************************************/
		/* Log */
		If @isChangeBeLogged = 1 And @@RowCount > 0 And Len(@logMessage) > 0

		Begin

			Execute 	 [dbo].[Sistema_Log_Guardar] @TablaNombre		= @TablaNombreIDForLog
													,@TablaID			= Null
													,@TablaColumna1		= @UsuarioID
													,@TablaColumna2		= @ConversacionID
													,@Operacion			= 'Update'
													,@UsuarioID			= @UserIDForLog
													,@Descripcion		= @Descripcion
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		End
		/****************************************************************************/

    End
    Else
    Begin     
	
        Insert  Into MsjChatUltimaConsultaConversacion (
				 UsuarioID
				,ConversacionID
				,UltimaConsulta
				)
        Values  (
				 @UsuarioID
				,@ConversacionID
				,@UltimaConsulta
				)
        
        Set     @UsuarioID = SCOPE_IDENTITY()


		/****************************************************************************/
		/* Log */

		Exec	@isChangeBeLogged	=   Sistema_Log_Regla_Consultar_LogBit_C
				@UsuarioID				=	@UserIDForLog,
				@TablaNombre		=   @TablaNombreIDForLog

		If @isChangeBeLogged = 1 And @@RowCount > 0

			set @logMessage = Concat(@logMessage, 'UsuarioID::', '', ':', @UsuarioID, ';')
			set @logMessage = Concat(@logMessage, 'ConversacionID::', '', ':', @ConversacionID, ';')
			set @logMessage = Concat(@logMessage, 'UltimaConsulta::', '', ':', @UltimaConsulta, ';')

			 Print @logMessage

		Begin

			Execute 	 [dbo].[Sistema_Log_Guardar] @TablaNombre		= @TablaNombreIDForLog
													,@TablaID			= Null
													,@TablaColumna1		= @UsuarioID
													,@TablaColumna2		= @ConversacionID
													,@Operacion			= 'Insert'
													,@UsuarioID			= @UserIDForLog
													,@Descripcion		= @Descripcion
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		End
		/****************************************************************************/

    End
    Commit Transaction
End Try
Begin Catch
    RollBack Transaction
    Select @Errores = 1, @MensajeSistema = ERROR_MESSAGE()
End Catch 

Select  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@MensajeSistema, '') as Mensaje,
        @UsuarioID as UsuarioID
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_UltimaConsultaConversacion_Listado]...';


GO

Create Procedure [dbo].[Mensajeria_Chat_UltimaConsultaConversacion_Listado]

As

	Select	*
	From	MsjChatUltimaConsultaConversacion

return 0
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_UltimaConsultaConversacion_Reset]...';


GO

CREATE Procedure [dbo].[Mensajeria_Chat_UltimaConsultaConversacion_Reset]

	@UsuarioID				int,
	@ConversacionID			int,
	@UltimaConsulta			DateTime = '2020-01-01'

	/************************************************/
	/* Campos para Log */
	,@UserIDForLog		int
	,@Descripcion		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
	/************************************************/
As

Declare @TablaNombreIDForLog   nvarchar(100) = 'MsjChatUltimaConsultaConversacion'
Declare @Errores bit, @MensajeSistema nvarchar(300)

Begin Transaction 

Begin Try

	declare @isChangeBeLogged bit
	declare @logMessage       varchar(Max) = ''

    If Exists(Select UsuarioID From MsjChatUltimaConsultaConversacion Where UsuarioID = @UsuarioID And ConversacionID = @ConversacionID)
    Begin

		/****************************************************************************/
		/* Log */

		Exec	@isChangeBeLogged	=   Sistema_Log_Regla_Consultar_LogBit_U
				@UsuarioID				=	@UserIDForLog,
				@TablaNombre		=   @TablaNombreIDForLog

		if @isChangeBeLogged = 1

		Begin

			declare 	@UsuarioID_ int
			declare 	@ConversacionID_ int
			declare 	@UltimaConsulta_ datetime

			Select 	@UltimaConsulta_		= UltimaConsulta
			From	MsjChatUltimaConsultaConversacion 
			Where	UsuarioID = @UsuarioID And 
					ConversacionID = @ConversacionID
		
			if @UltimaConsulta != @UltimaConsulta_ set @logMessage = Concat(@logMessage, 'UltimaConsulta::', @UltimaConsulta_, ':', @UltimaConsulta, ';')

			 Print @logMessage
			
		End
		/* Log */
		/****************************************************************************/

		Update	MsjChatUltimaConsultaConversacion
		Set		UltimaConsulta = @UltimaConsulta
		Where	UsuarioID = @UsuarioID And
				ConversacionID = @ConversacionID


		/****************************************************************************/
		/* Log */
		If @isChangeBeLogged = 1 And @@RowCount > 0 And Len(@logMessage) > 0

		Begin

			Execute 	 [dbo].[Sistema_Log_Guardar] @TablaNombre		= @TablaNombreIDForLog
													,@TablaID			= Null
													,@TablaColumna1		= @UsuarioID
													,@TablaColumna2		= @ConversacionID
													,@Operacion			= 'Update'
													,@UsuarioID			= @UserIDForLog
													,@Descripcion		= @Descripcion
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		End
		/****************************************************************************/

    End

    Commit Transaction
End Try
Begin Catch
    RollBack Transaction
    Select @Errores = 1, @MensajeSistema = ERROR_MESSAGE()
End Catch 

Select  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@MensajeSistema, '') as Mensaje,
        @UsuarioID as UsuarioID
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonalFecha_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonalFecha_Listado]
AS

SELECT	PpalPersonalFechaID,PpalPersonalID,Fecha,CfgTipoFechaID,Comentarios,Predeterminado
FROM    PpalPersonalFecha
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonalMail_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonalMail_Listado]
AS

SELECT  PpalPersonalMailID,PpalPersonalID,Email,CfgTipoMailID,Predeterminado,Comentarios
FROM    PpalPersonalMail
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonalTelefono_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonalTelefono_Listado]
AS

SELECT  a.PpalPersonalTelefonoID, a.PpalPersonalID, a.EspTelefonoID, a.Extension, a.Predeterminado, a.Comentarios,a.CfgUsoTelefonoID,
		b.ClaveTelefonicaPais, b.NumeroTelefonico, b.CfgTipoTelefonoID, b.CfgTipoTelefonoID
FROM    PpalPersonalTelefono a 
		INNER JOIN EspTelefono b ON a.EspTelefonoID = b.EspTelefonoID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProducto_ListadoFamiliaProducto]...';


GO


CREATE PROCEDURE [dbo].[PpalProducto_ListadoFamiliaProducto]
@FamiliaProductoID int = 0 
AS
SET NOCOUNT ON 

SET  @FamiliaProductoID = NULLIF(@FamiliaProductoID, 0)

SELECT  a.PpalProductoID, a.MarcaID, a.Nombre, a.NombreCorto, a.AuxUnidadID,
		a.ClaseProductoID, a.CfgTipoProductoID, a.NivelProductoID, a.MetodoCosteoID, a.ManejaLotes, a.ManejaSeries, a.Reorden, a.CfgFamiliaProductoID, a.EstatusProductoID,
		b.NombreCompleto as FamiliaProductoNombreCompleto
FROM    PpalProducto a
			LEFT OUTER JOIN vFamiliaProducto b ON a.CfgFamiliaProductoID = b.CfgFamiliaProductoID
WHERE	a.CfgFamiliaProductoID = ISNULL(@FamiliaProductoID, a.CfgFamiliaProductoID)
ORDER	BY b.NombreCompleto, a.Nombre, a.PpalProductoID

SET NOCOUNT ON
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedor_ConsultarComplemento]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedor_ConsultarComplemento]
@PpalProveedorID int
AS
select d.* from EspDomicilio d
inner join PpalProveedorDomicilio pd on d.EspDomicilioID = pd.EspDomicilioID
inner join PpalProveedor p on pd.PpalProveedorID = p.PpalProveedorID
where p.PpalProveedorID = @PpalProveedorID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedor_ListadoProveedorID]...';


GO

CREATE PROCEDURE [dbo].[PpalProveedor_ListadoProveedorID]
@PpalProveedorID int
AS


SELECT	*
FROM	PpalProveedorDomicilio
WHERE	PpalProveedorID = @PpalProveedorID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorDomicilio_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorDomicilio_Consultar]
@PpalProveedorDomicilioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS


SELECT  PpalProveedorDomicilioID,PpalProveedorID,EspDomicilioID,Comentario, Predeterminado
FROM    PpalProveedorDomicilio
WHERE   PpalProveedorDomicilioID = @PpalProveedorDomicilioID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorDomicilio_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorDomicilio_Eliminar]
@PpalProveedorDomicilioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300),@EliminarDomicilioID int
select @EliminarDomicilioID = EspDomicilioID  from PpalProveedorDomicilio where PpalProveedorDomicilioID = @PpalProveedorDomicilioID

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    PpalProveedorDomicilio
    WHERE   PpalProveedorDomicilioID = @PpalProveedorDomicilioID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
	
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 


SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorDomicilio_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorDomicilio_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int = null
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS

SELECT  PpalProveedorDomicilioID,PpalProveedorID,EspDomicilioID,Comentario,Predeterminado,CfgTipoDomicilioID
FROM    PpalProveedorDomicilio
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorDomicilio_ListadoProveedorID]...';


GO

CREATE PROCEDURE [dbo].[PpalProveedorDomicilio_ListadoProveedorID]
@PpalProveedorID int
AS


SELECT	PD.PpalProveedorDomicilioID,		PD.PpalProveedorID,			PD.EspDomicilioID, 
		PD.Comentario,					PD.CfgTipoDomicilioID,		STD.Nombre as TipoDomicilioNombre,
		PD.Predeterminado,
		(select CONCAT( d.Calle, ' ', d.NumeroExterior, ' ', 
			CASE WHEN d.NumeroInterior > '' THEN '- ' + d.NumeroInterior + ' ' END, 
			', Col. ', C.Nombre, ' C.P.: ', CodigoPostal)) as DomicilioSemiCompleto,
		(select CONCAT(Ciu.Nombre,',',E.Nombre,',',P.Nombre))as CiudadCompleta, 
		STD.Nombre as TipoDomicilioNombre, P.EspPaisID as EspPaisID
FROM	PpalProveedorDomicilio PD
inner join SistemaTipoDomicilio STD on PD.CfgTipoDomicilioID = STD.SistemaTipoDomicilioID
inner join EspDomicilio D on PD.EspDomicilioID = D.EspDomicilioID
inner join EspColonia C on D.EspColoniaID = C.EspColoniaID
inner join EspCiudad Ciu on D.EspCiudadID = Ciu.EspCiudadID
inner join EspMunicipio M on Ciu.EspMunicipioID = M.EspMunicipioID
inner join EspEstado E on M.EspEstadoID = E.EspEstadoID
inner join EspPais P on E.EspPaisID = P.EspPaisID
WHERE	PpalProveedorID = @PpalProveedorID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorEmpresaSucursal_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorEmpresaSucursal_Consultar]
@PpalProveedorEmpresaSucursalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS


	SELECT  PpalProveedorEmpresaSucursalID,PpalSucursalID,PpalProveedorID,PpalProveedorClave,Activo,EmpresaID
	FROM    PpalProveedorEmpresaSucursal
	WHERE   PpalProveedorEmpresaSucursalID = @PpalProveedorEmpresaSucursalID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorEmpresaSucursal_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorEmpresaSucursal_Eliminar]
@PpalProveedorEmpresaSucursalID int

AS
		DELETE
		FROM    PpalProveedorEmpresaSucursal
		WHERE   PpalProveedorEmpresaSucursalID = @PpalProveedorEmpresaSucursalID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorEmpresaSucursal_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorEmpresaSucursal_Guardar]
@ModificacionUsuarioID int = null,
@PpalProveedorEmpresaSucursalID int,
@PpalSucursalID int,
@PpalProveedorID int,
@PpalProveedorClave varchar(10),
@Activo bit,
@EmpresaID int

AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    IF EXISTS(SELECT PpalProveedorEmpresaSucursalID FROM PpalProveedorEmpresaSucursal WHERE PpalProveedorEmpresaSucursalID = @PpalProveedorEmpresaSucursalID)
    BEGIN
        UPDATE  PpalProveedorEmpresaSucursal
        SET     
                
                PpalSucursalID = @PpalSucursalID,
				PpalProveedorID = @PpalProveedorID,
				PpalProveedorClave = @PpalProveedorClave,
				Activo = @Activo,
				EmpresaID = @EmpresaID
        WHERE   PpalProveedorEmpresaSucursalID = @PpalProveedorEmpresaSucursalID
    END
    ELSE
    BEGIN        
        INSERT  INTO PpalProveedorEmpresaSucursal(
                
                PpalSucursalID,
				PpalProveedorID,
				PpalProveedorClave,
				Activo,
				EmpresaID)
        VALUES  (
               
                @PpalSucursalID,
				@PpalProveedorID,
				@PpalProveedorClave,
				@Activo,
				@EmpresaID)
        
        SET     @PpalProveedorEmpresaSucursalID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @PpalProveedorEmpresaSucursalID as ProveedorEmpresaSucursalID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorEmpresaSucursal_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorEmpresaSucursal_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int = null
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS


	SELECT  PpalProveedorEmpresaSucursalID,PpalSucursalID,PpalProveedorID,PpalProveedorClave,Activo,EmpresaID
	FROM    PpalProveedorEmpresaSucursal
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorEmpresaSucursal_ListadoProveedorID]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorEmpresaSucursal_ListadoProveedorID]
@PpalProveedorID INT
as

	SELECT  PpalProveedorEmpresaSucursalID,pes.PpalSucursalID,PpalProveedorID,PpalProveedorClave,Activo,
			s.PpalSucursalClave, s.Nombre as NombreSucursal,E.Nombre as EmpresaNombre
	FROM    PpalProveedorEmpresaSucursal pes
			inner join PpalSucursal s on pes.PpalSucursalID = s.PpalSucursalID 
			inner join SistemaEmpresa E on s.EmpresaID = E.EmpresaID
	WHERE   PpalProveedorID = @PpalProveedorID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorFecha_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorFecha_Consultar]
@PpalProveedorFechaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS

SELECT  PpalProveedorFechaID,PpalProveedorID,Fecha,CfgTipoFechaID,Comentarios
FROM    PpalProveedorFecha
WHERE   PpalProveedorFechaID = @PpalProveedorFechaID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorFecha_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorFecha_Eliminar]
@ModificacionUsuarioID int = null,
@PpalProveedorFechaID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    PpalProveedorFecha
    WHERE   PpalProveedorFechaID = @PpalProveedorFechaID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorFecha_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorFecha_Guardar]
@ModificacionUsuarioID int = null,
@PpalProveedorFechaID int,
@PpalProveedorID int,
@Fecha date,
@TipoFechaID int,
@Comentarios varchar(100),
@Predeterminado bit

AS

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    IF EXISTS(SELECT PpalProveedorFechaID FROM PpalProveedorFecha WHERE PpalProveedorFechaID = @PpalProveedorFechaID)
    BEGIN
        UPDATE  PpalProveedorFecha
        SET     
               PpalProveedorID = @PpalProveedorID,
			   Fecha = @Fecha,
			   CfgTipoFechaID = @TipoFechaID,
			   Comentarios = @Comentarios,
			   Predeterminado = @Predeterminado
        WHERE  PpalProveedorFechaID = @PpalProveedorFechaID
    END
    ELSE
    BEGIN        
        INSERT  INTO PpalProveedorFecha(
               
                PpalProveedorID,
				Fecha,
				CfgTipoFechaID,
				Comentarios,
				Predeterminado)
        VALUES  (
               @PpalProveedorID,
			   @Fecha,
			   @TipoFechaID,
			   @Comentarios,
			   @Predeterminado)
        
        SET     @PpalProveedorFechaID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @PpalProveedorFechaID as PpalProveedorFechaID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorFecha_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorFecha_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int = null
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS

SELECT  PpalProveedorFechaID,PpalProveedorID,Fecha,CfgTipoFechaID,Comentarios,Predeterminado
FROM    PpalProveedorFecha
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorFecha_ListadoProveedorID]...';


GO

CREATE PROCEDURE [dbo].[PpalProveedorFecha_ListadoProveedorID]
@PpalProveedorID int
AS


SELECT	PF.*,TF.Nombre as TipoFechaNombre
FROM	PpalProveedorFecha PF
inner join CfgTipoFecha TF on PF.CfgTipoFechaID = TF.CfgTipoFechaID
WHERE	PpalProveedorID = @PpalProveedorID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorMail_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorMail_Consultar]
@PpalProveedorMailID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS

SELECT  PpalProveedorMailID,PpalProveedorID,CfgTipoMailID,Mail,Predeterminado,Comentarios
FROM    PpalProveedorMail
WHERE   PpalProveedorMailID = @PpalProveedorMailID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorMail_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorMail_Eliminar]
@ModificacionUsuarioID int = null,
@PpalProveedorMailID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    PpalProveedorMail
    WHERE   PpalProveedorMailID = @PpalProveedorMailID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorMail_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorMail_Guardar]
@ModificacionUsuarioID int = null,
@PpalProveedorMailID int,
@PpalProveedorID int,
@TipoMailID int,
@Mail varchar(90),
@Predeterminado bit,
@Comentarios varchar(30)
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    IF EXISTS(SELECT PpalProveedorMailID FROM PpalProveedorMail WHERE PpalProveedorMailID = @PpalProveedorMailID)
    BEGIN
        UPDATE  PpalProveedorMail
        SET     
               
                PpalProveedorID = @PpalProveedorID,
				CfgTipoMailID = @TipoMailID,
				Mail = @Mail,
				Predeterminado = @Predeterminado,
				Comentarios = @Comentarios
        WHERE   PpalProveedorMailID = @PpalProveedorMailID
    END
    ELSE
    BEGIN        
        INSERT  INTO PpalProveedorMail(
               
                PpalProveedorID,
				CfgTipoMailID,
				Mail,
				Predeterminado,
				Comentarios)
        VALUES  (
               
                @PpalProveedorID,
				@TipoMailID,
				@Mail,
				@Predeterminado,
				@Comentarios)
        
        SET     @PpalProveedorMailID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @PpalProveedorMailID as PpalProveedorMailID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorMail_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorMail_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int = null
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS

SELECT  PpalProveedorMailID,PpalProveedorID,CfgTipoMailID,Mail,Predeterminado,Comentarios
FROM    PpalProveedorMail
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorMail_ListadoProveedorID]...';


GO

CREATE PROCEDURE [dbo].[PpalProveedorMail_ListadoProveedorID]
@PpalProveedorID int
AS


SELECT	pm.*, tm.Nombre as TipoMailNombre
FROM	PpalProveedorMail pm
	inner join CfgTipoMail tm on pm.CfgTipoMailID = tm.CfgTipoMailID
WHERE	PpalProveedorID = @PpalProveedorID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorTelefono_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorTelefono_Consultar]
@PPalProveedorTelefonoID int
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int = null
	,@UsuarioIDBitacora		 int
	,@DescripcionBitacora	 varchar(500)	= null
	,@IpAddress				 varchar(40)		= null
	,@HostName				 varchar(50)		= null
AS

SELECT  PpalProveedorTelefonoID,PpalProveedorID,EspTelefonoID,Predeterminado,Comentarios,CfgUsoTelefonoID
FROM    PpalProveedorTelefono
WHERE   PpalProveedorTelefonoID = @PPalProveedorTelefonoID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorTelefono_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorTelefono_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int = null
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS

SELECT  PpalProveedorTelefonoID,PpalProveedorID,EspTelefonoID,Predeterminado,Comentarios,CfgUsoTelefonoID
FROM    PpalProveedorTelefono
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorTelefono_ListadoProveedorID]...';


GO

CREATE PROCEDURE [dbo].[PpalProveedorTelefono_ListadoProveedorID]
@PpalProveedorID int
AS


SELECT	pt.PpalProveedorTelefonoID,pt.PpalProveedorID,pt.CfgUsoTelefonoID,ut.Nombre as CfgUsoTelefonoNombre,pt.Predeterminado,pt.Comentarios, 
		pt.EspTelefonoID,t.CfgTipoTelefonoID,tt.Nombre as CfgTipoTelefonoNombre,t.SistemaEstatusTelefonoID,t.Comentario,
		t.ClaveTelefonicaPais, t.NumeroTelefonico as NumeroTelefonico,pt.Extension,
		(select concat('(',t.ClaveTelefonicaPais,') ',t.NumeroTelefonico,' / ',pt.Extension)) as TelefonoCompleto,
		p.EspPaisID as PaisID,p.Nombre as PaisNombre
FROM	PpalProveedorTelefono pt
	inner join EspTelefono t on pt.EspTelefonoID = t.EspTelefonoID
	inner join CfgUsoTelefono  ut on pt.CfgUsoTelefonoID = ut.CfgUsoTelefonoID
	inner join CfgTipoTelefono tt on t.CfgTipoTelefonoID = tt.CfgTipoTelefonoID
	inner join EspPais p on p.ClaveTelefonicaPais = t.ClaveTelefonicaPais
WHERE	pt.PpalProveedorID = @PpalProveedorID
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedor_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedor_Consultar]
@PpalRepresentanteProveedorID int
AS

SELECT  PpalRepresentanteProveedorID,PpalProveedorID,EspPersonaID,ProfesionID,CmpTipoRepresentanteProveedorID,Predeterminado,Puesto
FROM    PpalRepresentanteProveedor
WHERE   PpalRepresentanteProveedorID = @PpalRepresentanteProveedorID
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedor_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedor_Listado]
AS

SELECT  
PRP.PpalRepresentanteProveedorID,PRP.PpalProveedorID,PRP.EspPersonaID,PRP.ProfesionID,PRP.CmpTipoRepresentanteProveedorID,PRP.Predeterminado,PRP.Puesto,P.ApellidoPaterno,
		P.ApellidoMaterno,P.NombreCorto,P.*
FROM    PpalRepresentanteProveedor PRP
inner join EspPersona P on PRP.EspPersonaID = p.EspPersonaID
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedor_ListadoProveedorID]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedor_ListadoProveedorID]
@PpalProveedorID INT
AS

SELECT  PpalRepresentanteProveedorID,PpalProveedorID,P.EspPersonaID,ProfesionID,CmpTipoRepresentanteProveedorID,Predeterminado,Puesto,P.*
FROM    PpalRepresentanteProveedor PRP
inner join EspPersona P on PRP.EspPersonaID = p.EspPersonaID
WHERE  PpalProveedorID = @PpalProveedorID
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedorDomicilio_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedorDomicilio_Consultar]
@PpalRepresentanteProveedorDomicilioID int
AS

SELECT  PpalRepresentanteProveedorDomicilioID,PpalRepresentanteProveedorID,EspDomicilioID,Comentario,Predeterminado,CfgTipoDomicilioID
FROM    PpalRepresentanteProveedorDomicilio
WHERE   PpalRepresentanteProveedorDomicilioID = @PpalRepresentanteProveedorDomicilioID
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedorDomicilio_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedorDomicilio_Listado]
AS

SELECT  PpalRepresentanteProveedorDomicilioID,PpalRepresentanteProveedorID,EspDomicilioID,Comentario,Predeterminado,CfgTipoDomicilioID
FROM    PpalRepresentanteProveedorDomicilio
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedorDomicilio_ListadoRepresentanteProveedorID]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedorDomicilio_ListadoRepresentanteProveedorID]
@PpalRepresentanteProveedorID INT
AS

SELECT  PpalRepresentanteProveedorDomicilioID,PpalRepresentanteProveedorID,EspDomicilioID
FROM    PpalRepresentanteProveedorDomicilio
WHERE   PpalRepresentanteProveedorID = @PpalRepresentanteProveedorID
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedorFecha_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedorFecha_Consultar]
@PpalRepresentanteProveedorFechaID int
AS

SELECT  PpalRepresentanteProveedorFechaID,PpalRepresentanteProveedorID,Fecha,CfgTipoFechaID,Comentarios,Predeterminado
FROM    PpalRepresentanteProveedorFecha
WHERE   PpalRepresentanteProveedorFechaID = @PpalRepresentanteProveedorFechaID
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedorFecha_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedorFecha_Eliminar]
@ModificacionUsuarioID int = null,
@PpalRepresentanteProveedorFechaID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    PpalRepresentanteProveedorFecha
    WHERE   PpalRepresentanteProveedorFechaID = @PpalRepresentanteProveedorFechaID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedorFecha_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedorFecha_Guardar]
@ModificacionUsuarioID int = null,
@PpalRepresentanteProveedorFechaID int,
@PpalRepresentanteProveedorID int,
@Fecha date,
@TipoFechaID int,
@Comentarios varchar(100),
@Predeterminado bit

AS

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    IF EXISTS(SELECT PpalRepresentanteProveedorFechaID FROM PpalRepresentanteProveedorFecha WHERE PpalRepresentanteProveedorFechaID = @PpalRepresentanteProveedorFechaID)
    BEGIN
        UPDATE  PpalRepresentanteProveedorFecha
        SET     
               PpalRepresentanteProveedorID = @PpalRepresentanteProveedorID,
			   Fecha = @Fecha,
			   CfgTipoFechaID = @TipoFechaID,
			   Comentarios = @Comentarios,
			   Predeterminado = @Predeterminado
        WHERE  PpalRepresentanteProveedorFechaID = @PpalRepresentanteProveedorFechaID
    END
    ELSE
    BEGIN        
        INSERT  INTO PpalRepresentanteProveedorFecha(
               
                PpalRepresentanteProveedorID,
				Fecha,
				CfgTipoFechaID,
				Comentarios,
				Predeterminado)
        VALUES  (
               @PpalRepresentanteProveedorID,
			   @Fecha,
			   @TipoFechaID,
			   @Comentarios,
			   @Predeterminado)
        
        SET     @PpalRepresentanteProveedorFechaID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @PpalRepresentanteProveedorFechaID as PpalRepresentanteProveedorFechaID
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedorFecha_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedorFecha_Listado]
AS

SELECT  PpalRepresentanteProveedorFechaID,PpalRepresentanteProveedorID,Fecha,CfgTipoFechaID,Comentarios,Predeterminado
FROM    PpalRepresentanteProveedorFecha
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedorFecha_ListadoRepresentanteProveedorID]...';


GO

CREATE PROCEDURE [dbo].[PpalRepresentanteProveedorFecha_ListadoRepresentanteProveedorID]
@PpalRepresentanteProveedorID int
AS


SELECT	*
FROM	PpalRepresentanteProveedorFecha
WHERE	PpalRepresentanteProveedorID = @PpalRepresentanteProveedorID
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedorMail_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedorMail_Consultar]
@PpalRepresentanteProveedorMailID int
AS

SELECT  PpalRepresentanteProveedorMailID,PpalRepresentanteProveedorID,Mail,CfgTipoMailID,Predeterminado,Comentarios
FROM    PpalRepresentanteProveedorMail
WHERE   PpalRepresentanteProveedorMailID = @PpalRepresentanteProveedorMailID
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedorMail_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedorMail_Eliminar]
@ModificacionUsuarioID int = null,
@PpalRepresentanteProveedorMailID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    PpalRepresentanteProveedorMail
    WHERE   PpalRepresentanteProveedorMailID = @PpalRepresentanteProveedorMailID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedorMail_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedorMail_Guardar]
@ModificacionUsuarioID int = null,
@PpalRepresentanteProveedorMailID int,
@PpalRepresentanteProveedorID int,
@Mail nvarchar(90),
@TipoMailID int,
@Predeterminado bit,
@Comentarios varchar(20)
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    IF EXISTS(SELECT PpalRepresentanteProveedorMailID FROM PpalRepresentanteProveedorMail WHERE PpalRepresentanteProveedorMailID = @PpalRepresentanteProveedorMailID)
    BEGIN
        UPDATE  PpalRepresentanteProveedorMail
        SET     
               
                PpalRepresentanteProveedorID = @PpalRepresentanteProveedorID,
				Mail = @Mail,
				CfgTipoMailID = @TipoMailID,
				Predeterminado = @Predeterminado,
				Comentarios = @Comentarios
        WHERE   PpalRepresentanteProveedorMailID = @PpalRepresentanteProveedorMailID
    END
    ELSE
    BEGIN        
        INSERT  INTO PpalRepresentanteProveedorMail(
                
                PpalRepresentanteProveedorID,
				Mail,
				CfgTipoMailID,
				Predeterminado,
				Comentarios)
        VALUES  (
                
                @PpalRepresentanteProveedorID,
				@Mail,
				@TipoMailID,
				@Predeterminado,
				@Comentarios)
        
        SET     @PpalRepresentanteProveedorMailID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @PpalRepresentanteProveedorMailID as PpalRepresentanteProveedorMailID
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedorMail_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedorMail_Listado]
AS

SELECT  PpalRepresentanteProveedorMailID,PpalRepresentanteProveedorID,Mail,CfgTipoMailID,Predeterminado,Comentarios
FROM    PpalRepresentanteProveedorMail
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedorMail_ListadoRepresentanteProveedorID]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedorMail_ListadoRepresentanteProveedorID]
@PpalRepresentanteProveedorID INT
AS

SELECT  PpalRepresentanteProveedorMailID,PpalRepresentanteProveedorID,Mail,CfgTipoMailID,Predeterminado,Comentarios
FROM    PpalRepresentanteProveedorMail
WHERE   PpalRepresentanteProveedorID = @PpalRepresentanteProveedorID
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedorTelefono_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedorTelefono_Consultar]
@PpalRepresentanteProveedorTelefonoID int
AS

SELECT  PpalRepresentanteProveedorTelefonoID,PpalRepresentanteProveedorID,EspTelefonoID,Extension,Predeterminado,Comentarios,CfgUsoTelefonoID
FROM    PpalRepresentanteProveedorTelefono
WHERE   PpalRepresentanteProveedorTelefonoID = @PpalRepresentanteProveedorTelefonoID
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedorTelefono_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedorTelefono_Listado]
AS

SELECT  PpalRepresentanteProveedorTelefonoID,PpalRepresentanteProveedorID,EspTelefonoID,Extension,Predeterminado,Comentarios,CfgUsoTelefonoID
FROM    PpalRepresentanteProveedorTelefono
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedorTelefono_ListadoRepresentanteProveedorID]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedorTelefono_ListadoRepresentanteProveedorID]
@PpalRepresentanteProveedorID INT
AS

SELECT  PpalRepresentanteProveedorTelefonoID,PpalRepresentanteProveedorID,PRPT.EspTelefonoID,Extension,Predeterminado,Comentarios,CfgUsoTelefonoID,
		T.*
FROM    PpalRepresentanteProveedorTelefono PRPT
inner join EspTelefono T on PRPT.EspTelefonoID = T.EspTelefonoID
WHERE   PpalRepresentanteProveedorID = @PpalRepresentanteProveedorID
GO
PRINT N'Creando Procedimiento [dbo].[PpalSerie_ListadoSerieRequisiciones]...';


GO
CREATE PROCEDURE [dbo].[PpalSerie_ListadoSerieRequisiciones]
AS

SELECT	a.*
FROM	PpalSerie a 
			INNER JOIN SistemaTipoDocumento b ON a.TipoDocumentoID = b.TipoDocumentoID AND b.Activo = 1 
WHERE	a.TipoDocumentoID = 1
GO
PRINT N'Creando Procedimiento [dbo].[PpalSerie_ListadoSerieTipoDocumento]...';


GO

CREATE PROCEDURE [dbo].[PpalSerie_ListadoSerieTipoDocumento]
@TipoDocumentoID int, 
@PpalSucursalID int
AS

SELECT	a.*
FROM	PpalSerie a 
			INNER JOIN SistemaTipoDocumento b ON a.TipoDocumentoID = b.TipoDocumentoID AND b.Activo = 1 
WHERE	a.TipoDocumentoID = @TipoDocumentoID
AND		a.PpalSucursalID = @PpalSucursalID
GO
PRINT N'Creando Procedimiento [dbo].[Presupuesto_PptoPer_Guardar_Meta]...';


GO
CREATE PROCEDURE [dbo].[Presupuesto_PptoPer_Guardar_Meta]
	@PptoDetID int,
	@ImporteTotal float,
	@IngresoEgreso varchar(1)
AS
	DECLARE @PeriodosCount float = 0;
	IF @IngresoEgreso = 'E' 
	BEGIN
		SELECT @PeriodosCount = Count(0) FROM PptoPerEgr WHERE PptoDetEgrID = @PptoDetID;
		UPDATE PptoPerEgr
		SET ImporteMeta = @ImporteTotal/@PeriodosCount
		WHERE @PptoDetID = PptoDetEgrID;
	END
	ELSE
	BEGIN
		SELECT @PeriodosCount = Count(0) FROM PptoPerIng WHERE PptoDetIngID = @PptoDetID;
		UPDATE PptoPerIng
		SET ImporteMeta = @ImporteTotal/@PeriodosCount
		WHERE @PptoDetID = PptoDetIngID;
	END
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoAdiDetEgr_Consultar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoAdiDetEgr_Consultar]
	@PptoAdiDetEgrID int = 0
AS
	SELECT 
	PptoAdiDetEgrID,
	PptoAdiEncEgrID,
	PptoPerEgrID,
	Importe
	FROM PptoAdiDetEgr
	WHERE PptoAdiDetEgrID = @PptoAdiDetEgrID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoAdiDetEgr_Guardar]...';


GO


CREATE PROCEDURE Presupuestos_PptoAdiDetEgr_Guardar
@PptoAdiDetEgrID int,
@PptoAdiEncEgrID int,
@PptoPerEgrID int,
@Importe money
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    IF EXISTS(SELECT PptoAdiDetEgrID FROM PptoAdiDetEgr WHERE PptoAdiDetEgrID = @PptoAdiDetEgrID)
    BEGIN
        UPDATE  PptoAdiDetEgr
        SET     
                PptoAdiEncEgrID = @PptoAdiEncEgrID, 
                PptoPerEgrID = @PptoPerEgrID,
                Importe = @Importe
        WHERE   PptoAdiDetEgrID = @PptoAdiDetEgrID
    END
    ELSE
    BEGIN        
        INSERT  INTO PptoAdiDetEgr(
                PptoAdiEncEgrID,
                PptoPerEgrID,
                Importe)
        VALUES  (
                @PptoAdiEncEgrID,
                @PptoPerEgrID,
                @Importe)
        
        SET     @PptoAdiDetEgrID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @PptoAdiDetEgrID as PptoAdiDetEgrID
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoAdiDetEgr_Listado]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoAdiDetEgr_Listado]
@PptoAdiEncEgrID int = null
AS
	SELECT 
	PptoAdiDetEgrID,
	PptoAdiEncEgrID,
	PptoPerEgrID,
	Importe
	FROM PptoAdiDetEgr
	WHERE @PptoAdiEncEgrID is null OR @PptoAdiEncEgrID = PptoAdiEncEgrID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoAdiDetIng_Consultar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoAdiDetIng_Consultar]
	@PptoAdiDetIngID int = 0
AS
	SELECT 
	PptoAdiDetIngID,
	PptoAdiEncIngID,
	PptoPerIngID,
	Importe
	FROM PptoAdiDetIng
	WHERE PptoAdiDetIngID = @PptoAdiDetIngID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoAdiDetIng_Guardar]...';


GO


CREATE PROCEDURE Presupuestos_PptoAdiDetIng_Guardar
@PptoAdiDetIngID int,
@PptoAdiEncIngID int,
@PptoPerIngID int,
@Importe money
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    IF EXISTS(SELECT PptoAdiDetIngID FROM PptoAdiDetIng WHERE PptoAdiDetIngID = @PptoAdiDetIngID)
    BEGIN
        UPDATE  PptoAdiDetIng
        SET     
                PptoAdiEncIngID = @PptoAdiEncIngID, 
                PptoPerIngID = @PptoPerIngID,
                Importe = @Importe
        WHERE   PptoAdiDetIngID = @PptoAdiDetIngID
    END
    ELSE
    BEGIN        
        INSERT  INTO PptoAdiDetIng(
                PptoAdiEncIngID,
                PptoPerIngID,
                Importe)
        VALUES  (
                @PptoAdiEncIngID,
                @PptoPerIngID,
                @Importe)
        
        SET     @PptoAdiDetIngID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @PptoAdiDetIngID as PptoAdiDetIngID
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoAdiDetIng_Listado]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoAdiDetIng_Listado]
@PptoEncIngID int = null
AS
	SELECT 
	PptoAdiDetIngID,
	PptoAdiEncIngID,
	PptoPerIngID,
	Importe
	FROM PptoAdiDetIng
	WHERE @PptoEncIngID IS NULL OR PptoAdiEncIngID = @PptoEncIngID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoAdiEncEgr_Consultar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoAdiEncEgr_Consultar]
	@PptoAdiEncEgrID int
AS
	SELECT 
		PptoAdiEncEgrID,
		PptoEncEgrID,
		FechaHora,
		EstatusDocumentoID,
		Comentarios
	FROM PptoAdiEncEgr
	WHERE PptoAdiEncEgrID = @PptoAdiEncEgrID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoAdiEncEgr_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoAdiEncEgr_Eliminar]
	@PptoAdiEncEgrID int 
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    PptoAdiEncEgr
    WHERE   PptoAdiEncEgrID = @PptoAdiEncEgrID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoAdiEncEgr_GetByFilters]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoAdiEncEgr_GetByFilters]
	@EmpresaID int,
	@PeriodoOperativoID int,
	@PpalCentroCostoID int,
	@IngresoOEgreso varchar(1)
AS
	SELECT AdiEncEgr.PptoAdiEncEgrID,
		   AdiEncEgr.PptoEncEgrID,
		   AdiEncEgr.FechaHora, 
		   AdiEncEgr.Comentarios, 
		   AdiEncEgr.EstatusDocumentoID
	FROM RubroContable as Rubro
	JOIN TituloRubro as Titulo on (Rubro.TituloRubroID = Titulo.TituloRubroID)
	JOIN PptoDetEgr as Detalle on (Rubro.RubroContableID = Detalle.RubroContableID)
	JOIN PptoEncEgr as Encabezado on (Encabezado.PptoEncEgrID = Detalle.PptoEncEgrID)
	JOIN PptoAdiEncEgr as AdiEncEgr on (AdiEncEgr.PptoEncEgrID = Detalle.PptoEncEgrID)
	WHERE Titulo.CfgEjercicioOperativoID = @PeriodoOperativoID 
	AND Encabezado.PpalCentroCostoID = @PpalCentroCostoID 
	AND Titulo.EmpresaID = @EmpresaID
	AND Titulo.Ingreso_o_Egreso = @IngresoOEgreso;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoAdiEncEgr_Guardar]...';


GO


CREATE PROCEDURE Presupuestos_PptoAdiEncEgr_Guardar
@PptoAdiEncEgrID int,
@PptoEncEgrID int,
@FechaHora datetime,
@EstatusDocumentoID varchar(10),
@Comentario varchar(200)
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    IF EXISTS(SELECT PptoAdiEncEgrID FROM PptoAdiEncEgr WHERE PptoAdiEncEgrID = @PptoAdiEncEgrID)
    BEGIN
        UPDATE  PptoAdiEncEgr
        SET   
                PptoEncEgrID = @PptoEncEgrID,
                FechaHora = @FechaHora,
                Comentarios = @Comentario
        WHERE   PptoAdiEncEgrID = @PptoAdiEncEgrID;
    END
    ELSE
    BEGIN        
        INSERT  INTO PptoAdiEncEgr(
                PptoEncEgrID,
                FechaHora,
                EstatusDocumentoID,
                Comentarios)
        VALUES  (
                @PptoEncEgrID,
                @FechaHora,
                @EstatusDocumentoID,
                @Comentario)
        SET     @PptoAdiEncEgrID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @PptoAdiEncEgrID as PptoAdiEncEgrID
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoAdiEncEgr_Listado]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoAdiEncEgr_Listado]
@PptoEncEgrID INT = NULL
AS
	DECLARE @ENCID INT;
	SET @EncID = NULLIF(@PptoEncEgrID, -1)
	SELECT 
	PptoAdiEncEgrID,
	PptoEncEgrID,
	FechaHora,
	EstatusDocumentoID,
	Comentarios
	FROM PptoAdiEncEgr
	WHERE @ENCID IS NULL OR PptoEncEgrID = @PptoEncEgrID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoAdiEncIng_Consultar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoAdiEncIng_Consultar]
	@PptoAdiEncIngID int
AS
	SELECT 
		PptoAdiEncIngID,
		PptoEncIngID,
		FechaHora,
		EstatusDocumentoID,
		Comentarios
	FROM PptoAdiEncIng
	WHERE PptoAdiEncIngID = @PptoAdiEncIngID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoAdiEncIng_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoAdiEncIng_Eliminar]
	@PptoAdiEncIngID int 
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    PptoAdiEncIng
    WHERE   PptoAdiEncIngID = @PptoAdiEncIngID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoAdiEncIng_GetByFilters]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoAdiEncIng_GetByFilters]
	@EmpresaID int,
	@PeriodoOperativoID int,
	@PpalCentroCostoID int,
	@IngresoOEgreso varchar(1)
AS
	SELECT AdiEncIng.PptoAdiEncIngID,
		   AdiEncIng.PptoEncIngID,
		   AdiEncIng.FechaHora, 
		   AdiEncIng.Comentarios, 
		   AdiEncIng.EstatusDocumentoID
	FROM RubroContable as Rubro
	JOIN TituloRubro as Titulo on (Rubro.TituloRubroID = Titulo.TituloRubroID)
	JOIN PptoDetIng as Detalle on (Rubro.RubroContableID = Detalle.RubroContableID)
	JOIN PptoEncIng as Encabezado on (Encabezado.PptoEncIngID = Detalle.PptoEncIngID)
	JOIN PptoAdiEncIng as AdiEncIng on (AdiEncIng.PptoEncIngID = Detalle.PptoEncIngID)
	WHERE Titulo.CfgEjercicioOperativoID = @PeriodoOperativoID 
	AND Encabezado.PpalCentroCostoID = @PpalCentroCostoID 
	AND Titulo.EmpresaID = @EmpresaID
	AND Titulo.Ingreso_o_Egreso = @IngresoOEgreso;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoAdiEncIng_Guardar]...';


GO


CREATE PROCEDURE Presupuestos_PptoAdiEncIng_Guardar
@PptoAdiEncIngID int,
@PptoEncIngID int,
@FechaHora datetime,
@EstatusDocumentoID varchar(10),
@Comentario varchar(200)
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    IF EXISTS(SELECT PptoAdiEncIngID FROM PptoAdiEncIng WHERE PptoAdiEncIngID = @PptoAdiEncIngID)
    BEGIN
        UPDATE  PptoAdiEncIng
        SET     
                PptoEncIngID = @PptoEncIngID,
                FechaHora = @FechaHora,
                Comentarios = @Comentario
        WHERE   PptoAdiEncIngID = @PptoAdiEncIngID;
    END
    ELSE
    BEGIN        
        INSERT  INTO PptoAdiEncIng(
                PptoEncIngID,
                FechaHora,
                EstatusDocumentoID,
                Comentarios)
        VALUES  (
                @PptoEncIngID,
                @FechaHora,
                @EstatusDocumentoID,
                @Comentario)
        
        SET     @PptoAdiEncIngID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @PptoAdiEncIngID as PptoAdiEncIngID
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoAdiEncIng_Listado]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoAdiEncIng_Listado]
@PptoEncIngID INT = NULL
AS
	SET @PptoEncIngID = NULLIF(@PptoEncIngID, -1);
	SELECT 
	PptoAdiEncIngID,
	PptoEncIngID,
	FechaHora,
	EstatusDocumentoID,
	Comentarios
	FROM PptoAdiEncIng
	WHERE @PptoEncIngID IS NULL OR PptoEncIngID = @PptoEncIngID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoConcepto_Consultar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoConcepto_Consultar]
	@PptoConceptoID int
AS
	SELECT PptoConceptoID, Concepto 
	FROM PptoConcepto
	WHERE PptoConceptoID = @PptoConceptoID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoConcepto_Guardar]...';


GO


CREATE PROCEDURE [dbo].[Presupuestos_PptoConcepto_Guardar]
@PptoConceptoID int,
@Concepto varchar(100)
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    IF EXISTS(SELECT PptoConceptoID FROM PptoConcepto WHERE PptoConceptoID = @PptoConceptoID OR Concepto = @Concepto)
    BEGIN
        UPDATE  PptoConcepto
        SET     
                @PptoConceptoID = PptoConceptoID,
                Concepto = @Concepto
        WHERE   PptoConceptoID = @PptoConceptoID 
        OR      Concepto = @Concepto;
    END
    ELSE
    BEGIN        
        INSERT  INTO PptoConcepto(
                Concepto
                )
        VALUES  (
                @Concepto
                )
        
        SET     @PptoConceptoID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @PptoConceptoID as PptoConceptoID
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoDesgEgr_Consultar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoDesgEgr_Consultar]
	@PptoDesEgrID int = null
AS
	SELECT 
		PptoDesgEgrID,
		PptoPerEgrID,
		PptoConceptoID,
		ImporteSolicitado
	FROM PptoDesgEgr
	WHERE PptoDesgEgrID = @PptoDesEgrID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoDesgEgr_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoDesgEgr_Eliminar]
@PptoDesgEgrID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    PptoDesgEgr
    WHERE   @PptoDesgEgrID = PptoDesgEgrID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoDesgEgr_Guardar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoDesgEgr_Guardar]
    @PptoDesgEgrID int,
    @PptoPerEgrID int,
    @PptoConceptoID int,
    @ImporteSolicitado money
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    IF EXISTS(SELECT PptoDesgEgrID FROM PptoDesgEgr WHERE PptoDesgEgrID = @PptoDesgEgrID)
    BEGIN
        UPDATE  PptoDesgEgr
        SET     
                PptoPerEgrID = @PptoPerEgrID, 
                PptoConceptoID = @PptoConceptoID,
                ImporteSolicitado = @ImporteSolicitado
        WHERE   PptoDesgEgrID = @PptoDesgEgrID;
    END
    ELSE IF EXISTS(SELECT PptoDesgEgrID FROM PptoDesgEgr WHERE @PptoConceptoID = PptoConceptoID AND PptoPerEgrID = @PptoPerEgrID)
    BEGIN
        UPDATE  PptoDesgEgr
        SET     
                @PptoDesgEgrID = PptoDesgEgrID,
                ImporteSolicitado = @ImporteSolicitado
        WHERE   @PptoConceptoID = PptoConceptoID AND PptoPerEgrID = @PptoPerEgrID
    END
    ELSE
    BEGIN        
        INSERT  INTO PptoDesgEgr(
                PptoPerEgrID,
                PptoConceptoID,
                ImporteSolicitado)
        VALUES  (
                @PptoPerEgrID,
                @PptoConceptoID,
                @ImporteSolicitado)
        
        SET     @PptoDesgEgrID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @PptoDesgEgrID as PptoDesgEgrID
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoDesgEgr_Listado]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoDesgEgr_Listado]
	@PptoPerEgrID int = null
AS
	SELECT 
		PptoDesgEgrID,
		PptoPerEgrID,
		PptoConceptoID,
		ImporteSolicitado
	FROM PptoDesgEgr
	WHERE @PptoPerEgrID IS NULL OR PptoPerEgrID = @PptoPerEgrID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoDesgIng_Consultar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoDesgIng_Consultar]
	@PptoDesIngID int = null
AS
	SELECT 
		PptoDesgIngID,
		PptoPerIngID,
		PptoConceptoID,
		ImporteSolicitado
	FROM PptoDesgIng
	WHERE PptoDesgIngID = @PptoDesIngID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoDesgIng_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoDesgIng_Eliminar]
@PptoDesgIngID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    PptoDesgIng
    WHERE   @PptoDesgIngID = PptoDesgIngID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoDesgIng_Guardar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoDesgIng_Guardar]
    @PptoDesgIngID int,
    @PptoPerIngID int,
    @PptoConceptoID int,
    @ImporteSolicitado money
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    IF EXISTS(SELECT PptoDesgIngID FROM PptoDesgIng WHERE PptoDesgIngID = @PptoDesgIngID)
    BEGIN
        UPDATE  PptoDesgIng
        SET     
                PptoPerIngID = @PptoPerIngID, 
                PptoConceptoID = @PptoConceptoID,
                ImporteSolicitado = @ImporteSolicitado
        WHERE   PptoDesgIngID = @PptoDesgIngID;
    END
    ELSE IF EXISTS(SELECT PptoDesgIngID FROM PptoDesgIng WHERE @PptoConceptoID = PptoConceptoID AND PptoPerIngID = @PptoPerIngID)
    BEGIN
        UPDATE  PptoDesgIng
        SET     
                @PptoDesgIngID = PptoDesgIngID,
                ImporteSolicitado = @ImporteSolicitado
        WHERE   @PptoConceptoID = PptoConceptoID AND PptoPerIngID = @PptoPerIngID
    END
    ELSE
    BEGIN        
        INSERT  INTO PptoDesgIng(
                PptoPerIngID,
                PptoConceptoID,
                ImporteSolicitado)
        VALUES  (
                @PptoPerIngID,
                @PptoConceptoID,
                @ImporteSolicitado)
        
        SET     @PptoDesgIngID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @PptoDesgIngID as PptoDesgIngID
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoDesgIng_Listado]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoDesgIng_Listado]
	@PptoPerIngID int = null
AS
	SELECT 
		PptoDesgIngID,
		PptoPerIngID,
		PptoConceptoID,
		ImporteSolicitado
	FROM PptoDesgIng
	WHERE @PptoPerIngID IS NULL OR PptoPerIngID = @PptoPerIngID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoDetEgr_Consultar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoDetEgr_Consultar]
	@PptoDetEgrID INT = NULL
AS
	SELECT [PptoDetEgrID]
      ,[PptoEncEgrID]
      ,[ConceptoEgresoID]
      ,[PpalCuentaContableID]
      ,[RubroContableID]
  FROM [dbo].[PptoDetEgr]
  WHERE [PptoDetEgrID] = @PptoDetEgrID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoDetEgr_Eliminar]...';


GO


CREATE PROCEDURE Presupuestos_PptoDetEgr_Eliminar
@PptoDetEgrID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    PptoDetEgr
    WHERE   PptoDetEgrID = @PptoDetEgrID;
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoDetEgr_Guardar]...';


GO


CREATE PROCEDURE [dbo].[Presupuestos_PptoDetEgr_Guardar]
@PptoDetEgrID int,
@PptoEncEgrID int,
@ConceptoEgresoID int,
@PpalCuentaContableID int,
@RubroContableID int
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    IF EXISTS(SELECT PptoDetEgrID FROM PptoDetEgr WHERE PptoDetEgrID = @PptoDetEgrID)
    BEGIN
        UPDATE  PptoDetEgr
        SET     
                PptoEncEgrID = @PptoEncEgrID, 
                ConceptoEgresoID = @ConceptoEgresoID,
                PpalCuentaContableID = @PpalCuentaContableID,
                RubroContableID = @RubroContableID
        WHERE   PptoDetEgrID = @PptoDetEgrID;
    END
    ELSE
    BEGIN        
        INSERT  INTO PptoDetEgr(
                PptoEncEgrID,
                ConceptoEgresoID,
                PpalCuentaContableID,
                RubroContableID)
        VALUES  (
                @PptoEncEgrID,
                @ConceptoEgresoID,
                @PpalCuentaContableID,
                @RubroContableID)
        
        SET     @PptoDetEgrID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @PptoDetEgrID as PptoDetEgrID
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoDetEgr_Listado]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoDetEgr_Listado]
	@RubroContableID INT = NULL
AS
	SELECT [PptoDetEgrID]
      ,[PptoEncEgrID]
      ,[ConceptoEgresoID]
      ,[PpalCuentaContableID]
      ,[RubroContableID]
  FROM [dbo].[PptoDetEgr]
  WHERE @RubroContableID IS NULL OR [RubroContableID] = @RubroContableID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoDetIng_Consultar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoDetIng_Consultar]
	@PptoDetIngID INT
AS
	SELECT [PptoDetIngID]
      ,[PptoEncIngID]
      ,[PpalConceptoIngresoID]
      ,[PpalCuentaContableID]
      ,[RubroContableID]
  FROM [dbo].[PptoDetIng]
  WHERE [PptoDetIngID] = @PptoDetIngID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoDetIng_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[Presupuestos_PptoDetIng_Eliminar]
@PptoDetIngID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    PptoDetIng
    WHERE   PptoDetIngID = @PptoDetIngID;
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoDetIng_Guardar]...';


GO


CREATE PROCEDURE [dbo].[Presupuestos_PptoDetIng_Guardar]
@PptoDetIngID int,
@PptoEncIngID int,
@ConceptoIngresoID int,
@PpalCuentaContableID int,
@RubroContableID int
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    IF EXISTS(SELECT PptoDetIngID FROM PptoDetIng WHERE PptoDetIngID = @PptoDetIngID)
    BEGIN
        UPDATE  PptoDetIng
        SET     
                PptoEncIngID = @PptoEncIngID, 
                PpalConceptoIngresoID = @ConceptoIngresoID,
                PpalCuentaContableID = @PpalCuentaContableID,
                RubroContableID = @RubroContableID
        WHERE   PptoDetIngID = @PptoDetIngID;
    END
    ELSE
    BEGIN        
        INSERT  INTO PptoDetIng(
                PptoEncIngID,
                PpalConceptoIngresoID,
                PpalCuentaContableID,
                RubroContableID)
        VALUES  (
                @PptoEncIngID,
                @ConceptoIngresoID,
                @PpalCuentaContableID,
                @RubroContableID)
        
        SET     @PptoDetIngID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @PptoDetIngID as PptoDetIngID
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoDetIng_Listado]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoDetIng_Listado]
	@RubroContableID INT = NULL
AS
	SELECT 
		PptoDetIngID
      ,PptoEncIngID
      ,PpalConceptoIngresoID
      ,PpalCuentaContableID
      ,RubroContableID
  FROM PptoDetIng
  WHERE @RubroContableID IS NULL OR RubroContableID = @RubroContableID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoEncEgr_Consultar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoEncEgr_Consultar]
	@PptoEncEgrID INT = NULL
AS
	SELECT 
		PptoEncEgrID,
		PpalCentroCostoID,
		EstatusDocumentoID,
		PpalCuentaContableID
	FROM PptoEncEgr
	WHERE @PptoEncEgrID = PptoEncEgrID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoEncEgr_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[Presupuestos_PptoEncEgr_Eliminar]
@PptoEncEgrID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    PptoEncEgr
    WHERE   PptoEncEgrID = @PptoEncEgrID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoEncEgr_Guardar]...';


GO


CREATE PROCEDURE [dbo].[Presupuestos_PptoEncEgr_Guardar]
@PptoEncEgrID INT,
@PpalCentroCostoID INT,
@EstatosDocumentoID INT,
@PpalCuentaContableID INT
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    IF EXISTS(SELECT PptoEncEgrID FROM PptoEncEgr WHERE PptoEncEgrID = @PptoEncEgrID)
    BEGIN
        UPDATE  PptoEncEgr
        SET     
                PpalCentroCostoID = @PpalCentroCostoID, 
                EstatusDocumentoID = @EstatosDocumentoID,
				PpalCuentaContableID = @PpalCuentaContableID
        WHERE   PptoEncEgrID = @PptoEncEgrID
    END
    ELSE
    BEGIN        
        INSERT  INTO PptoEncEgr(
                PpalCentroCostoID,
                EstatusDocumentoID,
				PpalCuentaContableID)
        VALUES  (
                @PpalCentroCostoID,
                @EstatosDocumentoID,
				@PpalCuentaContableID)
        
        SET     @PptoEncEgrID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @PptoEncEgrID as PptoEncEgrID
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoEncEgr_Listado]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoEncEgr_Listado]
AS
	SELECT 
		PptoEncEgrID,
		PpalCentroCostoID,
		EstatusDocumentoID,
		PpalCuentaContableID
	FROM PptoEncEgr
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoEncIng_Consultar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoEncIng_Consultar]
	@PptoEncIngID INT = NULL
AS
	SELECT 
		PptoEncIngID,
		PpalCentroCostoID,
		EstatusDocumentoID,
		PpalCuentaContableID
	FROM PptoEncIng
	WHERE @PptoEncIngID = PptoEncIngID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoEncIng_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[Presupuestos_PptoEncIng_Eliminar]
@PptoEncIngID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    PptoEncIng
    WHERE   PptoEncIngID = @PptoEncIngID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoEncIng_Guardar]...';


GO


CREATE PROCEDURE [dbo].[Presupuestos_PptoEncIng_Guardar]
@PptoEncIngID INT,
@PpalCentroDeCostoID INT,
@EstatosDocumentoID INT,
@PpalCuentaContableID INT
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    IF EXISTS(SELECT PptoEncIngID FROM PptoEncIng WHERE PptoEncIngID = @PptoEncIngID)
    BEGIN
        UPDATE  PptoEncIng
        SET     
                PpalCentroCostoID = @PpalCentroDeCostoID, 
                EstatusDocumentoID = @EstatosDocumentoID,
				PpalCuentaContableID = @PpalCuentaContableID
        WHERE   PptoEncIngID = @PptoEncIngID
    END
    ELSE
    BEGIN        
        INSERT  INTO PptoEncIng(
                PpalCentroCostoID,
                EstatusDocumentoID,
				PpalCuentaContableID)
        VALUES  (
                @PpalCentroDeCostoID,
                @EstatosDocumentoID,
				@PpalCuentaContableID)
        
        SET     @PptoEncIngID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @PptoEncIngID as PptoEncIngID
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoEncIng_Listado]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoEncIng_Listado]
	@PpalCentroCostosID INT = NULL
AS
	SELECT 
		PptoEncIngID,
		PpalCentroCostoID,
		EstatusDocumentoID,
		PpalCuentaContableID
	FROM PptoEncIng
	WHERE @PpalCentroCostosID IS NULL OR @PpalCentroCostosID = PpalCentroCostoID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoPerEgr_Consultar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoPerEgr_Consultar]
	@PptoPerEgrID int = null
AS
	SELECT 
		PptoPerEgrID,
        PptoDetEgrID,
        CfgPeriodoOperativoID,
        ImporteMeta,
        ImporteSolicitado,
        ImporteBase,
        ImporteEjercido
	FROM PptoPerEgr
	WHERE @PptoPerEgrID = PptoPerEgrID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoPerEgr_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoPerEgr_Eliminar]
@PptoPerEgrID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    PptoPerEgr
    WHERE   PptoPerEgrID = @PptoPerEgrID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoPerEgr_Guardar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoPerEgr_Guardar]
		@PptoPerEgrID INT = 0,
        @PptoDetEgrID INT = 0,
        @PeriodoOperativoID INT = 0,
        @ImporteMeta MONEY = 0,
        @ImporteSolicitado MONEY = 0,
        @ImporteBase MONEY = 0,
        @ImporteEjercido MONEY = 0
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    IF EXISTS(SELECT PptoPerEgrID FROM PptoPerEgr WHERE PptoPerEgrID = @PptoPerEgrID)
    BEGIN
        UPDATE  PptoPerEgr
        SET     
        CfgPeriodoOperativoID = @PeriodoOperativoID,
        ImporteMeta = @ImporteMeta,
        ImporteSolicitado = @ImporteSolicitado,
        ImporteBase = @ImporteBase,
        ImporteEjercido = @ImporteEjercido
        WHERE   PptoPerEgrID = @PptoPerEgrID
    END
    ELSE IF EXISTS (SELECT PptoPerEgrID FROM PptoPerEgr WHERE CfgPeriodoOperativoID = @PeriodoOperativoID AND [PptoDetEgrID] = @PptoDetEgrID)
    BEGIN
        UPDATE  PptoPerEgr
        SET
        ImporteMeta = @ImporteMeta,
        ImporteSolicitado = @ImporteSolicitado,
        ImporteBase = @ImporteBase,
        ImporteEjercido = @ImporteEjercido
        WHERE   CfgPeriodoOperativoID = @PeriodoOperativoID
        AND [PptoDetEgrID] = @PptoDetEgrID
    END
    ELSE
    BEGIN        
        INSERT  INTO PptoPerEgr(
            PptoDetEgrID,
            CfgPeriodoOperativoID,
            ImporteMeta,
            ImporteSolicitado,
            ImporteBase,
            ImporteEjercido)
        VALUES  (
            @PptoDetEgrID,
            @PeriodoOperativoID,
            @ImporteMeta,
            @ImporteSolicitado,
            @ImporteBase,
            @ImporteEjercido)
        SET @PptoPerEgrID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @PptoPerEgrID as PptoPerEgrID
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoPerEgr_Listado]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoPerEgr_Listado]
	@PptoDetEgrID int = 0
AS
	SELECT 
		PptoPerEgrID,
        PptoDetEgrID,
        CfgPeriodoOperativoID,
        ImporteMeta,
        ImporteSolicitado,
        ImporteBase,
        ImporteEjercido
	FROM PptoPerEgr
	WHERE @PptoDetEgrID = PptoDetEgrID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoPerIng_Consultar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoPerIng_Consultar]
	@PptoPerIngID int = null
AS
	SELECT 
		[PptoPerIngID],
        [PptoDetIngID],
        [CfgPeriodoOperativoID],
        [ImporteMeta],
        [ImporteSolicitado],
        [ImporteBase],
        [ImporteEjercido]
	FROM [PptoPerIng] 
	WHERE @PptoPerIngID = PptoPerIngID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoPerIng_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoPerIng_Eliminar]
@PptoPerIngID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    PptoPerIng
    WHERE   PptoPerIngID = @PptoPerIngID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoPerIng_Guardar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoPerIng_Guardar]
		@PptoPerIngID INT,
        @PptoDetIngID INT,
        @PeriodoOperativoID INT,
        @ImporteMeta MONEY,
        @ImporteSolicitado MONEY,
        @ImporteBase MONEY,
        @ImporteEjercido MONEY
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    IF EXISTS(SELECT PptoPerIngID FROM PptoPerIng WHERE PptoPerIngID = @PptoPerIngID)
    BEGIN
        UPDATE  PptoPerIng
        SET     
        [PptoDetIngID] = @PptoDetIngID,
        [CfgPeriodoOperativoID] = @PeriodoOperativoID,
        [ImporteMeta] = @ImporteMeta,
        [ImporteSolicitado] = @ImporteSolicitado,
        [ImporteBase] = @ImporteBase,
        [ImporteEjercido] = @ImporteEjercido
        WHERE   PptoPerIngID = @PptoPerIngID
    END
    ELSE
    BEGIN        
        INSERT  INTO PptoPerIng(
            [PptoDetIngID],
            [CfgPeriodoOperativoID],
            [ImporteMeta],
            [ImporteSolicitado],
            [ImporteBase],
            [ImporteEjercido])
        VALUES  (
            @PptoDetIngID,
            @PeriodoOperativoID,
            @ImporteMeta,
            @ImporteSolicitado,
            @ImporteBase,
            @ImporteEjercido)
        SET @PptoPerIngID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @PptoPerIngID as PptoPerIngID
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_PptoPerIng_Listado]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_PptoPerIng_Listado]
	@PptoDetIngID int = null
AS
	SELECT 
		[PptoPerIngID],
        [PptoDetIngID],
        [CfgPeriodoOperativoID],
        [ImporteMeta],
        [ImporteSolicitado],
        [ImporteBase],
        [ImporteEjercido]
	FROM [PptoPerIng] 
	WHERE @PptoDetIngID = PptoDetIngID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_RubroContable_Consultar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_RubroContable_Consultar]
	@RubroContableID int
AS
	SELECT 
		RubroContableID,
		Nombre,
		NombreCorto,
		PpalCuentaContableID,
		TituloRubroID
		
	FROM RubroContable
	WHERE @RubroContableID = RubroContableID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_RubroContable_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[Presupuestos_RubroContable_Eliminar]
@RubroContableID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    RubroContable
    WHERE   RubroContableID = @RubroContableID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_RubroContable_Guardar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_RubroContable_Guardar]
	@RubroContableID int,
	@TituloRubroID int,
	@Nombre varchar(60),
	@NombreCorto varchar(10),
	@PpalCuentaContableID int = null,
    @Usuario int
AS
	DECLARE @Errores bit, @Mensaje nvarchar(300)
	BEGIN TRANSACTION 
    BEGIN TRY
    IF EXISTS(SELECT TituloRubroID FROM RubroContable WHERE RubroContableID = @RubroContableID)
    BEGIN
        UPDATE  RubroContable
        SET     
                TituloRubroID = @TituloRubroID,
                Nombre = @Nombre, 
                NombreCorto = @NombreCorto,
                PpalCuentaContableID = @PpalCuentaContableID
                
        WHERE   RubroContableID = @RubroContableID
    END
    ELSE
    BEGIN        
        INSERT  INTO RubroContable(
                TituloRubroID,
                Nombre,
                NombreCorto,
                PpalCuentaContableID
                )
        VALUES  (
                @TituloRubroID,
                @Nombre, 
                @NombreCorto,
                @PpalCuentaContableID
               )
        
        SET     @RubroContableID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @RubroContableID as RubroContableID
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_RubroContable_Listado]...';


GO



CREATE PROCEDURE [dbo].[Presupuestos_RubroContable_Listado]
	@TituloRubroID int = null
AS
	SELECT 
		RubroContableID,
		Nombre,
		NombreCorto,
		PpalCuentaContableID,
		TituloRubroID
		
	FROM RubroContable
	WHERE @TituloRubroID IS NULL OR @TituloRubroID = TituloRubroID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_TituloRubro_Consultar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_TituloRubro_Consultar]
	@TituloRubroID INT
AS
	SELECT 
        TituloRubroID,
	    TituloRubroClave,
        Nombre,
        NombreCorto,
        CalculoRemanente,
        NaturalezaID,
        EmpresaID,
        CfgEjercicioOperativoID,
        Ingreso_o_Egreso
	FROM TituloRubro
	WHERE TituloRubroID = @TituloRubroID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_TituloRubro_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_TituloRubro_Eliminar]
	@TituloRubroID int
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    TituloRubro
    WHERE   TituloRubroID = @TituloRubroID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_TituloRubro_Guardar]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_TituloRubro_Guardar]
	@TituloRubroID int,
    @TituloRubroClave varchar(6),
	@Nombre varchar(60),
	@NombreCorto varchar(10),
    @CalculoRemanente bit,
    @NaturalezaID int,
    @Usuario int = null,
	@EmpresaID int,
	@EjercicioOperativoID int,
	@Egreso_o_ingreso varchar
AS
	DECLARE @Errores bit, @Mensaje nvarchar(300)
	BEGIN TRANSACTION 
    BEGIN TRY
    IF EXISTS(SELECT TituloRubroID FROM TituloRubro WHERE TituloRubroID = @TituloRubroID)
    BEGIN
        UPDATE  TituloRubro
        SET     
                TituloRubroClave = @TituloRubroClave,
                Nombre = @Nombre, 
                NombreCorto = @NombreCorto,
                CalculoRemanente = @CalculoRemanente,
                NaturalezaID = @NaturalezaID,
                EmpresaID = @EmpresaID,
				CfgEjercicioOperativoID = @EjercicioOperativoID,
                Ingreso_o_Egreso = @Egreso_o_ingreso
        WHERE   TituloRubroID = @TituloRubroID
    END
    ELSE
    BEGIN        
        INSERT  INTO TituloRubro(
                TituloRubroClave,
                Nombre,
                NombreCorto,
                CalculoRemanente,
                NaturalezaID,
                EmpresaID,
				CfgEjercicioOperativoID,
				Ingreso_o_Egreso)
        VALUES  (
                @TituloRubroClave,
                @Nombre, 
                @NombreCorto,
                @CalculoRemanente,
                @NaturalezaID,
                @EmpresaID,
				@EjercicioOperativoID,
                @Egreso_o_ingreso)
        
        SET     @TituloRubroID = SCOPE_IDENTITY()
    END
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @TituloRubroID as TituloRubroID
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_TituloRubro_Listado]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_TituloRubro_Listado]
    @EmpresaID INT,
    @IngOEgr VARCHAR = NULL,
    @EjercicioOperativoID INT = NULL,
    @CentroCostosID INT = NULL
AS
	SELECT 
        TituloRubro.TituloRubroID,
	    TituloRubroClave,
        TituloRubro.Nombre,
        TituloRubro.NombreCorto,
        CalculoRemanente,
        NaturalezaID,
        EmpresaID,
        CfgEjercicioOperativoID,
        Ingreso_o_Egreso
	FROM TituloRubro
    WHERE (@EjercicioOperativoID IS NULL OR @EjercicioOperativoID = CfgEjercicioOperativoID)
    AND Ingreso_o_Egreso = @IngOEgr
    AND EmpresaID = @EmpresaID;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Presupuestos_TituloRubro_Solicitado]...';


GO
CREATE PROCEDURE [dbo].[Presupuestos_TituloRubro_Solicitado]
    @EmpresaID INT,
    @IngOEgr VARCHAR = NULL,
    @EjercicioOperativoID INT = NULL,
    @PpalCentroCostosID INT = NULL
AS
	SELECT 
        TituloRubro.TituloRubroID,
	    TituloRubroClave,
        TituloRubro.Nombre,
        TituloRubro.NombreCorto,
        CalculoRemanente,
        NaturalezaID,
        EmpresaID,
        CfgEjercicioOperativoID,
        Ingreso_o_Egreso
	FROM TituloRubro
	JOIN RubroContable on (RubroContable.TituloRubroID = TituloRubro.TituloRubroID)
    WHERE (@IngOEgr IS NULL OR @IngOEgr = Ingreso_o_Egreso) 
	AND (@PpalCentroCostosID IS NULL OR  (@IngOEgr <> 'E' OR EXISTS(
		SELECT * FROM PptoEncEgr as encE
		JOIN PptoDetEgr as detE on (detE.PptoEncEgrID = encE.PptoEncEgrID)
		WHERE PpalCentroCostoID = @PpalCentroCostosID 
		AND DetE.RubroContableID = RubroContable.RubroContableID)
	))
	AND (@PpalCentroCostosID IS NULL OR (@IngOEgr <> 'I' OR EXISTS(
		SELECT * FROM PptoEncIng as encI
		JOIN PptoDetIng as detI on (detI.PptoEncIngID = encI.PptoEncIngID)
		WHERE PpalCentroCostoID = @PpalCentroCostosID
		AND DetI.RubroContableID = RubroContable.RubroContableID)
	))
    AND (@EjercicioOperativoID IS NULL OR @EjercicioOperativoID = TituloRubro.CfgEjercicioOperativoID)
    AND EmpresaID = @EmpresaID
	GROUP BY TituloRubro.TituloRubroID,
	    TituloRubroClave,
        TituloRubro.Nombre,
        TituloRubro.NombreCorto,
        CalculoRemanente,
        NaturalezaID,
        EmpresaID,
        TituloRubro.CfgEjercicioOperativoID,
        Ingreso_o_Egreso;
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[Seguridad_UsuarioIntentos_Listado]...';


GO


CREATE PROCEDURE Seguridad_UsuarioIntentos_Listado
AS

SELECT  UsuarioID,Fecha,IP,Contrasena
FROM    SistemaUsuarioIntentos
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuario_ActualizarContrasena]...';


GO




CREATE PROCEDURE [dbo].[SegUsuario_ActualizarContrasena]
@SegUsuarioID int, 
@Contrasena nvarchar(50),
@IP nvarchar(50) = '?'
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)
SELECT @Errores = 0, @Mensaje = ''

--BEGIN TRANSACTION 
BEGIN TRY
	
	SELECT	@SegUsuarioID = SegUsuarioID FROM SegUsuario WHERE SegUsuarioID = @SegUsuarioID
	SET @SegUsuarioID = COALESCE(@SegUsuarioID, 0)
    IF @SegUsuarioID > 0 
    BEGIN
		DECLARE @Activo bit, @Intentos tinyint, @Bloqueado bit, @MaximoIntentosLogin tinyint
		SELECT	@Activo = Activo, @Intentos = Intentos, @Bloqueado = Bloqueado FROM SegUsuario WHERE SegUsuarioID = @SegUsuarioID
		SELECT	TOP 1 @MaximoIntentosLogin = MaximoIntentosLogin FROM SistemaConfiguracion WHERE COALESCE(Activa,0) = 1
		SET @MaximoIntentosLogin = COALESCE(@MaximoIntentosLogin, 0)

		-- revisa si el usuario esta bloqueado
		IF @Errores = 0 
		BEGIN			
			IF @Bloqueado = 1 
			BEGIN
				SELECT @Errores = 1, @Mensaje = 'La cuenta del usuario se encuentra bloqueada por seguridad, contacte al administrador.'
			END
		END
		-- revisa si el usuario esta inactivo
		IF @Errores = 0 
		BEGIN			
			IF @Activo = 0 
			BEGIN
				SELECT @Errores = 1, @Mensaje = 'La cuenta del usuario se encuentra desactivada, contacte al administrador.'
			END
		END

		IF @Errores = 0
		BEGIN			
			UPDATE	SegUsuario
			SET		Contrasena = PWDENCRYPT(@Contrasena)
			WHERE	SegUsuarioID = @SegUsuarioID
		END

    END
    ELSE
    BEGIN        
        SELECT @Errores = 1, @Mensaje = 'El usuario no existe.'       
    END
    --COMMIT TRANSACTION
END TRY
BEGIN CATCH
    --ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

IF @Errores = 1 
BEGIN
	SET @SegUsuarioID = 0
END

IF @SegUsuarioID = 0 
BEGIN
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			@SegUsuarioID as SegUsuarioID
END
ELSE
BEGIN
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			SegUsuarioID, CorreoElectronico, 
			Nombre, Alias, UsuarioAD, UltimoAcceso, 
			Administrador, UltimaEmpresaID, UltimoModuloID, UltimaOpcionID
	FROM	SegUsuario
	WHERE	SegUsuarioID = @SegUsuarioID			
END
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuario_EliminarPerfil]...';


GO

CREATE PROCEDURE [dbo].[SegUsuario_EliminarPerfil]
@SegUsuarioID int,
@EmpresaID int,
@SegPerfilID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY

	DELETE 
	FROM	SegUsuarioPerfil
	WHERE	SegUsuarioID = @SegUsuarioID
	AND		SegPerfilID = @SegPerfilID
	AND		EmpresaID = @EmpresaID
    
	    
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @SegUsuarioID as SegUsuarioID
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuario_GuardarPerfil]...';


GO

CREATE PROCEDURE [dbo].[SegUsuario_GuardarPerfil]
@SegUsuarioID int,
@EmpresaID int,
@SegPerfilID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY

	DELETE 
	FROM	SegUsuarioPerfil
	WHERE	SegUsuarioID = @SegUsuarioID
	AND		SegPerfilID = @SegPerfilID
	AND		EmpresaID = @EmpresaID
    
	INSERT	INTO SegUsuarioPerfil(SegUsuarioID, EmpresaID, SegPerfilID)
	VALUES	(@SegUsuarioID, @EmpresaID, @SegPerfilID)

	    
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @SegUsuarioID as SegUsuarioID
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuario_IniciarSesion]...';


GO




CREATE PROCEDURE [dbo].[SegUsuario_IniciarSesion]
@CorreoElectronico nvarchar(150), 
@Contrasena nvarchar(50),
@IP nvarchar(50) = '?'
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)
SELECT @Errores = 0, @Mensaje = ''

--BEGIN TRANSACTION 
BEGIN TRY
	DECLARE @SegUsuarioID int
	SELECT	@SegUsuarioID = SegUsuarioID FROM SegUsuario WHERE CorreoElectronico = @CorreoElectronico
	SET @SegUsuarioID = COALESCE(@SegUsuarioID, 0)
    IF @SegUsuarioID > 0 
    BEGIN
		DECLARE @Activo bit, @Intentos tinyint, @Bloqueado bit, @MaximoIntentosLogin tinyint
		SELECT	@Activo = Activo, @Intentos = Intentos, @Bloqueado = Bloqueado FROM SegUsuario WHERE SegUsuarioID = @SegUsuarioID
		SELECT	TOP 1 @MaximoIntentosLogin = MaximoIntentosLogin FROM SistemaConfiguracion WHERE COALESCE(Activa,0) = 1
		SET @MaximoIntentosLogin = COALESCE(@MaximoIntentosLogin, 0)

		-- revisa si el usuario esta bloqueado
		IF @Errores = 0 
		BEGIN			
			IF @Bloqueado = 1 
			BEGIN
				SELECT @Errores = 1, @Mensaje = 'La cuenta del usuario se encuentra bloqueada por seguridad, contacte al administrador.'
			END
		END
		-- revisa si el usuario esta inactivo
		IF @Errores = 0 
		BEGIN			
			IF @Activo = 0 
			BEGIN
				SELECT @Errores = 1, @Mensaje = 'La cuenta del usuario se encuentra desactivada, contacte al administrador.'
			END
		END

		IF @Errores = 0
		BEGIN
			--revisa la contraseña primero
			IF NOT EXISTS(SELECT SegUsuarioID FROM SegUsuario WHERE SegUsuarioID = @SegUsuarioID AND PWDCOMPARE(@Contrasena, Contrasena) = 1)
			BEGIN
				-- la contraseña no coincide, pero el usuario SI existe			
				IF @MaximoIntentosLogin > 0 AND @Intentos >= @MaximoIntentosLogin 
				BEGIN
					--en la configuracion se definio un maximo de intentos y ya se llego a ese numero, bloquea al usuario
					UPDATE	SegUsuario SET Bloqueado = 1, Intentos = 0 WHERE SegUsuarioID = @SegUsuarioID
					SELECT @Errores = 1, @Mensaje = 'La cuenta del usuario se encuentra bloqueada por seguridad, contacte al administrador.'
				END
				ELSE
				BEGIN				
					UPDATE	SegUsuario SET Intentos = COALESCE(Intentos, 0) + 1 WHERE SegUsuarioID = @SegUsuarioID
					INSERT	INTO SistemaUsuarioIntentos(UsuarioID, Fecha, IP, Contrasena) VALUES(@SegUsuarioID, GETDATE(), @IP, @Contrasena)
					SELECT @Errores = 1, @Mensaje = 'El usuario no existe o la contraseña es incorrecta.'
				END			
			END
		END

		-- si no hubo errores...
		IF @Errores = 0 
		BEGIN
			UPDATE	SegUsuario
			SET		UltimoAcceso = GETDATE(), 
					Intentos = 0, 
					Bloqueado = 0, 
					UltimaIP = @IP
			WHERE	SegUsuarioID = @SegUsuarioID
		END

    END
    ELSE
    BEGIN        
        SELECT @Errores = 1, @Mensaje = 'El usuario no existe.'       
    END
    --COMMIT TRANSACTION
END TRY
BEGIN CATCH
    --ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

IF @Errores = 1 
BEGIN
	SET @SegUsuarioID = 0
END

IF @SegUsuarioID = 0 
BEGIN
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			@SegUsuarioID as SegUsuarioID
END
ELSE
BEGIN
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			SegUsuarioID, CorreoElectronico, 
			Nombre, Alias, UsuarioAD, UltimoAcceso, 
			Administrador, UltimaEmpresaID, UltimoModuloID, UltimaOpcionID
	FROM	SegUsuario
	WHERE	SegUsuarioID = @SegUsuarioID			
END
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuario_ListadoAcciones]...';


GO

CREATE PROCEDURE [dbo].[SegUsuario_ListadoAcciones]
    @SegUsuarioID int, @EmpresaID int, @ModuloID int, @OpcionID int
/* -- Parámetros para Bitácora
	,@UserIDBitacora			int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null */

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
/* -- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuario',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit */

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT	OpcionID, AccionID, AccionClave, AccionNombre, AccionNombreCorto
	FROM	vSeguridad
	WHERE	ModuloID = @ModuloID AND (@OpcionID IS NULL OR OpcionID = @OpcionID) AND 
		(EmpresaID = @EmpresaID	AND SegUsuarioID = @SegUsuarioID or SegUsuarioID IS NULL AND (SELECT Administrador
																	 FROM SegUsuario
																	WHERE SegUsuarioID = @SegUsuarioID) = 1)

/*	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UserIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UserIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT */
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuario_ListadoEmpresas]...';


GO

CREATE PROCEDURE [dbo].[SegUsuario_ListadoEmpresas]
@SegUsuarioID int
/* -- Parámetros para Bitácora
	,@UserIDBitacora			int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null */

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
/*-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuario',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit */

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT	DISTINCT EmpresaID, EmpresaNombre as Nombre, EmpresaNombreCorto as NombreCorto
	FROM	vSeguridadUsuarioOpcion 
	WHERE	SegUsuarioID = @SegUsuarioID
	AND		Activo = 1
	AND		EmpresaID IS NOT NULL
	ORDER	BY EmpresaID


/*	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UserIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UserIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION */
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuario_ListadoModulos]...';


GO

CREATE PROCEDURE [dbo].[SegUsuario_ListadoModulos]
@SegUsuarioID int, @EmpresaID int 
/* -- Parámetros para Bitácora
	,@UserIDBitacora			int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null */

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
/* -- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuario',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit */

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT	DISTINCT ModuloID, ModuloClave, ModuloNombre as Nombre, ModuloNombreCorto as NombreCorto, 
					ModuloRecursoWebSite, ModuloIcono, SegUsuarioID
	FROM	vSeguridadUsuarioOpcion 
	WHERE	SegUsuarioID = @SegUsuarioID 
	AND		Activo = 1
	AND		EmpresaID = @EmpresaID
	ORDER	BY ModuloID

/*	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UserIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UserIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT */
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea



SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuario_ListadoOpciones]...';


GO

CREATE PROCEDURE [dbo].[SegUsuario_ListadoOpciones]
@SegUsuarioID int, @EmpresaID int, @ModuloID int
/* -- Parámetros para Bitácora
	,@UserIDBitacora			int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null */

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
/* -- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuario',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit */

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT	DISTINCT ModuloID, ModuloNombre, ModuloNombreCorto, 
			OpcionID, OpcionNombre, OpcionNombreCorto, COALESCE(PadreID,0) as PadreID, COALESCE(Orden,999) as Orden, 
			RecursoWebsite, Activo, Protegido, Popup, VisibleMenu, Icono
	FROM	vSeguridad
	WHERE	ModuloID = @ModuloID
	AND		(SegUsuarioID = @SegUsuarioID
	AND		EmpresaID = @EmpresaID
	AND		(SELECT Administrador FROM SegUsuario WHERE SegUsuarioID = @SegUsuarioID) = 0
	OR		SegPerfilID IS NULL AND (SELECT Administrador FROM SegUsuario WHERE SegUsuarioID = @SegUsuarioID) = 1)
	ORDER	BY COALESCE(PadreID, 0), COALESCE(Orden, 999), ModuloID, ModuloNombre, ModuloNombreCorto, OpcionID, 
			OpcionNombre, OpcionNombreCorto, RecursoWebsite

/*	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UserIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UserIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION */
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
	
		

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuario_Perfil_Listado]...';


GO

CREATE PROCEDURE [dbo].[SegUsuario_Perfil_Listado]
@SegUsuarioID int
/*-- Parámetros para Bitácora
	,@UserIDBitacora			int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null*/

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuario',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  a.*
	FROM    dbo.SegUsuarioPerfil a        
	WHERE   a.SegUsuarioID = @SegUsuarioID

	/*/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UserIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UserIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION*/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioPerfil_Listado]...';


GO


CREATE PROCEDURE [dbo].[SegUsuarioPerfil_Listado]
@EmpresaID int
/*-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/ */
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioPerfil',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  SegUsuarioPerfilID,SegUsuarioID,SegPerfilID,EmpresaID
	FROM    SegUsuarioPerfil
	WHERE	EmpresaID = @EmpresaID
	ORDER BY SegPerfilID

	/*/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaID::', @EmpresaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION*/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaAccion_TipoOpcion_Eliminar]...';


GO


CREATE PROCEDURE [SistemaAccion_TipoOpcion_Eliminar]
@ModificacionUsuarioID int = null,
@AccionID int
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    DELETE  
    FROM    SistemaTipoOpcionAccion
    WHERE   AccionID = @AccionID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
    
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaAccion_TipoOpcion_Guardar]...';


GO


CREATE PROCEDURE [SistemaAccion_TipoOpcion_Guardar]
@ModificacionUsuarioID int = null,
@AccionID int, 
@TipoOpcionID int
AS
SET NOCOUNT ON 
DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    INSERT  INTO SistemaTipoOpcionAccion (AccionID, TipoOpcionID)
    VALUES  (@AccionID, @TipoOpcionID)
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaAccion_TipoOpcion_Listado]...';


GO


CREATE PROCEDURE [SistemaAccion_TipoOpcion_Listado]
@AccionID int
AS

SELECT  a.*
FROM    dbo.SistemaTipoOpcion a
        INNER JOIN SistemaTipoOpcionAccion b 
            ON  b.TipoOpcionID = a.TipoOpcionID
WHERE   b.AccionID = @AccionID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaCS_Generar]...';


GO
CREATE PROCEDURE [dbo].[SistemaCS_Generar]
AS

SELECT	a.Tabla, a.NS, 
		coalesce(b.Nombre, '') as Modulo, 
		coalesce(a.gEntidad,0) as gEntidad, 
		coalesce(a.gAPI,0) as gAPI, 
		coalesce(a.gAPIClient,0) as gAPIClient, 
		coalesce(a.gASPX,0) as gASPX, 
		coalesce(a.gSQL,0) as gSQL, 
		coalesce(dSQL, 0) as dSQL, 
		coalesce(gNegocio,0) as gNegocio 
FROM	SistemaCS a 
		left outer join SistemaModulo b on a.moduloid = b.ModuloID 
WHERE	a.ModuloID = 5 -- a.Tabla = 'TipoFecha'

ORDER BY a.Tabla
GO
PRINT N'Creando Procedimiento [dbo].[SistemaLog_Consultar]...';


GO

CREATE Procedure [dbo].[SistemaLog_Consultar]

	@SistemaLogID Int

As

Begin

		Select 	
				[SistemaLogID]
			,[TablaNombre]
			,[TablaID]
			,[TablaColumna1]
			,[TablaColumna2]
			,[Operacion]
			,[UsuarioID]
			,[Descripcion]
			,[Cambios]
			,[IpAddress]
			,[HostName]
			,[FechaHoraCambioUTC] 
		From [SistemaLog]
		Where [SistemaLogID] = @SistemaLogID

	End



Return 0
GO
PRINT N'Creando Procedimiento [dbo].[SistemaLog_Eliminar]...';


GO

CREATE Procedure [dbo].[SistemaLog_Eliminar]

	@TablaNombre varchar(100) = null,
	@FechaInicial Datetime2   = null,
	@FechaFinal Datetime2     = GetUTCDate	
	
As

	If @TablaNombre is not null
		Begin
			If @FechaInicial is not null
				Begin
					Delete From [SistemaLog]
					Where [TablaNombre] = @TablaNombre And 
						  [FechaHoraCambioUTC] Between @FechaInicial And @FechaFinal
				End
			Else
				Begin
					Delete From [SistemaLog]
					Where [TablaNombre] = @TablaNombre
				End
		End
	Else
		Begin
			If @FechaInicial is not null
				Begin
					Delete From [SistemaLog]
					Where [FechaHoraCambioUTC] Between @FechaInicial And @FechaFinal
				End
			Else
				Begin
					Delete From [SistemaLog]
				End
		End

Return 0
GO
PRINT N'Creando Procedimiento [dbo].[SistemaLog_Guardar]...';


GO


CREATE Procedure [dbo].[SistemaLog_Guardar]

	 @TablaNombre		 VARCHAR(100)
    ,@TablaID			 INT			= Null
    ,@TablaColumna1		 VARCHAR(100)	= Null
    ,@TablaColumna2		 VARCHAR(100)	= Null
    ,@Operacion			 VARCHAR(10)
    ,@UsuarioID			 INT
    ,@Descripcion		 VARCHAR(500)	= Null
    ,@Cambios			 VARCHAR(Max)
    ,@IpAddress			 VARCHAR(40)	= Null
    ,@HostName			 VARCHAR(50)	= Null

As
    Begin        
		
		Declare @SistemaLogID int = -1

        Insert Into [SistemaLog](
				 TablaNombre
				,TablaID
				,TablaColumna1
				,TablaColumna2
				,Operacion
				,UsuarioID
				,Descripcion
				,Cambios
				,IpAddress
				,HostName
				,FechaHoraCambioUTC
				)
        Values  (
				 @TablaNombre
				,@TablaID
				,@TablaColumna1
				,@TablaColumna2
				,@Operacion
				,@UsuarioID
				,@Descripcion
				,@Cambios
				,@IpAddress
				,@HostName
				,GetUTCDate()
				)
        
        Set @SistemaLogID = SCOPE_IDENTITY()

    End

RETURN @SistemaLogID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaLog_Listado_TablaNombre]...';


GO

CREATE PROCEDURE [dbo].[SistemaLog_Listado_TablaNombre]

	@TablaNombre varchar(100),
	@FechaInicial Datetime2 = null,
	@FechaFinal Datetime2 = GetUTCDate

As

	If @FechaInicial is not null

		Begin

			Select 	
				 [SistemaLogID]
				,[TablaNombre]
				,[TablaID]
				,[TablaColumna1]
				,[TablaColumna2]
				,[Operacion]
				,[UsuarioID]
				,[Descripcion]
				,[Cambios]
				,[IpAddress]
				,[HostName]
				,[FechaHoraCambioUTC] 
			From [SistemaLog]
			Where [TablaNombre] = @TablaNombre And 
			      [FechaHoraCambioUTC] Between @FechaInicial And @FechaFinal

		End

	Else

		Begin

			Select 	
				 [SistemaLogID]
				,[TablaNombre]
				,[TablaID]
				,[TablaColumna1]
				,[TablaColumna2]
				,[Operacion]
				,[UsuarioID]
				,[Descripcion]
				,[Cambios]
				,[IpAddress]
				,[HostName]
				,[FechaHoraCambioUTC] 
			From [SistemaLog]
			Where [TablaNombre] = @TablaNombre

		End



Return 0
GO
PRINT N'Creando Procedimiento [dbo].[SistemaLogRegla_Consultar_LogBit]...';


GO
CREATE Procedure [dbo].[SistemaLogRegla_Consultar_LogBit]

	@UsuarioID		int,
	@TablaNombre	nvarchar(50),
	@Operacion		nvarchar(20) = 'prueba'

As

DECLARE	@C tinyInt,		@R tinyInt,		@U tinyInt,		@D tinyInt
BEGIN
	SET NOCOUNT ON;

	-- Lee el máximo de C, R, U y D para el (usuario indicado o todos los usuarios) y la (tabla indicada o todas las tablas)

	SELECT	@C = MAX(C), @R = MAX(R), @U = MAX(U), @D = MAX(D) FROM SegLogRegla
	 WHERE	(SegUsuarioID = @UsuarioID or SegUsuarioID is null) And 
			(TablaNombre = @TablaNombre or TablaNombre = '*')

	-- Si se encontró un permiso en la operación deseada, se regresa 1 y si no, se regresa 0
	IF	@C = 1 and @Operacion = 'Create' or
		@R = 1 and (@Operacion = 'Read' or @Operacion = 'List') or
		@U = 1 and @Operacion = 'Update' or
		@D = 1 and @Operacion = 'Delete'
		Return 1
	ELSE
		Return 0

END
GO
PRINT N'Creando Procedimiento [dbo].[SistemaMetodoCosteo_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaMetodoCosteo_Consultar]
@MetodoCosteoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaMetodoCosteo',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @MetodoCosteoID
	SELECT  MetodoCosteoID,MetodoCosteoClave,Nombre,NombreCorto
	FROM    SistemaMetodoCosteo
	WHERE   MetodoCosteoID = @MetodoCosteoID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('MetodoCosteoID::', @MetodoCosteoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @MetodoCosteoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaMetodoCosteo_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaMetodoCosteo_Eliminar]
@MetodoCosteoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaMetodoCosteo',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @MetodoCosteoID
    DELETE
    FROM    SistemaMetodoCosteo
    WHERE   MetodoCosteoID = @MetodoCosteoID
    
    -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @MetodoCosteoID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('MetodoCosteoID::', @MetodoCosteoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @MetodoCosteoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaMetodoCosteo_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SistemaMetodoCosteo_Guardar]
@MetodoCosteoID int,
@MetodoCosteoClave varchar(4),
@Nombre varchar(25),
@NombreCorto varchar(8)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaMetodoCosteo',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@MetodoCosteoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@MetodoCosteoID_ int = @MetodoCosteoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @MetodoCosteoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@MetodoCosteoClave_ = IsNull(MetodoCosteoClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@MetodoCosteoID_ = IsNull(MetodoCosteoID,0)
		   FROM	SistemaMetodoCosteo WHERE MetodoCosteoID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SistemaMetodoCosteo
			SET                     MetodoCosteoClave = @MetodoCosteoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   MetodoCosteoID = @MetodoCosteoID
		END
		ELSE
		BEGIN        
			INSERT  INTO SistemaMetodoCosteo(
					MetodoCosteoClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@MetodoCosteoClave,
					@Nombre,
					@NombreCorto)
        
        SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @MetodoCosteoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('MetodoCosteoClave::', @MetodoCosteoClave_, ':', @MetodoCosteoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaMetodoCosteo_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaMetodoCosteo_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora nvarchar(100) = 'SistemaMetodoCosteo',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  MetodoCosteoID AS ID,					MetodoCosteoClave AS Clave,
				Nombre,									NombreCorto,
				0 AS PadreID
		FROM    SistemaMetodoCosteo
		ORDER BY MetodoCosteoClave
	ELSE
		SELECT  MetodoCosteoID,MetodoCosteoClave,Nombre,NombreCorto
		FROM    SistemaMetodoCosteo
		ORDER BY MetodoCosteoClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaModulo_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaModulo_Consultar]
@ModuloID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaModulo',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @ModuloID

	SELECT  ModuloID,ModuloClave,Nombre,NombreCorto,RecursoWebSite,Icono
	FROM    SistemaModulo
	WHERE   ModuloID = @ModuloID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('ModuloID::', @ModuloID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @ModuloID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaModulo_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaModulo_Eliminar]
@ModuloID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaModulo',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @ModuloID
    DELETE
    FROM    SistemaModulo
    WHERE   ModuloID = @ModuloID
    
    -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @ModuloID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('ModuloID::', @ModuloID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @ModuloID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
	/********************* FIN COPY 2  *********************************/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaModulo_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SistemaModulo_Guardar]
@ModuloID int,
@ModuloClave varchar(4),
@Nombre nvarchar(50),
@NombreCorto nvarchar(20),
@RecursoWebSite nvarchar(150),
@Icono nvarchar(50)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaModulo',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@ModuloClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@RecursoWebSite_ nvarchar(150) = '',			
		@Icono_ varchar(50) = '',
		@ModuloID_ int = @ModuloID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @ModuloID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@ModuloClave_ = IsNull(ModuloClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
	 			@RecursoWebSite_ = IsNull(RecursoWebSite,''),
				@Icono_ = IsNull(Icono,''),
				@ModuloID_ = IsNull(ModuloID,0)
		   FROM	SistemaModulo WHERE ModuloID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SistemaModulo
			SET     ModuloClave = @ModuloClave,               
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					RecursoWebSite = @RecursoWebSite,
					Icono = @Icono
			WHERE   ModuloID = @ModuloID
		END
		ELSE
		BEGIN        
			INSERT  INTO SistemaModulo(
					ModuloClave,
					Nombre,
					NombreCorto,
					RecursoWebSite,
					Icono)
			VALUES  (
					@ModuloClave,
					@Nombre,
					@NombreCorto,
					@RecursoWebSite,
					@Icono)
        
        SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @ModuloID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('ModuloClave::', @ModuloClave_, ':', @ModuloClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'RecursoWebSite::', @RecursoWebSite_, ':', @RecursoWebSite, ';')
				SET @logMessage = Concat(@logMessage, 'Icono::', @Icono_, ':', @Icono, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaModulo_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaModulo_Listado]
-- Parámetros para Bitácora
	 @UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora  nvarchar(100) = 'SistemaModulo',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	
	SELECT  ModuloID,ModuloClave,Nombre,NombreCorto,RecursoWebSite,Icono
	FROM    SistemaModulo

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaNaturaleza_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaNaturaleza_Consultar]
@NaturalezaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaNaturaleza',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @NaturalezaID
	SELECT  NaturalezaID,NaturalezaClave,Nombre,NombreCorto
	FROM    SistemaNaturaleza
	WHERE   NaturalezaID = @NaturalezaID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('NaturalezaID::', @NaturalezaID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @NaturalezaID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaNaturaleza_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaNaturaleza_Eliminar]
@NaturalezaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaNaturaleza',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @NaturalezaID
    DELETE
    FROM    SistemaNaturaleza
    WHERE   NaturalezaID = @NaturalezaID
    
    -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @NaturalezaID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('NaturalezaID::', @NaturalezaID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @NaturalezaID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaNaturaleza_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SistemaNaturaleza_Guardar]
@ModificacionUsuarioID int = null,
@NaturalezaID int,
@NaturalezaClave varchar(6),
@Nombre varchar(30),
@NombreCorto varchar(10)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaNaturaleza',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@NaturalezaClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@NaturalezaID_ int = @NaturalezaID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @NaturalezaID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@NaturalezaClave_ = IsNull(NaturalezaClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@NaturalezaID_ = IsNull(NaturalezaID,0)
		   FROM	SistemaNaturaleza WHERE NaturalezaID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SistemaNaturaleza
			SET                     NaturalezaClave = @NaturalezaClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   NaturalezaID = @NaturalezaID
		END
		ELSE
		BEGIN        
			INSERT  INTO SistemaNaturaleza(
					NaturalezaClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@NaturalezaClave,
					@Nombre,
					@NombreCorto)
        
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @NaturalezaID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('NaturalezaClave::', @NaturalezaClave_, ':', @NaturalezaClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaNaturaleza_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaNaturaleza_Listado]
-- Parámetros para Bitácora
	 @UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora nvarchar(100) = 'SistemaNaturaleza',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  NaturalezaID,NaturalezaClave,Nombre,NombreCorto
	FROM    SistemaNaturaleza

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaNivelProducto_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaNivelProducto_Consultar]
@NivelProductoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaNivelProducto',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @NivelProductoID
	SELECT  NivelProductoID,NivelProductoClave,Nombre,NombreCorto
	FROM    SistemaNivelProducto
	WHERE   NivelProductoID = @NivelProductoID
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('NivelProductoID::', @NivelProductoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @NivelProductoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaNivelProducto_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaNivelProducto_Eliminar]
@NivelProductoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS

-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaNivelProducto',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @NivelProductoID
    DELETE
    FROM    SistemaNivelProducto
    WHERE   NivelProductoID = @NivelProductoID
    
    -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @NivelProductoID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('NivelProductoID::', @NivelProductoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @NivelProductoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaNivelProducto_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SistemaNivelProducto_Guardar]
@NivelProductoID int,
@NivelProductoClave varchar(4),
@Nombre varchar(25),
@NombreCorto varchar(8)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaNivelProducto',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@NivelProductoClave_ nvarchar(4) = '',
		@Nombre_ nvarchar(25) = '',			
		@NombreCorto_ varchar(8) = '',
		@NivelProductoID_ int = @NivelProductoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @NivelProductoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@NivelProductoClave_ = IsNull(NivelProductoClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@NivelProductoID_ = IsNull(NivelProductoID,0)
		   FROM	SistemaNivelProducto WHERE NivelProductoID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SistemaNivelProducto
			SET                     NivelProductoClave = @NivelProductoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   NivelProductoID = @NivelProductoID
		END
		ELSE
		BEGIN        
			INSERT  INTO SistemaNivelProducto(
					NivelProductoClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@NivelProductoClave,
					@Nombre,
					@NombreCorto)
        
        SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @NivelProductoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('NivelProductoClave::', @NivelProductoClave_, ':', @NivelProductoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaNivelProducto_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaNivelProducto_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaNivelProducto',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  NivelProductoID AS ID,				NivelProductoClave AS Clave,
				Nombre,								NombreCorto,
				0 AS PadreID
		  FROM	SistemaNivelProducto
		ORDER BY NivelProductoClave
	ELSE
		SELECT  NivelProductoID,NivelProductoClave,Nombre,NombreCorto
		FROM    SistemaNivelProducto
		ORDER BY NivelProductoClave


	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaOpcion_AgregaCatalogo]...';


GO


CREATE PROCEDURE [dbo].[SistemaOpcion_AgregaCatalogo]
@ModuloNombre nvarchar(50),
@OpcionNombre nvarchar(50), 
@OpcionURL nvarchar(150)
AS
SET NOCOUNT ON 

DECLARE @ModuloID int, @OpcionCatalogosID int, @OpcionID int
--DECLARE @ModuloNombre nvarchar(50), @OpcionNombre nvarchar(50), @OpcionURL nvarchar(150)
--SET @ModuloNombre = 'Compras'

SELECT @ModuloID = ModuloID FROM SistemaModulo WHERE Nombre = @ModuloNombre
SET @ModuloID = COALESCE(@ModuloID, 0)
IF @ModuloID = 0
BEGIN
	INSERT INTO SistemaModulo(Nombre)VALUES(@ModuloNombre)
	SET @ModuloID = SCOPE_IDENTITY();
END
SELECT @OpcionCatalogosID = OpcionID FROM SistemaOpcion WHERE ModuloID = @ModuloID AND Nombre = 'Catálogos'
SET @OpcionCatalogosID = COALESCE(@OpcionCatalogosID, 0)
IF @OpcionCatalogosID = 0
BEGIN
	INSERT INTO SistemaOpcion(ModuloID, Nombre, Activo, Protegido, VisibleMenu)VALUES(@ModuloID, 'Catálogos', 1, 1, 1)
	SET @OpcionCatalogosID = SCOPE_IDENTITY();
END
SELECT @OpcionID = OpcionID FROM SistemaOpcion WHERE PadreID = @OpcionCatalogosID AND Nombre = @OpcionNombre
SET @OpcionID = COALESCE(@OpcionID, 0)
IF @OpcionID = 0
BEGIN
	INSERT INTO SistemaOpcion(ModuloID, PadreID, Nombre, RecursoWebsite, Activo, Protegido, VisibleMenu)
	VALUES(@ModuloID, @OpcionCatalogosID, @OpcionNombre, @OpcionURL, 1, 1, 1)
	SET @OpcionID = SCOPE_IDENTITY();
END
ELSE
BEGIN
	UPDATE	SistemaOpcion
	SET		RecursoWebsite = @OpcionURL, 
			ModuloID = @ModuloID
	WHERE	OpcionID = @OpcionID
END

IF NOT EXISTS(SELECT OpcionID FROM SistemaOpcionTipoOpcion WHERE OpcionID = @OpcionID AND TipoOpcionID = 1)
BEGIN
	INSERT INTO SistemaOpcionTipoOpcion(OpcionID, TipoOpcionID) VALUES(@OpcionID, 1)
END

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaOpcion_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaOpcion_Consultar]
@OpcionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS

-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaOpcion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @OpcionID

	SELECT  OpcionID,ModuloID,PadreID,Nombre,NombreCorto,RecursoWebsite,Activo,Protegido,Popup,VisibleMenu,Icono,Orden
	FROM    SistemaOpcion
	WHERE   OpcionID = @OpcionID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('OpcionID::', @OpcionID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @OpcionID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaOpcion_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaOpcion_Eliminar]
@OpcionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaOpcion',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @OpcionID
    DELETE
    FROM    SistemaOpcion
    WHERE   OpcionID = @OpcionID
    
    -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @OpcionID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('OpcionID::', @OpcionID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @OpcionID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
	/********************* FIN COPY 2  *********************************/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaOpcion_Guardar]...';


GO

CREATE PROCEDURE [dbo].[SistemaOpcion_Guardar]
@OpcionID int,
@ModuloID int,
@PadreID int = null,
@Nombre nvarchar(50),
@NombreCorto nvarchar(20),
@RecursoWebsite nvarchar(150),
@Activo bit,
@Protegido bit,
@Popup bit,
@VisibleMenu bit,
@Icono nvarchar(50),
@Orden smallint
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
SET @PadreID = NULLIF(@PadreID, 0)
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaOpcion',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@ModuloID_ int = 0,
		@PadreID_ int = 0,
		@Nombre_ nvarchar(50) = '',
		@NombreCorto_ nvarchar(20) = '',			
		@RecursoWebsite_ varchar(150) = '',
		@Activo_ bit = 0,
		@Protegido_ bit = 0,
		@Popup_ bit = 0,
		@VisibleMenu_ bit = 0,
		@Icono_ nvarchar(50) = '',
		@Orden_ smallint = 0,
		@OpcionID_ int = @OpcionID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @OpcionID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT
	 			@ModuloID_ = IsNull(ModuloID,0),
				@PadreID_ = IsNull(PadreID,0),
				@Nombre_= IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),			
				@RecursoWebsite_ = IsNull(RecursoWebsite,''),
				@Activo_ = IsNull(Activo,0),
				@Protegido_ = IsNull(Protegido,0),
				@Popup_ = IsNull(Popup,0),
				@VisibleMenu_ = IsNull(VisibleMenu,0),
				@Icono_ = IsNull(Icono,''),
				@Orden_ = IsNull(Orden,0),
				@OpcionID_=IsNull(OpcionID,0)
		   FROM SistemaOpcion WHERE OpcionID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  SistemaOpcion
			SET                     ModuloID = @ModuloID,
					PadreID = @PadreID,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					RecursoWebsite = @RecursoWebsite,
					Activo = @Activo,
					Protegido = @Protegido,
					Popup = @Popup,
					VisibleMenu = @VisibleMenu,
					Icono = @Icono,
					Orden = @Orden
			WHERE   OpcionID = @OpcionID
		END
		ELSE
		BEGIN        
			INSERT  INTO SistemaOpcion(
					ModuloID,
					PadreID,
					Nombre,
					NombreCorto,
					RecursoWebsite,
					Activo,
					Protegido,
					Popup,
					VisibleMenu,
					Icono,
					Orden)
			VALUES  (
					@ModuloID,
					@PadreID,
					@Nombre,
					@NombreCorto,
					@RecursoWebsite,
					@Activo,
					@Protegido,
					@Popup,
					@VisibleMenu,
					@Icono,
					@Orden)
        
        SET     @IDAActualizar = SCOPE_IDENTITY()
		END
		
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @OpcionID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('ModuloID::', @ModuloID_, ':', @ModuloID, ';')
				SET @logMessage = Concat(@logMessage,'PadreID::', @PadreID_, ':', @PadreID, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'RecursoWebSite::', @RecursoWebSite_, ':', @RecursoWebSite, ';')
				SET @logMessage = Concat(@logMessage, 'Activo::', @Activo_, ':', @Activo, ';')
				SET @logMessage = Concat(@logMessage, 'Protegido::', @Protegido_, ':', @Protegido, ';')
				SET @logMessage = Concat(@logMessage, 'Popup::', @Popup_, ':', @Popup, ';')
				SET @logMessage = Concat(@logMessage, 'VisibleMenu::', @VisibleMenu_, ':', @VisibleMenu, ';')
				SET @logMessage = Concat(@logMessage, 'Icono::', @Icono_, ':', @Icono, ';')
				SET @logMessage = Concat(@logMessage, 'Orden::', @Orden_, ':', @Orden, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaOpcion_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaOpcion_Listado]
-- Parámetros para Bitácora
	 @UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaOpcion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	
	SELECT  OpcionID,b.ModuloID,PadreID,a.Nombre,a.NombreCorto,a.RecursoWebsite,Activo,
			Protegido,Popup,VisibleMenu,a.Icono,Orden,b.Nombre as NombreModulo,
			b.RecursoWebSite as RecursoWebSiteModulo,b.Icono as IconoModulo
	FROM    SistemaOpcion a
			RIGHT JOIN SistemaModulo b
				ON b.ModuloID = a.ModuloID
	ORDER BY NombreModulo, Orden

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaOpcionLista_Listado]...';


GO
CREATE PROCEDURE [dbo].[SistemaOpcionLista_Listado]
@RecursoWebsite varchar(150)
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'SistemaOpcionLista',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('RecursoWebsite::', @RecursoWebsite, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

/************* FIN COPY 1  *********************/

	SELECT  SOL.SPListaID, Nombre, SP
	FROM    SistemaOpcionLista SOL LEFT OUTER JOIN SistemaSPLista SSPL ON SOL.SPListaID = SSPL.SPListaID
	WHERE	OpcionID = (SELECT OpcionID FROM SistemaOpcion WHERE RecursoWebsite = @RecursoWebsite)
	ORDER BY SP

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[SistemaOpcionTipoOpcion_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaOpcionTipoOpcion_Eliminar]
@OpcionTipoOpcionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaOpcionTipoOpcion',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @OpcionTipoOpcionID
    DELETE  
    FROM    SistemaOpcionTipoOpcion
    WHERE   OpcionTipoOpcionID = @OpcionTipoOpcionID
    -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @OpcionTipoOpcionID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('OpcionTipoOpcionID::', @OpcionTipoOpcionID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @OpcionTipoOpcionID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaOpcionTipoOpcion_Guardar]...';


GO


CREATE PROCEDURE [SistemaOpcionTipoOpcion_Guardar]
@ModificacionUsuarioID int = null,
@OpcionID int, 
@TipoOpcionID int
AS
SET NOCOUNT ON 
DECLARE @Errores bit, @Mensaje nvarchar(300)

BEGIN TRANSACTION 
BEGIN TRY
    INSERT  INTO SistemaOpcionTipoOpcion (OpcionID, TipoOpcionID)
    VALUES  (@OpcionID, @TipoOpcionID)
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaOpcionTipoOpcion_Listado]...';


GO


CREATE PROCEDURE [SistemaOpcionTipoOpcion_Listado]
@OpcionID int
AS

SELECT  b.OpcionTipoOpcionID, b.OpcionID, a.TipoOpcionID, a.Nombre, a.NombreCorto
FROM    dbo.SistemaTipoOpcion a
        INNER JOIN SistemaOpcionTipoOpcion b 
            ON  b.TipoOpcionID = a.TipoOpcionID
WHERE   b.OpcionID = @OpcionID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaParametro_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaParametro_Consultar]
@SistemaParametroID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaParametro',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @SistemaParametroID

	SELECT  SistemaParametroID,Nombre,ModuloID,Valor
	FROM    SistemaParametro
	WHERE   SistemaParametroID = @SistemaParametroID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SistemaParametroID::', @SistemaParametroID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @SistemaParametroID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaParametro_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaParametro_Eliminar]
@SistemaParametroID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaParametro',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @SistemaParametroID
    DELETE
    FROM    SistemaParametro
    WHERE   SistemaParametroID = @SistemaParametroID
    
    -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @SistemaParametroID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('SistemaParametroID::', @SistemaParametroID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @SistemaParametroID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaParametro_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SistemaParametro_Guardar]
@SistemaParametroID int,
@Nombre varchar(50),
@ModuloID int,
@Valor varchar(20)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaParametro',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	
		@Nombre_ nvarchar(50) = '',			
		@Valor_ varchar(20) = '',
		@ModuloID_ int = 0,
		@SistemaParametroID_ int = @SistemaParametroID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @SistemaParametroID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	
	 			@Nombre_ = IsNull(Nombre,''),
				@Valor_ = IsNull(Valor,''),
				@ModuloID_ = IsNull(ModuloID,0),
				@SistemaParametroID_ = IsNull(SistemaParametroID,0)
		   FROM	SistemaParametro WHERE SistemaParametroID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SistemaParametro
			SET                     Nombre = @Nombre,
					ModuloID = @ModuloID,
					Valor = @Valor
			WHERE   SistemaParametroID = @SistemaParametroID
		END
		ELSE
		BEGIN        
			INSERT  INTO SistemaParametro(
					Nombre,
					ModuloID,
					Valor)
			VALUES  (
					@Nombre,
					@ModuloID,
					@Valor)
        
        SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @SistemaParametroID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'Valor::', @Valor_, ':', @Valor, ';')
				SET @logMessage = Concat(@logMessage, 'ModuloID::', @ModuloID_, ':', @ModuloID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaParametro_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaParametro_Listado]
-- Parámetros para Bitácora
	 @UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaParametro',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	
	SELECT  SistemaParametroID,Nombre,ModuloID,Valor
	FROM    SistemaParametro

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaSexo_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaSexo_Consultar]
@SexoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaSexo',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@SexoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@SistemaSexo_ int = @SexoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @SexoID

	SELECT  SexoID,SexoClave,Nombre,NombreCorto
	FROM    SistemaSexo
	WHERE   SexoID = @SexoID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SistemaSexoID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @SexoClave_ as SexoClave,	@Nombre_ as Nombre,		@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaSexo_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaSexo_Eliminar]
@SexoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaSexo',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @SexoID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(SexoClave,'')
	  FROM	SistemaSexo WHERE SexoID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    SistemaSexo
		WHERE   SexoID = @SexoID
    
    -- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @SexoID)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('SexoID::', @SexoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @SexoID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaSexo_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SistemaSexo_Guardar]
@SexoID int,
@SexoClave varchar(6),
@Nombre varchar(30),
@NombreCorto varchar(10)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'SistemaSexo',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@SistemaSexoClave_ nvarchar(6) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@SistemaSexoID_ int = @SexoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @SexoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@SistemaSexoClave_ =	IsNull(SexoClave,''),
	 			@Nombre_ =				IsNull(Nombre,''),
				@NombreCorto_ =			IsNull(NombreCorto,''),
				@SistemaSexoID_ =		IsNull(SexoID,0)
		   FROM	SistemaSexo WHERE SexoID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @SistemaSexoClave_ = @ClaveNoAsignado and @SexoClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SistemaSexo
			SET     
                	SexoClave = @SexoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   SexoID = @SexoID
		END
		ELSE
		BEGIN        
			INSERT  INTO SistemaSexo(
                	SexoClave,
					Nombre,
					NombreCorto)
			VALUES  (
                	@SexoClave,
					@Nombre,
					@NombreCorto)
        
       SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @SistemaSexoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('SexoClave::', @SistemaSexoClave_, ':', @SexoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaSexo_Listado]...';


GO
CREATE PROCEDURE [dbo].[SistemaSexo_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'SistemaSexo',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	IF @TipoListado = 'Minimo'
		SELECT  SexoID AS ID,				SexoClave AS Clave,
				Nombre,								NombreCorto,
				0 AS PadreID
		FROM    SistemaSexo
	ELSE
		SELECT  SexoID,SexoClave,Nombre,NombreCorto
		FROM    SistemaSexo
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaSPListaParametro_Listado]...';


GO
CREATE PROCEDURE [dbo].[SistemaSPListaParametro_Listado]
@SPListaID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'SistemaSPListaParametro',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('OpcionListaID::', @SPListaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

/************* FIN COPY 1  *********************/

	SELECT  SPListaParametroID, Parametro
	FROM    SistemaSPListaParametro
	WHERE	SPListaID = @SPListaID
	ORDER BY Parametro

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoDocumento_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaTipoDocumento_Consultar]
@TipoDocumentoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaTipoDocumento',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	/************* FIN COPY 1  *********************/
	SET @IDAConsultar = @TipoDocumentoID

	SELECT  TipoDocumentoID,TipoDocumentoClave,Nombre,NombreCorto,Activo,ModuloID
	FROM    SistemaTipoDocumento
	WHERE   TipoDocumentoID = @TipoDocumentoID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('TipoDocumentoID::', @TipoDocumentoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @TipoDocumentoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoDocumento_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaTipoDocumento_Eliminar]
@TipoDocumentoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaTipoDocumento',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
/************* FIN COPY 1  *********************/

	SET @IDABorrar = @TipoDocumentoID
    DELETE
    FROM    SistemaTipoDocumento
    WHERE   TipoDocumentoID = @TipoDocumentoID
    
    -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @TipoDocumentoID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('TipoDocumentoID::', @TipoDocumentoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @TipoDocumentoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
	/********************* FIN COPY 2  *********************************/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoDocumento_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SistemaTipoDocumento_Guardar]
@TipoDocumentoID int,
@TipoDocumentoClave varchar(10),
@Nombre varchar(30),
@NombreCorto varchar(30),
@Activo bit,
@ModuloID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaTipoDocumento',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@TipoDocumentoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@Estatus_ bit = 0,
		@ModuloID_ bit = 0,
		@TipoDocumentoID_ int = @TipoDocumentoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @TipoDocumentoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@TipoDocumentoClave_ = IsNull(TipoDocumentoClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@Estatus_ = IsNull(Activo,0),
				@ModuloID_ = IsNull(ModuloID,0),
				@TipoDocumentoID_ = IsNull(TipoDocumentoID,0)
		   FROM	SistemaTipoDocumento WHERE TipoDocumentoID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SistemaTipoDocumento
			SET     TipoDocumentoClave = @TipoDocumentoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					Activo = @Activo,
					ModuloID = @ModuloID
			WHERE   TipoDocumentoID = @TipoDocumentoID
		END
		ELSE
		BEGIN        
			INSERT  INTO SistemaTipoDocumento(
					TipoDocumentoClave,
					Nombre,
					NombreCorto,
					Activo,
					ModuloID)
			VALUES  (
					@TipoDocumentoClave,
					@Nombre,
					@NombreCorto,
					@Activo,
					@ModuloID)
        
        SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @TipoDocumentoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('TipoDocumentoClave::', @TipoDocumentoClave_, ':', @TipoDocumentoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'Estatus::', @Estatus_, ':', @Activo, ';')
				SET @logMessage = Concat(@logMessage, 'ModuloID::', @ModuloID_, ':', @ModuloID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoDocumento_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaTipoDocumento_Listado]
@ModuloID int,
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress					varchar(40)		= null
	,@HostName					varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaTipoDocumento',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  TipoDocumentoID AS ID,		TipoDocumentoClave AS CLAVE,	Nombre,
				NombreCorto,				0 AS PadreID
		FROM    SistemaTipoDocumento
		WHERE	ModuloID = @ModuloID
	ELSE
		SELECT  TipoDocumentoID,TipoDocumentoClave,Nombre,NombreCorto,Activo,ModuloID
		FROM    SistemaTipoDocumento

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoDocumentoRegla_Consultar]...';


GO
CREATE PROCEDURE [dbo].[SistemaTipoDocumentoRegla_Consultar]
@TipoDocumentoReglaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaTipoDocumentoRegla',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@SistemaEstatusTipoDocumentoIDPermite_ int = 0,
		@SistemaEstatusTipoDocumentoID_ int = 0		
		

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @TipoDocumentoReglaID
	SELECT  @SistemaEstatusTipoDocumentoIDPermite_ = SistemaEstatusTipoDocumentoIDPermite,	
			@SistemaEstatusTipoDocumentoID_ = SistemaEstatusTipoDocumentoID		
	FROM    SistemaTipoDocumentoRegla
	WHERE   TipoDocumentoReglaID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('TipoDocumentoReglaID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @SistemaEstatusTipoDocumentoIDPermite_ as SistemaEstatusTipoDocumentoIDPermite,	
			@SistemaEstatusTipoDocumentoID_ as SistemaEstatusTipoDocumentoID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoDocumentoRegla_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[SistemaTipoDocumentoRegla_Eliminar]
@TipoDocumentoReglaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaTipoDocumentoRegla',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @TipoDocumentoReglaID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(PpalAreaClave,'')
	  FROM	PpalArea WHERE PpalAreaID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    SistemaTipoDocumentoRegla
		WHERE   TipoDocumentoReglaID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @TipoDocumentoReglaID)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('TipoDocumentoReglaID::', @TipoDocumentoReglaID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @TipoDocumentoReglaID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoDocumentoRegla_Guardar]...';


GO
CREATE PROCEDURE [dbo].[SistemaTipoDocumentoRegla_Guardar]
@TipoDocumentoReglaID int,
@SistemaEstatusTipoDocumentoIDPermite int ,
@SistemaEstatusTipoDocumentoID int 		
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora  nvarchar(100) = 'SistemaTipoDocumentoRegla',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@SistemaEstatusTipoDocumentoIDPermite_ int = 0,
		@SistemaEstatusTipoDocumentoID_ int = 0,
		@TipoDocumentoReglaID_ int = @TipoDocumentoReglaID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @TipoDocumentoReglaID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@SistemaEstatusTipoDocumentoIDPermite_ = IsNull(SistemaEstatusTipoDocumentoIDPermite,0),
				@SistemaEstatusTipoDocumentoID_  = IsNull(SistemaEstatusTipoDocumentoIDPermite,0),
				@TipoDocumentoReglaID_  = IsNull(TipoDocumentoReglaID,0)
		   FROM	SistemaTipoDocumentoRegla WHERE TipoDocumentoReglaID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SistemaTipoDocumentoRegla
			SET     SistemaEstatusTipoDocumentoIDPermite  = @SistemaEstatusTipoDocumentoIDPermite ,
					SistemaEstatusTipoDocumentoID = @SistemaEstatusTipoDocumentoID	
			WHERE   TipoDocumentoReglaID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO SistemaTipoDocumentoRegla(
					SistemaEstatusTipoDocumentoIDPermite,
					SistemaEstatusTipoDocumentoID)
			VALUES  (
					@SistemaEstatusTipoDocumentoIDPermite,
					@SistemaEstatusTipoDocumentoID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @TipoDocumentoReglaID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('SistemaEstatusTipoDocumentoIDPermite::', @SistemaEstatusTipoDocumentoIDPermite_, ':', @SistemaEstatusTipoDocumentoIDPermite, ';')
				SET @logMessage = Concat(@logMessage, 'SistemaEstatusTipoDocumentoID::', @SistemaEstatusTipoDocumentoID_, ':', @SistemaEstatusTipoDocumentoID, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoDocumentoRegla_Listado]...';


GO
CREATE PROCEDURE [dbo].[SistemaTipoDocumentoRegla_Listado]
-- Parámetros para Bitácora
	 @UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaTipoDocumentoRegla',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  TipoDocumentoReglaID,SistemaEstatusTipoDocumentoIDPermite,SistemaEstatusTipoDocumentoID	
	FROM    SistemaTipoDocumentoRegla

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoMail_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaTipoMail_Consultar]
@SistemaTipoMailID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaTipoMail',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @SistemaTipoMailID
	SELECT  SistemaTipoMailID,SistemaTipoMailClave,Nombre,NombreCorto,Estatus
	FROM    SistemaTipoMail
	WHERE   SistemaTipoMailID = @SistemaTipoMailID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SistemaTipoMailID::', @SistemaTipoMailID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @SistemaTipoMailID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoMail_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaTipoMail_Eliminar]
@SistemaTipoMailID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora  nvarchar(100) = 'SistemaTipoMail',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @SistemaTipoMailID
    DELETE
    FROM    SistemaTipoMail
    WHERE   SistemaTipoMailID = @SistemaTipoMailID
    
    -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @SistemaTipoMailID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('SistemaTipoMailID::', @SistemaTipoMailID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @SistemaTipoMailID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoMail_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SistemaTipoMail_Guardar]
@ModificacionUsuarioID int = null,
@SistemaTipoMailID int,
@SistemaTipoMailClave varchar(10),
@Nombre varchar(30),
@NombreCorto varchar(10),
@Estatus bit
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaTipoMail',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@SistemaTipoMailClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@Estatus_ bit = 0,
		@SistemaTipoMailID_ int = @SistemaTipoMailID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @SistemaTipoMailID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@SistemaTipoMailClave_ = IsNull(SistemaTipoMailClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@Estatus_ = IsNull(Estatus,0),
				@SistemaTipoMailID_ = IsNull(SistemaTipoMailID,0)
		   FROM	SistemaTipoMail WHERE SistemaTipoMailID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SistemaTipoMail
			SET     SistemaTipoMailClave = @SistemaTipoMailClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					Estatus = @Estatus
			WHERE   SistemaTipoMailID = @SistemaTipoMailID
		END
		ELSE
		BEGIN        
			INSERT  INTO SistemaTipoMail(
					SistemaTipoMailClave,
					Nombre,
					NombreCorto,
					Estatus)
			VALUES  (
					@SistemaTipoMailClave,
					@Nombre,
					@NombreCorto,
					@Estatus)
        
        SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @SistemaTipoMailID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('SistemaTipoMailClave::', @SistemaTipoMailClave_, ':', @SistemaTipoMailClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'Estatus::', @Estatus_, ':', @Estatus, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoMail_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaTipoMail_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaTipoMail',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	
	SELECT  SistemaTipoMailID,SistemaTipoMailClave,Nombre,NombreCorto,Estatus
	FROM    SistemaTipoMail

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoOpcion_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaTipoOpcion_Consultar]
@TipoOpcionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaTipoOpcion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@Nombre_ nvarchar(10) = '',
		@NombreCorto_ nvarchar(60) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	/************* FIN COPY 1  *********************/
	SET @IDAConsultar = @TipoOpcionID
	SELECT  @Nombre_ = Nombre,		@NombreCorto_ = NombreCorto
	FROM    SistemaTipoOpcion
	WHERE   TipoOpcionID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('TipoOpcionID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF @Errores = 0
	SELECT  @Nombre_ as Nombre,		@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoOpcion_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaTipoOpcion_Eliminar]
--@ModificacionUsuarioID int = null,
@TipoOpcionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora  nvarchar(100) = 'SistemaTipoOpcion',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @TipoOpcionID
    DELETE
    FROM    SistemaTipoOpcion
    WHERE   TipoOpcionID = @TipoOpcionID
    
    -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @TipoOpcionID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('TipoOpcionID::', @TipoOpcionID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @TipoOpcionID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
	/********************* FIN COPY 2  *********************************/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoOpcion_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SistemaTipoOpcion_Guardar]
@TipoOpcionID int,
@Nombre nvarchar(50),
@NombreCorto nvarchar(20)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaTipoOpcion',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@TipoOpcionID_ int = @TipoOpcionID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @TipoOpcionID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@TipoOpcionID_ = IsNull(TipoOpcionID,0)
		   FROM	SistemaTipoOpcion WHERE TipoOpcionID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SistemaTipoOpcion
			SET                     Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   TipoOpcionID = @TipoOpcionID
		END
		ELSE
		BEGIN        
			INSERT  INTO SistemaTipoOpcion(
					Nombre,
					NombreCorto)
			VALUES  (
					@Nombre,
					@NombreCorto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @TipoOpcionID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoOpcion_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaTipoOpcion_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaTipoOpcion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	
/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  TipoOpcionID,Nombre,NombreCorto
	FROM    SistemaTipoOpcion

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoOpcionAccion_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaTipoOpcionAccion_Consultar]
@TipoOpcionAccionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaTipoOpcionAccion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @TipoOpcionAccionID
	SELECT  TipoOpcionAccionID,TipoOpcionID,AccionID
	FROM    SistemaTipoOpcionAccion
	WHERE   TipoOpcionAccionID = @TipoOpcionAccionID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('TipoOpcionAccionID::', @TipoOpcionAccionID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @TipoOpcionAccionID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
	RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoOpcionAccion_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaTipoOpcionAccion_Eliminar]
--@ModificacionUsuarioID int = null,
@TipoOpcionAccionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaTipoOpcionAccion',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @TipoOpcionAccionID
    DELETE
    FROM    SistemaTipoOpcionAccion
    WHERE   TipoOpcionAccionID = @TipoOpcionAccionID
    
    -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @TipoOpcionAccionID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('TipoOpcionAccionID::', @TipoOpcionAccionID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @TipoOpcionAccionID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoOpcionAccion_Guardar]...';


GO
CREATE PROCEDURE [dbo].[SistemaTipoOpcionAccion_Guardar]
@TipoOpcionAccionID int,
@TipoOpcionID int,
@AccionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora  nvarchar(100) = 'SistemaTipoOpcionAccion',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@TipoOpcionID_ int = 0,
		@AccionID_ int = 0,	
		@TipoOpcionAccionID_ int = @TipoOpcionAccionID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @TipoOpcionAccionID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	
				@TipoOpcionID_ = IsNull(TipoOpcionID,0),
				@AccionID_ = IsNull(@AccionID,0),
				@TipoOpcionAccionID_ = IsNull(TipoOpcionAccionID,0)
		   FROM	SistemaTipoOpcionAccion WHERE TipoOpcionAccionID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SistemaTipoOpcionAccion
			SET                     
					TipoOpcionID = @TipoOpcionID,
					AccionID = @AccionID
			WHERE   TipoOpcionAccionID = @TipoOpcionAccionID
		END
		ELSE
		BEGIN        
			INSERT  INTO SistemaTipoOpcionAccion(
					TipoOpcionID,
					AccionID)
			VALUES  (
					@TipoOpcionID,
					@AccionID)
        
        SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @TipoOpcionAccionID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat(@logMessage, 'TipoOpcionID::', @TipoOpcionID_, ':', @TipoOpcionID, ';')
				SET @logMessage = Concat(@logMessage, 'AccionID::', @AccionID_, ':', @AccionID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID

return 0
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoOpcionAccion_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaTipoOpcionAccion_Listado]
  @TipoOpcionID INT = NULL
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora  nvarchar(100) = 'SistemaTipoOpcionAccion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('TipoOpcionID::', @TipoOpcionID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT TipoOpcionAccionID,TipoOpcionID,AccionID
	FROM [dbo].[SistemaTipoOpcionAccion]
    WHERE @TipoOpcionID IS NULL OR [TipoOpcionID] = @TipoOpcionID

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
RETURN 0
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoRepresentanteProveedor_Listado]...';


GO
CREATE PROCEDURE [dbo].[SistemaTipoRepresentanteProveedor_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'TipoRepresentanteProveedor',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('::',  ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  TipoRepresentanteProveedorID AS ID,		TipoRepresentanteProveedorClave AS Clave,
				Nombre,									NombreCorto,
				0 as PadreID
		FROM    SistemaTipoRepresentanteProveedor
		ORDER BY TipoRepresentanteProveedorClave
	ELSE
		SELECT  TipoRepresentanteProveedorID,TipoRepresentanteProveedorClave,Nombre,NombreCorto,TipoRepresentanteProveedorID
		FROM    SistemaTipoRepresentanteProveedor
		ORDER BY TipoRepresentanteProveedorClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoTelefono_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaTipoTelefono_Consultar]
@SistemaTipoTelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaTipoTelefono',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  SistemaTipoTelefonoID,SistemaTipoTelefonoClave,Nombre,NombreCorto,Estatus
	FROM    SistemaTipoTelefono
	WHERE   SistemaTipoTelefonoID = @SistemaTipoTelefonoID

-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SistemaTipoTelefonoID::', @SistemaTipoTelefonoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @SistemaTipoTelefonoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoTelefono_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaTipoTelefono_Eliminar]
@SistemaTipoTelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora  nvarchar(100) = 'SistemaTipoTelefono',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @SistemaTipoTelefonoID
    DELETE
    FROM    SistemaTipoTelefono
    WHERE   SistemaTipoTelefonoID = @SistemaTipoTelefonoID
    
   -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @SistemaTipoTelefonoID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('SistemaTipoTelefonoID::', @SistemaTipoTelefonoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @SistemaTipoTelefonoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
	/********************* FIN COPY 2  *********************************/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoTelefono_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SistemaTipoTelefono_Guardar]
@SistemaTipoTelefonoID int,
@SistemaTipoTelefonoClave varchar(10),
@Nombre varchar(30),
@NombreCorto varchar(10),
@Estatus bit
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora  nvarchar(100) = 'SistemaTipoTelefono',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@SistemaTipoTelefonoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@Estatus_ bit = 0,
		@SistemaTipoTelefonoID_ int = @SistemaTipoTelefonoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @SistemaTipoTelefonoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@SistemaTipoTelefonoClave_ = IsNull(SistemaTipoTelefonoClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@Estatus_ = IsNull(Estatus,0),
				@SistemaTipoTelefonoID_ = IsNull(SistemaTipoTelefonoID,0)
		   FROM	SistemaTipoTelefono WHERE SistemaTipoTelefonoID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
    BEGIN
        UPDATE  SistemaTipoTelefono
        SET     SistemaTipoTelefonoClave = @SistemaTipoTelefonoClave,
				Nombre = @Nombre,
				NombreCorto = @NombreCorto,
				Estatus = @Estatus
        WHERE   SistemaTipoTelefonoID = @SistemaTipoTelefonoID
    END
    ELSE
    BEGIN        
        INSERT  INTO SistemaTipoTelefono(
                SistemaTipoTelefonoClave,
				Nombre,
				NombreCorto,
				Estatus)
        VALUES  (
                @SistemaTipoTelefonoClave,
				@Nombre,
				@NombreCorto,
				@Estatus)
        
        SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @SistemaTipoTelefonoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('SistemaTipoTelefonoClave::', @SistemaTipoTelefonoClave_, ':', @SistemaTipoTelefonoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'Estatus::', @Estatus_, ':', @Estatus, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaTipoTelefono_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaTipoTelefono_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaTipoTelefono',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	
	SELECT  SistemaTipoTelefonoID,SistemaTipoTelefonoClave,Nombre,NombreCorto,Estatus
	FROM    SistemaTipoTelefono

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaUsoTelefono_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaUsoTelefono_Consultar]
@SistemaUsoTelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaUsoTelefono',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  SistemaUsoTelefonoID,SistemaUsoTelefonoClave,Nombre,NombreCorto,Estatus
	FROM    SistemaUsoTelefono
	WHERE   SistemaUsoTelefonoID = @SistemaUsoTelefonoID

-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SistemaUsoTelefonoID::', @SistemaUsoTelefonoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @SistemaUsoTelefonoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaUsoTelefono_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaUsoTelefono_Eliminar]
@SistemaUsoTelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaUsoTelefono',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @SistemaUsoTelefonoID
    DELETE
    FROM    SistemaUsoTelefono
    WHERE   SistemaUsoTelefonoID = @SistemaUsoTelefonoID
    
   -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @SistemaUsoTelefonoID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('SistemaUsoTelefonoID::', @SistemaUsoTelefonoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @SistemaUsoTelefonoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaUsoTelefono_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SistemaUsoTelefono_Guardar]
@SistemaUsoTelefonoID int,
@SistemaUsoTelefonoClave varchar(10),
@Nombre varchar(30),
@NombreCorto varchar(10),
@Estatus bit
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaUsoTelefono',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@SistemaUsoTelefonoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@Estatus_ bit = 0,
		@SistemaUsoTelefonoID_ int = @SistemaUsoTelefonoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @SistemaUsoTelefonoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@SistemaUsoTelefonoClave_ = IsNull(SistemaUsoTelefonoClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@Estatus_ = IsNull(Estatus,0),
				@SistemaUsoTelefonoID_ = IsNull(SistemaUsoTelefonoID,0)
		   FROM	SistemaUsoTelefono WHERE SistemaUsoTelefonoID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
    BEGIN
        UPDATE  SistemaUsoTelefono
        SET     SistemaUsoTelefonoClave = @SistemaUsoTelefonoClave,
				Nombre = @Nombre,
				NombreCorto = @NombreCorto,
				Estatus = @Estatus
        WHERE   SistemaUsoTelefonoID = @SistemaUsoTelefonoID
    END
    ELSE
    BEGIN        
        INSERT  INTO SistemaUsoTelefono(
                SistemaUsoTelefonoClave,
				Nombre,
				NombreCorto,
				Estatus)
        VALUES  (
                @SistemaUsoTelefonoClave,
				@Nombre,
				@NombreCorto,
				@Estatus)
        
        SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @SistemaUsoTelefonoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('SistemaUsoTelefonoClave::', @SistemaUsoTelefonoClave_, ':', @SistemaUsoTelefonoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'Estatus::', @Estatus_, ':', @Estatus, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaUsoTelefono_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaUsoTelefono_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaUsoTelefono',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	
	SELECT  SistemaUsoTelefonoID,SistemaUsoTelefonoClave,Nombre,NombreCorto,Estatus
	FROM    SistemaUsoTelefono

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaUsuarioOpcionBitacora_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaUsuarioOpcionBitacora_Listado]
@EmpresaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora  nvarchar(100) = 'SegUsuarioOpcionBitacora',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

BEGIN TRANSACTION
BEGIN TRY

	SELECT  SegUsuarioID,Fecha,EmpresaID,ModuloID,OpcionID
	FROM    SistemaUsuarioOpcionBitacora
	WHERE	EmpresaID = @EmpresaID
	ORDER BY ModuloID

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaID::', @EmpresaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar]		@TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = ERROR_NUMBER(), @Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje
GO
PRINT N'Creando Procedimiento [dbo].[SysTables_Listado]...';


GO
CREATE PROCEDURE [dbo].[SysTables_Listado]
-- Parámetros para Bitácora
	 @UsuarioIDBItacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'sys.tables',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBItacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBItacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  name
	FROM    sys.tables
	ORDER BY object_id

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[Academico_Institucion_Educativa_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[Academico_Institucion_Educativa_Eliminar]
@InstitucionEducativaID int
-- Parámetros para Bitácora
	,@UserIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AcInstitucionEducativa',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @InstitucionEducativaID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(InstitucionEducativaClave,'')
	  FROM	AcInstitucionEducativa WHERE InstitucionEducativaID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    AcInstitucionEducativa
		WHERE   InstitucionEducativaID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UserIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('InstitucionEducativaID::', @InstitucionEducativaID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @InstitucionEducativaID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UserIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[Academico_Institucion_Educativa_Guardar]...';


GO
CREATE PROCEDURE [dbo].[Academico_Institucion_Educativa_Guardar]
@InstitucionEducativaID    INT,
    @InstitucionEducativaClave VARCHAR (6),
    @Nombre           VARCHAR (80),
    @NombreCorto      VARCHAR (15),
    @ExtraTexto1      VARCHAR (500),
    @ExtraTexto2      VARCHAR (500),
    @ExtraTexto3      VARCHAR (500),
    @ExtraFecha1      DATETIME,
    @ExtraFecha2      DATETIME,
    @ExtraDecimal1    DECIMAL (18, 6),
    @ExtraDecimal2    DECIMAL (18, 6),
    @ExtraDecimal3    DECIMAL (18, 6)	
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UserIDBitacora	int
	,@Descripcion		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombre   nvarchar(100) = 'AcInstitucionEducativa',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@InstitucionEducativaClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@EmpresaID_ int = 0,
		@InstitucionEducativaID_ int = @InstitucionEducativaID,
		@ExtraTexto1_      VARCHAR (500),
		@ExtraTexto2_      VARCHAR (500),
		@ExtraTexto3_      VARCHAR (500),
		@ExtraFecha1_      DATETIME,
		@ExtraFecha2_      DATETIME,
		@ExtraDecimal1_    DECIMAL (18, 6),
		@ExtraDecimal2_    DECIMAL (18, 6),
		@ExtraDecimal3_    DECIMAL (18, 6)	

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @InstitucionEducativaID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@InstitucionEducativaClave_ = IsNull(InstitucionEducativaClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@InstitucionEducativaID_ = IsNull(InstitucionEducativaID,0),
				@ExtraTexto1      = IsNull(ExtraTexto1,''),
				@ExtraTexto2      = IsNull(ExtraTexto2,''),
				@ExtraTexto3      = IsNull(ExtraTexto3,''),
				@ExtraFecha1      = IsNull(ExtraFecha1, GetDate()),
				@ExtraFecha2      = IsNull(ExtraFecha2, GetDate()),
				@ExtraDecimal1    = IsNull(ExtraDecimal1,0),
				@ExtraDecimal2    = IsNull(ExtraDecimal2,0),
				@ExtraDecimal3    = IsNull(ExtraDecimal3,0)	
		   FROM	AcInstitucionEducativa WHERE InstitucionEducativaID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @InstitucionEducativaClave_ = @ClaveNoAsignado and @InstitucionEducativaClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  AcInstitucionEducativa
			SET     InstitucionEducativaClave = @InstitucionEducativaClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					ExtraTexto1 = @ExtraTexto1,
					ExtraTexto2 = @ExtraTexto2,
					ExtraTexto3 = @ExtraTexto3,
					ExtraFecha1 = @ExtraFecha1,
					ExtraFecha2 = @ExtraFecha2,
					ExtraDecimal1 = @ExtraDecimal1,
					ExtraDecimal2 = @ExtraDecimal2,
					ExtraDecimal3 = @ExtraDecimal3
			WHERE   InstitucionEducativaID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO AcInstitucionEducativa(
					InstitucionEducativaClave,				Nombre,						NombreCorto,
					ExtraTexto1,							ExtraTexto2,				ExtraTexto3,
					ExtraFecha1,							ExtraFecha2,				ExtraDecimal1,
					ExtraDecimal2,							ExtraDecimal3)
			VALUES  (@InstitucionEducativaClave,			@Nombre,					@NombreCorto,
					@ExtraTexto1,							@ExtraTexto2,				@ExtraTexto3,
					@ExtraFecha1,							@ExtraFecha2,				@ExtraDecimal1,
					@ExtraDecimal2,							@ExtraDecimal3)        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @InstitucionEducativaID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UserIDBitacora,
					@TablaNombre		=   @TablaNombre,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('InstitucionEducativaClave::', @InstitucionEducativaClave_, ':', @InstitucionEducativaClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'ExtraTexto1::', @ExtraTexto1_, ':', @ExtraTexto1, ';')
				SET @logMessage = Concat(@logMessage, 'ExtraTexto2::', @ExtraTexto2_, ':', @ExtraTexto2, ';')
				SET @logMessage = Concat(@logMessage, 'ExtraTexto3::', @ExtraTexto3_, ':', @ExtraTexto3, ';')
				SET @logMessage = Concat(@logMessage, 'ExtraFecha1::', @ExtraFecha1_, ':', @ExtraFecha1, ';')
				SET @logMessage = Concat(@logMessage, 'ExtraFecha2::', @ExtraFecha2_, ':', @ExtraFecha2, ';')
				SET @logMessage = Concat(@logMessage, 'ExtraDecimal1::', @ExtraDecimal1_, ':', @ExtraDecimal1, ';')
				SET @logMessage = Concat(@logMessage, 'ExtraDecimal2::', @ExtraDecimal2_, ':', @ExtraDecimal2, ';')
				SET @logMessage = Concat(@logMessage, 'ExtraDecimal3::', @ExtraDecimal3_, ':', @ExtraDecimal3, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombre
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UserIDBitacora
														,@Descripcion		= @Descripcion
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[AuxBanco_Consultar]...';


GO
CREATE PROCEDURE [dbo].[AuxBanco_Consultar]
@AuxBancoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora		nvarchar(100) = 'AuxBanco',	
		@Operacion					nvarchar(20) = 'Read', 
		@logMessage					varchar(Max) = '',
		@isChangeBeLogged			bit

-- Variables para valores de columnas
DECLARE	@AuxBancoClave_		nvarchar(10) = '',
		@Nombre_			nvarchar(60) = '',			
		@NombreCorto_		varchar(10) = '',
		@AuxBancoID_		int = @AuxBancoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @AuxBancoID
	SELECT  @AuxBancoID_=AuxBancoID,@AuxBancoClave_=AuxBancoClave,@Nombre_=Nombre,@NombreCorto_ = NombreCorto 
	FROM    AuxBanco
	WHERE   AuxBancoID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('AuxBancoID::', @AuxBancoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as AuxBancoID,					@AuxBancoClave_ as AuxBancoClave,	
			@Nombre_ as Nombre,								@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxBanco_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[AuxBanco_Eliminar]
@AuxBancoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora		nvarchar(100) = 'AuxBanco',	
		@Operacion					nvarchar(20) = 'Delete', 
		@logMessage					varchar(Max) = '',
		@isChangeBeLogged			bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave					nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @AuxBancoID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(AuxBancoClave,'')
	  FROM	AuxBanco WHERE AuxBancoID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    AuxBanco
		WHERE   AuxBancoID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('AuxBancoID::', @AuxBancoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[AuxBanco_Guardar]...';


GO
CREATE PROCEDURE [dbo].[AuxBanco_Guardar]
@AuxBancoID int,
@AuxBancoClave varchar(4) = null,
@Nombre varchar(30) = null,
@NombreCorto varchar(10) = null
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora		nvarchar(100) = 'AuxBanco',	
		@Operacion					nvarchar(20) = '', 
		@logMessage					varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@BancoClave_ nvarchar(4) = '',
		@Nombre_ nvarchar(30) = '',			
		@NombreCorto_ varchar(10) = '',
		@BancoID_ int = @AuxBancoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @AuxBancoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@BancoClave_ =	IsNull(AuxBancoClave,''),
	 			@Nombre_ =		IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@BancoID_ =		IsNull(AuxBancoID,0)
		   FROM	AuxBanco WHERE AuxBancoID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  AuxBanco
			SET     AuxBancoClave = @AuxBancoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   AuxBancoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO AuxBanco(
					AuxBancoClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@AuxBancoClave,
					@Nombre,
					@NombreCorto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @BancoID_ > 0  SET @Operacion = 'Update' 	
						ELSE  SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('BancoClave::', @BancoClave_, ':', @AuxBancoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END

		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxBanco_Listado]...';


GO
CREATE PROCEDURE [dbo].[AuxBanco_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora  nvarchar(100) = 'AuxBanco',	
		@Operacion				nvarchar(20) = 'Read', 
		@logMessage				varchar(Max) = '',
		@isChangeBeLogged		bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar]		 @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT		AuxBancoID AS ID,				AuxBancoClave AS Clave,
					Nombre,							NombreCorto,
					0 AS PadreID
		FROM		AuxBanco
		ORDER BY	AuxBancoClave
	ELSE
		SELECT		AuxBancoID,AuxBancoClave,Nombre,NombreCorto
		FROM		AuxBanco
		ORDER BY	AuxBancoClave


	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[AuxEstadoCivil_Consultar]...';


GO


CREATE PROCEDURE [dbo].[AuxEstadoCivil_Consultar]
@AuxEstadoCivilID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxEstadoCivil',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@AuxEstadoCivilClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@AuxEstadoCivilID_  int = @AuxEstadoCivilID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @AuxEstadoCivilID
	SELECT  @AuxEstadoCivilID_ = AuxEstadoCivilID,@AuxEstadoCivilClave_ = AuxEstadoCivilClave,	@Nombre_ = Nombre,		@NombreCorto_ = NombreCorto
	FROM    AuxEstadoCivil
	WHERE   AuxEstadoCivilID = @IDAConsultar


	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('AuxEstadoCivilID::', @AuxEstadoCivilID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as AuxFormaPagoClave,					@AuxEstadoCivilClave_ as AuxEstadoCivilClave,	
			@Nombre_ as Nombre,								@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxEstadoCivil_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[AuxEstadoCivil_Eliminar]
@AuxEstadoCivilID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxEstadoCivil',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDABorrar = @AuxEstadoCivilID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(AuxEstadoCivilClave,'')
	  FROM	AuxEstadoCivil WHERE AuxEstadoCivilID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    AuxEstadoCivil
		WHERE   AuxEstadoCivilID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('AuxEstadoCivilID::', @AuxEstadoCivilID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[AuxEstadoCivil_Guardar]...';


GO
CREATE PROCEDURE [dbo].[AuxEstadoCivil_Guardar]
@AuxEstadoCivilID int,
@AuxEstadoCivilClave varchar(6),
@Nombre varchar(30),
@NombreCorto varchar(10)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora		nvarchar(100) = 'AuxEstadoCivil',	
		@Operacion					nvarchar(20) = '', 
		@logMessage					varchar(Max) = '',
		@isChangeBeLogged			bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@EstadoCivilClave_			nvarchar(4) = '',
		@Nombre_					nvarchar(30) = '',			
		@NombreCorto_				varchar(10) = '',
		@EstadoCivilID_				int = @AuxEstadoCivilID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @AuxEstadoCivilID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@EstadoCivilClave_ =	IsNull(AuxEstadoCivilClave,''),
	 			@Nombre_ =				IsNull(Nombre,''),
				@NombreCorto_ =			IsNull(NombreCorto,''),
				@EstadoCivilID_ =		IsNull(AuxEstadoCivilID,0)
		   FROM	AuxEstadoCivil WHERE AuxEstadoCivilID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  AuxEstadoCivil
			SET     AuxEstadoCivilClave =	@AuxEstadoCivilClave,
					Nombre =				@Nombre,
					NombreCorto =			@NombreCorto
			WHERE   AuxEstadoCivilID =		@IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO AuxEstadoCivil(
					AuxEstadoCivilClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@AuxEstadoCivilClave,
					@Nombre,
					@NombreCorto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @EstadoCivilID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('EstadoCivilClave::', @EstadoCivilClave_, ':', @AuxEstadoCivilClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END

		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxEstadoCivil_Listado]...';


GO
CREATE PROCEDURE [dbo].[AuxEstadoCivil_Listado]
@TipoListado varchar(10) = ''

-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxEstadoCivil',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  AuxEstadoCivilID AS ID,					AuxEstadoCivilClave AS Clave,
				Nombre,									NombreCorto,
				0 as PadreID
		FROM    AuxEstadoCivil
		ORDER BY AuxEstadoCivilClave
	ELSE
		SELECT  AuxEstadoCivilID,AuxEstadoCivilClave,Nombre,NombreCorto
		FROM    AuxEstadoCivil
		ORDER BY AuxEstadoCivilClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[AuxFormaPago_Consultar]...';


GO
CREATE PROCEDURE [dbo].[AuxFormaPago_Consultar]
@AuxFormaPagoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxFormaPago',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@AuxFormaPagoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @AuxFormaPagoID
	SELECT  @AuxFormaPagoClave_ = AuxFormaPagoClave,	@Nombre_ = Nombre,		@NombreCorto_ = NombreCorto
	FROM    AuxFormaPago
	WHERE   AuxFormaPagoID = @IDAConsultar


	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('AuxFormaPagoID::', @AuxFormaPagoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as AuxFormaPagoID,					@AuxFormaPagoClave_ as AuxFormaPagoClave,	
			@Nombre_ as Nombre,									@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxFormaPago_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[AuxFormaPago_Eliminar]
@FormaPagoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxFormaPago',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @FormaPagoID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(AuxFormaPagoClave,'')
	  FROM	AuxFormaPago WHERE AuxFormaPagoID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    AuxFormaPago
		WHERE   AuxFormaPagoID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('AuxFormaPagoID::', @FormaPagoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[AuxFormaPago_Guardar]...';


GO
CREATE PROCEDURE [dbo].[AuxFormaPago_Guardar]
@AuxFormaPagoID int,
@AuxFormaPagoClave varchar(5) = null,
@Nombre varchar(50) = null,
@NombreCorto varchar(20) = null
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxFormaPago',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@AuxFormaPagoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@AuxFormaPagoID_ int = @AuxFormaPagoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @AuxFormaPagoID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@AuxFormaPagoClave_ =	IsNull(AuxFormaPagoClave,''),
	 			@Nombre_ =				IsNull(Nombre,''),
				@NombreCorto_ =			IsNull(NombreCorto,''),
				@AuxFormaPagoID_ =		IsNull(AuxFormaPagoID,0)
		   FROM	AuxFormaPago WHERE AuxFormaPagoID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @AuxFormaPagoClave_ = @ClaveNoAsignado and @AuxFormaPagoClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  AuxFormaPago
			SET     AuxFormaPagoClave = @AuxFormaPagoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   AuxFormaPagoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO AuxFormaPago(
					AuxFormaPagoClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@AuxFormaPagoClave,
					@Nombre,
					@NombreCorto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @AuxFormaPagoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('AuxFormaPagoClave::', @AuxFormaPagoClave_, ':', @AuxFormaPagoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[AuxFormaPago_Listado]...';


GO
CREATE PROCEDURE [dbo].[AuxFormaPago_Listado]
@TipoListado varchar(10) = ''

-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxFormaPago',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  AuxFormaPagoID AS ID,			AuxFormaPagoClave AS Clave,
				Nombre,							NombreCorto,
				0 as PadreID
		FROM    AuxFormaPago
		ORDER BY AuxFormaPagoClave
	ELSE
		SELECT  AuxFormaPagoID,AuxFormaPagoClave,Nombre,NombreCorto
		FROM    AuxFormaPago
		ORDER BY AuxFormaPagoClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[AuxGiroEmpresa_Consultar]...';


GO


CREATE PROCEDURE [dbo].[AuxGiroEmpresa_Consultar]
@AuxGiroEmpresaID int
-- Parámetros para Bitácora
	,@UserIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxGiroEmpresa',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas

DECLARE	@AuxGiroEmpresaClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @AuxGiroEmpresaID
	SELECT  @AuxGiroEmpresaClave_ = AuxGiroEmpresaClave,	@Nombre_ = Nombre,		@NombreCorto_ = NombreCorto
	FROM    AuxGiroEmpresa
	WHERE   AuxGiroEmpresaID = @IDAConsultar


	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UserIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('AuxGiroEmpresaID::', @AuxGiroEmpresaID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UserIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as AuxFormaPagoID,					@AuxGiroEmpresaClave_ as AuxFormaPagoClave,	
			@Nombre_ as Nombre,									@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxGiroEmpresa_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[AuxGiroEmpresa_Eliminar]
@GiroEmpresaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxGiroEmpresa',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @GiroEmpresaID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(AuxGiroEmpresaClave,'')
	  FROM	AuxGiroEmpresa WHERE AuxGiroEmpresaID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    AuxGiroEmpresa
		WHERE   AuxGiroEmpresaID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('AuxGiroEmpresaID::', @GiroEmpresaID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[AuxGiroEmpresa_Guardar]...';


GO


CREATE PROCEDURE [dbo].[AuxGiroEmpresa_Guardar]
@AuxGiroEmpresaID int,
@AuxGiroEmpresaClave varchar(6),
@Nombre varchar(60),
@NombreCorto varchar(20)
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxGiroEmpresa',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@AuxGiroEmpresaClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@AuxGiroEmpresaID_ int = @AuxGiroEmpresaID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @AuxGiroEmpresaID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@AuxGiroEmpresaClave_ =		IsNull(AuxGiroEmpresaClave,''),
	 			@Nombre_ =					IsNull(Nombre,''),
				@NombreCorto_ =				IsNull(NombreCorto,''),
				@AuxGiroEmpresaID_ =		IsNull(AuxGiroEmpresaID,0)
		   FROM	AuxGiroEmpresa WHERE @AuxGiroEmpresaID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @AuxGiroEmpresaClave_ = @ClaveNoAsignado and @AuxGiroEmpresaClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  AuxGiroEmpresa
			SET     AuxGiroEmpresaClave = @AuxGiroEmpresaClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   AuxGiroEmpresaID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO AuxGiroEmpresa(
					AuxGiroEmpresaClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@AuxGiroEmpresaClave,
					@Nombre,
					@NombreCorto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @AuxGiroEmpresaID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('AuxGiroEmpresaClave::', @AuxGiroEmpresaClave_, ':', @AuxGiroEmpresaClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[AuxGiroEmpresa_Listado]...';


GO


CREATE PROCEDURE [dbo].[AuxGiroEmpresa_Listado]
@TipoListado varchar(10)
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase		int
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora	nvarchar(100) = 'AuxGiroEmpresa',	
		@Operacion				nvarchar(20) = 'List', 
		@logMessage				varchar(Max) = '',
		@isChangeBeLogged		bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  AuxGiroEmpresaID AS ID,				AuxGiroEmpresaClave AS Clave,
				Nombre,								NombreCorto,
				0 AS PadreID
		FROM    AuxGiroEmpresa
		ORDER BY AuxGiroEmpresaClave
	ELSE
		SELECT  AuxGiroEmpresaID,AuxGiroEmpresaClave,Nombre,NombreCorto
		FROM    AuxGiroEmpresa
		ORDER BY AuxGiroEmpresaClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[AuxHorarioPersonal_Consultar]...';


GO


CREATE PROCEDURE [dbo].[AuxHorarioPersonal_Consultar]
@AuxHorarioPersonalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxHorarioPersonal',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@AuxHorarioPersonaClave_ nvarchar(10) = '',
		@AuxHorarioPersonalID_ int = @AuxHorarioPersonalID,
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@EmpresaID_ varchar(60) = ''
		
SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @AuxHorarioPersonalID
	SELECT  @AuxHorarioPersonaClave_ = AuxHorarioPersonalClave,	@Nombre_ = Nombre,		@NombreCorto_ = NombreCorto, @EmpresaID_ = EmpresaID
	FROM    AuxHorarioPersonal
	WHERE   AuxHorarioPersonalID = @IDAConsultar


	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('AuxHorarioPersonalID::', @AuxHorarioPersonalID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as AuxHorarioPersonalID,					@AuxHorarioPersonaClave_ as AuxHorarioPersonalClave,	
			@Nombre_ as Nombre,										@NombreCorto_ as NombreCorto,	
			@EmpresaID_ as EmpresaID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxHorarioPersonal_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[AuxHorarioPersonal_Eliminar]
@HorarioPersonalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxHorarioPersonal',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''
SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @HorarioPersonalID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(AuxHorarioPersonalClave,'')
	  FROM	AuxHorarioPersonal WHERE AuxHorarioPersonalID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    AuxHorarioPersonal
		WHERE   AuxHorarioPersonalID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('AuxHorarioPersonalID::', @HorarioPersonalID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[AuxHorarioPersonal_Guardar]...';


GO


CREATE PROCEDURE [dbo].[AuxHorarioPersonal_Guardar]
@AuxHorarioPersonalID int,
@AuxHorarioPersonalClave varchar(6),
@EmpresaID int,
@Nombre varchar(30),
@NombreCorto varchar(10)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxHorarioPersonal',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@AuxHorarioPersonalClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@AuxHorarioPersonalID_ int = @AuxHorarioPersonalID,
		@EmpresaID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @AuxHorarioPersonalID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@AuxHorarioPersonalClave_ =		IsNull(AuxHorarioPersonalClave,''),
	 			@Nombre_ =						IsNull(Nombre,''),
				@NombreCorto_ =					IsNull(NombreCorto,''),
				@AuxHorarioPersonalID_ =		IsNull(AuxHorarioPersonalID,0),
				@EmpresaID_ =					ISNULL(EmpresaID, 0)
		   FROM	AuxHorarioPersonal WHERE AuxHorarioPersonalID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @AuxHorarioPersonalClave_= @ClaveNoAsignado and @AuxHorarioPersonalClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  AuxHorarioPersonal
			SET     AuxHorarioPersonalClave = @AuxHorarioPersonalClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   AuxHorarioPersonalID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO AuxHorarioPersonal(
					AuxHorarioPersonalClave,
					Nombre,
					NombreCorto,
					EmpresaID)
			VALUES  (
					@AuxHorarioPersonalClave,
					@Nombre,
					@NombreCorto,
					@EmpresaID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @AuxHorarioPersonalID > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('AuxHorarioPersonalClave::', @AuxHorarioPersonalClave_, ':', @AuxHorarioPersonalClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[AuxHorarioPersonal_Listado]...';


GO
CREATE PROCEDURE [dbo].[AuxHorarioPersonal_Listado]
@TipoListado varchar(10) = ''

-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxHorarioPersonal',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  AuxHorarioPersonalID AS ID,				AuxHorarioPersonalClave AS Clave,
				Nombre,									NombreCorto,
				0 as PadreID
		FROM    AuxHorarioPersonal
		ORDER BY AuxHorarioPersonalID
	ELSE
		SELECT  AuxHorarioPersonalID,AuxHorarioPersonalClave,EmpresaID,Nombre,NombreCorto
		FROM    AuxHorarioPersonal
		ORDER BY AuxHorarioPersonalID

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[AuxIdioma_Consultar]...';


GO


CREATE PROCEDURE [dbo].[AuxIdioma_Consultar]
@AuxIdiomaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxIdioma',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@AuxIdiomaClave_ nvarchar(10) = '',
		@Nombre_		nvarchar(60) = '',			
		@NombreCorto_	varchar(10) = '',
		@AuxIdiomaID_	int = @AuxIdiomaID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @AuxIdiomaID
	SELECT  @AuxIdiomaID_=AuxIdiomaID,		@Nombre_	=	Nombre,
			@NombreCorto_ = NombreCorto,	@AuxIdiomaClave_ = AuxIdiomaClave
	FROM    AuxIdioma
	WHERE   AuxIdiomaID = @AuxIdiomaID


	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('AuxIdiomaID::', @AuxIdiomaID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as AuxIdiomaID,					@AuxIdiomaClave_ as AuxIdiomaClave,	
			@Nombre_ as Nombre,								@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxIdioma_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[AuxIdioma_Eliminar]
@AuxIdiomaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxIdioma',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDABorrar = @AuxIdiomaID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(AuxIdiomaClave,'')
	  FROM	AuxIdioma WHERE AuxIdiomaID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    AuxIdioma
		WHERE   AuxIdiomaID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('AuxIdiomaID::', @AuxIdiomaID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[AuxIdioma_Guardar]...';


GO


CREATE PROCEDURE [dbo].[AuxIdioma_Guardar]
@AuxIdiomaID int,
@Nombre varchar(50),
@NombreCorto varchar(20),
@AuxIdiomaClave varchar(20)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxIdioma',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE		@AuxIdiomaID_ int = @AuxIdiomaID,
			@Nombre_ varchar(50) = '',
			@NombreCorto_ varchar(20) = '',
			@AuxIdiomaClave_ varchar(20) =''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @AuxIdiomaID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@AuxIdiomaClave_ = IsNull(AuxIdiomaClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@AuxIdiomaID_ = IsNull(AuxIdiomaID,0)				
		   FROM	AuxIdioma WHERE AuxIdiomaID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @AuxIdiomaID_= @ClaveNoAsignado and @AuxIdiomaClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  AuxIdioma
			SET     AuxIdiomaClave = @AuxIdiomaClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   AuxIdiomaID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO AuxIdioma(
					AuxIdiomaClave,
					Nombre,
					NombreCorto	)
			VALUES  (
					@AuxIdiomaClave,
					@Nombre,
					@NombreCorto
					)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @AuxIdiomaID > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('AuxIdiomaClave::', @AuxIdiomaClave_, ':', @AuxIdiomaClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[AuxIdioma_Listado]...';


GO


CREATE PROCEDURE [dbo].[AuxIdioma_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora			int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxIdioma',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  AuxIdiomaID,Nombre,NombreCorto, AuxIdiomaClave
	FROM    AuxIdioma
	ORDER BY AuxIdiomaClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[AuxMarca_Consultar]...';


GO


CREATE PROCEDURE [dbo].[AuxMarca_Consultar]
@AuxMarcaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxIdioma',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@AuxMarcaClave_ nvarchar(10) = '',
		@Nombre_		nvarchar(60) = '',			
		@NombreCorto_	varchar(10) = '',
		@AuxMarcaID_	int = @AuxMarcaID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @AuxMarcaID
	SELECT  @AuxMarcaID_=AuxMarcaID,		@Nombre_	=	Nombre,
			@NombreCorto_ = NombreCorto,	@AuxMarcaClave_ = AuxMarcaClave
	FROM    AuxMarca
	WHERE   AuxMarcaID = @AuxMarcaID


	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('AuxMarcaID::', @AuxMarcaID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as AuxMarcaID,					@AuxMarcaClave_ as AuxMarcaClave,	
			@Nombre_ as Nombre,								@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxMarca_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[AuxMarca_Eliminar]
@AuxMarcaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxMarca',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @AuxMarcaID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(AuxMarcaClave,'')
	  FROM	AuxMarca WHERE AuxMarcaID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    AuxMarca
		WHERE   AuxMarcaID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('MarcaID::', @AuxMarcaID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[AuxMarca_Guardar]...';


GO


CREATE PROCEDURE [dbo].[AuxMarca_Guardar]
@AuxMarcaID int,
@AuxMarcaClave varchar(4),
@Nombre varchar(25),
@NombreCorto varchar(8),
@Activo char(1)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxHorarioPersonal',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE		@AuxMarcaID_ int = @AuxMarcaID,
			@AuxMarcaClave_ varchar(4) = '',
			@Nombre_ varchar(25) = '',
			@NombreCorto_ varchar(8) = '',
			@Activo_ char(1) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @AuxMarcaID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@AuxMarcaClave_ = IsNull(AuxMarcaClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@Activo_ = IsNull(Activo,''),
				@AuxMarcaID_ = IsNull(AuxMarcaID,0)				
		   FROM	AuxMarca WHERE AuxMarcaID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @AuxMarcaClave_= @ClaveNoAsignado and @AuxMarcaClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  AuxMarca
			SET     AuxMarcaClave = @AuxMarcaClave,
					Nombre		=	@Nombre,
					NombreCorto =	@NombreCorto,
					Activo		=	@Activo
			WHERE   AuxMarcaID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO AuxMarca(
					AuxMarcaClave,
					Nombre,
					NombreCorto,
					Activo)
			VALUES  (
					@AuxMarcaClave,
					@Nombre,
					@NombreCorto,
					@Activo
					)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @AuxMarcaID > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('AuxFormaPagoClave::', @AuxMarcaClave_, ':', @AuxMarcaClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[AuxMarca_Listado]...';


GO


CREATE PROCEDURE [dbo].[AuxMarca_Listado]
	@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxFormaPago',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  AuxMarcaID AS ID,				AuxMarcaClave AS Clave,
				Nombre,							NombreCorto,
				0 AS PadreID
		FROM    AuxMarca
		ORDER BY AuxMarcaClave
	ELSE
		SELECT  AuxMarcaID,AuxMarcaClave,Nombre,NombreCorto,Activo
		FROM    AuxMarca
		ORDER BY AuxMarcaClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[AuxMedioContacto_Consultar]...';


GO


CREATE PROCEDURE [dbo].[AuxMedioContacto_Consultar]
@AuxMedioContactoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxMedioContacto',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@AuxMedioContactoClave_ nvarchar(10) = '',
		@Nombre_		nvarchar(60) = '',			
		@NombreCorto_	varchar(10) = '',
		@AuxMedioContactoID_	int = @AuxMedioContactoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @AuxMedioContactoID
	SELECT  @AuxMedioContactoID_=AuxMedioContactoID,		@Nombre_	=	Nombre,
			@NombreCorto_ = NombreCorto,					@AuxMedioContactoClave_ = AuxMedioContactoClave
	FROM    AuxMedioContacto
	WHERE   AuxMedioContactoID = @AuxMedioContactoID


	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('AuxMedioContactoID::', @AuxMedioContactoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as AuxMedioContactoID,					@AuxMedioContactoClave_ as AuxMedioContactoClave,	
			@Nombre_ as Nombre,								@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxMedioContacto_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[AuxMedioContacto_Eliminar]
@AuxMedioContactoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxMedioContacto',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @AuxMedioContactoID 
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(AuxMedioContactoClave,'')
	  FROM	AuxMedioContacto WHERE AuxMedioContactoID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    AuxMedioContacto
		WHERE   AuxMedioContactoID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('AuxMedioContactoID::', @IDABorrar, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[AuxMedioContacto_Guardar]...';


GO


CREATE PROCEDURE [dbo].[AuxMedioContacto_Guardar]
@AuxMedioContactoID int,
@AuxMedioContactoClave smallint,
@Nombre varchar(30),
@NombreCorto varchar(10)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxMedioContacto',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE		@AuxMedioContactoID_ int = @AuxMedioContactoID,
			@Nombre_ varchar(50) = '',
			@NombreCorto_ varchar(20) = '',
			@AuxMedioContactoClave_ varchar(20) =''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @AuxMedioContactoID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@AuxMedioContactoClave_ = IsNull(AuxMedioContactoClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@AuxMedioContactoID_ = IsNull(AuxMedioContactoID,0)				
		   FROM	AuxMedioContacto WHERE AuxMedioContactoID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @AuxMedioContactoClave_= @ClaveNoAsignado and @AuxMedioContactoClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  AuxMedioContacto
			SET     AuxMedioContactoClave = @AuxMedioContactoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   AuxMedioContactoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO AuxMedioContacto(
					AuxMedioContactoClave,
					Nombre,
					NombreCorto	)
			VALUES  (
					@AuxMedioContactoClave,
					@Nombre,
					@NombreCorto
					)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @AuxMedioContactoID > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('AuxMedioContactoClave::', @AuxMedioContactoClave_, ':', @AuxMedioContactoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[AuxMedioContacto_Listado]...';


GO


CREATE PROCEDURE [dbo].[AuxMedioContacto_Listado]
@TipoListado varchar(10)
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase		int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxMedioContacto',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  AuxMedioContactoID AS ID,			AuxMedioContactoClave AS Clave,
				Nombre,								NombreCorto,
				0 as PadreID
		FROM    AuxMedioContacto
		ORDER BY AuxMedioContactoClave
	ELSE
		SELECT  AuxMedioContactoID,AuxMedioContactoClave,Nombre,NombreCorto
		FROM    AuxMedioContacto
		ORDER BY AuxMedioContactoClave
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[AuxProfesion_Consultar]...';


GO


CREATE PROCEDURE [dbo].[AuxProfesion_Consultar]
@AuxProfesionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxProfesionID',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@AuxProfesionClave_ nvarchar(10) = '',
		@Nombre_		nvarchar(60) = '',			
		@NombreCorto_	varchar(10) = '',
		@AuxProfesionID_	int = @AuxProfesionID,
		@Tratamiento_ nvarchar(10) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @AuxProfesionID
	SELECT  @AuxProfesionID_=AuxProfesionID,		@Nombre_	=	Nombre,
			@NombreCorto_ = NombreCorto,	@AuxProfesionClave_ = AuxProfesionClave
	FROM    AuxProfesion
	WHERE   AuxProfesionID = @AuxProfesionID


	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('AuxProfesionID::', @AuxProfesionID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as AuxProfesionID,					@AuxProfesionClave_ as AuxIdiomaClave,	
			@Nombre_ as Nombre,								@NombreCorto_ as NombreCorto,
			@Tratamiento_ as Tratamiento
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxProfesion_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[AuxProfesion_Eliminar]
@AuxProfesionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxProfesion',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @AuxProfesionID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(AuxProfesionClave,'')
	  FROM	AuxProfesion WHERE AuxProfesionID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    AuxProfesion
		WHERE   AuxProfesionID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('AuxProfesionID::', @AuxProfesionID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[AuxProfesion_Guardar]...';


GO


CREATE PROCEDURE [dbo].[AuxProfesion_Guardar]
@AuxProfesionID int,
@AuxProfesionClave varchar(8),
@Nombre varchar(60),
@NombreCorto varchar(20),
@Tratamiento varchar(6)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxProfesion',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE		@AuxProfesionID_ int = @AuxProfesionID,
			@AuxProfesionClave_ varchar(8) = '',
			@Nombre_ varchar(60) = '',
			@NombreCorto_ varchar(20) = '',
			@Tratamiento_ varchar(6) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @AuxProfesionID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@AuxProfesionClave_ = IsNull(AuxProfesionClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@AuxProfesionID_ = IsNull(AuxProfesionID,0)	,
				@Tratamiento_ = ISNULL(Tratamiento, '')
		   FROM	AuxProfesion WHERE AuxProfesionID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @AuxProfesionClave_= @ClaveNoAsignado and @AuxProfesionClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  AuxProfesion
			SET     AuxProfesionClave = @AuxProfesionClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					Tratamiento = @Tratamiento
			WHERE   AuxProfesionID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO AuxProfesion(
					AuxProfesionClave,
					Nombre,
					NombreCorto,
					Tratamiento)
			VALUES  (
					@AuxProfesionClave,
					@Nombre,
					@NombreCorto,
					@Tratamiento
					)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @AuxProfesionID > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('AuxProfesionClave::', @AuxProfesionClave_, ':', @AuxProfesionClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxProfesion_Listado]...';


GO
CREATE PROCEDURE [dbo].[AuxProfesion_Listado]
@TipoListado varchar(10) = ''

-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxProfesionPago',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  AuxProfesionID AS ID,					AuxProfesionClave AS Clave,
				Nombre,									NombreCorto,
				0 AS PadreID
		FROM    AuxProfesion
		ORDER BY AuxProfesionClave
	ELSE
		SELECT  AuxProfesionID,AuxProfesionClave,Nombre,NombreCorto,Tratamiento
		FROM    AuxProfesion
		ORDER BY AuxProfesionClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[AuxPuesto_Consultar]...';


GO


CREATE PROCEDURE [dbo].[AuxPuesto_Consultar]
@AuxPuestoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxPuesto',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@AuxPuestoClave_	nvarchar(60) = '',					@Nombre_			varchar(10) = '',
		@NombreCorto_		varchar(10) = '',					@Sueldo_			money = 0,
		@BaseNeto_			char(1) = '',						@Tipo_				char(1) = '',
		@Objetivo_			nvarchar(250) = '',					@ReqAcademicos_		nvarchar(100) = '',
		@TiempoDesempeno_	tinyint = 0,						@EmpresaID_			int = 0,
		@AuxPuestoID_		int = @AuxPuestoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @AuxPuestoID
	SELECT  @AuxPuestoID_ = AuxPuestoID,@AuxPuestoClave_ = AuxPuestoClave,@Nombre_ = Nombre,@NombreCorto_ = NombreCorto,
			@Sueldo_ = Sueldo,@BaseNeto_ = BaseNeto,@Tipo_ = Tipo,@Objetivo_ = Objetivo,@ReqAcademicos_ = ReqAcademicos,@TiempoDesempeno_ = TiempoDesempeno,@EmpresaID_	 = EmpresaID
	FROM    AuxPuesto
	WHERE   AuxPuestoID = @AuxPuestoID


	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('AuxPuestoID::', @AuxPuestoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as AuxPuestoID,	@AuxPuestoClave_ as AuxPuestoClave,	@Nombre_ as Nombre,@NombreCorto_ as NombreCorto,
			@Sueldo_ as Sueldo,				@BaseNeto_ as BaseNeto,				@Tipo_ as Tipo,
			@Objetivo_ as Objetivo,			@ReqAcademicos_ as ReqAcademicos,	@TiempoDesempeno_ as TiempoDesempeno,
			@EmpresaID_ as EmpresaID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxPuesto_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[AuxPuesto_Eliminar]
@AuxPuestoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxPuesto',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @AuxPuestoID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(AuxPuestoClave,'')
	  FROM	AuxPuesto WHERE AuxPuestoID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    AuxPuesto
		WHERE   AuxPuestoID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('AuxPuestoID::', @AuxPuestoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[AuxPuesto_Guardar]...';


GO


CREATE PROCEDURE [dbo].[AuxPuesto_Guardar]
@PuestoID int,
@PuestoClave varchar(8),
@Nombre varchar(60),
@NombreCorto varchar(20),
@Sueldo money,
@BaseNeto char(1),
@Tipo char(1),
@Objetivo varchar(250),
@ReqAcademicos varchar(100),
@TiempoDesempeno tinyint,
@EmpresaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxPuesto',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE		@AuxPuestoID_ int = @PuestoID,
			@AuxPuestoClave_ varchar(8) = '',
			@Nombre_ varchar(60) = '',
			@NombreCorto_ varchar(20) = '',
			@Sueldo_ money = 0,
			@BaseNeto_ char(1) = '',
			@Tipo_ char(1) = '',
			@Objetivo_ varchar(250) = '',
			@ReqAcademicos_ varchar(100) = '',
			@TiempoDesempeno_ tinyint = 0,
			@EmpresaID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PuestoID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@AuxPuestoClave_ = IsNull(AuxPuestoClave,''),
	 			@AuxPuestoID_ = IsNull(AuxPuestoID,''),
				@Nombre_= IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@Sueldo_ = IsNull(Sueldo,''),
				@BaseNeto_ = IsNull(BaseNeto,''),
				@Tipo_  = IsNull(Tipo,''),
				@Objetivo_ = IsNull(Objetivo,''),
				@ReqAcademicos_  = IsNull(ReqAcademicos,''),
				@TiempoDesempeno_  = IsNull(TiempoDesempeno,''),
				@EmpresaID_ = IsNull(EmpresaID,'')			
		   FROM	AuxPuesto WHERE AuxPuestoID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @AuxPuestoClave_= @ClaveNoAsignado and @PuestoClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  AuxPuesto
			SET     AuxPuestoClave=@PuestoClave,			Nombre=@Nombre,				
					NombreCorto=@NombreCorto,				Sueldo=@Sueldo,
					BaseNeto=@BaseNeto,						Tipo=@Tipo,
					Objetivo=@Objetivo,						ReqAcademicos=@ReqAcademicos,
					TiempoDesempeno=@TiempoDesempeno,		EmpresaID=@EmpresaID
			WHERE   AuxPuestoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO AuxPuesto(
					AuxPuestoClave,
					Nombre,
					NombreCorto,
					Sueldo,
					BaseNeto,
					Tipo,
					Objetivo,
					ReqAcademicos,
					TiempoDesempeno,
					EmpresaID	)
			VALUES  (
					@PuestoClave,
					@Nombre,
					@NombreCorto,
					@Sueldo,
					@BaseNeto,
					@Tipo,
					@Objetivo,
					@ReqAcademicos,
					@TiempoDesempeno,
					@EmpresaID
					)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PuestoID > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('AuxFormaPagoClave::', @AuxPuestoClave_, ':', @PuestoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxPuesto_Listado]...';


GO
CREATE PROCEDURE [dbo].[AuxPuesto_Listado]
@TipoListado varchar(10) = ''

-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxPuesto',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  AuxPuestoID AS ID,					AuxPuestoClave AS Clave,
				Nombre,								NombreCorto,
				0 AS PadreID
		FROM    AuxPuesto
		ORDER BY AuxPuestoClave
	ELSE
		SELECT  AuxPuestoID,AuxPuestoClave,Nombre,NombreCorto,Sueldo,BaseNeto,Tipo,Objetivo,ReqAcademicos,TiempoDesempeno,EmpresaID
		FROM    AuxPuesto
		ORDER BY AuxPuestoClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[AuxReligion_Consultar]...';


GO
CREATE PROCEDURE [dbo].[AuxReligion_Consultar]
@AuxReligionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora		nvarchar(100) = 'AuxReligion',	
		@Operacion					nvarchar(20) = 'Read', 
		@logMessage					varchar(Max) = '',
		@isChangeBeLogged			bit
-- Variables para valores de columnas
DECLARE	@ReligionClave_ nvarchar(5) = '',
		@Nombre_ nvarchar(50) = '',			
		@NombreCorto_ varchar(12) = '',
		@EmpresaID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @AuxReligionID

	SELECT  @ReligionClave_ = AuxReligionClave,	@Nombre_ = Nombre,		@NombreCorto_ = NombreCorto

	FROM    AuxReligion
	WHERE   AuxReligionID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('AuxReligionID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as AuxReligionID, @ReligionClave_ as AreaClave,	@Nombre_ as Nombre,		@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxReligion_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[AuxReligion_Eliminar]
@AuxReligionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxReligion',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @AuxReligionID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(AuxReligionClave,'')
	  FROM	AuxReligion WHERE AuxReligionID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    AuxReligion
		WHERE   AuxReligionID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('AuxReligionID::', @AuxReligionID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @AuxReligionID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[AuxReligion_Guardar]...';


GO
CREATE PROCEDURE [dbo].[AuxReligion_Guardar]
@AuxReligionID int,
@AuxReligionClave varchar(5) = null,
@Nombre varchar(50) = null,
@NombreCorto varchar(12) = null
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxReligion',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@ReligionClave_ nvarchar(5) = '',
		@Nombre_ nvarchar(50) = '',			
		@NombreCorto_ varchar(12) = '',
		@ReligionID_ int = @AuxReligionID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @AuxReligionID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@ReligionClave_ = IsNull(AuxReligionClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@ReligionID_ = IsNull(AuxReligionID,0)
		   FROM	AuxReligion WHERE AuxReligionID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @ReligionClave_ = @ClaveNoAsignado and @AuxReligionClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  AuxReligion
			SET     AuxReligionClave = @AuxReligionClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   AuxReligionID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO AuxReligion(
					AuxReligionClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@AuxReligionClave,
					@Nombre,
					@NombreCorto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @ReligionID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('ReligionClave::', @ReligionClave_, ':', @AuxReligionClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxReligion_Listado]...';


GO
CREATE PROCEDURE [dbo].[AuxReligion_Listado]

@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxReligion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  AuxReligionID AS ID,					AuxReligionClave AS Clave,
				Nombre,									NombreCorto,
				0 as PadreID
		FROM    AuxReligion
		ORDER BY AuxReligionClave
	ELSE
		SELECT  AuxReligionID,AuxReligionClave,Nombre,NombreCorto
		FROM    AuxReligion
		ORDER BY AuxReligionClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[AuxUnidad_Consultar]...';


GO


CREATE PROCEDURE [dbo].[AuxUnidad_Consultar]
@AuxUnidadID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora		nvarchar(100) = 'AuxUnidad',	
		@Operacion					nvarchar(20) = 'Read', 
		@logMessage					varchar(Max) = '',
		@isChangeBeLogged			bit
-- Variables para valores de columnas
DECLARE	@AuxUnidadClave_	nvarchar(5) = '',
		@Nombre_			nvarchar(50) = '',			
		@NombreCorto_		varchar(12) = '',
		@AuxUnidadID_		int = 0,
		@Estatus_			char(1) = ''	

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @AuxUnidadID

	SELECT  @AuxUnidadClave_ = AuxUnidadClave,	@Nombre_ = Nombre,		@NombreCorto_ = NombreCorto, @Estatus_ = Estatus

	FROM    AuxUnidad
	WHERE   AuxUnidadID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('AuxUnidadID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar]		 @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @AuxUnidadClave_ as AuxUnidadClave,	@Nombre_ as Nombre,		@NombreCorto_ as NombreCorto, @Estatus_ as Estatus, @IDAConsultar as AuxUnidadID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxUnidad_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[AuxUnidad_Eliminar]
@AuxUnidadID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxUnidad',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDABorrar = @AuxUnidadID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(AuxUnidadClave,'')
	  FROM	AuxUnidad WHERE AuxUnidadID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    AuxUnidad
		WHERE   AuxUnidadID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('AuxUnidadID::', @AuxUnidadID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[AuxUnidad_Guardar]...';


GO


CREATE PROCEDURE [dbo].[AuxUnidad_Guardar]
@AuxUnidadID int,
@AuxUnidadClave varchar(5),
@Nombre varchar(25),
@NombreCorto varchar(8),
@Estatus char(1)
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxUnidad',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@AuxUnidadClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@AuxUnidadID_ int = @AuxUnidadID,
		@Estatus_ char(1) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @AuxUnidadID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@AuxUnidadClave_ = IsNull(AuxUnidadClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@AuxUnidadID_ = IsNull(AuxUnidadID,0),
				@Estatus_ = ISNULL(Estatus,'')
		   FROM	AuxUnidad WHERE AuxUnidadID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @AuxUnidadClave_ = @ClaveNoAsignado and @AuxUnidadClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  AuxUnidad
			SET     AuxUnidadClave = @AuxUnidadClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					Estatus = @Estatus
			WHERE   AuxUnidadID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO AuxUnidad(
					AuxUnidadClave,
					Nombre,
					NombreCorto,
					Estatus)
			VALUES  (
					@AuxUnidadClave,
					@Nombre,
					@NombreCorto,
					@Estatus)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @AuxUnidadID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('AuxUnidadClave::', @AuxUnidadClave_, ':', @AuxUnidadClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[AuxUnidad_Listado]...';


GO

CREATE PROCEDURE [dbo].[AuxUnidad_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxUnidad',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  AuxUnidadID AS ID,			AuxUnidadClave AS Clave,			Nombre,
				NombreCorto,				0 as PadreID
		FROM    AuxUnidad
		WHERE	Estatus <> 'B'
		ORDER BY AuxUnidadClave
	ELSE
		SELECT  AuxUnidadID,AuxUnidadClave,Nombre,NombreCorto, Estatus
		FROM    AuxUnidad
		WHERE	Estatus <> 'B'
		ORDER BY AuxUnidadClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[AuxVinculo_Consultar]...';


GO


CREATE PROCEDURE [dbo].[AuxVinculo_Consultar]
@AuxVinculoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxVinculo',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@AuxVinculoClave_ nvarchar(10) = '',
		@Nombre_		nvarchar(60) = '',			
		@NombreCorto_	varchar(10) = '',
		@AuxVinculoID_	int = @AuxVinculoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @AuxVinculoID
	SELECT  @AuxVinculoID_=AuxVinculoID,	@Nombre_	=	Nombre,
			@NombreCorto_ = NombreCorto,	@AuxVinculoClave_ = AuxVinculoClave
	FROM    AuxVinculo
	WHERE   AuxVinculoID = @AuxVinculoID


	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('AuxVinculoID::', @AuxVinculoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as AuxVinculoID,					@AuxVinculoClave_ as AuxVinculoClave,	
			@Nombre_ as Nombre,								@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxVinculo_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[AuxVinculo_Eliminar]
@AuxVinculoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxVinculo',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @AuxVinculoID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(AuxVinculoClave,'')
	  FROM	AuxVinculo WHERE AuxVinculoID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    AuxVinculo
		WHERE   AuxVinculoID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('AuxVinculoID::', @AuxVinculoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[AuxVinculo_Guardar]...';


GO


CREATE PROCEDURE [dbo].[AuxVinculo_Guardar]
@AuxVinculoID int,
@AuxVinculoClave varchar(10),
@Nombre varchar(40),
@NombreCorto varchar(15)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxVinculo',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE		@AuxVinculoID_ int = @AuxVinculoID,
			@Nombre_ varchar(50) = '',
			@NombreCorto_ varchar(20) = '',
			@AuxVinculoClave_ varchar(20) =''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @AuxVinculoID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT		@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@AuxVinculoClave_ = IsNull(AuxVinculoClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@AuxVinculoID_ = IsNull(AuxVinculoID,0)				
		   FROM	AuxVinculo WHERE AuxVinculoID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @AuxVinculoClave_= @ClaveNoAsignado and @AuxVinculoClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  AuxVinculo
			SET     AuxVinculoClave = @AuxVinculoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   AuxVinculoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO AuxVinculo(
					AuxVinculoClave,
					Nombre,
					NombreCorto	)
			VALUES  (
					@AuxVinculoClave,
					@Nombre,
					@NombreCorto
					)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @AuxVinculoID > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('AuxVinculoClave::', @AuxVinculoClave_, ':', @AuxVinculoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxVinculo_Listado]...';


GO


CREATE PROCEDURE [dbo].[AuxVinculo_Listado]
	@TipoListado varchar(10) = ''

-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxVinculo',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  AuxVinculoID AS ID,				AuxVinculoClave AS Clave,
				Nombre,							NombreCorto,
				0 AS PadreID
		FROM    AuxVinculo
		ORDER BY AuxVinculoClave
	ELSE
		SELECT  AuxVinculoID,AuxVinculoClave,Nombre,NombreCorto
		FROM    AuxVinculo
		ORDER BY AuxVinculoClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[AuxZona_Consultar]...';


GO


CREATE PROCEDURE [dbo].[AuxZona_Consultar]
@AuxZonaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxZona',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@AuxZonaClave_ nvarchar(10) = '',
		@Nombre_		nvarchar(60) = '',			
		@NombreCorto_	varchar(10) = '',
		@AuxZonaID_	int = @AuxZonaID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @AuxZonaID
	SELECT  @AuxZonaID_=AuxZonaID,		@Nombre_	=	Nombre,
			@NombreCorto_ = NombreCorto,	@AuxZonaClave_ = AuxZonaClave
	FROM    AuxZona
	WHERE   AuxZonaID = @AuxZonaID


	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('AuxZonaID::', @AuxZonaID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as AuxZonaID,		@Nombre_	as	Nombre,
			@NombreCorto_ as NombreCorto,	@AuxZonaClave_ as AuxZonaClave
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxZona_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[AuxZona_Eliminar]
@AuxZonaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'AuxZona',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @AuxZonaID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(AuxZonaClave,'')
	  FROM	AuxZona WHERE AuxZonaID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    AuxZona
		WHERE   AuxZonaID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('AuxZonaID::', @AuxZonaID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[AuxZona_Guardar]...';


GO
CREATE PROCEDURE [dbo].[AuxZona_Guardar]
@AuxZonaID int,
@AuxZonaClave varchar(5),
@Nombre varchar(50),
@NombreCorto varchar(20)

-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxZona',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE		@AuxZonaID_ int = @AuxZonaID,
			@Nombre_ varchar(50) = '',
			@NombreCorto_ varchar(20) = '',
			@AuxZonaClave_ varchar(20) =''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @AuxZonaID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@AuxZonaClave_ = IsNull(AuxZonaClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@AuxZonaID_ = IsNull(AuxZonaID,0)				
		   FROM	AuxZona WHERE AuxZonaID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @AuxZonaClave_= @ClaveNoAsignado and @AuxZonaClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  AuxZona
			SET     AuxZonaClave = @AuxZonaClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   AuxZonaID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO AuxZona(
					AuxZonaClave,
					Nombre,
					NombreCorto	)
			VALUES  (
					@AuxZonaClave,
					@Nombre,
					@NombreCorto
					)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @AuxZonaID > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('AuxZonaClave::', @AuxZonaClave_, ':', @AuxZonaClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[AuxZona_Listado]...';


GO
CREATE PROCEDURE [dbo].[AuxZona_Listado]
@TipoListado varchar(10) = ''

-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'AuxZona',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  AuxZonaID AS ID,						AuxZonaClave AS Clave,
				Nombre,									NombreCorto,
				0 as PadreID
		FROM    AuxZona
		ORDER BY AuxZonaClave
	ELSE
		SELECT  AuxZonaID,AuxZonaClave,Nombre,NombreCorto
		FROM    AuxZona
		ORDER BY AuxZonaClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[BcoCuenta_Consultar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[BcoCuenta_Consultar]
@BcoCuentaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@Descripcion		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'BcoCuenta',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @BcoCuentaID
	SELECT  BcoCuentaID, BcoSucursalID, Clabe, Cuenta, Tarjeta
	FROM    BcoCuenta
	WHERE   BcoCuentaID = @IDAConsultar
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('BcoCuentaID::', @BcoCuentaID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @BcoCuentaID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @Descripcion
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
				END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[BcoCuenta_Eliminar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[BcoCuenta_Eliminar]
@BcoCuentaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@Descripcion		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'BcoCuenta',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @BcoCuentaID
    DELETE
    FROM    BcoCuenta
    WHERE   BcoCuentaID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('BcoCuentaID::', @BcoCuentaID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @Descripcion
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
	/********************* FIN COPY 2  *********************************/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[BcoCuenta_Guardar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[BcoCuenta_Guardar]
@BcoCuentaID int,
@BcoSucursalID int,
@Clabe decimal(18,0),
@Cuenta decimal(18,0),
@Tarjeta decimal(16,0)
-- Parámetros para Bitácora
	,@UsuarioIBitacora			int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpAnticipoDetalle',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@BcoCuentaID_ int = @BcoCuentaID,
		@BcoSucursalID_ int = 0,
		@Clabe_ decimal(18,0) = 0,
		@Cuenta_ decimal(18,0) = 0,
		@Tarjeta_ decimal(16,0) = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @BcoCuentaID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@BcoCuentaID_ = IsNull(BcoCuentaID,0),
				@BcoSucursalID_  = IsNull(BcoSucursalID,0),
				@Clabe_		  = IsNull(Clabe,0),
				@Cuenta_	  = IsNull(Cuenta, 0),
				@Tarjeta_	  = IsNull(Tarjeta,0)
		   FROM	BcoCuenta WHERE BcoCuentaID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE	BcoCuenta
			SET		BcoSucursalID = @BcoSucursalID,
					Clabe = @Clabe,
					Cuenta = @Cuenta,
					Tarjeta = @Tarjeta
			WHERE	BcoCuentaID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO BcoCuenta(
					BcoSucursalID,
					Clabe,
					Cuenta,
					Tarjeta)
			VALUES  (
				    @BcoSucursalID,
					@Clabe,
					@Cuenta,
					@Tarjeta)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @BcoCuentaID > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('BcoSucursalID::', @BcoSucursalID_, ':', @BcoSucursalID, ';')
				SET @logMessage = Concat(@logMessage, 'Clabe::', @Clabe_, ':', @Clabe, ';')
				SET @logMessage = Concat(@logMessage, 'Cuenta::', @Cuenta_, ':', @Cuenta, ';')
				SET @logMessage = Concat(@logMessage, 'Tarjeta::', @Tarjeta_, ':', @Tarjeta, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[BcoCuenta_Listado]...';


GO
CREATE PROCEDURE [dbo].[BcoCuenta_Listado]
@TipoListado varchar(10) = ''
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'BcoCuenta',	
		@Operacion				 nvarchar(20) = 'List', 
		@logMessage				 varchar(Max) = '',
		@isChangeBeLogged		 bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	IF @TipoListado = 'Minimo'
		SELECT  BcoCuentaID AS ID,				CAST(Cuenta as varchar(18)) AS Clave,
				AB.NombreCorto + '/' + BS.NombreCorto + '/' + CAST(Cuenta as varchar(18)) AS Nombre,
				BS.NombreCorto,					BC.BcoSucursalID as PadreID
		FROM    BcoCuenta BC
		LEFT OUTER JOIN BcoSucursal BS ON BC.BcoSucursalID = BS.BcoSucursalID
		LEFT OUTER JOIN AuxBanco AB ON BS.AuxBancoID = AB.AuxBancoID
		ORDER BY Cuenta
	ELSE 
		SELECT  BcoCuentaID,					Cuenta,						Clabe,
				Tarjeta,						BcoSucursalID
		FROM    BcoCuenta
		ORDER BY Cuenta
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[BcoMovimiento_Consultar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[BcoMovimiento_Consultar]
@BcoMovimientoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@Descripcion		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'BcoMovimiento',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @BcoMovimientoID
	SELECT  BcoMovimientoID,					PpalSerieID,						Folio,
			PpalPersonalID,						Fecha,								Referencia,
			Concepto,							Importe,							BcoTipoMovimientoID,
			BcoCuentaID,						AuxFormaPagoID
	FROM    BcoMovimiento
	WHERE   BcoMovimientoID = @IDAConsultar
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('BcoMovimientoID::', @BcoMovimientoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @BcoMovimientoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @Descripcion
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
				END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[BcoMovimiento_Eliminar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[BcoMovimiento_Eliminar]
@BcoMovimientoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@Descripcion		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'BcoMovimiento',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @BcoMovimientoID
    DELETE
    FROM    BcoMovimiento
    WHERE   BcoMovimientoID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('BcoMovimientoID::', @BcoMovimientoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @Descripcion
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
	/********************* FIN COPY 2  *********************************/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[BcoMovimiento_Guardar]...';


GO

CREATE PROCEDURE [dbo].[BcoMovimiento_Guardar]
@BcoMovimientoID int,
@PpalSerieID int,
@Folio int,
@PpalPersonalID int,
@Fecha datetime,
@Referencia varchar(50),
@Concepto  varchar(100),
@Importe   float,
@BcoTipoMovimientoID int,
@BcoCuentaID int,
@AuxFormaPagoID int
-- Parámetros para Bitácora
	,@UsuarioIBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'BcoMovimiento',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@BcoMovimientoID_ int = @BcoMovimientoID,
		@PpalSerieID_ int = 0,
		@Folio_ int = 0,
		@PpalPersonalID_ int = 0,
		@Fecha_ datetime = 0,
		@Referencia_ varchar(50) = '',
		@Concepto_  varchar(100) = '',
		@Importe_   float = 0,
		@BcoTipoMovimientoID_ int = 0,
		@BcoCuentaID_ int = 0,
		@AuxFormaPagoID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @BcoMovimientoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@BcoMovimientoID_ =			IsNull(BcoMovimientoID,0),
				@PpalSerieID_  =			IsNull(PpalSerieID,0),
				@Folio_ =					IsNull(Folio,0),
				@PpalPersonalID_ =			IsNull(PpalPersonalID, 0),
				@Fecha_ =					IsNull(Fecha,0),
				@Referencia_ =				ISNull(Referencia, ''),
				@Concepto_ =				IsNull(Concepto, ''),
				@Importe_ =					ISNULL(Importe, 0.0),
				@BcoTipoMovimientoID_ =	ISNULL(BcoTipoMovimientoID, 0),
				@BcoCuentaID =			ISNULL(@BcoCuentaID, 0) ,
				@AuxFormaPagoID =		ISNULL(@AuxFormaPagoID, 0)
		   FROM	BcoMovimiento WHERE BcoMovimientoID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE	BcoMovimiento
			SET		PpalSerieID			= @PpalSerieID,
					Folio				= @Folio,
					PpalPersonalID		= @PpalPersonalID,
					Fecha				= @Fecha,
					Referencia			= @Referencia,
					Concepto			= @Concepto,
					Importe				= @Importe,
					BcoTipoMovimientoID	= @BcoTipoMovimientoID,
					BcoCuentaID			= @BcoCuentaID,
					AuxFormaPagoID		= @AuxFormaPagoID
			WHERE	BcoMovimientoID	    = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO BcoMovimiento(
					PpalSerieID,
					Folio,
					PpalPersonalID,
					Fecha,
					Referencia,
					Concepto,
					Importe,
					BcoTipoMovimientoID,
					BcoCuentaID,
					AuxFormaPagoID)
			VALUES  (
				    @PpalSerieID,
					@Folio,
					@PpalPersonalID,
					@Fecha,
					@Referencia,
					@Concepto,
					@Importe,
					@BcoTipoMovimientoID,
					@BcoCuentaID,
					@AuxFormaPagoID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @BcoMovimientoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('BcoMovimientoID::', @BcoMovimientoID_, ':', @BcoMovimientoID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalSerieID::', @PpalSerieID_, ':', @PpalSerieID, ';')
				SET @logMessage = Concat(@logMessage, 'Folio::', @Folio_, ':', @Folio, ';')
				SET @logMessage = Concat(@logMessage, 'PpalPersonalID::', @PpalPersonalID_, ':', @PpalPersonalID, ';')
				SET @logMessage = Concat(@logMessage, 'Fecha::', @Fecha_, ':', @Fecha, ';')
				SET @logMessage = Concat(@logMessage, 'Referencia::', @Referencia_, ':', @Referencia, ';')
				SET @logMessage = Concat(@logMessage, 'Concepto::', @Concepto_, ':', @Concepto, ';')
				SET @logMessage = Concat(@logMessage, 'Importe::', @Importe_, ':', @Importe, ';')
				SET @logMessage = Concat(@logMessage, 'BcoTipoMovimientoID::', @BcoTipoMovimientoID_, ':', @BcoTipoMovimientoID, ';')
				SET @logMessage = Concat(@logMessage, 'BcoCuentaID::', @BcoCuentaID_, ':', @BcoCuentaID, ';')
				SET @logMessage = Concat(@logMessage, 'AuxFormaPagoID::', @AuxFormaPagoID_, ':', @AuxFormaPagoID, ';')
				
				
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[BcoMovimiento_Listado]...';


GO
CREATE PROCEDURE [dbo].[BcoMovimiento_Listado]
@TipoListado varchar(10) = ''
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'BcoMovimiento',	
		@Operacion				 nvarchar(20) = 'List', 
		@logMessage				 varchar(Max) = '',
		@isChangeBeLogged		 bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	IF @TipoListado = 'Minimo'
		SELECT  BcoMovimientoID AS ID,	'' AS Clave,		'' as Nombre, 
				'' as NombreCorto,		0 AS PadreID
		FROM    BcoMovimiento
	ELSE 
		SELECT  *
		FROM    BcoMovimiento
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[BcoMovimiento_ListadoParametros]...';


GO


CREATE PROCEDURE [dbo].[BcoMovimiento_ListadoParametros]
@FechaInicial DateTime,
@FechaFinal DateTime,
@PpalProveedorID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'BcoMovimiento',	
		@Operacion	nvarchar(20) = 'lIST', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT	BM.BcoMovimientoID,				PS.PpalSerieClave,				BM.Folio,
			EP.Nombre + ' ' + EP.ApellidoPaterno + ' ' + EP.ApellidoMaterno AS PersonalNombre,
			BM.Fecha,						BM.Importe,						BC.Cuenta
	  FROM	BcoMovimiento BM
	  LEFT OUTER JOIN PpalSerie PS ON BM.PpalSerieID = PS.PpalSerieID
	  LEFT OUTER JOIN PpalPersonal PP ON BM.PpalPersonalID = PP.PpalPersonalID
	  LEFT OUTER JOIN EspPersona EP ON PP.EspPersonaID = EP.EspPersonaID
	  LEFT OUTER JOIN BcoCuenta BC ON BM.BcoCuentaID = BC.BcoCuentaID
	 WHERE BM.Fecha BETWEEN @FechaInicial AND @FechaFinal
	ORDER BY BM.Fecha,	PS.PpalSerieClave,  BM.Folio

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('FechaInicial::', @FechaInicial, ':',0, ';')
		SET @logMessage =  Concat('FechaFinal::', @FechaFinal, ':',0, ';')
		SET @logMessage =  Concat('PpalProveedorID::', @PpalProveedorID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[BcoSucursal_Consultar]...';


GO
CREATE PROCEDURE [dbo].[BcoSucursal_Consultar]
@BcoSucursalID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'BcoSucursal',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@BcoSucursalClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@AuxBancoID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @BcoSucursalID
	/************* FIN COPY 1  *********************/
	SELECT  @BcoSucursalClave_ = BcoSucursalClave,	@Nombre_ = Nombre,		@NombreCorto_ = NombreCorto,
			@AuxBancoID_ = AuxBancoID,				@AuxBancoID_ = AuxBancoID
	FROM    BcoSucursal
	WHERE   BcoSucursalID = @IDAConsultar

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('BcoSucursalID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as BcoSucursalID,					@BcoSucursalClave_ as BcoSucursalClave,			
			@Nombre_ as Nombre,								@NombreCorto_ as NombreCorto,
			@AuxBancoID_ as AuxBancoID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[BcoSucursal_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[BcoSucursal_Eliminar]
@BcoSucursalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'BcoSucursal',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @BcoSucursalID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(BcoSucursalClave,'')
	  FROM	BcoSucursal WHERE BcoSucursalID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    BcoSucursal
		WHERE   BcoSucursalID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('BcoSucursalID::', @BcoSucursalID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @BcoSucursalID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[BcoSucursal_Guardar]...';


GO
CREATE PROCEDURE [dbo].[BcoSucursal_Guardar]
@BcoSucursalID int,
@BcoSucursalClave varchar(10) = null,
@AuxBancoID int,
@Nombre varchar(60) = null,
@NombreCorto varchar(10) = null
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'BcoSucursal',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@BcoSucursalClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@AuxBancoID_ int = 0,
		@BcoSucursalID_ int = @BcoSucursalID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @BcoSucursalID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@BcoSucursalClave_ = IsNull(BcoSucursalClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@AuxBancoID_ = IsNull(AuxBancoID,0),
				@BcoSucursalID_ = IsNull(BcoSucursalID,0)
		   FROM	BcoSucursal WHERE BcoSucursalID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @BcoSucursalClave_ = @ClaveNoAsignado and @BcoSucursalClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  BcoSucursal
			SET     BcoSucursalClave = @BcoSucursalClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					AuxBancoID = @AuxBancoID
			WHERE   BcoSucursalID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO BcoSucursal(
					BcoSucursalClave,
					Nombre,
					NombreCorto,
					AuxBancoID)
			VALUES  (
					@BcoSucursalClave,
					@Nombre,
					@NombreCorto,
					@AuxBancoID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @BcoSucursalID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('BcoSucursalClave::', @BcoSucursalClave_, ':', @BcoSucursalClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'AuxBancoID::', @AuxBancoID_, ':', @AuxBancoID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[BcoSucursal_Listado]...';


GO
CREATE PROCEDURE [dbo].[BcoSucursal_Listado]
@AuxBancoID int = 0,
@TipoListado varchar(10) = ''
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'BcoSucursal',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaID::', @EmpresaIDSolicitudBase, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
/************* FIN COPY 1  *********************/
	IF @TipoListado = 'Minimo'
		SELECT  BS.BcoSucursalID AS ID,	BS.BcoSucursalClave AS Clave,		AB.NombreCorto + '/' + BS.Nombre as Nombre, 
				AB.NombreCorto + '/' + BS.NombreCorto AS NombreCorto,			BS.AuxBancoID AS PadreID
		FROM    BcoSucursal BS
		LEFT OUTER JOIN AuxBanco AB ON BS.AuxBancoID = AB.AuxBancoID
--		WHERE	AuxBancoID = @AuxBancoID
		ORDER BY BcoSucursalClave
	ELSE 
		SELECT  BcoSucursalID, BcoSucursalClave, Nombre, NombreCorto,  AuxBancoID
		FROM    BcoSucursal
--		WHERE	EmpresaID = @EmpresaIDSolicitudBase
		ORDER BY BcoSucursalClave

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[BcoTipoMovimiento_Consultar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[BcoTipoMovimiento_Consultar]
@BcoTipoMovimientoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora		nvarchar(100) = 'BcoTipoMovimiento',	
		@Operacion					nvarchar(20) = 'Read', 
		@logMessage					varchar(Max) = '',
		@isChangeBeLogged			bit

-- Variables para valores de columnas
DECLARE	@BcoTipoMOvimientoID_ int = @BcoTipoMovimientoID,
		@BcoTipoMovimientoClave_		nvarchar(10) = '',
		@Nombre_			nvarchar(60) = '',			
		@NombreCorto_		varchar(10) = '',
		@NaturalezaID_		int = 0
		

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @BcoTipoMovimientoID
	SELECT		@BcoTipoMOvimientoID_=BcoTipoMovimientoID ,
				@BcoTipoMovimientoClave_=BcoTipoMovimientoClave,
				@Nombre_=Nombre,
				@NombreCorto_ = NombreCorto, 
				@NaturalezaID_ = NaturalezaID
	FROM		BcoTipoMovimiento
	WHERE		BcoTipoMovimientoID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('BcoTipoMovimientoBancoID::', @BcoTipoMovimientoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as BcoTipoMovimientoBancoID,					@BcoTipoMovimientoClave_ as BcoTipoMovimientoBancoClave,	
			@Nombre_ as Nombre,											@NombreCorto_ as NombreCorto,
			@NaturalezaID_ as NaturalezaID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[BcoTipoMovimiento_Eliminar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[BcoTipoMovimiento_Eliminar]
@BcoTipoMovimientoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora		nvarchar(100) = 'BcoTipoMovimiento',	
		@Operacion					nvarchar(20) = 'Delete', 
		@logMessage					varchar(Max) = '',
		@isChangeBeLogged			bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave					nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @BcoTipoMovimientoID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(BcoTipoMovimientoClave,'')
	  FROM	BcoTipoMovimiento WHERE BcoTipoMovimientoID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    BcoTipoMovimiento
		WHERE   BcoTipoMovimientoID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('BcoTipoMovimientoBancoID::', @BcoTipoMovimientoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[BcoTipoMovimiento_Guardar]...';


GO

CREATE PROCEDURE [dbo].[BcoTipoMovimiento_Guardar]
@BcoTipoMovimientoID int,
@BcoTipoMovimientoClave varchar(10),
@Nombre varchar(50),
@NombreCorto varchar(15),
@NaturalezaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'BcoTipoMovimiento',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE		@BcoTipoMovimientoID_ int = @BcoTipoMovimientoID,
			@BcoTipoMovimientoClave_ varchar(10) ='',
			@Nombre_ varchar(50) = '',
			@NombreCorto_ varchar(15) = '',
			@NaturalezaID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @BcoTipoMovimientoID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@BcoTipoMovimientoClave_ = IsNull(@BcoTipoMovimientoClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@NaturalezaID_ = IsNull(NaturalezaID,0)
		   FROM	BcoTipoMovimiento WHERE BcoTipoMovimientoID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @BcoTipoMovimientoID_= @ClaveNoAsignado and @BcoTipoMovimientoClave_ <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  BcoTipoMovimiento
			SET     BcoTipoMovimientoClave = @BcoTipoMovimientoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					NaturalezaID = @NaturalezaID
			WHERE   BcoTipoMovimientoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO BcoTipoMovimiento(
					BcoTipoMovimientoClave,
					Nombre,
					NombreCorto,
					NaturalezaID)
			VALUES  (
					@BcoTipoMovimientoClave,
					@Nombre,
					@NombreCorto,
					@NaturalezaID
					)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @BcoTipoMovimientoID > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('BcoTipoMOvimentoBancoClave::', @BcoTipoMovimientoClave_, ':', @BcoTipoMovimientoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[BcoTipoMovimiento_Listado]...';


GO
CREATE PROCEDURE [dbo].[BcoTipoMovimiento_Listado]
@TipoListado varchar(10) = ''
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'BcoTipoMovimiento',	
		@Operacion				 nvarchar(20) = 'List', 
		@logMessage				 varchar(Max) = '',
		@isChangeBeLogged		 bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	IF @TipoListado = 'Minimo'
		SELECT  BcoTipoMovimientoID AS ID,				BcoTipoMovimientoClave AS Clave,
				Nombre,									NombreCorto, 
				NaturalezaID as PadreID
		FROM    BcoTipoMovimiento
		ORDER BY BcoTipoMovimientoClave
	ELSE 
		SELECT  BcoTipoMovimientoID,					BcoTipoMovimientoClave,
				Nombre,									NombreCorto,
				NaturalezaID
		FROM    BcoTipoMovimiento
		ORDER BY BcoTipoMovimientoClave
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgEjercicioOperativo_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CfgEjercicioOperativo_Consultar]
@CfgEjercicioOperativoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgEjercicioOperativo',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
		
-- Variables para valores de columnas
DECLARE	@CfgEjercicioOperativoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@CfgEjercicioOperativoID_ int = @CfgEjercicioOperativoID,
		@EmpresaID_  int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @CfgEjercicioOperativoID
	SELECT  CfgEjercicioOperativoID,CfgEjercicioClave,Nombre,NombreCorto, EmpresaID
	FROM    CfgEjercicioOperativo
	WHERE   CfgEjercicioOperativoID = @CfgEjercicioOperativoID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CfgEjercicioOperativoID::', @CfgEjercicioOperativoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as CfgEstatusClienteID,					@CfgEjercicioOperativoClave_ as AuxBancoClave,	@EmpresaID_ as EmpresaID,
			@Nombre_ as Nombre,										@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgEjercicioOperativo_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CfgEjercicioOperativo_Eliminar]
@CfgEjercicioOperativoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgEjercicioOperativo',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CfgEjercicioOperativoID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CfgEjercicioClave,'')
	  FROM	CfgEjercicioOperativo WHERE CfgEjercicioOperativoID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    CfgEjercicioOperativo
		WHERE   CfgEjercicioOperativoID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CfgEjercicioOperativoID::', @CfgEjercicioOperativoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CfgEjercicioOperativo_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CfgEjercicioOperativo_Guardar]
@CfgEjercicioOperativoID    INT,
@CfgEjercicioClave			VARCHAR (6),
@Nombre					VARCHAR (80),
@NombreCorto			VARCHAR (15),
@EmpresaID				INT
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgEjercicioOperativo',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CfgEjercicioClave_	nvarchar(4) = '',
		@Nombre_					nvarchar(30) = '',			
		@NombreCorto_				varchar(10) = '',
		@CfgEjercicioOperativoID_	int = @CfgEjercicioOperativoID,
		@EmpresaID_					int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CfgEjercicioOperativoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CfgEjercicioClave_ =		IsNull(CfgEjercicioClave,''),
	 			@Nombre_ =					IsNull(Nombre,''),
				@NombreCorto_ =				IsNull(NombreCorto,''),
				@CfgEjercicioOperativoID_ = IsNull(CfgEjercicioOperativoID,0),
				@EmpresaID_ =				ISNULL(EmpresaID, 0)
		   FROM	CfgEjercicioOperativo WHERE CfgEjercicioOperativoID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  CfgEjercicioOperativo
			SET     CfgEjercicioClave = @CfgEjercicioClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					EmpresaID = @EmpresaID
			WHERE   CfgEjercicioOperativoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CfgEjercicioOperativo(
					CfgEjercicioClave,
					Nombre,
					NombreCorto,
					EmpresaID)
			VALUES  (
					@CfgEjercicioClave,
					@Nombre,
					@NombreCorto,
					@EmpresaID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CfgEjercicioOperativoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CfgEjercicioClave::', @CfgEjercicioClave_, ':', @CfgEjercicioClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END

		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgEjercicioOperativo_Listado]...';


GO
CREATE PROCEDURE [dbo].[CfgEjercicioOperativo_Listado]
-- Parámetros para Bitácora
	 @UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgEjercicioOperativo',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT CfgEjercicioOperativoID,CfgEjercicioClave,Nombre,NombreCorto, EmpresaID
	FROM	CfgEjercicioOperativo
	ORDER BY CfgEjercicioClave

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusCliente_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CfgEstatusCliente_Consultar]
@CfgEstatusClienteID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgEstatusCliente',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@CfgEstatusClienteClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@CfgEstatusClienteID_ int = @CfgEstatusClienteID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @CfgEstatusClienteID
	SELECT  CfgEstatusClienteID,CfgEstatusClienteClave,Nombre,NombreCorto
	FROM    CfgEstatusCliente
	WHERE   CfgEstatusClienteID = @CfgEstatusClienteID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CfgEstatusClienteID::', @CfgEstatusClienteID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as CfgEstatusClienteID,					@CfgEstatusClienteClave_ as AuxBancoClave,	
			@Nombre_ as Nombre,										@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusCliente_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CfgEstatusCliente_Eliminar]
@EstatusClienteID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgEstatusCliente',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @EstatusClienteID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CfgEstatusClienteClave,'')
	  FROM	CfgEstatusCliente WHERE CfgEstatusClienteID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    CfgEstatusCliente
		WHERE   CfgEstatusClienteID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CfgEstatusClienteID::', @EstatusClienteID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusCliente_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CfgEstatusCliente_Guardar]
@CfgEstatusClienteID int,
@CfgEstatusClienteClave varchar(6),
@Nombre varchar(30),
@NombreCorto varchar(10)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDForLog   nvarchar(100) = 'CfgEstatusCliente',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@EstatusClienteClave_ nvarchar(4) = '',
		@Nombre_ nvarchar(30) = '',			
		@NombreCorto_ varchar(10) = '',
		@EstatusClienteID_ int = @CfgEstatusClienteID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CfgEstatusClienteID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@EstatusClienteClave_ = IsNull(CfgEstatusClienteClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@EstatusClienteID_ = IsNull(CfgEstatusClienteID,0)
		   FROM	CfgEstatusCliente WHERE CfgEstatusClienteID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  CfgEstatusCliente
			SET     CfgEstatusClienteClave = @CfgEstatusClienteClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   CfgEstatusClienteID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CfgEstatusCliente(
					CfgEstatusClienteClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@CfgEstatusClienteClave,
					@Nombre,
					@NombreCorto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @EstatusClienteID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDForLog,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('EstatusClienteClave::', @EstatusClienteClave_, ':', @CfgEstatusClienteClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDForLog
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END

		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusCliente_Listado]...';


GO
CREATE PROCEDURE [dbo].[CfgEstatusCliente_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgEstatusCliente',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

		/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT CfgEstatusClienteID AS ID,	CfgEstatusClienteClave AS Clave,	Nombre,
				NombreCorto,				0 AS PadreID
		FROM CfgEstatusCliente
		ORDER BY CfgEstatusClienteClave
	ELSE
		SELECT CfgEstatusClienteID,CfgEstatusClienteClave,Nombre,NombreCorto
		FROM CfgEstatusCliente
		ORDER BY CfgEstatusClienteClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusContactoPersonal_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CfgEstatusContactoPersonal_Consultar]
@CfgEstatusContactoPersonalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgEstatusContactoPersonal',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@CfgEstatusContactoPersonalClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@CfgEstatusContactoPersonal_ int = @CfgEstatusContactoPersonalID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @CfgEstatusContactoPersonalID
	SELECT  CfgEstatusContactoPersonalID,CfgEstatusContactoPersonalClave,Nombre,NombreCorto
	FROM    CfgEstatusContactoPersonal
	WHERE   CfgEstatusContactoPersonalID = @CfgEstatusContactoPersonalID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CfgEstatusContactoPersonalID::', @CfgEstatusContactoPersonalID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as AuxBancoID,					@CfgEstatusContactoPersonalClave_ as AuxBancoClave,	
			@Nombre_ as Nombre,								@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusContactoPersonal_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CfgEstatusContactoPersonal_Eliminar]
 @EstatusContactoPersonalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgEstatusContactoPersonal',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @EstatusContactoPersonalID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CfgEstatusContactoPersonalClave,'')
	  FROM	CfgEstatusContactoPersonal WHERE CfgEstatusContactoPersonalID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    CfgEstatusContactoPersonal
		WHERE   CfgEstatusContactoPersonalID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CfgEstatusContactoPersonalID::', @EstatusContactoPersonalID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusContactoPersonal_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CfgEstatusContactoPersonal_Guardar]
@CfgEstatusContactoPersonalID int,
@CfgEstatusContactoPersonalClave varchar(6),
@Nombre varchar(30),
@NombreCorto varchar(10)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgEstatusContactoPersonal',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CfgEstatusContactoPersonalClave_ nvarchar(4) = '',
		@Nombre_ nvarchar(30) = '',			
		@NombreCorto_ varchar(10) = '',
		@CfgEstatusContactoPersonalID_ int = @CfgEstatusContactoPersonalID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CfgEstatusContactoPersonalID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CfgEstatusContactoPersonalClave_ = IsNull(CfgEstatusContactoPersonalClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@CfgEstatusContactoPersonalID_ = IsNull(CfgEstatusContactoPersonalID,0)
		   FROM	CfgEstatusContactoPersonal WHERE CfgEstatusContactoPersonalID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  CfgEstatusContactoPersonal
			SET     CfgEstatusContactoPersonalClave = @CfgEstatusContactoPersonalClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   CfgEstatusContactoPersonalID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CfgEstatusContactoPersonal(
					CfgEstatusContactoPersonalClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@CfgEstatusContactoPersonalClave,
					@Nombre,
					@NombreCorto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CfgEstatusContactoPersonalID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('BancoClave::', @CfgEstatusContactoPersonalClave_, ':', @CfgEstatusContactoPersonalClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar]		 @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END

		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusContactoPersonal_Listado]...';


GO
CREATE PROCEDURE [dbo].[CfgEstatusContactoPersonal_Listado]
@TipoListado varchar(10) = ''

-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CfgEstatusContactoPersonal',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT CfgEstatusContactoPersonalID AS ID, CfgEstatusContactoPersonalClave AS Clave,	Nombre,
				NombreCorto,						0 AS PadreID
		FROM CfgEstatusContactoPersonal
		ORDER BY CfgEstatusContactoPersonalClave
	ELSE
		SELECT CfgEstatusContactoPersonalID,CfgEstatusContactoPersonalClave,Nombre,NombreCorto
		FROM CfgEstatusContactoPersonal
		ORDER BY CfgEstatusContactoPersonalClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusDocumento_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CfgEstatusDocumento_Guardar]
@CfgEstatusDocumentoID int,
@CfgEstatusDocumentoClave varchar(8),
@Nombre varchar(40),
@NombreCorto varchar(10),
@SistemaEstatusTipoDocumentoID int,
@Predeterminado bit
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalArea',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CfgEstatusDocumentoClave_ varchar(8) = '',
		@Nombre_ varchar(40) = '',
		@NombreCorto_ varchar(10) = '',
		@SistemaEstatusTipoDocumentoID_ int = 0,
		@Predeterminado_ bit = 0,
		@CfgEstatusDocumentoID_ int = @CfgEstatusDocumentoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CfgEstatusDocumentoID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@CfgEstatusDocumentoClave_ = IsNull(CfgEstatusDocumentoClave,''),
				@Nombre_  = IsNull(Nombre, ''),
				@NombreCorto_  = IsNull(NombreCorto,''),
				@SistemaEstatusTipoDocumentoID_ = IsNull(SistemaEstatusTipoDocumentoID, 0),
				@Predeterminado_  = IsNull(@Predeterminado, 0)
		   FROM	CfgEstatusDocumento WHERE CfgEstatusDocumentoID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @CfgEstatusDocumentoClave_ = @ClaveNoAsignado and @CfgEstatusDocumentoClave_ <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  CfgEstatusDocumento
			SET     CfgEstatusDocumentoClave = @CfgEstatusDocumentoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					SistemaEstatusTipoDocumentoID = @SistemaEstatusTipoDocumentoID,
					Predeterminado = @Predeterminado
			WHERE   CfgEstatusDocumentoID = @CfgEstatusDocumentoID
		END
		ELSE
		BEGIN        
			 INSERT  INTO CfgEstatusDocumento(
					CfgEstatusDocumentoClave,
					Nombre,
					NombreCorto,
					SistemaEstatusTipoDocumentoID,
					Predeterminado)
			 VALUES  (
					@CfgEstatusDocumentoClave,
					@Nombre,
					@NombreCorto,
					@SistemaEstatusTipoDocumentoID,
					@Predeterminado)
       
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CfgEstatusDocumentoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalAreaClave::', @CfgEstatusDocumentoClave, ':', @CfgEstatusDocumentoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'SistemaEstatusTipoDocumentoID::', @SistemaEstatusTipoDocumentoID_, ':', @SistemaEstatusTipoDocumentoID, ';')
				SET @logMessage = Concat(@logMessage, 'Predeterminado::', @Predeterminado, ':', @Predeterminado, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusDocumento_Listado]...';


GO
CREATE PROCEDURE [dbo].[CfgEstatusDocumento_Listado]
@TipoListado varchar(10) = ''
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CfgEstatusDocumento',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaID::', @EmpresaIDSolicitudBase, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
/************* FIN COPY 1  *********************/
	IF @TipoListado = 'Minimo'
		SELECT  CfgEstatusDocumentoID as ID,			CfgEstatusDocumentoClave as Clave ,			Nombre,
				NombreCorto,							b.TipoDocumentoID as PadreID
		  FROM  CfgEstatusDocumento a 
		 INNER JOIN SistemaEstatusTipoDocumento b ON a.SistemaEstatusTipoDocumentoID = b.SistemaEstatusTipoDocumentoID
		 WHERE B.EmpresaID = @EmpresaIDSolicitudBase
	ELSE
		SELECT  CfgEstatusDocumentoID,				CfgEstatusDocumentoClave,					Nombre,
				NombreCorto,						a.SistemaEstatusTipoDocumentoID,			a.Predeterminado
		  FROM  CfgEstatusDocumento a 
		 INNER JOIN SistemaEstatusTipoDocumento b ON a.SistemaEstatusTipoDocumentoID = b.SistemaEstatusTipoDocumentoID
		 WHERE B.EmpresaID = @EmpresaIDSolicitudBase

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusDocumento_ListadoTipoDocumentoID]...';


GO
CREATE PROCEDURE [dbo].[CfgEstatusDocumento_ListadoTipoDocumentoID]
@TipoDocumentoID int,
@TipoListado varchar(10) = ''
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CfgEstatusDocumento',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = Concat('EmpresaID::', @EmpresaIDSolicitudBase, ':',0, ';')
		SET @logMessage = Concat(@logMessage, 'TipoDocumentoID::', @TipoDocumentoID, ':', 0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
/************* FIN COPY 1  *********************/
	IF @TipoListado = 'Minimo'
		SELECT  CfgEstatusDocumentoID as ID,			CfgEstatusDocumentoClave as Clave ,			Nombre,
				NombreCorto,							b.TipoDocumentoID as PadreID
		  FROM  CfgEstatusDocumento a 
		 INNER JOIN SistemaEstatusTipoDocumento b ON a.SistemaEstatusTipoDocumentoID = b.SistemaEstatusTipoDocumentoID
		 WHERE b.EmpresaID = @EmpresaIDSolicitudBase AND
		  ((SELECT administrador
			   FROM SegUsuario
			  WHERE SegUsuarioID = @UsuarioIDBitacora) = 1 OR
			(SELECT CfgEstatusDocumentoID 
			   FROM CfgEstatusDocumento
			  WHERE CfgEstatusDocumentoClave = (SELECT ClaveNoAsignado FROM SistemaParamCosmos)) in 
				(SELECT CfgEstatusDocumentoID
				  FROM SegUsuarioEstatusDocumento
				 WHERE SegUsuarioID = @UsuarioIDBitacora) OR
			CfgEstatusDocumentoID in 
				(SELECT CfgEstatusDocumentoID
				  FROM SegUsuarioEstatusDocumento
				 WHERE SegUsuarioID = @UsuarioIDBitacora))
		   AND b.TipoDocumentoID = @TipoDocumentoID
	ELSE
		SELECT  CfgEstatusDocumentoID,				CfgEstatusDocumentoClave,					Nombre,
				NombreCorto,						a.SistemaEstatusTipoDocumentoID,			a.Predeterminado
		  FROM  CfgEstatusDocumento a 
		 INNER JOIN SistemaEstatusTipoDocumento b ON a.SistemaEstatusTipoDocumentoID = b.SistemaEstatusTipoDocumentoID
		 WHERE b.EmpresaID = @EmpresaIDSolicitudBase
		   AND b.TipoDocumentoID = @TipoDocumentoID

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusDocumento_ListadoTipoDocumentoIDTodos]...';


GO
CREATE PROCEDURE [dbo].[CfgEstatusDocumento_ListadoTipoDocumentoIDTodos]
@TipoDocumentoID int,
@TipoListado varchar(10) = ''
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CfgEstatusDocumento',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = Concat('EmpresaID::', @EmpresaIDSolicitudBase, ':',0, ';')
		SET @logMessage = Concat(@logMessage, 'TipoDocumentoID::', @TipoDocumentoID, ':', 0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
/************* FIN COPY 1  *********************/
	IF @TipoListado = 'Minimo'
		SELECT  CfgEstatusDocumentoID as ID,			CfgEstatusDocumentoClave as Clave ,			Nombre,
				NombreCorto,							b.TipoDocumentoID as PadreID
		  FROM  CfgEstatusDocumento a 
		 INNER JOIN SistemaEstatusTipoDocumento b ON a.SistemaEstatusTipoDocumentoID = b.SistemaEstatusTipoDocumentoID
		 WHERE b.EmpresaID = @EmpresaIDSolicitudBase 
		   AND b.TipoDocumentoID = @TipoDocumentoID
	ELSE
		SELECT  CfgEstatusDocumentoID,				CfgEstatusDocumentoClave,					Nombre,
				NombreCorto,						a.SistemaEstatusTipoDocumentoID,			a.Predeterminado
		  FROM  CfgEstatusDocumento a 
		 INNER JOIN SistemaEstatusTipoDocumento b ON a.SistemaEstatusTipoDocumentoID = b.SistemaEstatusTipoDocumentoID
		 WHERE b.EmpresaID = @EmpresaIDSolicitudBase
		   AND b.TipoDocumentoID = @TipoDocumentoID

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusPersonal_Consultar]...';


GO


CREATE PROCEDURE [dbo].[CfgEstatusPersonal_Consultar]
@CfgEstatusPersonalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgEstatusPersonal',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@CfgEstatusPersonalClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@CfgEstatusPersonalID_ int = @CfgEstatusPersonalID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @CfgEstatusPersonalID
	SELECT  CfgEstatusPersonalID,CfgEstatusPersonalClave,Nombre,NombreCorto
	FROM    CfgEstatusPersonal
	WHERE   CfgEstatusPersonalID = @CfgEstatusPersonalID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CfgEstatusPersonalID::', @CfgEstatusPersonalID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as AuxBancoID,					@CfgEstatusPersonalClave_ as AuxBancoClave,	
			@Nombre_ as Nombre,								@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusPersonal_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CfgEstatusPersonal_Eliminar]
@EstatusPersonalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgEstatusPersonal',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @EstatusPersonalID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CfgEstatusPersonalClave,'')
	  FROM	CfgEstatusPersonal WHERE CfgEstatusPersonalID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    AuxBanco
		WHERE   AuxBancoID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CfgEstatusPersonal::', @EstatusPersonalID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusPersonal_Guardar]...';


GO


CREATE PROCEDURE [dbo].[CfgEstatusPersonal_Guardar]
@CfgEstatusPersonalID int,
@CfgEstatusPersonalClave varchar(6),
@EstatusPersonaID varchar(10),
@Nombre varchar(30),
@NombreCorto varchar(10)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgEstatusPersonal',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CfgEstatusPersonalClave_ nvarchar(4) = '',
		@Nombre_ nvarchar(30) = '',			
		@NombreCorto_ varchar(10) = '',
		@CfgEstatusPersonalID_ int = @CfgEstatusPersonalID,
		@EstatusPersonaID_ int = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CfgEstatusPersonalID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CfgEstatusPersonalClave_ = IsNull(CfgEstatusPersonalClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@CfgEstatusPersonalID_ = IsNull(CfgEstatusPersonalID,0),
				@EstatusPersonaID_ = IsNull(EstatusPersonaID,'')
		   FROM	CfgEstatusPersonal WHERE CfgEstatusPersonalID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  CfgEstatusPersonal
			SET     CfgEstatusPersonalClave = @CfgEstatusPersonalClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					EstatusPersonaID = @EstatusPersonaID
			WHERE   CfgEstatusPersonalID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CfgEstatusPersonal(
					CfgEstatusPersonalClave,
					Nombre,
					NombreCorto,
					EstatusPersonaID
					)
			VALUES  (
					@CfgEstatusPersonalClave,
					@Nombre,
					@NombreCorto,
					@EstatusPersonaID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CfgEstatusPersonalID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('BancoClave::', @CfgEstatusPersonalClave_, ':', @CfgEstatusPersonalClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END

		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusPersonal_Listado]...';


GO
CREATE PROCEDURE [dbo].[CfgEstatusPersonal_Listado]
@TipoListado varchar(10) = ''

-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CfgEstatusPersonal',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  CfgEstatusPersonalID AS ID,			CfgEstatusPersonalClave AS Clave,
				Nombre,								NombreCorto,
				0 as PadreID
		FROM    CfgEstatusPersonal
		ORDER BY CfgEstatusPersonalClave
	ELSE
		SELECT  CfgEstatusPersonalID,CfgEstatusPersonalClave,Nombre,NombreCorto
		FROM    CfgEstatusPersonal
		ORDER BY CfgEstatusPersonalClave


	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusRepresentanteCliente_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CfgEstatusRepresentanteCliente_Consultar]
@CfgEstatusRepresentanteClienteID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgEstatusRepresentanteCliente',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@CfgEstatusRepresentanteClienteClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@CfgEstatusRepresentanteClienteID_ int = @CfgEstatusRepresentanteClienteID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @CfgEstatusRepresentanteClienteID
	SELECT  CfgEstatusRepresentanteClienteID,CfgEstatusRepresentanteClienteClave,Nombre,NombreCorto
	FROM    CfgEstatusRepresentanteCliente
	WHERE   CfgEstatusRepresentanteClienteID = @CfgEstatusRepresentanteClienteID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CfgEstatusRepresentanteClienteID::', @CfgEstatusRepresentanteClienteID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as AuxBancoID,					@CfgEstatusRepresentanteClienteClave_ as AuxBancoClave,	
			@Nombre_ as Nombre,								@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusRepresentanteCliente_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CfgEstatusRepresentanteCliente_Eliminar]
@CfgEstatusRepresentanteClienteID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgEstatusRepresentanteCliente',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CfgEstatusRepresentanteClienteID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CfgEstatusRepresentanteClienteClave,'')
	  FROM	CfgEstatusRepresentanteCliente WHERE CfgEstatusRepresentanteClienteID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    AuxBanco
		WHERE   AuxBancoID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CfgEstatusRepresentanteClienteID::', @CfgEstatusRepresentanteClienteID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusRepresentanteCliente_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CfgEstatusRepresentanteCliente_Guardar]
@CfgEstatusRepresentanteClienteID int,
@CfgEstatusRepresentanteClienteClave varchar(6),
@EstatusPersonaID varchar(10),
@Nombre varchar(30),
@NombreCorto varchar(10)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgEstatusRepresentanteCliente',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CfgEstatusRepresentanteClienteClave_ nvarchar(4) = '',
		@Nombre_ nvarchar(30) = '',			
		@NombreCorto_ varchar(10) = '',
		@CfgEstatusRepresentanteClienteID_ int = @CfgEstatusRepresentanteClienteID,
		@EstatusPersonaID_ int = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CfgEstatusRepresentanteClienteID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CfgEstatusRepresentanteClienteClave_ = IsNull(CfgEstatusRepresentanteClienteClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@CfgEstatusRepresentanteClienteID_ = IsNull(CfgEstatusRepresentanteClienteID,0),
				@EstatusPersonaID_ = IsNull(EstatusPersonaID,'')
		   FROM	CfgEstatusRepresentanteCliente WHERE CfgEstatusRepresentanteClienteID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  CfgEstatusRepresentanteCliente
			SET     CfgEstatusRepresentanteClienteClave = @CfgEstatusRepresentanteClienteClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					EstatusPersonaID = @EstatusPersonaID
			WHERE   CfgEstatusRepresentanteClienteID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CfgEstatusRepresentanteCliente(
					CfgEstatusRepresentanteClienteClave,
					Nombre,
					NombreCorto,
					EstatusPersonaID
					)
			VALUES  (
					@CfgEstatusRepresentanteClienteClave,
					@Nombre,
					@NombreCorto,
					@EstatusPersonaID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CfgEstatusRepresentanteClienteID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CfgEstatusRepresentanteClienteClave_::', @CfgEstatusRepresentanteClienteClave_, ':', @CfgEstatusRepresentanteClienteClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END

		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgEstatusRepresentanteCliente_Listado]...';


GO
CREATE PROCEDURE [dbo].[CfgEstatusRepresentanteCliente_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgEstatusRepresentanteCliente',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT CfgEstatusRepresentanteClienteID,CfgEstatusRepresentanteClienteClave,Nombre,NombreCorto
	FROM CfgEstatusRepresentanteCliente
	ORDER BY CfgEstatusRepresentanteClienteClave

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgFamiliaProducto_Consultar]...';


GO


CREATE PROCEDURE [dbo].[CfgFamiliaProducto_Consultar]
@CfgFamiliaProductoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EstatusCliente',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@CfgFamiliaProductoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@CfgFamiliaProductoID_ int = @CfgFamiliaProductoID,
		@PadreID_ int = 0,
		@FamiliaClavePadre_ varchar(5) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @CfgFamiliaProductoID
	SELECT  CfgFamiliaProductoID,PadreID,CfgFamiliaClave,FamiliaClavePadre,Nombre,NombreCorto
	FROM    CfgFamiliaProducto
	WHERE   CfgFamiliaProductoID = @CfgFamiliaProductoID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CfgEstatusClienteID::', @CfgFamiliaProductoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as CfgFamiliaProductoID,					@CfgFamiliaProductoClave_ as CfgFamiliaProductoClave,	@PadreID_ as PadreID,
			@FamiliaClavePadre_ as FamiliaClavePadre,				@Nombre_ as Nombre,										@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgFamiliaProducto_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CfgFamiliaProducto_Eliminar]
@CfgFamiliaProductoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'FamiliaProductoID',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CfgFamiliaProductoID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CfgFamiliaClave,'')
	  FROM	CfgFamiliaProducto WHERE CfgFamiliaProductoID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    CfgEstatusCliente
		WHERE   CfgEstatusClienteID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('FamiliaProductoID::', @CfgFamiliaProductoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CfgFamiliaProducto_Guardar]...';


GO


CREATE PROCEDURE [dbo].[CfgFamiliaProducto_Guardar]
@CfgFamiliaProductoID int,
@PadreID int,
@CfgFamiliaClave varchar(5),
@FamiliaClavePadre varchar(5),
@Nombre varchar(40),
@NombreCorto varchar(10)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDForLog   nvarchar(100) = 'EstatusCliente',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@FamiliaProductoClave_ nvarchar(4) = '',
		@Nombre_ nvarchar(30) = '',			
		@NombreCorto_ varchar(10) = '',
		@CfgFamiliaProductoID_ int = @CfgFamiliaProductoID,
		@FamiliaClavePadre_ varchar(5) = '',
		@PadreID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CfgFamiliaProductoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@FamiliaProductoClave_ = IsNull(CfgFamiliaClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@CfgFamiliaProductoID_ = IsNull(CfgFamiliaProductoID,0),
				@FamiliaClavePadre_ = ISNULL(FamiliaClavePadre, 0),
				@PadreID_ = ISNULL(PadreID, '')
		   FROM	CfgFamiliaProducto WHERE CfgFamiliaProductoID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  CfgFamiliaProducto
			SET     CfgFamiliaClave = @CfgFamiliaClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					FamiliaClavePadre = @FamiliaClavePadre,
					PadreID = @PadreID
			WHERE   CfgFamiliaProductoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CfgFamiliaProducto(
					CfgFamiliaClave,
					Nombre,
					NombreCorto, 
					FamiliaClavePadre,
					PadreID)
			VALUES  (
					@CfgFamiliaClave,
					@Nombre,
					@NombreCorto,
					@FamiliaClavePadre,
					@PadreID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CfgFamiliaProductoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDForLog,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('FamiliaClavePadre_::', @FamiliaClavePadre_, ':', @FamiliaClavePadre_, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDForLog
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END

		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgFamiliaProducto_Listado]...';


GO


CREATE PROCEDURE [dbo].[CfgFamiliaProducto_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgFamiliaProducto',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT		CfgFamiliaProductoID AS ID,					CfgFamiliaClave AS Clave,
					Nombre,										NombreCorto,
					PadreID
		FROM		CfgFamiliaProducto
		ORDER BY	CfgFamiliaClave
	ELSE
		SELECT		CfgFamiliaProductoID,PadreID,CfgFamiliaClave,FamiliaClavePadre,Nombre,NombreCorto
		FROM		CfgFamiliaProducto
		ORDER BY	CfgFamiliaClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgParamConfigUsuarioCosmos_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CfgParamConfigUsuarioCosmos_Guardar]
		@CfgParamConfigUsuarioCosmosID int,
        @ComparteProveedor char(1),
		@TextoArea varchar(50),
		@TextoAreas varchar(50),
		@TextoAreaAlias varchar(15),
		@TextoAreasAlias varchar(15),
		@TextoAreaPrefijo varchar(5),
		@TextoAreasPrefijo varchar(5),
		@TextoCentroCosto varchar(50),
		@TextoCentrosCosto varchar(50),
		@TextoCentroCostoAlias varchar(15),
		@TextoCentrosCostoAlias varchar(15),
		@TextoCentroCostoPrefijo varchar(5),
		@TextoCentrosCostoPrefijo varchar(5),
		@TextoSucursal varchar(50),
		@TextoSucursales varchar(50),
		@TextoSucursalAlias varchar(15),
		@TextoSucursalesAlias varchar(15),
		@TextoSucursalPrefijo varchar(5),
		@TextoSucursalesPrefijo varchar(5)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgParamConfigUsuarioCosmos',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@ComparteProveedor_ char(1),
		@TextoArea_ varchar(50),
		@TextoAreas_ varchar(50),
		@TextoAreaAlias_ varchar(15),
		@TextoAreasAlias_  varchar(15),
		@TextoAreaPrefijo_ varchar(5),
		@TextoAreasPrefijo_ varchar(5),
		@TextoCentroCosto_ varchar(50),
		@TextoCentrosCosto_ varchar(50),
		@TextoCentroCostoAlias_ varchar(15),
		@TextoCentrosCostoAlias_  varchar(15),
		@TextoCentroCostoPrefijo_ varchar(5),
		@TextoCentrosCostoPrefijo_ varchar(5),
		@TextoSucursal_ varchar(50),
		@TextoSucursales_ varchar(50),
		@TextoSucursalAlias_  varchar(15),
		@TextoSucursalesAlias_ varchar(15),
		@TextoSucursalPrefijo_ varchar(5),
		@TextoSucursalesPrefijo_ varchar(5),
		@CfgParamConfigUsuarioCosmosID_ int = @CfgParamConfigUsuarioCosmosID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CfgParamConfigUsuarioCosmosID

	BEGIN
		SELECT	@ComparteProveedor_ = IsNull(ComparteProveedor ,''),
				@CfgParamConfigUsuarioCosmosID_ = IsNull(CfgParamConfigUsuarioCosmosID,0),
				@TextoArea_ = IsNull(TextoArea,''),
				@TextoAreas_ = IsNull(TextoAreas,''),
				@TextoAreaAlias_ = IsNull(TextoAreaAlias,''),
				@TextoAreasAlias_ = IsNull(TextoAreasAlias,''),
				@TextoAreaPrefijo_ = IsNull(TextoAreaPrefijo,''),
				@TextoAreasPrefijo_ = IsNull(TextoAreasPrefijo,''),
				@TextoCentroCosto_ = IsNull(TextoCentroCosto,''),
				@TextoCentrosCosto_ = IsNull(TextoCentrosCosto,''),
				@TextoCentroCostoAlias_ = IsNull(TextoCentroCostoAlias,''),
				@TextoCentrosCostoAlias_ = IsNull(TextoCentrosCostoAlias,''),
				@TextoCentroCostoPrefijo_ = IsNull(TextoCentroCostoPrefijo,''),
				@TextoCentrosCostoPrefijo_ = IsNull(TextoCentrosCostoPrefijo,''),
				@TextoSucursal_ = IsNull(TextoSucursal,''),
				@TextoSucursales_ = IsNull(TextoSucursales,''),
				@TextoSucursalAlias_ = IsNull(TextoSucursalAlias,''),
				@TextoSucursalesAlias_ = IsNull(TextoSucursalesAlias,''),
				@TextoSucursalPrefijo_ = IsNull(TextoSucursalPrefijo,''),
				@TextoSucursalesPrefijo_ = IsNull(TextoSucursalesPrefijo,'')
			FROM CfgParamConfigUsuarioCosmos WHERE CfgParamConfigUsuarioCosmosID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN		
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CfgParamConfigUsuarioCosmos
			SET     ComparteProveedor = @ComparteProveedor,
					TextoArea = @TextoArea,
					TextoAreas = @TextoAreas,
					TextoAreaAlias = @TextoAreaAlias,
					TextoAreasAlias = @TextoAreasAlias,
					TextoAreaPrefijo = @TextoAreaPrefijo,
					TextoAreasPrefijo = @TextoAreasPrefijo,
					TextoCentroCosto = @TextoCentroCosto,
					TextoCentrosCosto = @TextoCentrosCosto,
					TextoCentroCostoAlias = @TextoCentroCostoAlias,
					TextoCentrosCostoAlias = @TextoCentrosCostoAlias,
					TextoCentroCostoPrefijo = @TextoCentroCostoPrefijo,
					TextoCentrosCostoPrefijo = @TextoCentrosCostoPrefijo,
					TextoSucursal = @TextoSucursal,
					TextoSucursales = @TextoSucursales,
					TextoSucursalAlias = @TextoSucursalAlias,
					TextoSucursalesAlias = @TextoSucursalesAlias,
					TextoSucursalPrefijo = @TextoSucursalPrefijo,
					TextoSucursalesPrefijo = @TextoSucursalesPrefijo
			WHERE   CfgParamConfigUsuarioCosmosID = @IDAActualizar
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			SET @Operacion = 'Update' 	
						 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('ComparteProveedor ::', @ComparteProveedor_ , ':', @ComparteProveedor , ';')

				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgParamConfigUsuarioCosmos_Listado]...';


GO


CREATE PROCEDURE [dbo].[CfgParamConfigUsuarioCosmos_Listado]
--@CfgParamInicioUsuarioCosmosID int
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgParamConfigUsuarioCosmos',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  *
	FROM    CfgParamConfigUsuarioCosmos
	--WHERE	EmpresaID = @EmpresaID
	

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgParamInicioUsuarioCosmos_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CfgParamInicioUsuarioCosmos_Guardar]
		@ParamInicioUsuarioCosmosID int,
        @PpalAreaIDInicio int,
        @PpalCentroCostoIDInicio int,
        @CiudadIDInicio int,
        @ConceptoEgresoIDInicio int,
        @ConceptoIngresoIDInicio int,
        @EstadoIDInicio int,
        @EstadoCivilIDInicio int,
        @EstatusClienteIDInicio int,
        @EstatusContactoPersonalIDInicio int,
        @CfgEstatusDocumentoIDInicio int,
        @EstatusPersonalIDInicio int,
        @CmpEstatusProveedorIDInicio int,
        @CmpEstatusRepresentanteProveedorIDInicio int,
        @FamiliaProductoIDInicio int,
        @FormaPagoIDInicio int,
        @GiroEmpresaIDInicio int,
        @HorarioPersonalIDInicio int,
        @IdiomaIDInicio int,
        @MarcaIDInicio int,
        @MedioContactoIDInicio int,
        @MunicipioIDInicio int,
        @PaisIDInicio int,
        @ProfesionIDInicio int,
        @SexoIDInicio int,
        @TipoClienteIDInicio int,
        @TipoContactoPersonalIDInicio int,
        @TipoDomicilioIDInicio int,
        @TipoFechaIDInicio int,
        @TipoHorarioIDInicio int,
        @TipoMailIDInicio int,
        @TipoProductoIDInicio int,
        @CmpTipoProveedorIDInicio int,
        @TipoRepresentanteClienteIDInicio int,
        @CmpTipoRepresentanteProveedorIDInicio int,
        @CfgTipoTelefonoIDInicio int,
        @AuxUnidadIDInicio int,
        @VinculoIDInicio int,
        @ZonaIDInicio int,
        @EmpresaID int,
        @FechaInicio int,
		@CfgUsoTelefonoIDInicio int,
		@PpalSucursalIDInicio int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgParamInicioUsuarioCosmos',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalAreaIDInicio_ int,
        @PpalCentroCostoIDInicio_ int,
        @CiudadIDInicio_ int,
        @ConceptoEgresoIDInicio_ int,
        @ConceptoIngresoIDInicio_ int,
        @EstadoIDInicio_ int,
        @EstadoCivilIDInicio_ int,
        @EstatusClienteIDInicio_ int,
        @EstatusContactoPersonalIDInicio_ int,
        @CfgEstatusDocumentoIDInicio_ int,
        @EstatusPersonalIDInicio_ int,
        @CmpEstatusProveedorIDInicio_ int,
        @CmpEstatusRepresentanteProveedorIDInicio_ int,
        @FamiliaProductoIDInicio_ int,
        @FormaPagoIDInicio_ int,
        @GiroEmpresaIDInicio_ int,
        @HorarioPersonalIDInicio_ int,
        @IdiomaIDInicio_ int,
        @MarcaIDInicio_ int,
        @MedioContactoIDInicio_ int,
        @MunicipioIDInicio_ int,
        @PaisIDInicio_ int,
        @ProfesionIDInicio_ int,
        @SexoIDInicio_ int,
        @TipoClienteIDInicio_ int,
        @TipoContactoPersonalIDInicio_ int,
        @TipoDomicilioIDInicio_ int,
        @TipoFechaIDInicio_ int,
        @TipoHorarioIDInicio_ int,
        @TipoMailIDInicio_ int,
        @TipoProductoIDInicio_ int,
        @CmpTipoProveedorIDInicio_ int,
        @TipoRepresentanteClienteIDInicio_ int,
        @CmpTipoRepresentanteProveedorIDInicio_ int,
        @CfgTipoTelefonoIDInicio_ int,
        @AuxUnidadIDInicio_ int,
        @VinculoIDInicio_ int,
        @ZonaIDInicio_ int,
        @EmpresaID_ int,
        @FechaInicio_ int,
		@CfgUsoTelefonoIDInicio_ int,
		@PpalSucursalIDInicio_ int,
		@ParamInicioUsuarioCosmosID_ int = @ParamInicioUsuarioCosmosID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @EmpresaID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	BEGIN
		SELECT	@PpalAreaIDInicio_ = IsNull(PpalAreaIDInicio ,0),
				@PpalCentroCostoIDInicio_ = IsNull( PpalCentroCostoIDInicio,0),
				@CiudadIDInicio_ = IsNull(EspCiudadIDInicio ,0),
				@ConceptoEgresoIDInicio_ = IsNull( PpalConceptoEgresoIDInicio,0),
				@ConceptoIngresoIDInicio_ = IsNull(PpalConceptoIngresoIDInicio ,0),
				@EstadoIDInicio_ = IsNull( EspEstadoIDInicio,0),
				@EstadoCivilIDInicio_ = IsNull(AuxEstadoCivilIDInicio,0),
				@EstatusClienteIDInicio_ = IsNull(CfgEstatusClienteIDInicio ,0),
				@EstatusContactoPersonalIDInicio_ = IsNull(CfgEstatusContactoPersonalIDInicio ,0),
				@CfgEstatusDocumentoIDInicio_ = IsNull(CfgEstatusDocumentoIDInicio ,0),
				@EstatusPersonalIDInicio_ = IsNull(CfgEstatusPersonalIDInicio ,0),
				@CmpEstatusProveedorIDInicio_ = IsNull(CmpEstatusProveedorIDInicio ,0),
				@CmpEstatusRepresentanteProveedorIDInicio_ = IsNull(CmpEstatusRepresentanteProveedorIDInicio ,0),
				@FamiliaProductoIDInicio_ = IsNull(CfgFamiliaProductoIDInicio ,0),
				@FormaPagoIDInicio_ = IsNull(AuxFormaPagoIDInicio ,0),
				@GiroEmpresaIDInicio_ = IsNull( AuxGiroEmpresaIDInicio,0),
				@HorarioPersonalIDInicio_ = IsNull(AuxHorarioPersonalIDInicio ,0),
				@IdiomaIDInicio_ = IsNull(AuxIdiomaIDInicio ,0),
				@MarcaIDInicio_ = IsNull(AuxMarcaIDInicio ,0),
				@MedioContactoIDInicio_ = IsNull(AuxMedioContactoIDInicio ,0),
				@MunicipioIDInicio_ = IsNull(EspMunicipioIDInicio ,0),
				@PaisIDInicio_ = IsNull(EspPaisIDInicio ,0),
				@ProfesionIDInicio_ = IsNull(AuxProfesionIDInicio ,0),
				@SexoIDInicio_ = IsNull(SistemaSexoIDInicio ,0),
				@TipoClienteIDInicio_ = IsNull(CfgTipoClienteIDInicio ,0),
				@TipoContactoPersonalIDInicio_ = IsNull(CfgTipoContactoPersonalIDInicio ,0),
				@TipoDomicilioIDInicio_ = IsNull(CfgTipoDomicilioIDInicio ,0),
				@TipoFechaIDInicio_ = IsNull(CfgTipoFechaIDInicio ,0),
				@TipoHorarioIDInicio_ = IsNull(CfgTipoHorarioIDInicio ,0),
				@TipoMailIDInicio_ = IsNull(CfgTipoMailIDInicio ,0),
				@TipoProductoIDInicio_ = IsNull(CfgTipoProductoIDInicio ,0),
				@CmpTipoProveedorIDInicio_ = IsNull(CmpTipoProveedorIDInicio ,0),
				@TipoRepresentanteClienteIDInicio_ = IsNull(CfgTipoRepresentanteClienteIDInicio ,0),
				@CmpTipoRepresentanteProveedorIDInicio_ = IsNull( CmpTipoRepresentanteProveedorIDInicio,0),
				@CfgTipoTelefonoIDInicio_ = IsNull(CfgTipoTelefonoIDInicio ,0),
				@AuxUnidadIDInicio = IsNull(AuxUnidadIDInicio ,0),
				@VinculoIDInicio_ = IsNull(AuxVinculoIDInicio ,0),
				@ZonaIDInicio_ = IsNull(AuxZonaIDInicio ,0),
				@EmpresaID_ = IsNull(EmpresaID ,0),
				@FechaInicio_ = IsNull(FechaInicio,''),
				@CfgUsoTelefonoIDInicio_ = IsNull(CfgUsoTelefonoIDInicio,0),
				@ParamInicioUsuarioCosmosID_ = IsNull(ParamInicioUsuarioCosmosID,0),
				@PpalSucursalIDInicio_ = ISNULL(PpalSucursalIDInicio, 0)
			FROM CfgParamInicioUsuarioCosmos WHERE EmpresaID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN		
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CfgParamInicioUsuarioCosmos
			SET      PpalAreaIDInicio = @PpalAreaIDInicio,
					 PpalCentroCostoIDInicio = @PpalCentroCostoIDInicio,
					 EspCiudadIDInicio = @CiudadIDInicio,
					 PpalConceptoEgresoIDInicio = @ConceptoEgresoIDInicio,
					 PpalConceptoIngresoIDInicio = @ConceptoIngresoIDInicio,
					 EspEstadoIDInicio = @EstadoIDInicio,
					 AuxEstadoCivilIDInicio = @EstadoCivilIDInicio,
					 CfgEstatusClienteIDInicio = @EstatusClienteIDInicio,
					 CfgEstatusContactoPersonalIDInicio = @EstatusContactoPersonalIDInicio,
					 CfgEstatusDocumentoIDInicio = @CfgEstatusDocumentoIDInicio,
					 CfgEstatusPersonalIDInicio = @EstatusPersonalIDInicio,
					 CmpEstatusProveedorIDInicio = @CmpEstatusProveedorIDInicio,
					 CmpEstatusRepresentanteProveedorIDInicio = @CmpEstatusRepresentanteProveedorIDInicio,
					 CfgFamiliaProductoIDInicio = @FamiliaProductoIDInicio,
					 AuxFormaPagoIDInicio = @FormaPagoIDInicio,
					 AuxGiroEmpresaIDInicio = @GiroEmpresaIDInicio,
					 AuxHorarioPersonalIDInicio = @HorarioPersonalIDInicio,
					 AuxIdiomaIDInicio = @IdiomaIDInicio,
					 AuxMarcaIDInicio = @MarcaIDInicio,
					 AuxMedioContactoIDInicio = @MedioContactoIDInicio,
					 EspMunicipioIDInicio = @MunicipioIDInicio,
					 EspPaisIDInicio = @PaisIDInicio,
					 AuxProfesionIDInicio = @ProfesionIDInicio,
					 SistemaSexoIDInicio = @SexoIDInicio,
					 CfgTipoClienteIDInicio = @TipoClienteIDInicio,
					 CfgTipoContactoPersonalIDInicio = @TipoContactoPersonalIDInicio,
					 CfgTipoDomicilioIDInicio = @TipoDomicilioIDInicio,
					 CfgTipoFechaIDInicio = @TipoFechaIDInicio,
					 CfgTipoHorarioIDInicio = @TipoHorarioIDInicio,
					 CfgTipoMailIDInicio = @TipoMailIDInicio,
					 CfgTipoProductoIDInicio = @TipoProductoIDInicio,
					 CmpTipoProveedorIDInicio = @CmpTipoProveedorIDInicio,
					 CfgTipoRepresentanteClienteIDInicio = @TipoRepresentanteClienteIDInicio,
					 CmpTipoRepresentanteProveedorIDInicio = @CmpTipoRepresentanteProveedorIDInicio,
					 CfgTipoTelefonoIDInicio = @CfgTipoTelefonoIDInicio,
					 AuxUnidadIDInicio = @AuxUnidadIDInicio,
					 AuxVinculoIDInicio = @VinculoIDInicio,
					 AuxZonaIDInicio = @ZonaIDInicio,
					 CfgUsoTelefonoIDInicio = @CfgUsoTelefonoIDInicio,
					 EmpresaID = @EmpresaID,
					 PpalSucursalIDInicio = @PpalSucursalIDInicio
			WHERE   EmpresaID = @IDAActualizar
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			SET @Operacion = 'Update' 	
						 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalAreaIDInicio ::', @PpalAreaIDInicio_ , ':', @PpalAreaIDInicio , ';')
				SET @logMessage = Concat(@logMessage, 'PpalCentroCostoIDInicio::', @PpalCentroCostoIDInicio_, ':', @PpalCentroCostoIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'CiudadIDInicio::', @CiudadIDInicio_, ':', @CiudadIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'ConceptoEgresoIDInicio::', @ConceptoEgresoIDInicio_, ':', @ConceptoEgresoIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'ConceptoIngresoIDInicio::', @ConceptoIngresoIDInicio_, ':', @ConceptoIngresoIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'EstadoIDInicio::', @EstadoIDInicio_, ':', @EstadoIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'EstadoCivilIDInicio::', @EstadoCivilIDInicio_, ':', @EstadoCivilIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'EstatusClienteIDInicio::', @EstatusClienteIDInicio_, ':', @EstatusClienteIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'EstatusContactoPersonalIDInicio::', @EstatusContactoPersonalIDInicio_, ':', @EstatusContactoPersonalIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'CfgEstatusDocumentoIDInicio::', @CfgEstatusDocumentoIDInicio_, ':', @CfgEstatusDocumentoIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'EstatusPersonalIDInicio::', @EstatusPersonalIDInicio_, ':', @EstatusPersonalIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'CmpEstatusProveedorIDInicio::', @CmpEstatusProveedorIDInicio_, ':', @CmpEstatusProveedorIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'CmpEstatusRepresentanteProveedorIDInicio::', @CmpEstatusRepresentanteProveedorIDInicio_, ':', @CmpEstatusRepresentanteProveedorIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'FamiliaProductoIDInicio::', @FormaPagoIDInicio_, ':', @FormaPagoIDInicio , ';')
				SET @logMessage = Concat(@logMessage, 'GiroEmpresaIDInicio::', @GiroEmpresaIDInicio_, ':', @GiroEmpresaIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'HorarioPersonalIDInicio ::', @HorarioPersonalIDInicio_, ':', @HorarioPersonalIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'IdiomaIDInicio::', @IdiomaIDInicio_, ':', @IdiomaIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'MarcaIDInicio::', @MarcaIDInicio_, ':', @MarcaIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'MedioContactoIDInicio::', @MedioContactoIDInicio_, ':', @MedioContactoIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'MunicipioIDInicio::', @MunicipioIDInicio_, ':', @GiroEmpresaIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'PaisIDInicio::', @PaisIDInicio_, ':', @PaisIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'ProfesionIDInicio::', @ProfesionIDInicio_, ':', @ProfesionIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'SexoIDInicio::', @SexoIDInicio_, ':', @SexoIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'TipoClienteIDInicio::', @GiroEmpresaIDInicio_, ':', @GiroEmpresaIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'TipoContactoPersonalIDInicio::', @TipoContactoPersonalIDInicio_, ':', @TipoContactoPersonalIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'TipoDomicilioIDInicio::', @TipoFechaIDInicio_, ':', @TipoFechaIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'TipoHorarioIDInicio::', @TipoHorarioIDInicio_, ':', @TipoHorarioIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'TipoMailIDInicio::', @TipoMailIDInicio_, ':', @TipoMailIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'TipoProductoIDInicio::', @TipoProductoIDInicio_, ':', @TipoProductoIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'CmpTipoProveedorIDInicio::', @CmpTipoProveedorIDInicio_, ':', @CmpTipoProveedorIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'TipoRepresentanteClienteIDInicio::', @TipoRepresentanteClienteIDInicio_, ':', @TipoRepresentanteClienteIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'CmpTipoRepresentanteProveedorIDInicio::', @CmpTipoRepresentanteProveedorIDInicio_, ':', @CmpTipoRepresentanteProveedorIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'CfgTipoTelefonoIDInicio::', @CfgTipoTelefonoIDInicio_, ':', @CfgTipoTelefonoIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'AuxUnidadIDInicio::', @AuxUnidadIDInicio_, ':', @AuxUnidadIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'VinculoIDInicio::', @VinculoIDInicio_, ':', @VinculoIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'ZonaIDInicio::', @ZonaIDInicio_, ':', @ZonaIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'CfgUsoTelefonoIDInicio::', @CfgUsoTelefonoIDInicio_, ':', @CfgUsoTelefonoIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'EmpresaID::', @EmpresaID_, ':', @EmpresaID, ';')
				SET @logMessage = Concat(@logMessage, 'FechaInicio::', @FechaInicio_, ':', @FechaInicio, ';')
				SET @logMessage = Concat(@logMessage, 'PpalSucursalID::', @PpalSucursalIDInicio_, ':', @PpalSucursalIDInicio, ';')

				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@EmpresaID as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgParamInicioUsuarioCosmos_Listado]...';


GO


CREATE PROCEDURE [dbo].[CfgParamInicioUsuarioCosmos_Listado]
@EmpresaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgParamInicioUsuarioCosmos',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  ParamInicioUsuarioCosmosID,				PpalAreaIDInicio,					PpalCentroCostoIDInicio,		EspCiudadIDInicio ,
            PpalConceptoEgresoIDInicio,				PpalConceptoIngresoIDInicio,		EspEstadoIDInicio,				AuxEstadoCivilIDInicio, 
			CfgEstatusClienteIDInicio,				CfgEstatusContactoPersonalIDInicio, CfgEstatusDocumentoIDInicio,
			CfgEstatusPersonalIDInicio,				CmpEstatusProveedorIDInicio,		CmpEstatusRepresentanteProveedorIDInicio,
			CfgFamiliaProductoIDInicio,				AuxFormaPagoIDInicio,				AuxGiroEmpresaIDInicio,			AuxHorarioPersonalIDInicio, 
			AuxIdiomaIDInicio,						AuxMarcaIDInicio,					AuxMedioContactoIDInicio,		EspMunicipioIDInicio, 
			EspPaisIDInicio,						AuxProfesionIDInicio,				SistemaSexoIDInicio,			CfgTipoClienteIDInicio, 
			CfgTipoContactoPersonalIDInicio, 		CfgTipoDomicilioIDInicio,			CfgTipoFechaIDInicio,			CfgTipoHorarioIDInicio, 
			CfgTipoMailIDInicio,					CfgTipoProductoIDInicio,			CmpTipoProveedorIDInicio,		CfgTipoRepresentanteClienteIDInicio, 
			CmpTipoRepresentanteProveedorIDInicio,	CfgTipoTelefonoIDInicio,			AuxUnidadIDInicio,				AuxVinculoIDInicio, 
			AuxZonaIDInicio,						EmpresaID,							FechaInicio,					CfgUsoTelefonoIDInicio,
			PpalSucursalIDInicio,
			(SELECT RFC FROM EspPersona WHERE EspPersonaID = 
					(SELECT EspPersonaID FROM SistemaEmpresa WHERE EmpresaID = @EmpresaID)) AS EmpresaRFC,
			(SELECT SATRegimenFiscalClave FROM SATRegimenFiscal WHERE SATRegimenFiscalID =
					(SELECT SATRegimenFiscalID FROM EspPersona WHERE EspPersonaID = 
					(SELECT EspPersonaID FROM SistemaEmpresa WHERE EmpresaID = @EmpresaID))) AS EmpresaSATRegimenFiscalClave,
			(SELECT CodigoPostal FROM EspDomicilio WHERE EspDomicilioID =
					(SELECT EspDomicilioIDFacturacion FROM EspPersona WHERE EspPersonaID = 
					(SELECT EspPersonaID FROM SistemaEmpresa WHERE EmpresaID = @EmpresaID))) AS EmpresaCP
	FROM    CfgParamInicioUsuarioCosmos
	WHERE	EmpresaID = @EmpresaID
	

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaID::', @EmpresaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgPeriodoOperativo_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CfgPeriodoOperativo_Consultar]
@CfgperiodoOperativoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgPeriodoOperativo',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@CfgperiodoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@CfgperiodoOperativoID_ int = @CfgperiodoOperativoID,
		@CfgEjercicioOperativoID_ int = 0,
		@periodoOrden_ int = 0,
		@FechaInicial_ date ,
		@FechaFinal_ date ,
		@FechaEjercePropuesta_ date 

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CfgperiodoOperativoID
	SELECT  @CfgperiodoOperativoID_ = CfgPeriodoOperativoID,	@CfgperiodoClave_ =CfgPeriodoClave,	@Nombre_=Nombre,@NombreCorto_ = NombreCorto, 
			@periodoOrden_ = PeriodoOrden,						@FechaInicial_ = FechaInicial,		@FechaFinal_ = FechaFinal,	
			@FechaEjercePropuesta_ = FechaEjercePresupuesto
	FROM    CfgPeriodoOperativo
	WHERE   CfgEjercicioOperativoID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CfgPeriodoOperativoID::', @CfgperiodoOperativoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as AuxBancoID,		@CfgperiodoClave_ as CfgPeriodoClave,	@Nombre_ as Nombre,	@NombreCorto_ as NombreCorto, 
			@periodoOrden_ as	PeriodoOrden,	@FechaInicial_ as FechaInicial,			@FechaFinal_ as FechaFinal,	
			@FechaEjercePropuesta_ as FechaEjercePresupuesto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgPeriodoOperativo_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CfgPeriodoOperativo_Eliminar]
@periodoOperativoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgPeriodoOperativo',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @periodoOperativoID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CfgPeriodoClave,'')
	  FROM	CfgPeriodoOperativo WHERE CfgPeriodoOperativoID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    CfgPeriodoOperativo
		WHERE   CfgPeriodoOperativoID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CfgPeriodoOperativo::', @PeriodoOperativoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CfgPeriodoOperativo_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CfgPeriodoOperativo_Guardar]
@PeriodoOperativoID INT,
@EjercicioOperativoID INT,
@PeriodoClave VARCHAR(6),
@Nombre VARCHAR(20),
@NombreCorto VARCHAR(6),
@PeriodoOrden INT,
@FechaInicial DATE,
@FechaFinal DATE,
@FechaEjercePresupuesto Date
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgPeriodoOperativo',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PeriodoOperativoID_ INT = @PeriodoOperativoID,
		@EjercicioOperativoID_ INT = 0,
		@PeriodoClave_ VARCHAR(6) = '',
		@Nombre_ VARCHAR(20) = '',
		@NombreCorto_ VARCHAR(6) = '',
		@PeriodoOrden_ INT = 0,
		@FechaInicial_ DATE,
		@FechaFinal_ DATE

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PeriodoOperativoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@EjercicioOperativoID_ =	IsNull(CfgEjercicioOperativoID, 0),
				@PeriodoClave_ =			IsNull(CfgPeriodoClave, ''),
				@Nombre_ =					IsNull(Nombre,''),
				@NombreCorto_ =				IsNull(NombreCorto,''),
				@PeriodoOrden_ =			IsNull(PeriodoOrden,''),
				@FechaInicial_ =			IsNull(FechaInicial, sysdatetime()),
				@FechaFinal_ =				IsNull(FechaFinal, sysdatetime())
		   FROM	CfgPeriodoOperativo WHERE CfgPeriodoOperativoID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  CfgPeriodoOperativo
			SET     CfgEjercicioOperativoID = @EjercicioOperativoID,
					CfgPeriodoClave = @PeriodoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					PeriodoOrden = @PeriodoOrden,
					FechaInicial = @FechaInicial,
					FechaFinal = @FechaFinal
			WHERE   CfgPeriodoOperativoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CfgPeriodoOperativo(
					CfgEjercicioOperativoID,
					CfgPeriodoClave,
					Nombre,
					NombreCorto,
					PeriodoOrden,
					FechaInicial,
					FechaFinal)
			VALUES  (
					@EjercicioOperativoID,
					@PeriodoClave,
					@Nombre,
					@NombreCorto,
					@PeriodoOrden,
					@FechaInicial,
					@FechaFinal)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @EjercicioOperativoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('BancoClave::', @PeriodoClave_, ':', @PeriodoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END

		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgPeriodoOperativo_Listado]...';


GO
CREATE PROCEDURE [dbo].[CfgPeriodoOperativo_Listado]
    @EjercicioOperativoID INT = NULL
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgPeriodoOperativo',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT 	*
	FROM CfgPeriodoOperativo
    WHERE @EjercicioOperativoID IS NULL OR CfgEjercicioOperativoID = @EjercicioOperativoID
    ORDER BY PeriodoOrden;

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgTasaIVA_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CfgTasaIVA_Consultar]
@CfgTasaIVAID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CfgTasaIVA',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@CfgTasaIVAClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@PorcentajeIVA_ decimal(5,2) = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @CfgTasaIVAID
	/************* FIN COPY 1  *********************/
	SELECT  @CfgTasaIVAClave_ = CfgTasaIVAClave,	@Nombre_ = Nombre,		@NombreCorto_ = NombreCorto,
			@PorcentajeIVA_ = PorcentajeIVA
	FROM    CfgTasaIVA
	WHERE   CfgTasaIVAID = @IDAConsultar

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CfgTasaIVAID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as CfgTasaIVAID,					@CfgTasaIVAClave_ as CfgTasaIVAClave,			
			@Nombre_ as Nombre,								@NombreCorto_ as NombreCorto,
			@PorcentajeIVA_ as PorcentajeIVA
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CfgTasaIVA_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CfgTasaIVA_Eliminar]
@CfgTasaIVAID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CfgTasaIVA',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CfgTasaIVAID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CfgTasaIVAClave,'')
	  FROM	CfgTasaIVA WHERE CfgTasaIVAID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    CfgTasaIVA
		WHERE   CfgTasaIVAID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CfgTasaIVAID::', @CfgTasaIVAID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @CfgTasaIVAID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CfgTasaIVA_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CfgTasaIVA_Guardar]
@CfgTasaIVAID int,
@CfgTasaIVAClave varchar(10) = null,
@Nombre varchar(60) = null,
@NombreCorto varchar(10) = null,
@PorcentajeIVA decimal(5,2) = 0
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CfgTasaIVA',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CfgTasaIVAClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@PorcentajeIVA_ decimal(5,2) = 0,
		@CfgTasaIVAID_ int = @CfgTasaIVAID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CfgTasaIVAID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@CfgTasaIVAClave_ = IsNull(CfgTasaIVAClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@CfgTasaIVAID_ = IsNull(CfgTasaIVAID,0)
		   FROM	CfgTasaIVA WHERE CfgTasaIVAID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @CfgTasaIVAClave_ = @ClaveNoAsignado and @CfgTasaIVAClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  CfgTasaIVA
			SET     CfgTasaIVAClave = @CfgTasaIVAClave,						Nombre = @Nombre,
					NombreCorto = @NombreCorto,								PorcentajeIVA = @PorcentajeIVA
			WHERE   CfgTasaIVAID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CfgTasaIVA(
					CfgTasaIVAClave,
					Nombre,
					NombreCorto,
					PorcentajeIVA)
			VALUES  (
					@CfgTasaIVAClave,
					@Nombre,
					@NombreCorto,
					@PorcentajeIVA)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CfgTasaIVAID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CfgTasaIVAClave::', @CfgTasaIVAClave_, ':', @CfgTasaIVAClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'PorcentajeIVA::', @PorcentajeIVA_, ':', @PorcentajeIVA, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CfgTasaIVA_Listado]...';


GO
CREATE PROCEDURE [dbo].[CfgTasaIVA_Listado]
@TipoListado varchar(10) = ''
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CfgTasaIVA',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('',0, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
/************* FIN COPY 1  *********************/
	IF @TipoListado = 'Minimo'
		SELECT  CfgTasaIVAID AS ID,	CfgTasaIVAClave AS Clave,		Nombre, 
				NombreCorto,		0 AS PadreID
		FROM    CfgTasaIVA
		ORDER BY CfgTasaIVAClave
	ELSE 
		SELECT  CfgTasaIVAID,					CfgTasaIVAClave,					Nombre,
				NombreCorto,					PorcentajeIVA
		FROM    CfgTasaIVA
		ORDER BY CfgTasaIVAClave

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoAsentamiento_Consultar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[CfgTipoAsentamiento_Consultar]
@CfgTipoAsentamientoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoAsentamiento',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@CfgTipoAsentamientoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@CfgTipoAsentamientoID_ int = @CfgTipoAsentamientoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @CfgTipoAsentamientoID
	SELECT  @CfgTipoAsentamientoID_ = CfgTipoAsentamientoID, @CfgTipoAsentamientoClave_ = CfgTipoAsentamientoClave, @Nombre_ = Nombre, @NombreCorto_ = NombreCorto
	FROM    CfgTipoAsentamiento
	WHERE   CfgTipoAsentamientoID = @CfgTipoAsentamientoID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CfgTipoAsentamientoID::', @CfgTipoAsentamientoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as CfgEstatusClienteID,					@CfgTipoAsentamientoClave_ as AuxBancoClave,	
			@Nombre_ as Nombre,										@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoAsentamiento_Eliminar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[CfgTipoAsentamiento_Eliminar]
@CfgTipoAsentamientoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoAsentamiento',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CfgTipoAsentamientoID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CfgTipoAsentamientoClave,'')
	  FROM	CfgTipoAsentamiento WHERE CfgTipoAsentamientoID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    CfgTipoAsentamiento
		WHERE   CfgTipoAsentamientoID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CfgTipoAsentamientoID::', @CfgTipoAsentamientoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoAsentamiento_Guardar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[CfgTipoAsentamiento_Guardar]
@CfgTipoAsentanientoID int,
@CfgTipoAsentanientoClave varchar(4),
@Nombre varchar(50),
@NombreCorto varchar(20)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoAsentaniento',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CfgTipoAsentanientoClave_ nvarchar(4) = '',
		@Nombre_ nvarchar(30) = '',			
		@NombreCorto_ varchar(10) = '',
		@CfgTipoAsentanientoID_ int = @CfgTipoAsentanientoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CfgTipoAsentanientoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CfgTipoAsentanientoClave_ =		IsNull(CfgTipoAsentamientoClave,''),
	 			@Nombre_ =					IsNull(Nombre,''),
				@NombreCorto_ =				IsNull(NombreCorto,''),
				@CfgTipoAsentanientoID_ =		IsNull(CfgTipoAsentamientoID,0)
		   FROM	CfgTipoAsentamiento WHERE @CfgTipoAsentanientoID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  CfgTipoAsentamiento
			SET     CfgTipoAsentamientoClave = @CfgTipoAsentanientoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   CfgTipoAsentamientoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CfgTipoAsentamiento(
					CfgTipoAsentamientoClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@CfgTipoAsentanientoClave,
					@Nombre,
					@NombreCorto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CfgTipoAsentanientoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('TipoAsentamientoClave::', @CfgTipoAsentanientoClave_, ':', @CfgTipoAsentanientoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END

		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoAsentamiento_Listado]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoAsentamiento_Listado]
@TipoListado varchar(10) = ''

-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CfgTipoAsentamiento',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  CfgTipoAsentamientoID AS ID,			CfgTipoAsentamientoClave AS Clave,
				Nombre,									NombreCorto,
				0 as PadreID
		FROM    CfgTipoAsentamiento
		order by CfgTipoAsentamientoID
	ELSE
		SELECT  CfgTipoAsentamientoID, CfgTipoAsentamientoClave, Nombre, NombreCorto
		FROM    CfgTipoAsentamiento
		order by CfgTipoAsentamientoID

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoCliente_Consultar]...';


GO


CREATE PROCEDURE [dbo].[CfgTipoCliente_Consultar]
@CfgTipoClienteID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoCliente',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@CfgTipoClienteClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@CfgTipoClienteID_ int = @CfgTipoClienteID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @CfgTipoClienteID
	SELECT  @CfgTipoClienteID_=CfgTipoClienteID,@CfgTipoClienteClave_ = CfgTipoClienteClave,@Nombre_ = Nombre, @NombreCorto_ = NombreCorto
	FROM    CfgTipoCliente
	WHERE   CfgTipoClienteID = @CfgTipoClienteID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CfgTipoClienteID::', @CfgTipoClienteID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as CfgEstatusClienteID,					@CfgTipoClienteClave_ as AuxBancoClave,	
			@Nombre_ as Nombre,										@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoCliente_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CfgTipoCliente_Eliminar]
@CfgTipoClienteID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoCliente',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CfgTipoClienteID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CfgTipoClienteClave,'')
	  FROM	CfgTipoCliente WHERE CfgTipoClienteID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    CfgTipoCliente
		WHERE   CfgTipoClienteID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CfgTipoClienteID::', @CfgTipoClienteID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoCliente_Guardar]...';


GO


CREATE PROCEDURE [dbo].[CfgTipoCliente_Guardar]
@CfgTipoClienteID int,
@CfgTipoClienteClave varchar(4),
@Nombre varchar(50),
@NombreCorto varchar(20)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoCliente',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CfgTipoClienteClave_ nvarchar(4) = '',
		@Nombre_ nvarchar(30) = '',			
		@NombreCorto_ varchar(10) = '',
		@CfgTipoClienteID_ int = @CfgTipoClienteID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CfgTipoClienteID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CfgTipoClienteClave_ =		IsNull(CfgTipoClienteClave,''),
	 			@Nombre_ =					IsNull(Nombre,''),
				@NombreCorto_ =				IsNull(NombreCorto,''),
				@CfgTipoClienteID_ =		IsNull(CfgTipoClienteID,0)
		   FROM	CfgTipoCliente WHERE CfgTipoClienteID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  CfgTipoCliente
			SET     CfgTipoClienteClave = @CfgTipoClienteClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   CfgTipoClienteID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CfgTipoCliente(
					CfgTipoClienteClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@CfgTipoClienteClave,
					@Nombre,
					@NombreCorto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CfgTipoClienteID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('BancoClave::', @CfgTipoClienteClave_, ':', @CfgTipoClienteClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END

		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoCliente_Listado]...';


GO


CREATE PROCEDURE [dbo].[CfgTipoCliente_Listado]
-- Parámetros para Bitácora
	 @UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoCliente',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  CfgTipoClienteID,CfgTipoClienteClave,Nombre,NombreCorto
	FROM    CfgTipoCliente
	ORDER BY CfgTipoClienteID

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoContactoPersonal_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoContactoPersonal_Consultar]
@CfgTipoContactoPersonalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoContactoPersonal',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@CfgTipoContactoPersonalClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@CfgTipoContactoPersonalID_ int = @CfgTipoContactoPersonalID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @CfgTipoContactoPersonalID
	SELECT  @CfgTipoContactoPersonalID_ = CfgTipoContactoPersonalID,@CfgTipoContactoPersonalClave_ = CfgTipoContactoPersonalClave,
			@Nombre_ = Nombre,@NombreCorto_ = NombreCorto
	FROM    CfgTipoContactoPersonal
	WHERE   CfgTipoContactoPersonalID = @CfgTipoContactoPersonalID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('TipoContactoPersonalID::', @CfgTipoContactoPersonalID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as AuxBancoID,					@CfgTipoContactoPersonalClave_ as CfgTipoContactoPersonalClave,	
			@Nombre_ as Nombre,								@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoContactoPersonal_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoContactoPersonal_Eliminar]
@CfgTipoContactoPersonalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoContactoPersonal',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CfgTipoContactoPersonalID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CfgTipoContactoPersonalClave,'')
	  FROM	CfgTipoContactoPersonal WHERE CfgTipoContactoPersonalID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    CfgTipoContactoPersonal
		WHERE   CfgTipoContactoPersonalClave = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CfgTipoContactoPersonalID::', @CfgTipoContactoPersonalID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoContactoPersonal_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoContactoPersonal_Guardar]
@CfgTipoContactoPersonalID int,
@CfgTipoContactoPersonalClave varchar(4),
@Nombre varchar(50),
@NombreCorto varchar(20)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoContactoPersonal',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CfgTipoContactoPersonalID_ int = @CfgTipoContactoPersonalID,
		@CfgTipoContactoPersonalClave_ varchar(4) = '',
		@Nombre_ varchar(50) = '',
		@NombreCorto_ varchar(20) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CfgTipoContactoPersonalID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CfgTipoContactoPersonalClave_ =	IsNull(CfgTipoContactoPersonalClave,''),
	 			@CfgTipoContactoPersonalID_ =		IsNull(CfgTipoContactoPersonalID,''),
				@Nombre_ =							IsNull(Nombre,''),
				@NombreCorto_ =						IsNull(NombreCorto,'')
		   FROM	CfgTipoContactoPersonal WHERE CfgTipoContactoPersonalID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  CfgTipoContactoPersonal
			SET     CfgTipoContactoPersonalClave = @CfgTipoContactoPersonalClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   CfgTipoContactoPersonalID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CfgTipoContactoPersonal(
					CfgTipoContactoPersonalClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@CfgTipoContactoPersonalClave,
					@Nombre,
					@NombreCorto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CfgTipoContactoPersonalID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CfgTipoContactoPersonalClave::', @CfgTipoContactoPersonalClave_, ':', @CfgTipoContactoPersonalClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END

		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoContactoPersonal_Listado]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoContactoPersonal_Listado]
@TipoListado varchar(10) = ''

-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CfgTipoContactoPersonal',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  CfgTipoContactoPersonalID AS ID,		CfgTipoContactoPersonalClave AS Clave,
				Nombre,									NombreCorto,
				0 AS PadreID
		FROM    CfgTipoContactoPersonal
		ORDER BY CfgTipoContactoPersonalClave
	ELSE
		SELECT  CfgTipoContactoPersonalID,CfgTipoContactoPersonalClave,Nombre,NombreCorto
		FROM    CfgTipoContactoPersonal
		ORDER BY CfgTipoContactoPersonalClave

-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoDomicilio_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoDomicilio_Consultar]
@CfgTipoDomicilioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoDomicilio',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

DECLARE	@CfgTipoDomicilioClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@CfgSistemaTipoDomicilioID_ int = 0,
		@Estatus_ bit = 0,
		@CfgTipoDomicilioID_ int = @CfgTipoDomicilioID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CfgTipoDomicilioID
	SELECT  @CfgTipoDomicilioID = CfgTipoDomicilioID,	@CfgTipoDomicilioClave_ = CfgTipoDomicilioClave,	@Nombre_ = Nombre,	
			@NombreCorto_ = NombreCorto,					@Estatus_ = Estatus,									@CfgSistemaTipoDomicilioID_ = CfgSistemaTipoDomicilioID
	FROM    CfgTipoDomicilio
	WHERE   CfgTipoDomicilioID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CfgTipoDomicilio::', @CfgTipoDomicilioID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoDomicilio_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoDomicilio_Eliminar]
@CfgTipoDomicilioID int
	-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoDomicilio',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CfgTipoDomicilioID
    DELETE
    FROM    CfgTipoDomicilio
    WHERE   CfgTipoDomicilioID = @CfgTipoDomicilioID

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CfgTipoDomicilioID::', @CfgTipoDomicilioID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoDomicilio_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoDomicilio_Guardar]
@CfgTipoDomicilioID int,
@CfgSistemaTipoDomicilioID int,
@CfgTipoDomicilioClave varchar(10) = null,
@Nombre varchar(40) = null,
@Estatus bit,
@NombreCorto varchar(15) = null
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoDomicilio',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CfgTipoDomicilioClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@CfgSistemaTipoDomicilioID_ int = 0,
		@Estatus_ bit = 0,
		@CfgTipoDomicilioID_ int = @CfgTipoDomicilioID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CfgTipoDomicilioID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CfgTipoDomicilioClave_ = IsNull(CfgTipoDomicilioClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@CfgSistemaTipoDomicilioID_ = IsNull(CfgSistemaTipoDomicilioID,0),
				@Estatus_ = IsNull(Estatus,0),
				@CfgTipoDomicilioID_ = IsNull(CfgTipoDomicilioID,0)
		   FROM	CfgTipoDomicilio WHERE CfgTipoDomicilioID = @CfgTipoDomicilioID
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CfgTipoDomicilio
			SET     CfgTipoDomicilioClave = @CfgTipoDomicilioClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					Estatus = @Estatus,
					CfgSistemaTipoDomicilioID = @CfgSistemaTipoDomicilioID
			WHERE   CfgTipoDomicilioID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CfgTipoDomicilio(
					CfgTipoDomicilioClave,
					Nombre,
					NombreCorto,
					Estatus,
					CfgSistemaTipoDomicilioID)
			VALUES  (
					@CfgTipoDomicilioClave,
					@Nombre,
					@NombreCorto,
					@Estatus,
					@CfgSistemaTipoDomicilioID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END


		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CfgTipoDomicilioID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('TipoDomicilioClave::', @CfgTipoDomicilioClave_, ':', @CfgTipoDomicilioClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'Estatus::', @Estatus_, ':', @Estatus, ';')
				SET @logMessage = Concat(@logMessage, 'SistemaTipoDomicilioID::', @CfgSistemaTipoDomicilioID_, ':', @CfgSistemaTipoDomicilioID, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoDomicilio_Listado]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoDomicilio_Listado]
@SistemaTipoDomicilioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoDomicilio',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT		CfgTipoDomicilioID,CfgTipoDomicilioClave,Nombre,NombreCorto,Estatus,CfgSistemaTipoDomicilioID
	FROM		CfgTipoDomicilio
	WHERE		CfgSistemaTipoDomicilioID = @SistemaTipoDomicilioID
	ORDER BY	CfgTipoDomicilioClave

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CfgTipoDomicilioID::', @SistemaTipoDomicilioID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoFecha_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoFecha_Consultar]
@CfgTipoFechaID int

-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CfgTipoFecha',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@CfgTipoFechaClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@TipoFechaID_ int = 0,
		@Estatus_ bit = 0,
		@CfgTipoFechaID_ int = @CfgTipoFechaID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET		@IDAConsultar = @CfgTipoFechaID

	SELECT  @CfgTipoFechaID_ = CfgTipoFechaID,	@CfgTipoFechaClave_ = CfgTipoFechaClave,	@Nombre_ = Nombre,
			@NombreCorto_ = NombreCorto,		@Estatus_ = Estatus,						@TipoFechaID_ = TipoFechaID 
	FROM    CfgTipoFecha
	WHERE   CfgTipoFechaID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CfgTipoFechaID::', @CfgTipoFechaID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as CfgTipoFechaID,			@CfgTipoFechaClave_ as CfgTipoFechaClave,	
			@Nombre_ as Nombre,							@NombreCorto_ as NombreCorto,
			@Estatus_ as Estatus,						@TipoFechaID_ as TipoFechaID 
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
	        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoFecha_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CfgTipoFecha_Eliminar]
@CfgTipoFechaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoFecha',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDABorrar = @CfgTipoFechaID
    DELETE
    FROM    CfgTipoFecha
    WHERE   CfgTipoFechaID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CfgTipoFechaID::', @CfgTipoFechaID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
	/********************* FIN COPY 2  *********************************/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoFecha_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoFecha_Guardar]
@CfgTipoFechaID int,
@CfgTipoFechaClave varchar(10) = null,
@Nombre varchar(40) = null,
@NombreCorto varchar(15) = null,
@Estatus bit,
@TipoFechaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CfgTipoFecha',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CfgTipoFechaClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@TipoFechaID_ int = 0,
		@Estatus_ bit = 0,
		@CfgTipoFechaID_ int = @CfgTipoFechaID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CfgTipoFechaID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@CfgTipoFechaClave_ =	IsNull(CfgTipoFechaClave,''),
	 			@Nombre_ =				IsNull(Nombre,''),
				@NombreCorto_ =			IsNull(NombreCorto,''),
				@TipoFechaID_ =			IsNull(TipoFechaID,0),
				@Estatus_ =				IsNull(Estatus,0),
				@CfgTipoFechaID_ =		IsNull(CfgTipoFechaID,0)
		   FROM	CfgTipoFecha WHERE CfgTipoFechaID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @CfgTipoFechaClave_ = @ClaveNoAsignado and @CfgTipoFechaClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CfgTipoFecha
			SET     CfgTipoFechaClave = @CfgTipoFechaClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					TipoFechaID = @TipoFechaID,
					Estatus = @Estatus
			WHERE   CfgTipoFechaID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CfgTipoFecha(
					CfgTipoFechaClave,
					TipoFechaID,
					Nombre,
					NombreCorto,
					Estatus
					)
			VALUES  (
					@CfgTipoFechaClave,
					@TipoFechaID,
					@Nombre,
					@NombreCorto,
					@Estatus
					)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CfgTipoFechaID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CfgTipoFechaClave::', @CfgTipoFechaClave_, ':', @CfgTipoFechaClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'Estatus::', @Estatus_, ':', @Estatus, ';')
				SET @logMessage = Concat(@logMessage, 'SistemaTipoFechaID::', @TipoFechaID_, ':', @TipoFechaID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoFecha_Listado]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoFecha_Listado]
@TipoListado varchar(10) = ''

-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CfgTipoFecha',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('SistemaTipoFechaID::', @SistemaTipoFechaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  CfgTipoFechaID AS ID,					CfgTipoFechaClave AS Clave,
				Nombre,									NombreCorto,
				0 AS PadreID
		FROM    CfgTipoFecha
		ORDER BY CfgTipoFechaClave
	ELSE
		SELECT  CfgTipoFechaID,CfgTipoFechaClave,Nombre,NombreCorto,Estatus,TipoFechaID
		FROM    CfgTipoFecha
		ORDER BY CfgTipoFechaClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoHorario_Consultar]...';


GO


CREATE PROCEDURE [dbo].[CfgTipoHorario_Consultar]
@CfgTipoHorarioID smallint
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoHorario',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@CfgTipoClienteClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@CfgTipoHorarioID_ int = @CfgTipoHorarioID,
		@EmpresaID_ int = 0,
		@Homogeneo_ char(1) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @CfgTipoHorarioID
	SELECT  @CfgTipoHorarioID_ = CfgTipoHorarioID,@CfgTipoClienteClave_ = CfgTipoHorarioClave,@Nombre_ =Nombre,@NombreCorto_ = NombreCorto,
			@EmpresaID_=EmpresaID,@Homogeneo_=Homogeneo
	FROM    CfgTipoHorario
	WHERE   CfgTipoHorarioID = @CfgTipoHorarioID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CfgTipoHorarioID::', @CfgTipoHorarioID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as CfgEstatusClienteID,					@CfgTipoClienteClave_ as AuxBancoClave,	
			@Nombre_ as Nombre,										@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoHorario_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CfgTipoHorario_Eliminar]
@TipoHorarioID smallint
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoHorario',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @TipoHorarioID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CfgTipoHorarioClave,'')
	  FROM	CfgTipoHorario WHERE CfgTipoHorarioID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    CfgTipoHorario
		WHERE   CfgTipoHorarioID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CfgTipoHorarioID::', @TipoHorarioID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoHorario_Guardar]...';


GO


CREATE PROCEDURE [dbo].[CfgTipoHorario_Guardar]
@TipoHorarioID int,
@TipoHorarioClave varchar(10),
@Nombre varchar(30),
@NombreCorto varchar(10),
@EmpresaID int,
@Homogeneo char(1)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoHorario',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@TipoHorarioID_ int = @TipoHorarioID,
		@TipoHorarioClave_ varchar(10) = '',
		@Nombre_ varchar(30) = '',
		@NombreCorto_ varchar(10) = '',
		@EmpresaID_ int = 0,
		@Homogeneo_ char(1) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @TipoHorarioID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@TipoHorarioID_ =	IsNull(CfgTipoHorarioID,''),
				@TipoHorarioClave_= IsNull(CfgTipoHorarioID,''),
				@Nombre_ =			IsNull(Nombre,''),
				@NombreCorto_ =		IsNull(NombreCorto,''),
				@EmpresaID_ =		IsNull(EmpresaID,''),
				@Homogeneo_ =		IsNull(Homogeneo,'')
		   FROM	CfgTipoHorario WHERE CfgTipoHorarioID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  CfgTipoHorario
        SET     
                CfgTipoHorarioClave = @TipoHorarioClave,
				Nombre = @Nombre,
				NombreCorto = @NombreCorto,
				EmpresaID = @EmpresaID,
				Homogeneo = @Homogeneo
        WHERE   CfgTipoHorarioID = @TipoHorarioID
		END
		ELSE
		BEGIN        
			 INSERT  INTO CfgTipoHorario(
                CfgTipoHorarioClave,
				Nombre,
				NombreCorto,
				EmpresaID,
				Homogeneo)
        VALUES  (
                @TipoHorarioClave,
				@Nombre,
				@NombreCorto,
				@EmpresaID,
				@Homogeneo)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @TipoHorarioID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('TipoHorarioClave::', @TipoHorarioClave_, ':', @TipoHorarioClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END

		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
SET NOCOUNT ON
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoHorario_Listado]...';


GO


CREATE PROCEDURE [dbo].[CfgTipoHorario_Listado]
-- Parámetros para Bitácora
	 @UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora  nvarchar(100) = 'CfgTipoHorario',	
		@Operacion				nvarchar(20) = 'Read', 
		@logMessage				varchar(Max) = '',
		@isChangeBeLogged		bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  CfgTipoHorarioID,CfgTipoHorarioClave,Nombre,NombreCorto,EmpresaID,Homogeneo
	FROM    CfgTipoHorario
	ORDER BY CfgTipoHorarioClave

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoMail_Consultar]...';


GO

CREATE PROCEDURE [dbo].[CfgTipoMail_Consultar]
@TipoMailID int

-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoMail',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

DECLARE	 @CfgTipoMailID_ int = @TipoMailID
		,@CfgTipoMailClave_ varchar(10) = ''
		,@Nombre_ varchar(40) = ''
		,@NombreCorto_ varchar(15) = ''
		,@Estatus_ bit
		,@CfgSistemaTipoMailID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @TipoMailID
	SELECT  CfgTipoMailID = @CfgSistemaTipoMailID_,	CfgTipoMailClave = @CfgTipoMailClave_,	Nombre = @Nombre_,
			NombreCorto = @NombreCorto_,			Estatus = @Estatus_,					CfgSistemaTipoMailID = @CfgSistemaTipoMailID_
	FROM    CfgTipoMail
	WHERE   CfgTipoMailID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('TipoMailID::', @TipoMailID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
						
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoMail_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CfgTipoMail_Eliminar]
@TipoMailID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoMail',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDABorrar = @TipoMailID
    DELETE
    FROM    CfgTipoMail
    WHERE   CfgTipoMailID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CfgTipoMailID::', @TipoMailID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoMail_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoMail_Guardar]
@TipoMailID int,
@SistemaTipoMailID int,
@TipoMailClave varchar(10) = null,
@Nombre varchar(40) = null,
@NombreCorto varchar(15) = null,
@Estatus bit
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoMail',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@TipoMailClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@SistemaTipoMailID_ int = 0,
		@Estatus_ bit = 0,
		@TipoMailID_ int = @TipoMailID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @TipoMailID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@TipoMailClave_ = IsNull(CfgTipoMailClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@SistemaTipoMailID_ = IsNull(CfgSistemaTipoMailID,0),
				@Estatus_ = IsNull(Estatus,0),
				@TipoMailID_ = IsNull(CfgTipoMailID,0)
		   FROM	CfgTipoMail WHERE CfgTipoMailID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CfgTipoMail
			SET     CfgTipoMailClave = @TipoMailClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					Estatus = @Estatus,
					CfgSistemaTipoMailID = @SistemaTipoMailID
			WHERE   CfgTipoMailID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CfgTipoMail(
					CfgTipoMailClave,
					Nombre,
					NombreCorto,
					Estatus,
					CfgSistemaTipoMailID)
			VALUES  (
					@TipoMailClave,
					@Nombre,
					@NombreCorto,
					@Estatus,
					@SistemaTipoMailID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @TipoMailID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('TipoMailClave::', @TipoMailClave_, ':', @TipoMailClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'Estatus::', @Estatus_, ':', @Estatus, ';')
				SET @logMessage = Concat(@logMessage, 'SistemaTipoMailID::', @SistemaTipoMailID_, ':', @SistemaTipoMailID, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoMail_Listado]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoMail_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoMail',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  CfgTipoMailID,CfgTipoMailClave,Nombre,NombreCorto,Estatus,CfgSistemaTipoMailID
	FROM    CfgTipoMail	
	ORDER BY CfgTipoMailClave

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoProducto_Consultar]...';


GO


CREATE PROCEDURE [dbo].[CfgTipoProducto_Consultar]
@TipoProductoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoProducto',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@TipoProductoID_ int = @TipoProductoID,
		@TipoProductoClave_ varchar(4) = '',
		@Nombre_ varchar(40) = '',
		@NombreCorto_ varchar(10)= '', 
		@EmpresaID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @TipoProductoID
	SELECT  @TipoProductoID_=CfgTipoClienteID,@TipoProductoClave_ = CfgTipoClienteClave,@Nombre_ = Nombre, @NombreCorto_ = NombreCorto
	FROM    CfgTipoCliente
	WHERE   CfgTipoClienteID = @TipoProductoID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CfgTipoProductoID::', @TipoProductoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as CfgTipoClienteID,	@TipoProductoClave_ as CfgTipoClienteClave,
			@Nombre_ as Nombre,					@NombreCorto_ as NombreCorto		
			
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoProducto_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CfgTipoProducto_Eliminar]
@TipoProductoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoProducto',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @TipoProductoID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CfgTipoProductoClave,'')
	  FROM	CfgTipoProducto WHERE CfgTipoProductoID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    CfgTipoProducto
		WHERE   CfgTipoProductoID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CfgTipoProductoID::', @TipoProductoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoProducto_Guardar]...';


GO


CREATE PROCEDURE [dbo].[CfgTipoProducto_Guardar]
@CfgTipoProductoID int,
@CfgTipoProductoClave varchar(4),
@Nombre varchar(40),
@NombreCorto varchar(10), 
@EmpresaID int = 0
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoProducto',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE		@CfgTipoProductoID_ int = @CfgTipoProductoID,
			@CfgTipoProductoClave_ varchar(4) = '',
			@Nombre_ varchar(40) = '',
			@NombreCorto_ varchar(10) = '' 
			
SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CfgTipoProductoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CfgTipoProductoClave_ = IsNull(CfgTipoProductoClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@CfgTipoProductoID_ = IsNull(CfgTipoProductoID,0)
				FROM CfgTipoProducto WHERE CfgTipoProductoID = @CfgTipoProductoID
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CfgTipoProducto
        SET     
                CfgTipoProductoClave = @CfgTipoProductoClave,
				Nombre = @Nombre,
				NombreCorto = @NombreCorto
        WHERE   CfgTipoProductoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CfgTipoProducto(
               			CfgTipoProductoClave,
						Nombre,
						NombreCorto)
				VALUES  (
						@CfgTipoProductoClave,
						@Nombre,
						@NombreCorto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END


		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CfgTipoProductoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('TipoDomicilioClave::', @CfgTipoProductoClave_, ':', @CfgTipoProductoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoProducto_Listado]...';


GO


CREATE PROCEDURE [dbo].[CfgTipoProducto_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoProducto',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  CfgTipoProductoID AS ID,					CfgTipoProductoClave AS Clave,
				Nombre,										NombreCorto,
				0 AS PadreID
		FROM    CfgTipoProducto
		ORDER BY CfgTipoProductoClave
	ELSE
		SELECT  CfgTipoProductoID,CfgTipoProductoClave,Nombre,NombreCorto
		FROM    CfgTipoProducto
		ORDER BY CfgTipoProductoClave


	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoRepresentanteCliente_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoRepresentanteCliente_Consultar]
@TipoRepresentanteClienteID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoRepresentanteCliente',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@CfgTipoRepresentanteClienteClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@CfgTipoRepresentanteClienteID_ int = @TipoRepresentanteClienteID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @TipoRepresentanteClienteID
	SELECT  @CfgTipoRepresentanteClienteID_ = CfgTipoRepresentanteClienteID,@CfgTipoRepresentanteClienteClave_ = CfgTipoRepresentanteClienteClave,@Nombre_ = Nombre, @NombreCorto_ = NombreCorto
	FROM    CfgTipoRepresentanteCliente
	WHERE	CfgTipoRepresentanteClienteID = @TipoRepresentanteClienteID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CFgTipoRepresentanteClienteID::', @TipoRepresentanteClienteID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as CfgEstatusClienteID,					@CfgTipoRepresentanteClienteClave_ as AuxBancoClave,	
			@Nombre_ as Nombre,										@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoRepresentanteCliente_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoRepresentanteCliente_Eliminar]
@CfgTipoRepresentanteClienteID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoReprensentanteCliente',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CfgTipoRepresentanteClienteID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CfgTipoRepresentanteClienteClave,'')
	  FROM	CfgTipoRepresentanteCliente WHERE CfgTipoRepresentanteClienteID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    CfgTipoCliente
		WHERE   CfgTipoClienteID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CfgTipoReprensentanteClienteID::', @CfgTipoRepresentanteClienteID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoRepresentanteCliente_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoRepresentanteCliente_Guardar]
@TipoRepresentanteClienteID int,
@TipoRepresentanteClienteClave varchar(4),
@Nombre varchar(50),
@NombreCorto varchar(20)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoRepresentanteCliente',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@TipoRepresentanteClienteID_ int = @TipoRepresentanteClienteID,
		@TipoRepresentateClienteClave_ varchar(10) = '',
		@Nombre_ varchar(30) = '',
		@NombreCorto_ varchar(10) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @TipoRepresentanteClienteID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@TipoRepresentanteClienteID_ =	IsNull(CfgTipoRepresentanteClienteID,''),
				@TipoRepresentateClienteClave_  = IsNull(CfgTipoRepresentanteClienteClave,''),
				@Nombre_ =			IsNull(Nombre,''),
				@NombreCorto_ =		IsNull(NombreCorto,'')
		   FROM	CfgTipoRepresentanteCliente WHERE CfgTipoRepresentanteClienteID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  CfgTipoRepresentanteCliente
        SET     
                CfgTipoRepresentanteClienteClave = @TipoRepresentanteClienteClave,
				Nombre = @Nombre,
				NombreCorto = @NombreCorto
			WHERE   CfgTipoRepresentanteClienteID = @TipoRepresentanteClienteID
		END
		ELSE
		BEGIN        
			 INSERT  INTO CfgTipoRepresentanteCliente(
                CfgTipoRepresentanteClienteClave,
				Nombre,
				NombreCorto)
        VALUES  (
                @TipoRepresentanteClienteClave,
				@Nombre,
				@NombreCorto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @TipoRepresentanteClienteID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('TipoHorarioClave::', @TipoRepresentanteClienteID_ , ':', @TipoRepresentanteClienteID, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END

		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
SET NOCOUNT ON
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoRepresentanteCliente_Listado]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoRepresentanteCliente_Listado]
-- Parámetros para Bitácora
	 @UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora  nvarchar(100) = 'CfgTipoRepresentanteCliente',	
		@Operacion				nvarchar(20) = 'Read', 
		@logMessage				varchar(Max) = '',
		@isChangeBeLogged		bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  CfgTipoRepresentanteClienteID,CfgTipoRepresentanteClienteClave,Nombre,NombreCorto
	FROM    CfgTipoRepresentanteCliente
	ORDER BY CfgTipoRepresentanteClienteClave

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoRepresentanteProveedor_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoRepresentanteProveedor_Consultar]
@CfgTipoRepresentanteProveedorID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoRepresentanteProveedor',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

DECLARE @TipoRepresentanteProveedorID_ int,
		@CfgTipoRepresentanteProveedorClave_ varchar(10) = null,
		@Nombre_ varchar(40) = null,
		@NombreCorto_ varchar(15) = null

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET		@IDAConsultar = @CfgTipoRepresentanteProveedorID

	SELECT  @CfgTipoRepresentanteProveedorClave_ = CfgTipoRepresentanteProveedorClave,
			@Nombre_ = Nombre,@NombreCorto_ = NombreCorto,@TipoRepresentanteProveedorID_ = TipoRepresentanteProveedorID 
	FROM    CfgTipoRepresentanteProveedor
	WHERE   CfgTipoRepresentanteProveedorID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CfgTipoRepresentanteProveedorID::', @CfgTipoRepresentanteProveedorID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as CfgTipoRepresentanteProveedorID,			@CfgTipoRepresentanteProveedorClave_ as CfgTipoRepresentanteProveedorClave,			
			@Nombre_ as Nombre,											@NombreCorto_ as NombreCorto,
			@TipoRepresentanteProveedorID_ as TipoRepresentanteProveedorID
ELSE
SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoRepresentanteProveedor_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoRepresentanteProveedor_Eliminar]
@CfgTipoRepresentanteProveedorID int
	-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoRepresentanteProveedor',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CfgTipoRepresentanteProveedorID
    DELETE
    FROM    CfgTipoRepresentanteProveedor
    WHERE   CfgTipoRepresentanteProveedorID = @CfgTipoRepresentanteProveedorID

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CfgTipoRepresentanteProveedorID::', @CfgTipoRepresentanteProveedorID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoRepresentanteProveedor_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoRepresentanteProveedor_Guardar]
@CfgTipoRepresentanteProveedorID int,
@CfgTipoRepresentanteProveedorClave varchar(10) = null,
@Nombre varchar(40) = null,
@NombreCorto varchar(15) = null,
@TipoRepresentanteProveedorID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoRepresentanteProveedor',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CfgTipoRepresentanteProveedorClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@TipoRepresentanteProveedorID_ int = 0,
		@Estatus_ bit = 0,
		@CfgTipoRepresentanteProveedorID_ int = @CfgTipoRepresentanteProveedorID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CfgTipoRepresentanteProveedorID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CfgTipoRepresentanteProveedorClave_ = IsNull(CfgTipoRepresentanteProveedorClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@TipoRepresentanteProveedorID_ = IsNull(TipoRepresentanteProveedorID,0),
				@CfgTipoRepresentanteProveedorID_ = IsNull(CfgTipoRepresentanteProveedorID,0)
		   FROM	CfgTipoRepresentanteProveedor WHERE CfgTipoRepresentanteProveedorID = @CfgTipoRepresentanteProveedorID
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CfgTipoRepresentanteProveedor
			SET     CfgTipoRepresentanteProveedorClave = @CfgTipoRepresentanteProveedorClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					TipoRepresentanteProveedorID = @TipoRepresentanteProveedorID
			WHERE   CfgTipoRepresentanteProveedorID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CfgTipoRepresentanteProveedor(
					CfgTipoRepresentanteProveedorClave,
					Nombre,
					NombreCorto,
					TipoRepresentanteProveedorID)
			VALUES  (
					@CfgTipoRepresentanteProveedorClave,
					@Nombre,
					@NombreCorto,
					@TipoRepresentanteProveedorID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END


		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CfgTipoRepresentanteProveedorID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CfgTipoRepresentanteProveedorClave::', @CfgTipoRepresentanteProveedorClave_, ':', @CfgTipoRepresentanteProveedorClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'TipoRepresentanteProveedorID::', @TipoRepresentanteProveedorID_, ':', @TipoRepresentanteProveedorID, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoRepresentanteProveedor_Listado]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoRepresentanteProveedor_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoRepresentanteProveedor',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('::',  ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  CTRP.CfgTipoRepresentanteProveedorID AS ID,		CTRP.CfgTipoRepresentanteProveedorClave AS Clave,
				CTRP.Nombre,									CTRP.NombreCorto,
				0 as PadreID
		FROM    CfgTipoRepresentanteProveedor CTRP
		inner join SistemaTipoRepresentanteProveedor STRP on CTRP.TipoRepresentanteProveedorID = STRP.TipoRepresentanteProveedorID
		ORDER BY CfgTipoRepresentanteProveedorClave
	ELSE
		SELECT  CTRP.CfgTipoRepresentanteProveedorID,CTRP.CfgTipoRepresentanteProveedorClave,CTRP.Nombre,CTRP.NombreCorto,CTRP.TipoRepresentanteProveedorID, STRP.Nombre as SistemaTipoRepresentanteProveedor
		FROM    CfgTipoRepresentanteProveedor CTRP
		inner join SistemaTipoRepresentanteProveedor STRP on CTRP.TipoRepresentanteProveedorID = STRP.TipoRepresentanteProveedorID
		ORDER BY CfgTipoRepresentanteProveedorClave


	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoTelefono_Consultar]...';


GO

CREATE PROCEDURE [dbo].[CfgTipoTelefono_Consultar]
@CfgTipoTelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoTelefono',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

DECLARE @CfgTipoTelefonoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@SistemaTipoTelefonoID_ int = 0,
		@Activo_ bit = 0,
		@CfgTipoTelefonoID_ int = @CfgTipoTelefonoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CfgTipoTelefonoID
	SELECT  @CfgTipoTelefonoID_ = CfgTipoTelefonoID, @CfgTipoTelefonoClave_ = CfgTipoTelefonoClave,@Nombre_ = Nombre, @NombreCorto_ = NombreCorto,
			@Activo_ = Activo ,@SistemaTipoTelefonoID_ = SistemaTipoTelefonoID 
	FROM    CfgTipoTelefono
	WHERE   CfgTipoTelefonoID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CfgTipoTelefonoID::', @CfgTipoTelefonoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
						
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoTelefono_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CfgTipoTelefono_Eliminar]
@CfgTipoTelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoTelefono',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDABorrar = @CfgTipoTelefonoID
    DELETE
    FROM    CfgTipoTelefono
    WHERE   CfgTipoTelefonoID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CfgTipoTelefonoID::', @CfgTipoTelefonoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoTelefono_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoTelefono_Guardar]
@CfgTipoTelefonoID int,
@CfgTipoTelefonoClave varchar(10) = null,
@Nombre varchar(60) = null,
@NombreCorto varchar(10) = null,
@Activo bit,
@SistemaTipoTelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoTelefono',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CfgTipoTelefonoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@SistemaTipoTelefonoID_ int = 0,
		@Activo_ bit = 0,
		@CfgTipoTelefonoID_ int = @CfgTipoTelefonoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CfgTipoTelefonoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CfgTipoTelefonoClave_ = IsNull(CfgTipoTelefonoClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@Activo_ = IsNull(Activo,0),
				@SistemaTipoTelefonoID_ = IsNull(SistemaTipoTelefonoID,0),
				@CfgTipoTelefonoID_ = IsNull(CfgTipoTelefonoID,0)
		   FROM	CfgTipoTelefono WHERE CfgTipoTelefonoID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CfgTipoTelefono
			SET     CfgTipoTelefonoClave = @CfgTipoTelefonoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					Activo = @Activo,
					SistemaTipoTelefonoID = @SistemaTipoTelefonoID
			WHERE   CfgTipoTelefonoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CfgTipoTelefono(
					CfgTipoTelefonoClave,
					Nombre,
					NombreCorto,
					Activo,
					SistemaTipoTelefonoID)
			VALUES  (
					@CfgTipoTelefonoClave,
					@Nombre,
					@NombreCorto,
					@Activo,
					@SistemaTipoTelefonoID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CfgTipoTelefonoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('TipoTelefonoClave::', @CfgTipoTelefonoClave_, ':', @CfgTipoTelefonoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'Activo::', @Activo_, ':', @Activo, ';')
				SET @logMessage = Concat(@logMessage, 'SistemaTipoTelefonoID::', @SistemaTipoTelefonoID_, ':', @SistemaTipoTelefonoID, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
				END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgTipoTelefono_Listado]...';


GO
CREATE PROCEDURE [dbo].[CfgTipoTelefono_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgTipoTelefono',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  CfgTipoTelefonoID,CfgTipoTelefonoClave,Nombre,NombreCorto,Activo,SistemaTipoTelefonoID
	FROM    CfgTipoTelefono
	ORDER BY CfgTipoTelefonoClave

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CfgUsoTelefono_Consultar]...';


GO

CREATE PROCEDURE [dbo].[CfgUsoTelefono_Consultar]
@CfgUsoTelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgUsoTelefono',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CfgUsoTelefonoID
	SELECT  CfgUsoTelefonoID,CfgUsoTelefonoClave,Nombre,NombreCorto,Activo,SistemaUsoTelefonoID 
	FROM    CfgUsoTelefono
	WHERE   CfgUsoTelefonoID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CfgUsoTelefonoID::', @CfgUsoTelefonoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
						
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgUsoTelefono_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CfgUsoTelefono_Eliminar]
@CfgUsoTelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgUsoTelefono',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDABorrar = @CfgUsoTelefonoID
    DELETE
    FROM    CfgUsoTelefono
    WHERE   CfgUsoTelefonoID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CfgUsoTelefonoID::', @CfgUsoTelefonoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CfgUsoTelefono_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CfgUsoTelefono_Guardar]
@CfgUsoTelefonoID int,
@SistemaUsoTelefonoID int,
@CfgUsoTelefonoClave varchar(10) = null,
@Nombre varchar(40) = null,
@NombreCorto varchar(15) = null,
@Activo bit
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CfgUsoTelefono',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CfgUsoTelefonoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(40) = '',			
		@NombreCorto_ varchar(15) = '',
		@SistemaUsoTelefonoID_ int = 0,
		@Activo_ bit = 0,
		@CfgUsoTelefonoID_ int = @CfgUsoTelefonoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CfgUsoTelefonoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CfgUsoTelefonoClave_ = IsNull(CfgUsoTelefonoClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@SistemaUsoTelefonoID_ = IsNull(SistemaUsoTelefonoID,0),
				@Activo_ = IsNull(Activo,0),
				@CfgUsoTelefonoID_ = IsNull(CfgUsoTelefonoID,0)
		   FROM	CfgUsoTelefono WHERE CfgUsoTelefonoID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CfgUsoTelefono
			SET     CfgUsoTelefonoClave = @CfgUsoTelefonoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					Activo = @Activo,
					SistemaUsoTelefonoID = @SistemaUsoTelefonoID
			WHERE   CfgUsoTelefonoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CfgUsoTelefono(
					CfgUsoTelefonoClave,
					Nombre,
					NombreCorto,
					Activo,
					SistemaUsoTelefonoID)
			VALUES  (
					@CfgUsoTelefonoClave,
					@Nombre,
					@NombreCorto,
					@Activo,
					@SistemaUsoTelefonoID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CfgUsoTelefonoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat(@logMessage, 'CfgUsoTelefonoClave::', @CfgUsoTelefonoClave_, ':', @CfgUsoTelefonoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'Activo::', @Activo_, ':', @Activo, ';')
				SET @logMessage = Concat(@logMessage, 'SistemaUsoTelefonoID::', @SistemaUsoTelefonoID_, ':', @SistemaUsoTelefonoID, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
				END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CfgUsoTelefono_Listado]...';


GO
CREATE PROCEDURE [dbo].[CfgUsoTelefono_Listado]
@TipoListado varchar(10) = ''

-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CfgUsoTelefono',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
	END

	IF @TipoListado = 'Minimo'
		SELECT  CfgUsoTelefonoID AS ID,					CfgUsoTelefonoClave AS Clave,
				Nombre,									NombreCorto,
				0 AS PadreID
		FROM    CfgUsoTelefono
		ORDER BY CfgUsoTelefonoClave
	ELSE
		SELECT  CfgUsoTelefonoID,CfgUsoTelefonoClave,Nombre,NombreCorto,Activo,SistemaUsoTelefonoID
		FROM    CfgUsoTelefono
		ORDER BY CfgUsoTelefonoClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpAnticipoDetalle_Consultar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[CmpAnticipoDetalle_Consultar]
@CmpAnticipoDetalleID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpAnticipoDetalle',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CmpAnticipoDetalleID
	SELECT  CmpAnticipoDetalleID,CmpAnticipoEncabezadoID, PpalCentroCostoID, PpalAreaID, PpalConceptoEgresoID,
			PpalCuentaContableID, Importe, Descripcion
	FROM    CmpAnticipoDetalle
	WHERE   CmpAnticipoDetalleID = @IDAConsultar
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CmpAnticipoDetalleID::', @CmpAnticipoDetalleID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @CmpAnticipoDetalleID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
				END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpAnticipoDetalle_Eliminar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[CmpAnticipoDetalle_Eliminar]
@CmpAnticipoDetalleID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpAnticipoDetalle',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CmpAnticipoDetalleID
    DELETE
    FROM    CmpAnticipoDetalle
    WHERE   CmpAnticipoDetalleID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CmpAnticipoDetalleID::', @CmpAnticipoDetalleID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
	/********************* FIN COPY 2  *********************************/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CmpAnticipoDetalle_Guardar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[CmpAnticipoDetalle_Guardar]
@CmpAnticipoDetalleID int,
@CmpAnticipoEncabezadoID int,
@PpalCentroCostoID int,
@PpalAreaID int,
@PpalConceptoEgresoID int,
@PpalCuentaContableID int,
@Importe float,
@Descripcion int
-- Parámetros para Bitácora
	,@UsuarioIBitacora			int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpAnticipoDetalle',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CmpAnticipoDetalleID_ int  = @CmpAnticipoDetalleID,
		@CmpAnticipoEncabezadoID_ int = 0,
		@PpalCentroCostoID_ int = 0,
		@PpalAreaID_ int = 0,
		@PpalConceptoEgresoID_ int = 0,
		@PpalCuentaContableID_ int = 0,
		@Importe_ float = 0.0,
		@Descripcion_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CmpAnticipoDetalleID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CmpAnticipoEncabezadoID_ = IsNull(CmpAnticipoEncabezadoID,0),
				@CmpAnticipoEncabezadoID_  = IsNull(CmpAnticipoEncabezadoID,0),
				@PpalCentroCostoID_ = IsNull(PpalCentroCostoID,0),
				@PpalAreaID_ = IsNull(PpalAreaID, 0),
				@PpalConceptoEgresoID_ = IsNull(PpalConceptoEgresoID,0),
				@PpalCuentaContableID_ = ISNull(PpalCuentaContableID, -0),
				@Importe_ = IsNull(Importe, 0.0),
				@Descripcion_ = ISNULL(Descripcion, 0)
		   FROM	CmpAnticipoDetalle WHERE CmpAnticipoDetalleID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE	CmpAnticipoDetalle
			SET		CmpAnticipoEncabezadoID = @CmpAnticipoEncabezadoID,
					PpalCentroCostoID = @PpalCentroCostoID,
					PpalAreaID = @PpalAreaID,
					PpalConceptoEgresoID = @PpalConceptoEgresoID,
					PpalCuentaContableID = @PpalCuentaContableID,
					Importe = @Importe,
					Descripcion = @Descripcion
			WHERE	CmpAnticipoDetalleID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CmpAnticipoDetalle(
					CmpAnticipoEncabezadoID,
					PpalCentroCostoID,
					PpalAreaID,
					PpalConceptoEgresoID,
					PpalCuentaContableID,
					Importe,
					Descripcion)
			VALUES  (
				    @CmpAnticipoEncabezadoID,
				    @PpalCentroCostoID,
				    @PpalAreaID,
				    @PpalConceptoEgresoID,
				    @PpalCuentaContableID,
				    @Importe,
				    @Descripcion)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CmpAnticipoDetalleID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CmpAnticipoEncabezadoID::', @CmpAnticipoEncabezadoID_, ':', @CmpAnticipoEncabezadoID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalAreaID::', @PpalAreaID_, ':', @PpalAreaID, ';')
				SET @logMessage = Concat(@logMessage, 'Importe::', @Importe_, ':', @Importe, ';')
				SET @logMessage = Concat(@logMessage, 'Descripcion::', @Descripcion_, ':', @Descripcion, ';')
				
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIBitacora
														,@Descripcion		= @Descripcion
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpAnticipoDetalle_Listado]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[CmpAnticipoDetalle_Listado]
@CmpAnticipoDetalleID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpAnticipoDetalle',	
		@Operacion				 nvarchar(20) = 'Read', 
		@logMessage				 varchar(Max) = '',
		@isChangeBeLogged		 bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  *
	FROM    CmpAnticipoDetalle
	WHERE	CmpAnticipoDetalleID = @CmpAnticipoDetalleID
	Order By Importe

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CmpAnticipoDetalleID::', @CmpAnticipoDetalleID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpAnticipoEncabezado_Consultar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[CmpAnticipoEncabezado_Consultar]
@CmpAnticipoEncabezadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpAnticipoEncabezado',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CmpAnticipoEncabezadoID
	SELECT  CmpAnticipoEncabezadoID, PpalSucursalID, TipoDocumentoID, PpalSerieID, Folio, PpalProveedorID, CmpTipoMovimientoProveedorID,
			PpalPersonalID, Fecha, Referencia, Concepto, Importe, BcoMovimientoID
	FROM    CmpAnticipoEncabezado
	WHERE   CmpAnticipoEncabezadoID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CmpAnticipoEncabezadoID::', @CmpAnticipoEncabezadoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @CmpAnticipoEncabezadoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
						
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpAnticipoEncabezado_Eliminar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[CmpAnticipoEncabezado_Eliminar]
@CmpAnticipoEncabezadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpCompraEncabezado',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CmpAnticipoEncabezadoID
    DELETE
    FROM    CmpAnticipoEncabezado
    WHERE   CmpAnticipoEncabezadoID = @CmpAnticipoEncabezadoID

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CmpAnticipoEncabezadoID::', @CmpAnticipoEncabezadoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @CmpAnticipoEncabezadoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CmpAnticipoEncabezado_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CmpAnticipoEncabezado_Guardar]
@CmpAnticipoEncabezadoID int,
@PpalSucursalID int,
@TipoDocumentoID int,
@PpalSerieID int,
@Folio int,
@PpalProveedorID int,
@CmpTipoMovimientoProveedorID int,
@PpalPersonalID int,
@Fecha datetime,
@Referencia varchar(50),
@Concepto varchar(100),
@Importe float,
@BcoMovimientoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = ''
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpAnticipoEncabezado', @IDAActualizar int,
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CmpAnticipoEncabezadoID_ int = @CmpAnticipoEncabezadoID,
		@PpalSucursalID_ int = 0,
		@TipoDocumentoID_ int = 0,
		@PpalSerieID_ int = 0,
		@Folio_ int = 0,
		@PpalProveedorID_ int = 0,
		@CmpTipoMovimientoProveedorID_ int = 0, 
		@PpalPersonalID_ int = 0,
		@Fecha_ datetime = 0,
		@Referencia_ varchar(50) = '',
		@Concepto_ varchar(100) = '',
		@Importe_ float = 0.0 ,
		@BcoMovimientoID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	 
	SET @IDAActualizar = @CmpAnticipoEncabezadoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@PpalSucursalID_  = IsNull(PpalSucursalID,0),
				@TipoDocumentoID_ = IsNull(TipoDocumentoID,0),
				@PpalSerieID_ = IsNull(PpalSerieID,0),
				@Folio_ = IsNull(Folio,0),
				@PpalProveedorID_  = IsNull(PpalProveedorID,0),
				@CmpTipoMovimientoProveedorID_ = IsNull(CmpTipoMovimientoProveedorID,0),
				@PpalPersonalID_ = IsNull(PpalPersonalID,0),
				@Fecha_ = IsNull(Fecha,0),
				@Referencia_ = ISNull(Referencia,''),
				@Concepto_ = IsNull(Concepto,''),
				@Importe_ = ISNULL(Importe, 0),
				@BcoMovimientoID = IsNull(BcoMovimientoID,0)
		   FROM	CmpAnticipoEncabezado WHERE CmpAnticipoEncabezadoID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CmpAnticipoEncabezado
			SET     PpalSucursalID = @PpalSucursalID,
					TipoDocumentoID = @TipoDocumentoID,
					PpalSerieID  = @PpalSerieID,
					Folio = @Folio,
					PpalProveedorID = @PpalProveedorID,
					CmpTipoMovimientoProveedorID = @CmpTipoMovimientoProveedorID,
					PpalPersonalID = @PpalPersonalID,
					Fecha = @Fecha,
					Referencia = @Referencia,
					Concepto = @Concepto,
					BcoMovimientoID = @BcoMovimientoID
			WHERE   CmpAnticipoEncabezadoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CmpAnticipoEncabezado(
					PpalSucursalID,
					TipoDocumentoID,
					PpalSerieID,
					Folio,
					PpalProveedorID,
					CmpTipoMovimientoProveedorID,
					PpalPersonalID,
					Fecha,
					Referencia,
					Concepto,
					BcoMovimientoID)
			VALUES  (
					@PpalSucursalID,
					@TipoDocumentoID,
					@PpalSerieID,
					@Folio,
					@PpalProveedorID,
					@CmpTipoMovimientoProveedorID,
					@PpalPersonalID,
					@Fecha,
					@Referencia,
					@Concepto,
					@BcoMovimientoID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CmpAnticipoEncabezadoID_ > 0  SET @Operacion = 'Update' 	
										ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CmpAnticipoEncabezadoID::', @CmpAnticipoEncabezadoID_, ':', @CmpAnticipoEncabezadoID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalSucursalID::', @PpalSucursalID_, ':', @PpalSucursalID, ';')
				SET @logMessage = Concat(@logMessage, 'TipoDocumentoID::', @TipoDocumentoID_, ':', @TipoDocumentoID, ';')
				SET @logMessage = Concat(@logMessage, 'SerieID::', @PpalSerieID_, ':', @PpalSerieID, ';')
				SET @logMessage = Concat('Folio::', @Folio_, ':', @Folio, ';')
				SET @logMessage = Concat('PpalProveedorID::', @PpalProveedorID_, ':', @PpalProveedorID, ';')
				SET @logMessage = Concat(@logMessage, 'CmpTipoMovimientoProveedorID::', @CmpTipoMovimientoProveedorID_, ':', @CmpTipoMovimientoProveedorID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalPersonalID::', @PpalPersonalID_, ':', @PpalPersonalID, ';')
				SET @logMessage = Concat(@logMessage, 'Fecha::', @Fecha_, ':', @Fecha, ';')
				SET @logMessage = Concat('Referencia::', @Referencia_, ':', @Referencia, ';')
				SET @logMessage = Concat('Concepto::', @Concepto_, ':', @Concepto, ';')
				SET @logMessage = Concat(@logMessage, 'BcoMovimientoID::', @BcoMovimientoID_, ':', @BcoMovimientoID, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpAnticipoEncabezado_Listado]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[CmpAnticipoEncabezado_Listado]
@CmpAnticipoEncabezadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpAnticipoEncabezado',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  *
	FROM    CmpAnticipoEncabezado
	WHERE	PpalSucursalID = @CmpAnticipoEncabezadoID
	ORDER BY CmpAnticipoEncabezadoID

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CmpAnticipoEncavezadoID::', @CmpAnticipoEncabezadoID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpBcoMovimiento_ListadoParametros]...';


GO


CREATE PROCEDURE [dbo].[CmpBcoMovimiento_ListadoParametros]
@FechaInicial DateTime,
@FechaFinal DateTime,
@PpalProveedorID	int
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora			int
	,@OpcionIDSolicitudBase		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpBcoMovimiento',	
		@Operacion	nvarchar(20) = 'ListaParametros', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SELECT	BM.BcoMovimientoID,			MAX(BM.Fecha) AS Fecha,			MAX(PS.PpalSerieClave) AS PpalSerieClave,
			MAX(BM.Folio) AS Folio,		MAX(BM.Importe) AS Importe,		MAX(BC.Cuenta) AS Cuenta,
			MAX(EP.Nombre + ' ' + EP.ApellidoPaterno + ' ' + EP.ApellidoMaterno) AS PersonalNombre
	  FROM	BcoMovimiento BM
	  INNER JOIN PpalSerie PS ON BM.PpalSerieID = PS.PpalSerieID
	  INNER JOIN PpalPersonal PP ON BM.PpalPersonalID = PP.PpalPersonalID
	  INNER JOIN EspPersona EP ON PP.EspPersonaID = EP.EspPersonaID
	  INNER JOIN BcoCuenta BC ON BM.BcoCuentaID = BC.BcoCuentaID
	  INNER JOIN CmpCompraPago CCP ON CCP.BcoMovimientoID = BM.BcoMovimientoID
	  INNER JOIN CmpCompraEncabezado CCE ON CCP.CmpCompraEncabezadoID = CCE.CmpCompraEncabezadoID
	  WHERE BM.Fecha Between @FechaInicial and @FechaFinal AND
			CCE.PpalProveedorID = @PpalProveedorID
	GROUP BY BM.BcoMovimientoID

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('FechaInicial::', @FechaInicial, ':',0, ';')
		SET @logMessage = Concat(@logMessage, 'FechaFinal::', @FechaFinal, ':', 0, ';')
		SET @logMessage = Concat(@logMessage, 'ProveedorID::', @PpalProveedorID, ':', 0, ';')
		SET @logMessage = Concat(@logMessage, 'OpcionID::', @OpcionIDSolicitudBase, ':', 0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpCompra_ListadoAsignaPagos]...';


GO


CREATE PROCEDURE [dbo].[CmpCompra_ListadoAsignaPagos]
@ProveedorID	int
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora			int
	,@OpcionIDSolicitudBase		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpCompraEncabezadoAsignaPagos',	
		@Operacion	nvarchar(20) = 'ListaParametros', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT CCE.CmpCompraEncabezadoID,								MAX(PSu.Nombre) AS SucursalNombre,				
		MAX(PSe.PpalSerieClave) AS SerieClave,						MAX(CCE.Folio) AS Folio,
		MAX(CCE.Fecha) AS Fecha,								
		SUM(Cantidad * Costo) +
		( SELECT SUM(ROUND(ROUND(COCD.Costo * COCD.Cantidad,2) *  CTI.PorcentajeIVA / 100,2))
			FROM CmpCompraDetalle COCD
			LEFT OUTER JOIN PpalProducto PP ON COCD.PpalProductoID = PP.PpalProductoID
			LEFT OUTER JOIN CfgTasaIVA CTI ON PP.CfgTasaIVAID = CTI.CfgTasaIVAID
		   WHERE COCD.CmpCompraEncabezadoID = CCE.CmpCompraEncabezadoID ) -
		( SELECT SUM(ROUND(CEIRD.Porcentaje * ROUND(COCD.Costo * COCD.Cantidad,2) / 100,2))
			FROM CmpCompraDetalle COCD, CfgEsquemaImpuestoRetencionDetalle CEIRD
			LEFT OUTER JOIN CfgImpuestoRetencion CIR ON (CEIRD.CfgImpuestoRetencionID = CIR.CfgImpuestoRetencionID)
		   WHERE CEIRD.Activo = 'S' AND CEIRD.CfgEsquemaImpuestoRetencionID = 1 and 
				COCD.CmpCompraEncabezadoID = CCE.CmpCompraEncabezadoID)  AS Total,
	    ( SELECT SUM(Importe)
			FROM CmpCompraPago CCP
		   WHERE CCP.CmpCompraEncabezadoID = CCE.CmpCompraEncabezadoID) AS Pagado
	  FROM CmpCompraEncabezado CCE
		LEFT OUTER JOIN PpalSucursal PSu ON CCE.PpalSucursalID = PSu.PpalSucursalID
		LEFT OUTER JOIN PpalSerie PSe ON CCE.PpalSerieID = PSe.PpalSerieID
		LEFT OUTER JOIN PpalProveedor PP ON CCE.PpalProveedorID = PP.PpalProveedorID
		LEFT OUTER JOIN CfgEstatusDocumento CED ON CCE.CfgEstatusDocumentoID = CED.CfgEstatusDocumentoID
		LEFT OUTER JOIN EspPersona EP ON PP.EspPersonaID = EP.EspPersonaID
		LEFT OUTER JOIN CmpCompraDetalle COCD ON CCE.CmpCompraEncabezadoID = COCD.CmpCompraEncabezadoID
	 WHERE (CCE.PpalProveedorID = @ProveedorID or @ProveedorID = 0)
		AND (CED.SistemaEstatusTipoDocumentoID IN (SELECT EstatusTipoDocumentoID   
													FROM SistemaEstatusDocumentoOpcion
												   WHERE OpcionID = @OpcionIDSolicitudBase) or 1 = 1)
	GROUP BY CCE.CmpCompraEncabezadoID
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = Concat(@logMessage, 'ProveedorID::', @ProveedorID, ':', 0, ';')
		SET @logMessage = Concat(@logMessage, 'OpcionID::', @OpcionIDSolicitudBase, ':', 0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpCompra_ListadoCargaFacturas]...';


GO


CREATE PROCEDURE [dbo].[CmpCompra_ListadoCargaFacturas]
@FechaInicial DateTime,
@FechaFinal DateTime,
@EstatusFactura varchar(20)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpCompraEncabezado',	
		@Operacion	nvarchar(20) = 'ListaParametros', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT COCE.CmpCompraEncabezadoID,							MAX(PSu.Nombre) AS SucursalNombre,				
		MAX(PSe.PpalSerieClave) AS SerieClave,						MAX(COCE.Folio) AS Folio,
		MAX(COCE.Fecha) AS Fecha,									MAX(CED.Nombre) AS EstatusNombre,
		MAX(CASE WHEN FisicaMoral = 'F' 
			THEN EP.Nombre + ' ' + EP.ApellidoPaterno + ' ' + EP.ApellidoMaterno
			ELSE EP.NombreComercial END) AS ProveedorNombre,		SUM(Cantidad * Costo) AS ImporteTotal,
		MAX(COCE.Referencia) AS Referencia,							MAX(COCE.Concepto) AS Concepto,
		MAX(COCE.LinkXML) as LinkXML,								MAX(COCE.LinkPDF) AS LinkPDF,
		MAX(CASE WHEN COCE.EstatusFactura = 'S' THEN 'CARGADA' WHEN COCE.EstatusFactura = 'N' THEN 'NO CARGADA' 
				 WHEN COCE.EstatusFactura = 'I' THEN 'INCORRECTA' ELSE 'REVISADA'  END) AS EstatusFactura,
		( SELECT SUM(ROUND(ROUND(COCD.Costo * COCD.Cantidad,2) *  CTI.PorcentajeIVA / 100,2)) Importe
			FROM CmpCompraDetalle COCD
			LEFT OUTER JOIN PpalProducto PP ON COCD.PpalProductoID = PP.PpalProductoID
			LEFT OUTER JOIN CfgTasaIVA CTI ON PP.CfgTasaIVAID = CTI.CfgTasaIVAID
		   WHERE COCD.CmpCompraEncabezadoID = COCE.CmpCompraEncabezadoID ) as IVA,
		( SELECT SUM(ROUND(CEIRD.Porcentaje * ROUND(COCD.Costo * COCD.Cantidad,2) / 100,2))
			FROM CmpCompraDetalle COCD, CfgEsquemaImpuestoRetencionDetalle CEIRD
			LEFT OUTER JOIN CfgImpuestoRetencion CIR ON (CEIRD.CfgImpuestoRetencionID = CIR.CfgImpuestoRetencionID)
		   WHERE CEIRD.Activo = 'S' AND CEIRD.CfgEsquemaImpuestoRetencionID = 1 and 
				COCD.CmpCompraEncabezadoID = COCE.CmpCompraEncabezadoID) as Retenciones
	  FROM CmpCompraEncabezado COCE
		LEFT OUTER JOIN PpalSucursal PSu ON COCE.PpalSucursalID = PSu.PpalSucursalID
		LEFT OUTER JOIN PpalSerie PSe ON COCE.PpalSerieID = PSe.PpalSerieID
		LEFT OUTER JOIN PpalProveedor PP ON COCE.PpalProveedorID = PP.PpalProveedorID
		LEFT OUTER JOIN CfgEstatusDocumento CED ON COCE.CfgEstatusDocumentoID = CED.CfgEstatusDocumentoID
		LEFT OUTER JOIN EspPersona EP ON PP.EspPersonaID = EP.EspPersonaID
		LEFT OUTER JOIN CmpCompraDetalle COCD ON COCE.CmpCompraEncabezadoID = COCD.CmpCompraEncabezadoID
	 WHERE COCE.Fecha Between @FechaInicial and @FechaFinal
		AND (COCE.PpalProveedorID in (SELECT PpalProveedorID FROM PpalProveedor 
								WHERE EspPersonaID in (SELECT EspPersonaID FROM SegUsuario WHERE SegUsuarioID = @UsuarioIDBitacora )))
	GROUP BY COCE.CmpCompraEncabezadoID
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('FechaInicial::', @FechaInicial, ':',0, ';')
		SET @logMessage = Concat(@logMessage, 'FechaFinal::', @FechaFinal, ':', 0, ';')
		SET @logMessage = Concat(@logMessage, 'EstatusFactura::', @EstatusFactura, ':', 0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpCompra_ListadoCargaFacturasPersonal]...';


GO


CREATE PROCEDURE [dbo].[CmpCompra_ListadoCargaFacturasPersonal]
@FechaInicial DateTime,
@FechaFinal DateTime,
@ProveedorID	int,
@EstatusFactura varchar(20)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpCompraEncabezado',	
		@Operacion	nvarchar(20) = 'ListaParametros', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT CCE.CmpCompraEncabezadoID,							MAX(PSu.Nombre) AS SucursalNombre,				
		MAX(PSe.PpalSerieClave) AS SerieClave,						MAX(CCE.Folio) AS Folio,
		MAX(CCE.Fecha) AS Fecha,									MAX(CED.Nombre) AS EstatusNombre,
		MAX(CASE WHEN FisicaMoral = 'F' 
			THEN EP.Nombre + ' ' + EP.ApellidoPaterno + ' ' + EP.ApellidoMaterno
			ELSE EP.NombreComercial END) AS ProveedorNombre,		SUM(Cantidad * Costo) AS ImporteTotal,
		MAX(CCE.Referencia) AS Referencia,							MAX(CCE.Concepto) AS Concepto,
		MAX(CCE.LinkXML) as LinkXML,								MAX(CCE.LinkPDF) AS LinkPDF,
		MAX(CASE WHEN CCE.EstatusFactura = 'S' THEN 'CARGADA' WHEN CCE.EstatusFactura = 'N' THEN 'NO CARGADA' 
				 WHEN CCE.EstatusFactura = 'I' THEN 'INCORRECTA' ELSE 'REVISADA'  END) AS EstatusFactura,
		( SELECT SUM(ROUND(ROUND(CCD.Costo * CCD.Cantidad,2) *  CTI.PorcentajeIVA / 100,2)) Importe
			FROM CmpCompraDetalle CCD
			LEFT OUTER JOIN PpalProducto PP ON CCD.PpalProductoID = PP.PpalProductoID
			LEFT OUTER JOIN CfgTasaIVA CTI ON PP.CfgTasaIVAID = CTI.CfgTasaIVAID
		   WHERE CCD.CmpCompraEncabezadoID = CCE.CmpCompraEncabezadoID ) as IVA,
		( SELECT SUM(ROUND(CEIRD.Porcentaje * ROUND(CCD.Costo * CCD.Cantidad,2) / 100,2))
			FROM CmpCompraDetalle CCD, CfgEsquemaImpuestoRetencionDetalle CEIRD
			LEFT OUTER JOIN CfgImpuestoRetencion CIR ON (CEIRD.CfgImpuestoRetencionID = CIR.CfgImpuestoRetencionID)
		   WHERE CEIRD.Activo = 'S' AND CEIRD.CfgEsquemaImpuestoRetencionID = 1 and 
				CCD.CmpCompraEncabezadoID = CCE.CmpCompraEncabezadoID) as Retenciones
	  FROM CmpCompraEncabezado CCE
		LEFT OUTER JOIN PpalSucursal PSu ON CCE.PpalSucursalID = PSu.PpalSucursalID
		LEFT OUTER JOIN PpalSerie PSe ON CCE.PpalSerieID = PSe.PpalSerieID
		LEFT OUTER JOIN PpalProveedor PP ON CCE.PpalProveedorID = PP.PpalProveedorID
		LEFT OUTER JOIN CfgEstatusDocumento CED ON CCE.CfgEstatusDocumentoID = CED.CfgEstatusDocumentoID
		LEFT OUTER JOIN EspPersona EP ON PP.EspPersonaID = EP.EspPersonaID
		LEFT OUTER JOIN CmpCompraDetalle CCD ON CCE.CmpCompraEncabezadoID = CCD.CmpCompraEncabezadoID
	 WHERE CCE.Fecha Between @FechaInicial and @FechaFinal
	    AND (CCE.PpalProveedorID = @ProveedorID or @ProveedorID = 0)
	GROUP BY CCE.CmpCompraEncabezadoID
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('FechaInicial::', @FechaInicial, ':',0, ';')
		SET @logMessage = Concat(@logMessage, 'FechaFinal::', @FechaFinal, ':', 0, ';')
		SET @logMessage = Concat(@logMessage, 'EstatusFactura::', @EstatusFactura, ':', 0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpCompra_ListadoParametros]...';


GO


CREATE PROCEDURE [dbo].[CmpCompra_ListadoParametros]
@TipoDocumentoID int,
@SucursalInicialID int,
@SucursalFinalID int,
@FechaInicial DateTime,
@FechaFinal DateTime,
@ProveedorID int,
@SerieInicialID int,
@SerieFinalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpCompraEncabezado',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT CCE.CmpCompraEncabezadoID,							MAX(PSu.Nombre) AS SucursalNombre,				
		MAX(PSe.PpalSerieClave) AS SerieClave,						MAX(CCE.Folio) AS Folio,
		MAX(CCE.Fecha) as Fecha,									MAX(CED.Nombre) AS EstatusNombre,
		MAX(EP.RazonSocial) as ProveedorNombre,
		SUM(CCD.Cantidad * CCD.Costo) as ImporteTotal
	  FROM CmpCompraEncabezado CCE
		LEFT OUTER JOIN PpalSucursal PSu ON CCE.PpalSucursalID = PSu.PpalSucursalID
		LEFT OUTER JOIN PpalSerie PSe ON CCE.PpalSerieID = PSe.PpalSerieID
		LEFT OUTER JOIN PpalProveedor PP ON CCE.PpalProveedorID = PP.PpalProveedorID
		LEFT OUTER JOIN CfgEstatusDocumento CED ON CCE.CfgEstatusDocumentoID = CED.CfgEstatusDocumentoID
		LEFT OUTER JOIN EspPersona EP ON PP.EspPersonaID = EP.EspPersonaID
		LEFT OUTER JOIN CmpCompraDetalle CCD ON CCE.CmpCompraEncabezadoID = CCD.CmpCompraEncabezadoID
	 WHERE CCE.TipoDocumentoID = @TipoDocumentoID
		AND PSu.PpalSucursalClave Between (SELECT PpalSucursalClave FROM PpalSucursal WHERE PpalSucursal.PpalSucursalID = @SucursalInicialID) AND
									(SELECT PpalSucursalClave FROM PpalSucursal WHERE PpalSucursal.PpalSucursalID = @SucursalFinalID)					
		AND CCE.Fecha Between @FechaInicial and @FechaFinal
		AND (CCE.PpalProveedorID = @ProveedorID or @ProveedorID = 0)
		AND PSe.PpalSerieClave Between (SELECT PpalSerieClave FROM PpalSerie WHERE PpalSerie.PpalSerieID = @SerieInicialID) AND
									(SELECT PpalSerieClave FROM PpalSerie WHERE PpalSerie.PpalSerieID = @SerieFinalID)					
	GROUP BY CCE.CmpCompraEncabezadoID
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('SucursalInicial::', @SucursalInicialID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpCompraDesglose_Consultar]...';


GO


CREATE PROCEDURE [dbo].[CmpCompraDesglose_Consultar]
@CmpCompraDesgloseID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpCompraDesglose',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CmpCompraDesgloseID
	SELECT  CmpCompraDesgloseID,CmpCompraDetalleID,Renglon,PpalSucursalID,PpalCentroCostoID,PpalAreaID,PpalAlmacenID,PpalConceptoEgresoID,PpalCuentaContableID,Cantidad,CmpOrdenCompraDesgloseID 
	FROM    CmpCompraDesglose
	WHERE   CmpCompraDesgloseID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CmpCompraDesgloseID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
			END
		END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpCompraDesglose_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CmpCompraDesglose_Eliminar]
@CmpCompraDesgloseID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpCompraDesglose',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CmpCompraDesgloseID
    DELETE
    FROM    CmpCompraDesglose
    WHERE   CmpCompraDesgloseID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @CmpCompraDesgloseID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CmpCompraDesgloseID::', @CmpCompraDesgloseID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CmpCompraDesglose_Guardar]...';


GO


CREATE PROCEDURE [dbo].[CmpCompraDesglose_Guardar]
@CmpCompraDesgloseID int,
@CmpCompraDetalleID int,
@Renglon int,
@PpalSucursalID int,
@CentroCostoID int,
@PpalAreaID  int,
@AlmacenID int,
@ConceptoEgresoID int,
@CuentaContableID int,
@Cantidad float,
@CmpOrdenCompraDesgloseID  int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpCompraDesglose',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CmpCompraDetalleID_ int,
		@Renglon_ int,
		@PpalSucursalID_ int,
		@CentroCostoID_ int,
		@AreaID_  int,
		@AlmacenID_ int,
		@ConceptoEgresoID_ int,
		@CuentaContableID_ int,
		@Cantidad_ float,
		@CmpOrdenCompraDesgloseID_ int,
		@CmpCompraDesgloseID_ int = @CmpCompraDesgloseID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CmpCompraDesgloseID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CmpCompraDetalleID_ = IsNull(CmpCompraDetalleID,0),
				@Renglon_ = IsNull(Renglon,0),
				@PpalSucursalID_ = IsNull(PpalSucursalID,0),
				@CentroCostoID_ = IsNull(PpalCentroCostoID,0),
				@AreaID_  = IsNull(PpalAreaID,0),
				@AlmacenID_ = IsNull(PpalAlmacenID,0),
				@ConceptoEgresoID_ = IsNull(PpalConceptoEgresoID,0),
				@CuentaContableID_ = IsNull(PpalCuentaContableID,0),
				@Cantidad_ = IsNull(Cantidad,0),
				@CmpOrdenCompraDesgloseID_ = IsNull(CmpOrdenCompraDesgloseID ,0),
				@CmpCompraDesgloseID_  = @CmpCompraDesgloseID
		   FROM	CmpCompraDesglose WHERE CmpCompraDesgloseID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CmpCompraDesglose
			SET     CmpCompraDetalleID = @CmpCompraDetalleID,
					Renglon = @Renglon,
					PpalSucursalID = @PpalSucursalID,
					PpalCentroCostoID = @CentroCostoID,
					PpalAreaID = @PpalAreaID,
					PpalAlmacenID = @AlmacenID,
					PpalConceptoEgresoID = @ConceptoEgresoID,
					PpalCuentaContableID = @CuentaContableID,
					Cantidad = @Cantidad,
					CmpOrdenCompraDesgloseID  = @CmpOrdenCompraDesgloseID 
			WHERE   CmpCompraDesgloseID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CmpCompraDesglose(
					CmpCompraDetalleID,
					Renglon,
					PpalSucursalID,
					PpalCentroCostoID,
					PpalAreaID,
					PpalAlmacenID,
					PpalConceptoEgresoID,
					PpalCuentaContableID,
					Cantidad,
					CmpOrdenCompraDesgloseID )
			VALUES  (
					@CmpCompraDetalleID,
					@Renglon,
					@PpalSucursalID,
					@CentroCostoID,
					@PpalAreaID,
					@AlmacenID,
					@ConceptoEgresoID,
					@CuentaContableID,
					@Cantidad,
					@CmpOrdenCompraDesgloseID )
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CmpCompraDesgloseID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitcora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CmpCompraDetalleID::', @CmpCompraDetalleID_, ':', @CmpCompraDetalleID, ';')
				SET @logMessage = Concat(@logMessage, 'Renglon::', @Renglon_, ':', @Renglon, ';')
				SET @logMessage = Concat(@logMessage, 'PpalSucursalID::', @PpalSucursalID_, ':', @PpalSucursalID, ';')
				SET @logMessage = Concat(@logMessage, 'CentroCostoID::', @CentroCostoID_, ':', @CentroCostoID, ';')
				SET @logMessage = Concat(@logMessage, 'AreaID::', @AreaID_, ':', @PpalAreaID, ';')
				SET @logMessage = Concat(@logMessage, 'AlmacenID::', @AlmacenID_, ':', @AlmacenID, ';')
				SET @logMessage = Concat(@logMessage, 'ConceptoEgresoID::', @ConceptoEgresoID_, ':', @ConceptoEgresoID, ';')
				SET @logMessage = Concat(@logMessage, 'CuentaContableID::', @CuentaContableID_, ':', @CuentaContableID, ';')
				SET @logMessage = Concat(@logMessage, 'Cantidad::', @Cantidad_, ':', @Cantidad, ';')
				SET @logMessage = Concat(@logMessage, 'CmpOrdenCompraDesgloseID ::', @CmpOrdenCompraDesgloseID_, ':', @CmpOrdenCompraDesgloseID , ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @CmpCompraDesgloseID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitcora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpCompraDesglose_Listado]...';


GO


CREATE PROCEDURE [dbo].[CmpCompraDesglose_Listado]
@PpalSucursalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpCompraDesglose',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  CmpCompraDesgloseID,CmpCompraDetalleID,Renglon,PpalSucursalID,CCD.PpalCentroCostoID,PpCc.Nombre AS NombreCentroCosto,PpalAreaID,PpalAlmacenID,PpalConceptoEgresoID,PpalCuentaContableID,Cantidad,CmpOrdenCompraDesgloseID
	FROM    CmpCompraDesglose CCD
	LEFT OUTER JOIN PpalCentroCosto PpCc ON PpCc.PpalCentroCostoID = CCD.PpalCentroCostoID
	WHERE	PpalSucursalID = @PpalSucursalID
	ORDER BY Renglon

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('PpalSucursalID::', @PpalSucursalID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpCompraDetalle_Consultar]...';


GO


CREATE PROCEDURE [dbo].[CmpCompraDetalle_Consultar]
@CmpCompraDetalleID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpCompraDetalle',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CmpCompraDetalleID
	SELECT  CmpCompraDetalleID,CmpCompraEncabezadoID,Renglon,PpalProductoID,Cantidad,AuxUnidadID,Costo,DescripcionAdicional
	FROM    CmpCompraDetalle
	WHERE   CmpCompraDetalleID = @IDAConsultar
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CmpCompraDetalleID::', @CmpCompraDetalleID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @CmpCompraDetalleID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
				END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpCompraDetalle_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CmpCompraDetalle_Eliminar]
@CmpCompraDetalleID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpCompraDetalle',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CmpCompraDetalleID
    DELETE
    FROM    CmpCompraDetalle
    WHERE   CmpCompraDetalleID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CmpCompraDetalleID::', @CmpCompraDetalleID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
	/********************* FIN COPY 2  *********************************/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CmpCompraDetalle_Guardar]...';


GO


CREATE PROCEDURE [dbo].[CmpCompraDetalle_Guardar]
@CmpCompraDetalleID int,
@CmpCompraEncabezadoID int,
@Renglon int,
@PpalProductoID int,
@Cantidad float,
@UnidadID int,
@Costo float,
@DescripcionAdicional varchar(500)
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpCompraDetalle',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CmpCompraEncabezadoID_ int = 0,
		@Renglon_ int = 0,
		@ProductoID_ int = 0,
		@Cantidad_ float = 0.0,
		@UnidadID_ int = 0,
		@Costo_ float = 0.0,
		@DescripcionAdicional_ varchar(500),
		@CmpCompraDetalleID_ int = @CmpCompraDetalleID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CmpCompraDetalleID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CmpCompraEncabezadoID_ = IsNull(CmpCompraEncabezadoID,0),
				@Renglon_  = IsNull(Renglon,0),
				@ProductoID_  = IsNull(PpalProductoID,0),
				@Cantidad_  = IsNull(Cantidad,0.0),
				@UnidadID_  = IsNull(AuxUnidadID,0),
				@Costo_  = ISNull(Costo,0.0),
				@DescripcionAdicional_ = ISNull(DescripcionAdicional,''),
				@CmpCompraDetalleID_  = IsNull(CmpCompraDetalleID,0)
		   FROM	CmpCompraDetalle WHERE CmpCompraDetalleID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE CmpCompraDetalle
			SET    CmpCompraEncabezadoID = @CmpCompraEncabezadoID,
				   Renglon = @Renglon,
				   PpalProductoID = @PpalProductoID,
				   Cantidad = @Cantidad,
				   AuxUnidadID = @UnidadID,
				   Costo  = @Costo,
				   DescripcionAdicional = @DescripcionAdicional
			WHERE  CmpCompraDetalleID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CmpCompraDetalle(
				   CmpCompraEncabezadoID,
				   Renglon,
				   PpalProductoID,
				   Cantidad,
				   AuxUnidadID,
				   Costo,
				   DescripcionAdicional)
			VALUES  (
				   @CmpCompraEncabezadoID,
				   @Renglon,
				   @PpalProductoID,
				   @Cantidad,
				   @UnidadID,
				   @Costo,
				   @DescripcionAdicional)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CmpCompraDetalleID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitcora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CmpCompraEncabezadoID::', @CmpCompraEncabezadoID_, ':', @CmpCompraEncabezadoID, ';')
				SET @logMessage = Concat(@logMessage, 'Renglon::', @Renglon_, ':', @Renglon, ';')
				SET @logMessage = Concat(@logMessage, 'ProductoID::', @ProductoID_, ':', @PpalProductoID, ';')
				SET @logMessage = Concat(@logMessage, 'Cantidad::', @Cantidad_, ':', @Cantidad, ';')
				SET @logMessage = Concat(@logMessage, 'UnidadID::', @UnidadID_, ':', @UnidadID, ';')
				SET @logMessage = Concat(@logMessage, 'Costo::', @Costo_, ':', @Costo, ';')
				SET @logMessage = Concat(@logMessage, 'DescripcionAdicional::', @DescripcionAdicional_, ':', @DescripcionAdicional, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitcora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpCompraDetalle_Listado]...';


GO


CREATE PROCEDURE [dbo].[CmpCompraDetalle_Listado]
@CmpCompraEncabezadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpCompraDetalle',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  CmpCompraDetalleID,CmpCompraEncabezadoID,Renglon, PpalProductoID, Cantidad, AuxUnidadID, Costo, DescripcionAdicional
	FROM    CmpCompraDetalle
	WHERE	CmpCompraEncabezadoID = @CmpCompraEncabezadoID
	ORDER BY Renglon

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CmpCompraEncabezadoID::', @CmpCompraEncabezadoID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpCompraEncabezado_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CmpCompraEncabezado_Consultar]
@CmpCompraEncabezadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpCompraEncabezado',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CmpCompraEncabezadoID
	SELECT  CmpCompraEncabezadoID,					PpalSucursalID,				TipoDocumentoID,
			PpalSerieID,							Folio,						CCE.PpalProveedorID,
			CmpTipoMovimientoProveedorID,			PpalPersonalID,				Fecha,
			Referencia,								Concepto,					CfgEstatusDocumentoID, 
			LinkXML,								LinkPDF,					EstatusFactura,
			PpalCentroCostoID,						PpalConceptoEgresoID,		EP.RFC
	FROM    CmpCompraEncabezado CCE
			LEFT OUTER JOIN PpalProveedor PP ON CCE.PpalProveedorID = PP.PpalProveedorID
			LEFT OUTER JOIN EspPersona EP ON PP.EspPersonaID = EP.EspPersonaID
	WHERE   CmpCompraEncabezadoID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CmpCompraEncabezadoID::', @CmpCompraEncabezadoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
						
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpCompraEncabezado_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CmpCompraEncabezado_Eliminar]
@CmpCompraEncabezadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpCompraEncabezado',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CmpCompraEncabezadoID
    DELETE
    FROM    CmpCompraEncabezado
    WHERE   CmpCompraEncabezadoID = @CmpCompraEncabezadoID

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CmpCompraEncabezadoID::', @CmpCompraEncabezadoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @CmpCompraEncabezadoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CmpCompraEncabezado_Guardar]...';


GO


CREATE PROCEDURE [dbo].[CmpCompraEncabezado_Guardar]
@CmpCompraEncabezadoID int,
@SucursalID int,
@TipoDocumentoID int,
@PpalSerieID int,
@Folio int,
@PpalProveedorID int,
@TipoMovimientoProveedorID int,
@PersonalID int,
@Fecha datetime,
@Referencia varchar(50) = null,
@Concepto varchar(100) = null,
@EstatusDocumentoID int,
@LinkXML varchar(250),
@LinkPDF varchar(250),
@EstatusFactura char(1),
@PpalCentroCostoID int,
@PpalConceptoEgresoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = ''
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpCompraEncabezado', @IDAActualizar int,
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@SucursalID_ int = 0,
		@TipoDocumentoID_ int = 0,
		@SerieID_ int = 0,
		@Folio_ int = 0,
		@PpalProveedorID_ int = 0,
		@TipoMovimientoProveedorID_ int = 0,
		@PersonalID_ int = 0,
		@Fecha_ datetime = 0,
		@Referencia_ varchar(50) = '',
		@Concepto_ varchar(100) = '',
		@EstatusDocumentoID_ int = 0,
		@LinkXML_ varchar(250) = '',
		@LinkPDF_ varchar(250) = '',
		@EstatusFactura_ char(1) = '',
		@PpalCentroCostoID_ int = 0,
		@PpalConceptoEgresoID_ int = 0,
		@CmpCompraEncabezadoID_ int = @CmpCompraEncabezadoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CmpCompraEncabezadoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@SucursalID_  = IsNull(PpalSucursalID,0),
				@TipoDocumentoID_ = IsNull(TipoDocumentoID,0),
				@SerieID_ = IsNull(PpalSerieID,0),
				@Folio_ = IsNull(Folio,0),
				@PpalProveedorID_  = IsNull(PpalProveedorID,0),
				@TipoMovimientoProveedorID_ = IsNull(CmpTipoMovimientoProveedorID,0),
				@PersonalID_ = IsNull(PpalPersonalID,0),
				@Fecha_ = IsNull(Fecha,0),
				@Referencia_ = ISNull(Referencia,''),
				@Concepto_ = IsNull(Concepto,''),
				@EstatusDocumentoID_ = IsNull(CfgEstatusDocumentoID,0),
				@LinkXML_ = ISNull(@LinkXML,''),
				@LinkPDF_ = ISNull(@LinkPDF,''),
				@EstatusFactura_ = ISNull(@EstatusFactura,''),
				@PpalCentroCostoID_ = IsNull(@PpalCentroCostoID,0),
				@PpalConceptoEgresoID_ = IsNull(@PpalConceptoEgresoID,0)
		   FROM	CmpCompraEncabezado WHERE CmpCompraEncabezadoID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CmpCompraEncabezado
			SET     PpalSucursalID = @SucursalID,
					TipoDocumentoID = @TipoDocumentoID,
					PpalSerieID  = @PpalSerieID,
					Folio = @Folio,
					PpalProveedorID = @PpalProveedorID,
					CmpTipoMovimientoProveedorID = @TipoMovimientoProveedorID,
					PpalPersonalID = @PersonalID,
					Fecha = @Fecha,
					Referencia = @Referencia,
					Concepto = @Concepto,
					CfgEstatusDocumentoID = @EstatusDocumentoID,
					LinkXML = @LinkXML,
					LinkPDf = @LinkPDf,
					EstatusFactura = @EstatusFactura,
					PpalCentroCostoID = @PpalCentroCostoID,
					PpalConceptoEgresoID = @PpalConceptoEgresoID
			WHERE   CmpCompraEncabezadoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CmpCompraEncabezado(
					PpalSucursalID,
					TipoDocumentoID,
					PpalSerieID,
					Folio,
					PpalProveedorID,
					CmpTipoMovimientoProveedorID,
					PpalPersonalID,
					Fecha,
					Referencia,
					Concepto,
					CfgEstatusDocumentoID,
					LinkXML,
					LinkPDf,
					EstatusFactura,
					PpalCentroCostoID,
					PpalConceptoEgresoID)
			VALUES  (
					@SucursalID,
					@TipoDocumentoID,
					@PpalSerieID,
					@Folio,
					@PpalProveedorID,
					@TipoMovimientoProveedorID,
					@PersonalID,
					@Fecha,
					@Referencia,
					@Concepto,
					@EstatusDocumentoID,
					@LinkXML,
					@LinkPDf,
					@EstatusFactura,
					@PpalCentroCostoID,
					@PpalConceptoEgresoID
)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CmpCompraEncabezadoID_ > 0  SET @Operacion = 'Update' 	
										ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitcora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CmpCompraEncabezadoID::', @CmpCompraEncabezadoID_, ':', @CmpCompraEncabezadoID, ';')
				SET @logMessage = Concat(@logMessage, 'SucursalID::', @SucursalID_, ':', @SucursalID, ';')
				SET @logMessage = Concat(@logMessage, 'TipoDocumentoID::', @TipoDocumentoID_, ':', @TipoDocumentoID, ';')
				SET @logMessage = Concat(@logMessage, 'SerieID::', @SerieID_, ':', @PpalSerieID, ';')
				SET @logMessage = Concat('Folio::', @Folio_, ':', @Folio, ';')
				SET @logMessage = Concat('PpalProveedorID::', @PpalProveedorID_, ':', @PpalProveedorID, ';')
				SET @logMessage = Concat(@logMessage, 'TipoMovimientoProveedorID::', @TipoMovimientoProveedorID_, ':', @TipoMovimientoProveedorID, ';')
				SET @logMessage = Concat(@logMessage, 'PersonalID::', @PersonalID_, ':', @PersonalID, ';')
				SET @logMessage = Concat(@logMessage, 'Fecha::', @Fecha_, ':', @Fecha, ';')
				SET @logMessage = Concat('Referencia::', @Referencia_, ':', @Referencia, ';')
				SET @logMessage = Concat('Concepto::', @Concepto_, ':', @Concepto, ';')
				SET @logMessage = Concat(@logMessage, 'EstatusDocumentoID::', @EstatusDocumentoID_, ':', @EstatusDocumentoID, ';')
				SET @logMessage = Concat('LinkXML::', @LinkXML_, ':', @LinkXML, ';')
				SET @logMessage = Concat('LinkPDf::', @LinkPDf_, ':', @LinkPDf, ';')
				SET @logMessage = Concat('EstatusFactura::', @EstatusFactura_, ':', @EstatusFactura, ';')
				SET @logMessage = Concat('PpalCentroCostoID::', @PpalCentroCostoID_, ':', @PpalCentroCostoID, ';')
				SET @logMessage = Concat('PpalConceptoEgresoID::', @PpalConceptoEgresoID_, ':', @PpalConceptoEgresoID, ';')

				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitcora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpCompraEncabezado_Listado]...';


GO


CREATE PROCEDURE [dbo].[CmpCompraEncabezado_Listado]
@PpalSucursalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpCompraEncabezado',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  CmpCompraEncabezadoID,PpalSucursalID,TipoDocumentoID,PpalSerieID,Folio,PpalProveedorID,CmpTipoMovimientoProveedorID,
			PpalPersonalID,Fecha,Referencia,Concepto,CfgEstatusDocumentoID, LinkXML, LinkPDF, EstatusFactura, CCE.PpalCentroCostoID,
			PpalConceptoEgresoID, PpCc.Nombre AS NombreCentroCosto
	FROM    CmpCompraEncabezado CCE
	LEFT OUTER JOIN PpalCentroCosto PpCc ON PpCc.PpalCentroCostoID = CCE.PpalCentroCostoID
	WHERE	PpalSucursalID = @PpalSucursalID
	ORDER BY CmpCompraEncabezadoID

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('PpalSucursalID::', @PpalSucursalID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpCompraImpuestosRetenciones_Listado]...';


GO

CREATE PROCEDURE [dbo].[CmpCompraImpuestosRetenciones_Listado]
@CmpCompraEncabezadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpCompraImpuestoRetencion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
DECLARE @CfgEsquemaImpuestoRetencionID int = 0,
		@TotalOC decimal(18,6) = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SELECT @CfgEsquemaImpuestoRetencionID = CASE WHEN PP.AplicaRetenciones = 'S' THEN 1 ELSE 2 END
	  FROM CmpCompraEncabezado COCE
			LEFT OUTER JOIN PpalProveedor PP ON COCE.PpalProveedorID = PP.PpalProveedorID
	 WHERE COCE.CmpCompraEncabezadoID = @CmpCompraEncabezadoID

	SELECT @TotalOC = SUM(ROUND(COCD.Costo * COCD.Cantidad,2))
	  FROM CmpCompraDetalle COCD
	 WHERE COCD.CmpCompraEncabezadoID = @CmpCompraEncabezadoID

	SELECT 'I.V.A.' as Nombre, 'I' AS ImpuestoRetencion, SUM(ROUND(ROUND(COCD.Costo * COCD.Cantidad,2) *  CTI.PorcentajeIVA / 100,2)) Importe
	  FROM CmpCompraDetalle COCD
			LEFT OUTER JOIN PpalProducto PP ON COCD.PpalProductoID = PP.PpalProductoID
			LEFT OUTER JOIN CfgTasaIVA CTI ON PP.CfgTasaIVAID = CTI.CfgTasaIVAID
	WHERE COCD.CmpCompraEncabezadoID = @CmpCompraEncabezadoID
	UNION
	SELECT CIR.NombreCorto, CIR.ImpuestoRetencion,	ROUND(CEIRD.Porcentaje * @TotalOC / 100,2)
	  FROM CfgEsquemaImpuestoRetencionDetalle CEIRD
			LEFT OUTER JOIN CfgImpuestoRetencion CIR ON (CEIRD.CfgImpuestoRetencionID = CIR.CfgImpuestoRetencionID)
	 WHERE CEIRD.Activo = 'S' AND CEIRD.CfgEsquemaImpuestoRetencionID = @CfgEsquemaImpuestoRetencionID

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CmpCompraEncabezadoID::', @CmpCompraEncabezadoID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
		END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpCompraPago_Consultar]...';


GO


CREATE PROCEDURE [dbo].[CmpCompraPago_Consultar]
@CmpCompraPagoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpCompraPago',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CmpCompraPagoID
	SELECT  CmpCompraPagoID,	CmpCompraEncabezadoID,		BcoMovimientoID,			Importe
	FROM    CmpCompraPago
	WHERE   CmpCompraPagoID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CmpCompraPagoID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
						
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpCompraPago_Guardar]...';


GO


create PROCEDURE [dbo].[CmpCompraPago_Guardar]
@CmpCompraPagoID int,
@CmpCompraEncabezadoID int,
@BcoMovimientoID int,
@Importe decimal(18,2)
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
SET NOCOUNT ON 
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpCompraPago',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CmpCompraEncabezadoID_ int = 0,
		@BcoMovimientoID_ int = 0,
		@Importe_ decimal(18,2) = 0.0,
		@CmpCompraPagoID_ int = @CmpCompraPagoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CmpCompraPagoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CmpCompraEncabezadoID_ = IsNull(CmpCompraEncabezadoID,0),
				@BcoMovimientoID_ = IsNull(BcoMovimientoID,0),
				@Importe_ = IsNull(Importe,0.0),
				@CmpCompraPagoID_ = IsNull(CmpCompraPagoID,0)
		   FROM	CmpCompraPago WHERE CmpCompraPagoID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN

			UPDATE  CmpCompraPago
			SET     CmpCompraEncabezadoID = @CmpCompraEncabezadoID,
					BcoMovimientoID = @BcoMovimientoID,
					Importe = @Importe
			WHERE   CmpCompraPagoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CmpCompraPago(
					CmpCompraEncabezadoID,
					BcoMovimientoID,
					Importe)
			VALUES  (
					@CmpCompraEncabezadoID,
					@BcoMovimientoID,
					@Importe)

			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CmpCompraPagoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitcora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CmpCompraEncabezadoID::', @CmpCompraEncabezadoID_, ':', @CmpCompraEncabezadoID, ';')
				SET @logMessage = Concat(@logMessage, 'BcoMovimientoID::', @BcoMovimientoID_, ':', @BcoMovimientoID, ';')
				SET @logMessage = Concat(@logMessage, 'Importe::', @Importe_, ':', @Importe, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitcora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
				END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpCompraPago_Listado]...';


GO


CREATE PROCEDURE [dbo].[CmpCompraPago_Listado]
@BcoMovimientoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpCompraPago',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  MAX(CCP.CmpCompraPagoID) AS CmpCompraPagoID,		MAX(CCP.CmpCompraEncabezadoID) AS CmpCompraEncabezadoID,
			MAX(CCP.BcoMovimientoID) AS BcoMovimientoID,		MAX(CCP.Importe) AS Importe,
			MAX(PSu.Nombre) AS SucursalNombre,					MAX(PSe.PpalSerieClave) AS SerieClave,
			MAX(CCE.Folio) AS Folio,							MAX(CCE.Fecha) AS Fecha,
			SUM(Cantidad * Costo) +
			( SELECT SUM(ROUND(ROUND(CCD.Costo * CCD.Cantidad,2) *  CTI.PorcentajeIVA / 100,2))
				FROM CmpCompraDetalle CCD
				LEFT OUTER JOIN PpalProducto PP ON CCD.PpalProductoID = PP.PpalProductoID
				LEFT OUTER JOIN CfgTasaIVA CTI ON PP.CfgTasaIVAID = CTI.CfgTasaIVAID
			   WHERE CCD.CmpCompraEncabezadoID = CCE.CmpCompraEncabezadoID ) -
			( SELECT SUM(ROUND(CEIRD.Porcentaje * ROUND(CCD.Costo * CCD.Cantidad,2) / 100,2))
				FROM CmpCompraDetalle CCD, CfgEsquemaImpuestoRetencionDetalle CEIRD
				LEFT OUTER JOIN CfgImpuestoRetencion CIR ON (CEIRD.CfgImpuestoRetencionID = CIR.CfgImpuestoRetencionID)
			   WHERE CEIRD.Activo = 'S' AND CEIRD.CfgEsquemaImpuestoRetencionID = 1 and 
					CCD.CmpCompraEncabezadoID = CCE.CmpCompraEncabezadoID)  AS Total,
		    ( SELECT 0) AS Asignado
	FROM    CmpCompraPago CCP
	  LEFT OUTER JOIN CmpCompraEncabezado CCE ON CCP.CmpCompraEncabezadoID = CCE.CmpCompraEncabezadoID
	  LEFT OUTER JOIN PpalSucursal PSu ON CCE.PpalSucursalID = PSu.PpalSucursalID
	  LEFT OUTER JOIN PpalSerie PSe ON CCE.PpalSerieID = PSe.PpalSerieID
	  LEFT OUTER JOIN CmpCompraDetalle CCD ON CCE.CmpCompraEncabezadoID = CCD.CmpCompraEncabezadoID
	WHERE	BcoMovimientoID = @BcoMovimientoID
	GROUP BY CCE.CmpCompraEncabezadoID

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('BcoMovimientoID::', @BcoMovimientoID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
		END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpEstatusProveedor_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CmpEstatusProveedor_Consultar]
@CmpEstatusProveedorID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpEstatusProveedor',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CmpEstatusProveedorID
	SELECT  CmpEstatusProveedorID,CmpEstatusProveedorClave,Nombre,NombreCorto,EstatusPersonaID
	FROM    CmpEstatusProveedor
	WHERE   CmpEstatusProveedorID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CmpEstatusProveedorID::', @CmpEstatusProveedorID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
						
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpEstatusProveedor_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CmpEstatusProveedor_Eliminar]
@CmpEstatusProveedorID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpEstatusProveedor',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDABorrar = @CmpEstatusProveedorID
    DELETE
    FROM    CmpEstatusProveedor
    WHERE   CmpEstatusProveedorID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CmpEstatusProveedorID::', @CmpEstatusProveedorID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @CmpEstatusProveedorID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CmpEstatusProveedor_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CmpEstatusProveedor_Guardar]
@CmpEstatusProveedorID int,
@CmpEstatusProveedorClave varchar(6),
@Nombre varchar(30),
@NombreCorto varchar(10)
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpEstatusProveedor',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CmpEstatusProveedorClave_ varchar(6) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@CmpEstatusProveedorID_ int = @CmpEstatusProveedorID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CmpEstatusProveedorID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CmpEstatusProveedorClave_ = IsNull(CmpEstatusProveedorClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@CmpEstatusProveedorID_ = IsNull(CmpEstatusProveedorID,0)
		   FROM	CmpEstatusProveedor WHERE CmpEstatusProveedorID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CmpEstatusProveedor
			SET     CmpEstatusProveedorClave = @CmpEstatusProveedorClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   CmpEstatusProveedorID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CmpEstatusProveedor(
					CmpEstatusProveedorClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@CmpEstatusProveedorClave,
					@Nombre,
					@NombreCorto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CmpEstatusProveedorID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitcora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('@CmpEstatusProveedorClave::', @CmpEstatusProveedorClave_, ':', @CmpEstatusProveedorClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitcora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpEstatusProveedor_Listado]...';


GO
CREATE PROCEDURE [dbo].[CmpEstatusProveedor_Listado]
@TipoListado varchar(10) = ''

-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpEstatusProveedor',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  CmpEstatusProveedorID AS ID,			CmpEstatusProveedorClave AS Clave,
				Nombre,									NombreCorto,
				0 AS PadreID
		FROM    CmpEstatusProveedor
		ORDER BY CmpEstatusProveedorClave
	ELSE
		SELECT  CmpEstatusProveedorID,CmpEstatusProveedorClave,Nombre,NombreCorto,EstatusPersonaID
		FROM    CmpEstatusProveedor
		ORDER BY CmpEstatusProveedorClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpEstatusRepresentanteProveedor_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CmpEstatusRepresentanteProveedor_Consultar]
@CmpEstatusRepresentanteProveedorID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpEstatusRepresentanteProveedor',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CmpEstatusRepresentanteProveedorID
	SELECT  CmpEstatusRepresentanteProveedorID,CmpEstatusRepresentanteProveedorClave,Nombre,NombreCorto,EstatusPersonaID
	FROM    CmpEstatusRepresentanteProveedor
	WHERE   CmpEstatusRepresentanteProveedorID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CmpEstatusRepresentanteProveedorID::', @CmpEstatusRepresentanteProveedorID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
						
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpEstatusRepresentanteProveedor_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CmpEstatusRepresentanteProveedor_Eliminar]
@CmpEstatusRepresentanteProveedorID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpEstatusRepresentanteProveedor',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDABorrar = @CmpEstatusRepresentanteProveedorID
    DELETE
    FROM    CmpEstatusRepresentanteProveedor
    WHERE   CmpEstatusRepresentanteProveedorID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CmpEstatusRepresentanteProveedorID::', @CmpEstatusRepresentanteProveedorID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
	/********************* FIN COPY 2  *********************************/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CmpEstatusRepresentanteProveedor_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CmpEstatusRepresentanteProveedor_Guardar]
@CmpEstatusRepresentanteProveedorID int,
@CmpEstatusRepresentanteProveedorClave varchar(6),
@Nombre varchar(30),
@NombreCorto varchar(10),
@EstatusPersonaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpEstatusRepresentanteProveedor',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CmpEstatusRepresentanteProveedorClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@CmpEstatusRepresentanteProveedorID_ int = @CmpEstatusRepresentanteProveedorID,
		@EstatusPersonaID_ int = @EstatusPersonaID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CmpEstatusRepresentanteProveedorID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0	
	BEGIN
		SELECT	@CmpEstatusRepresentanteProveedorClave_ = IsNull(CmpEstatusRepresentanteProveedorClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@CmpEstatusRepresentanteProveedorID_ = IsNull(CmpEstatusRepresentanteProveedorID,0),
				@EstatusPersonaID_ = IsNull(EstatusPersonaID,0)
		   FROM	CmpEstatusRepresentanteProveedor WHERE CmpEstatusRepresentanteProveedorID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CmpEstatusRepresentanteProveedor
			SET     CmpEstatusRepresentanteProveedorClave = @CmpEstatusRepresentanteProveedorClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					EstatusPersonaID = @EstatusPersonaID
			WHERE   CmpEstatusRepresentanteProveedorID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CmpEstatusRepresentanteProveedor(
					CmpEstatusRepresentanteProveedorClave,
					Nombre,
					NombreCorto,
					EstatusPersonaID)
			VALUES  (
					@CmpEstatusRepresentanteProveedorClave,
					@Nombre,
					@NombreCorto,
					@EstatusPersonaID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CmpEstatusRepresentanteProveedorID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitcora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CmpEstatusRepresentanteProveedorClave::', @CmpEstatusRepresentanteProveedorClave_, ':', @CmpEstatusRepresentanteProveedorClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'EstatusPersonaID::', @EstatusPersonaID_, ':', @EstatusPersonaID, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitcora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpEstatusRepresentanteProveedor_Listado]...';


GO
CREATE PROCEDURE [dbo].[CmpEstatusRepresentanteProveedor_Listado]
--@SistemaEstatusPersonaID int
-- Parámetros para Bitácora
	@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpEstatusRepresentanteProveedor',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  CmpEstatusRepresentanteProveedorID,CmpEstatusRepresentanteProveedorClave,Nombre,NombreCorto,EstatusPersonaID
	FROM    CmpEstatusRepresentanteProveedor
	--WHERE	SistemaEstatusPersonaID = @SistemaEstatusPersonaID
	ORDER BY CmpEstatusRepresentanteProveedorClave

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpFactura_ListadoParametros]...';


GO


CREATE PROCEDURE [dbo].[CmpFactura_ListadoParametros]
@FechaInicial DateTime,
@FechaFinal DateTime,
@PpalProveedorID	int
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora			int
	,@OpcionIDSolicitudBase		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'EspFacturaCmp',	
		@Operacion	nvarchar(20) = 'ListaParametros', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT	EF.EspFacturaID,			EF.Fecha,			EF.Serie,
			EF.Folio,					EF.Importe,			EF.RFC,
			EF.UUID
	  FROM	EspFactura EF
	  inner join CmpOrdenCompraFactura COCF ON EF.EspFacturaID = COCF.EspFacturaID
	  inner join CmpOrdenCompraEncabezado COCE ON COCF.CmpOrdenCompraEncabezadoID = COCE.CmpOrdenCompraEncabezadoID
	 WHERE	EF.fecha Between @FechaInicial and @FechaFinal AND
			COCE.PpalProveedorID = @PpalProveedorID
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('FechaInicial::', @FechaInicial, ':',0, ';')
		SET @logMessage = Concat(@logMessage, 'FechaFinal::', @FechaFinal, ':', 0, ';')
		SET @logMessage = Concat(@logMessage, 'ProveedorID::', @PpalProveedorID, ':', 0, ';')
		SET @logMessage = Concat(@logMessage, 'OpcionID::', @OpcionIDSolicitudBase, ':', 0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompra_ListadoAsignaFacturasPersonal]...';


GO


CREATE PROCEDURE [dbo].[CmpOrdenCompra_ListadoAsignaFacturasPersonal]
@FechaOC DateTime,
@ProveedorID	int
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora			int
	,@OpcionIDSolicitudBase		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpOrdenCompraEncabezado',	
		@Operacion	nvarchar(20) = 'ListaParametros', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT COCE.CmpOrdenCompraEncabezadoID,							MAX(PSu.Nombre) AS SucursalNombre,				
		MAX(PSe.PpalSerieClave) AS SerieClave,						MAX(COCE.Folio) AS Folio,
		MAX(COCE.Fecha) AS Fecha,								
		SUM(Cantidad * Costo) +
		( SELECT SUM(ROUND(ROUND(COCD.Costo * COCD.Cantidad,2) *  CTI.PorcentajeIVA / 100,2))
			FROM CmpOrdenCompraDetalle COCD
			LEFT OUTER JOIN PpalProducto PP ON COCD.PpalProductoID = PP.PpalProductoID
			LEFT OUTER JOIN CfgTasaIVA CTI ON PP.CfgTasaIVAID = CTI.CfgTasaIVAID
		   WHERE COCD.CmpOrdenCompraEncabezadoID = COCE.CmpOrdenCompraEncabezadoID ) -
		( SELECT SUM(ROUND(CEIRD.Porcentaje * ROUND(COCD.Costo * COCD.Cantidad,2) / 100,2))
			FROM CmpOrdenCompraDetalle COCD, CfgEsquemaImpuestoRetencionDetalle CEIRD
			LEFT OUTER JOIN CfgImpuestoRetencion CIR ON (CEIRD.CfgImpuestoRetencionID = CIR.CfgImpuestoRetencionID)
		   WHERE CEIRD.Activo = 'S' AND CEIRD.CfgEsquemaImpuestoRetencionID = 1 and 
				COCD.CmpOrdenCompraEncabezadoID = COCE.CmpOrdenCompraEncabezadoID)  AS Total,
	    ( SELECT SUM(Importe)
			FROM CmpOrdenCompraFactura COCF
		   WHERE COCF.CmpOrdenCompraEncabezadoID = COCE.CmpOrdenCompraEncabezadoID) AS Asignado
	  FROM CmpOrdenCompraEncabezado COCE
		LEFT OUTER JOIN PpalSucursal PSu ON COCE.PpalSucursalID = PSu.PpalSucursalID
		LEFT OUTER JOIN PpalSerie PSe ON COCE.PpalSerieID = PSe.PpalSerieID
		LEFT OUTER JOIN PpalProveedor PP ON COCE.PpalProveedorID = PP.PpalProveedorID
		LEFT OUTER JOIN CfgEstatusDocumento CED ON COCE.CfgEstatusDocumentoID = CED.CfgEstatusDocumentoID
		LEFT OUTER JOIN EspPersona EP ON PP.EspPersonaID = EP.EspPersonaID
		LEFT OUTER JOIN CmpOrdenCompraDetalle COCD ON COCD.CmpOrdenCompraEncabezadoID = COCE.CmpOrdenCompraEncabezadoID
	 WHERE COCE.Fecha >= @FechaOC
	    AND (COCE.PpalProveedorID = @ProveedorID or @ProveedorID = 0)
		AND (CED.SistemaEstatusTipoDocumentoID IN (SELECT EstatusTipoDocumentoID   
													FROM SistemaEstatusDocumentoOpcion
												   WHERE OpcionID = @OpcionIDSolicitudBase) or 1 = 1)
	GROUP BY COCE.CmpOrdenCompraEncabezadoID
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('FechaOC::', @FechaOC, ':',0, ';')
		SET @logMessage = Concat(@logMessage, 'ProveedorID::', @ProveedorID, ':', 0, ';')
		SET @logMessage = Concat(@logMessage, 'OpcionID::', @OpcionIDSolicitudBase, ':', 0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompra_ListadoCargaFacturas]...';


GO


CREATE PROCEDURE [dbo].[CmpOrdenCompra_ListadoCargaFacturas]
@FechaInicial DateTime,
@FechaFinal DateTime,
@EstatusFactura varchar(20)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpOrdenCompraEncabezado',	
		@Operacion	nvarchar(20) = 'ListaParametros', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT COCE.CmpOrdenCompraEncabezadoID,							MAX(PSu.Nombre) AS SucursalNombre,				
		MAX(PSe.PpalSerieClave) AS SerieClave,						MAX(COCE.Folio) AS Folio,
		MAX(COCE.Fecha) AS Fecha,									MAX(CED.Nombre) AS EstatusNombre,
		MAX(CASE WHEN FisicaMoral = 'F' 
			THEN EP.Nombre + ' ' + EP.ApellidoPaterno + ' ' + EP.ApellidoMaterno
			ELSE EP.NombreComercial END) AS ProveedorNombre,		SUM(Cantidad * Costo) AS ImporteTotal,
		MAX(COCE.Referencia) AS Referencia,							MAX(COCE.Concepto) AS Concepto,
		MAX(COCE.LinkXML) as LinkXML,								MAX(COCE.LinkPDF) AS LinkPDF,
		MAX(CASE WHEN COCE.EstatusFactura = 'S' THEN 'CARGADA' WHEN COCE.EstatusFactura = 'N' THEN 'NO CARGADA' 
				 WHEN COCE.EstatusFactura = 'I' THEN 'INCORRECTA' ELSE 'REVISADA'  END) AS EstatusFactura,
		( SELECT SUM(ROUND(ROUND(COCD.Costo * COCD.Cantidad,2) *  CTI.PorcentajeIVA / 100,2)) Importe
			FROM CmpOrdenCompraDetalle COCD
			LEFT OUTER JOIN PpalProducto PP ON COCD.PpalProductoID = PP.PpalProductoID
			LEFT OUTER JOIN CfgTasaIVA CTI ON PP.CfgTasaIVAID = CTI.CfgTasaIVAID
		   WHERE COCD.CmpOrdenCompraEncabezadoID = COCE.CmpOrdenCompraEncabezadoID ) as IVA,
		( SELECT SUM(ROUND(CEIRD.Porcentaje * ROUND(COCD.Costo * COCD.Cantidad,2) / 100,2))
			FROM CmpOrdenCompraDetalle COCD, CfgEsquemaImpuestoRetencionDetalle CEIRD
			LEFT OUTER JOIN CfgImpuestoRetencion CIR ON (CEIRD.CfgImpuestoRetencionID = CIR.CfgImpuestoRetencionID)
		   WHERE CEIRD.Activo = 'S' AND CEIRD.CfgEsquemaImpuestoRetencionID = 1 and 
				COCD.CmpOrdenCompraEncabezadoID = COCE.CmpOrdenCompraEncabezadoID) as Retenciones
	  FROM CmpOrdenCompraEncabezado COCE
		LEFT OUTER JOIN PpalSucursal PSu ON COCE.PpalSucursalID = PSu.PpalSucursalID
		LEFT OUTER JOIN PpalSerie PSe ON COCE.PpalSerieID = PSe.PpalSerieID
		LEFT OUTER JOIN PpalProveedor PP ON COCE.PpalProveedorID = PP.PpalProveedorID
		LEFT OUTER JOIN CfgEstatusDocumento CED ON COCE.CfgEstatusDocumentoID = CED.CfgEstatusDocumentoID
		LEFT OUTER JOIN EspPersona EP ON PP.EspPersonaID = EP.EspPersonaID
		LEFT OUTER JOIN CmpOrdenCompraDetalle COCD ON COCE.CmpOrdenCompraEncabezadoID = COCD.CmpOrdenCompraEncabezadoID
	 WHERE COCE.Fecha Between @FechaInicial and @FechaFinal
		AND (COCE.PpalProveedorID in (SELECT PpalProveedorID FROM PpalProveedor 
								WHERE EspPersonaID in (SELECT EspPersonaID FROM SegUsuario WHERE SegUsuarioID = @UsuarioIDBitacora )))
	GROUP BY COCE.CmpOrdenCompraEncabezadoID
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('FechaInicial::', @FechaInicial, ':',0, ';')
		SET @logMessage = Concat(@logMessage, 'FechaFinal::', @FechaFinal, ':', 0, ';')
		SET @logMessage = Concat(@logMessage, 'EstatusFactura::', @EstatusFactura, ':', 0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompra_ListadoCargaFacturasPersonal]...';


GO


CREATE PROCEDURE [dbo].[CmpOrdenCompra_ListadoCargaFacturasPersonal]
@FechaInicial DateTime,
@FechaFinal DateTime,
@ProveedorID	int
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora			int
	,@OpcionIDSolicitudBase		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpOrdenCompraEncabezado',	
		@Operacion	nvarchar(20) = 'ListaParametros', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT COCE.CmpOrdenCompraEncabezadoID,							MAX(PSu.Nombre) AS SucursalNombre,				
		MAX(PSe.PpalSerieClave) AS SerieClave,						MAX(COCE.Folio) AS Folio,
		MAX(COCE.Fecha) AS Fecha,									MAX(CED.Nombre) AS EstatusNombre,
		MAX(CASE WHEN FisicaMoral = 'F' 
			THEN EP.Nombre + ' ' + EP.ApellidoPaterno + ' ' + EP.ApellidoMaterno
			ELSE EP.NombreComercial END) AS ProveedorNombre,		SUM(Cantidad * Costo) AS ImporteTotal,
		MAX(COCE.Referencia) AS Referencia,							MAX(COCE.Concepto) AS Concepto,
		MAX(COCE.LinkXML) as LinkXML,								MAX(COCE.LinkPDF) AS LinkPDF,
		MAX(CASE WHEN COCE.EstatusFactura = 'S' THEN 'CARGADA' WHEN COCE.EstatusFactura = 'N' THEN 'NO CARGADA' 
				 WHEN COCE.EstatusFactura = 'I' THEN 'INCORRECTA' ELSE 'REVISADA'  END) AS EstatusFactura,
		( SELECT SUM(ROUND(ROUND(COCD.Costo * COCD.Cantidad,2) *  CTI.PorcentajeIVA / 100,2)) Importe
			FROM CmpOrdenCompraDetalle COCD
			LEFT OUTER JOIN PpalProducto PP ON COCD.PpalProductoID = PP.PpalProductoID
			LEFT OUTER JOIN CfgTasaIVA CTI ON PP.CfgTasaIVAID = CTI.CfgTasaIVAID
		   WHERE COCD.CmpOrdenCompraEncabezadoID = COCE.CmpOrdenCompraEncabezadoID ) as IVA,
		( SELECT SUM(ROUND(CEIRD.Porcentaje * ROUND(COCD.Costo * COCD.Cantidad,2) / 100,2))
			FROM CmpOrdenCompraDetalle COCD, CfgEsquemaImpuestoRetencionDetalle CEIRD
			LEFT OUTER JOIN CfgImpuestoRetencion CIR ON (CEIRD.CfgImpuestoRetencionID = CIR.CfgImpuestoRetencionID)
		   WHERE CEIRD.Activo = 'S' AND CEIRD.CfgEsquemaImpuestoRetencionID = CASE WHEN MAX(PP.AplicaRetenciones) = 'S' THEN 1 ELSE 2 END and 
				COCD.CmpOrdenCompraEncabezadoID = COCE.CmpOrdenCompraEncabezadoID) as Retenciones
	  FROM CmpOrdenCompraEncabezado COCE
		LEFT OUTER JOIN PpalSucursal PSu ON COCE.PpalSucursalID = PSu.PpalSucursalID
		LEFT OUTER JOIN PpalSerie PSe ON COCE.PpalSerieID = PSe.PpalSerieID
		LEFT OUTER JOIN PpalProveedor PP ON COCE.PpalProveedorID = PP.PpalProveedorID
		LEFT OUTER JOIN CfgEstatusDocumento CED ON COCE.CfgEstatusDocumentoID = CED.CfgEstatusDocumentoID
		LEFT OUTER JOIN EspPersona EP ON PP.EspPersonaID = EP.EspPersonaID
		LEFT OUTER JOIN CmpOrdenCompraDetalle COCD ON COCE.CmpOrdenCompraEncabezadoID = COCD.CmpOrdenCompraEncabezadoID
	 WHERE COCE.Fecha Between @FechaInicial and @FechaFinal
	    AND (COCE.PpalProveedorID = @ProveedorID or @ProveedorID = 0)
		AND CED.SistemaEstatusTipoDocumentoID IN (SELECT EstatusTipoDocumentoID   
													FROM SistemaEstatusDocumentoOpcion
												   WHERE OpcionID = @OpcionIDSolicitudBase)
	GROUP BY COCE.CmpOrdenCompraEncabezadoID
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('FechaInicial::', @FechaInicial, ':',0, ';')
		SET @logMessage = Concat(@logMessage, 'FechaFinal::', @FechaFinal, ':', 0, ';')
		SET @logMessage = Concat(@logMessage, 'ProveedorID::', @ProveedorID, ':', 0, ';')
		SET @logMessage = Concat(@logMessage, 'OpcionID::', @OpcionIDSolicitudBase, ':', 0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompra_ListadoParametros]...';


GO


CREATE PROCEDURE [dbo].[CmpOrdenCompra_ListadoParametros]
@TipoDocumentoID int,
@SucursalInicialID int,
@SucursalFinalID int,
@FechaInicial DateTime,
@FechaFinal DateTime,
@ProveedorID int,
@SerieInicialID int,
@SerieFinalID int,
@EstatusAIncluir varchar(500)
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpOrdenCompraEncabezado',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT COCE.CmpOrdenCompraEncabezadoID,							MAX(PSu.Nombre) AS SucursalNombre,				
		MAX(PSe.PpalSerieClave) AS SerieClave,						MAX(COCE.Folio) AS Folio,
		MAX(COCE.Fecha) as Fecha,									MAX(CED.Nombre) AS EstatusNombre,
		MAX(CASE WHEN FisicaMoral = 'F' 
			THEN EP.Nombre + ' ' + EP.ApellidoPaterno + ' ' + EP.ApellidoMaterno
			ELSE EP.NombreComercial END) AS ProveedorNombre,		
		SUM(Cantidad * Costo) as ImporteTotal,
		MAX(CASE WHEN COCE.EstatusFactura = 'S' THEN 'CARGADA' WHEN COCE.EstatusFactura = 'N' THEN 'NO CARGADA' 
				 WHEN COCE.EstatusFactura = 'I' THEN 'INCORRECTA' ELSE 'REVISADA'  END) AS EstatusFactura,
		( SELECT SUM(ROUND(ROUND(COCD.Costo * COCD.Cantidad,2) *  CTI.PorcentajeIVA / 100,2)) Importe
			FROM CmpOrdenCompraDetalle COCD
			LEFT OUTER JOIN PpalProducto PP ON COCD.PpalProductoID = PP.PpalProductoID
			LEFT OUTER JOIN CfgTasaIVA CTI ON PP.CfgTasaIVAID = CTI.CfgTasaIVAID
		   WHERE COCD.CmpOrdenCompraEncabezadoID = COCE.CmpOrdenCompraEncabezadoID ) as IVA,
		( SELECT SUM(ROUND(CEIRD.Porcentaje * ROUND(COCD.Costo * COCD.Cantidad,2) / 100,2))
			FROM CmpOrdenCompraDetalle COCD, CfgEsquemaImpuestoRetencionDetalle CEIRD
			LEFT OUTER JOIN CfgImpuestoRetencion CIR ON (CEIRD.CfgImpuestoRetencionID = CIR.CfgImpuestoRetencionID)
		   WHERE CEIRD.Activo = 'S' AND CEIRD.CfgEsquemaImpuestoRetencionID = CASE WHEN MAX(PP.AplicaRetenciones) = 'S' THEN 1 ELSE 2 END and 
				COCD.CmpOrdenCompraEncabezadoID = COCE.CmpOrdenCompraEncabezadoID) as Retenciones
	  FROM CmpOrdenCompraEncabezado COCE
		LEFT OUTER JOIN PpalSucursal PSu ON COCE.PpalSucursalID = PSu.PpalSucursalID
		LEFT OUTER JOIN PpalSerie PSe ON COCE.PpalSerieID = PSe.PpalSerieID
		LEFT OUTER JOIN PpalProveedor PP ON COCE.PpalProveedorID = PP.PpalProveedorID
		LEFT OUTER JOIN CfgEstatusDocumento CED ON COCE.CfgEstatusDocumentoID = CED.CfgEstatusDocumentoID
		LEFT OUTER JOIN EspPersona EP ON PP.EspPersonaID = EP.EspPersonaID
		LEFT OUTER JOIN CmpOrdenCompraDetalle COCD ON COCE.CmpOrdenCompraEncabezadoID = COCD.CmpOrdenCompraEncabezadoID
	 WHERE COCE.TipoDocumentoID = @TipoDocumentoID
		AND PSu.PpalSucursalClave Between (SELECT PpalSucursalClave FROM PpalSucursal WHERE PpalSucursal.PpalSucursalID = @SucursalInicialID) AND
									(SELECT PpalSucursalClave FROM PpalSucursal WHERE PpalSucursal.PpalSucursalID = @SucursalFinalID)					
		AND COCE.Fecha Between @FechaInicial and @FechaFinal
		AND (COCE.PpalProveedorID = @ProveedorID or @ProveedorID = 0)
		AND PSe.PpalSerieClave Between (SELECT PpalSerieClave FROM PpalSerie WHERE PpalSerie.PpalSerieID = @SerieInicialID) AND
									(SELECT PpalSerieClave FROM PpalSerie WHERE PpalSerie.PpalSerieID = @SerieFinalID)
		AND CHARINDEX('@@' + CAST(COCE.CfgEstatusDocumentoID AS varchar(10)) + '@@',  @EstatusAIncluir) > 0
	GROUP BY COCE.CmpOrdenCompraEncabezadoID
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('SucursalInicial::', @SucursalInicialID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompra_ListadoParametrosDetalles]...';


GO

CREATE PROCEDURE [dbo].[CmpOrdenCompra_ListadoParametrosDetalles]
@TipoDocumentoID int,
@SucursalInicialID int,
@SucursalFinalID int,
@FechaInicial DateTime,
@FechaFinal DateTime,
@ProveedorID int,
@SerieInicialID int,
@SerieFinalID int,
@EstatusAIncluir varchar(500)
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpOrdenCompraDetalle',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  COCD.CmpOrdenCompraDetalleID,	COCD.CmpOrdenCompraEncabezadoID,	COCD.Renglon,	COCD.PpalProductoID,
			COCD.Cantidad,					COCD.AuxUnidadID,					COCD.Costo,		COCD.FechaCompromiso,
			COCD.DescripcionAdicional
	  FROM CmpOrdenCompraEncabezado COCE
		LEFT OUTER JOIN PpalSucursal PSu ON COCE.PpalSucursalID = PSu.PpalSucursalID
		LEFT OUTER JOIN PpalSerie PSe ON COCE.PpalSerieID = PSe.PpalSerieID
		LEFT OUTER JOIN PpalProveedor PP ON COCE.PpalProveedorID = PP.PpalProveedorID
		LEFT OUTER JOIN CfgEstatusDocumento CED ON COCE.CfgEstatusDocumentoID = CED.CfgEstatusDocumentoID
		LEFT OUTER JOIN EspPersona EP ON PP.EspPersonaID = EP.EspPersonaID
		LEFT OUTER JOIN CmpOrdenCompraDetalle COCD ON COCE.CmpOrdenCompraEncabezadoID = COCD.CmpOrdenCompraEncabezadoID
	 WHERE COCE.TipoDocumentoID = @TipoDocumentoID
		AND PSu.PpalSucursalClave Between (SELECT PpalSucursalClave FROM PpalSucursal WHERE PpalSucursal.PpalSucursalID = @SucursalInicialID) AND
									(SELECT PpalSucursalClave FROM PpalSucursal WHERE PpalSucursal.PpalSucursalID = @SucursalFinalID)					
		AND COCE.Fecha Between @FechaInicial and @FechaFinal
		AND (COCE.PpalProveedorID = @ProveedorID or @ProveedorID = 0)
		AND PSe.PpalSerieClave Between (SELECT PpalSerieClave FROM PpalSerie WHERE PpalSerie.PpalSerieID = @SerieInicialID) AND
									(SELECT PpalSerieClave FROM PpalSerie WHERE PpalSerie.PpalSerieID = @SerieFinalID)
		AND CHARINDEX('@@' + CAST(COCE.CfgEstatusDocumentoID AS varchar(10)) + '@@',  @EstatusAIncluir) > 0
	ORDER BY COCD.CmpOrdenCompraDetalleID,		COCD.Renglon

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('SucursalInicial::', @SucursalInicialID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompra_ListadoParametrosImpuestos]...';


GO


CREATE PROCEDURE [dbo].[CmpOrdenCompra_ListadoParametrosImpuestos]
@TipoDocumentoID int,
@SucursalInicialID int,
@SucursalFinalID int,
@FechaInicial DateTime,
@FechaFinal DateTime,
@ProveedorID int,
@SerieInicialID int,
@SerieFinalID int,
@EstatusAIncluir varchar(500)
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpOrdenCompraEncabezado',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT COCE.CmpOrdenCompraEncabezadoID,							MAX(PSu.Nombre) AS SucursalNombre,				
		MAX(PSe.PpalSerieClave) AS SerieClave,						MAX(COCE.Folio) AS Folio,
		MAX(COCE.Fecha) as Fecha,									MAX(CED.Nombre) AS EstatusNombre,
		MAX(CASE WHEN FisicaMoral = 'F' 
			THEN EP.Nombre + ' ' + EP.ApellidoPaterno + ' ' + EP.ApellidoMaterno
			ELSE EP.NombreComercial END) AS ProveedorNombre,		
		SUM(Cantidad * Costo) as ImporteTotal
	  FROM CmpOrdenCompraEncabezado COCE
		LEFT OUTER JOIN PpalSucursal PSu ON COCE.PpalSucursalID = PSu.PpalSucursalID
		LEFT OUTER JOIN PpalSerie PSe ON COCE.PpalSerieID = PSe.PpalSerieID
		LEFT OUTER JOIN PpalProveedor PP ON COCE.PpalProveedorID = PP.PpalProveedorID
		LEFT OUTER JOIN CfgEstatusDocumento CED ON COCE.CfgEstatusDocumentoID = CED.CfgEstatusDocumentoID
		LEFT OUTER JOIN EspPersona EP ON PP.EspPersonaID = EP.EspPersonaID
		LEFT OUTER JOIN CmpOrdenCompraDetalle COCD ON COCE.CmpOrdenCompraEncabezadoID = COCD.CmpOrdenCompraEncabezadoID
	 WHERE COCE.TipoDocumentoID = @TipoDocumentoID
		AND PSu.PpalSucursalClave Between (SELECT PpalSucursalClave FROM PpalSucursal WHERE PpalSucursal.PpalSucursalID = @SucursalInicialID) AND
									(SELECT PpalSucursalClave FROM PpalSucursal WHERE PpalSucursal.PpalSucursalID = @SucursalFinalID)					
		AND COCE.Fecha Between @FechaInicial and @FechaFinal
		AND (COCE.PpalProveedorID = @ProveedorID or @ProveedorID = 0)
		AND PSe.PpalSerieClave Between (SELECT PpalSerieClave FROM PpalSerie WHERE PpalSerie.PpalSerieID = @SerieInicialID) AND
									(SELECT PpalSerieClave FROM PpalSerie WHERE PpalSerie.PpalSerieID = @SerieFinalID)
		AND CHARINDEX('@@' + CAST(COCE.CfgEstatusDocumentoID AS varchar(10)) + '@@',  @EstatusAIncluir) > 0
	GROUP BY COCE.CmpOrdenCompraEncabezadoID
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('SucursalInicial::', @SucursalInicialID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompraACompra_Guardar]...';


GO

-- OJO PVP: FALTA VER TIPOMOVIMIENTOPROVEEDOR = COMPRA, ESTÁ FIJO EN 1
CREATE PROCEDURE [dbo].[CmpOrdenCompraACompra_Guardar]
@CmpOrdenCompraEncabezadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = ''
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpCompraEncabezado', @IDDoctoAgregado int,
		@Operacion	nvarchar(20) = 'Create', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalSucursalID_ int = 0,
		@TipoDocumentoID_ int = 0,
		@SerieID_ int = 0,
		@Folio_ int = 0,
		@PpalProveedorID_ int = 0,
		@TipoMovimientoProveedorID_ int = 0,
		@PersonalID_ int = 0,
		@Fecha_ datetime = 0,
		@Referencia_ varchar(50) = '',
		@Concepto_ varchar(100) = '',
		@EstatusDocumentoID_ int = 0,
		@LinkXML_ varchar(250) = '',
		@LinkPDF_ varchar(250) = '',
		@EstatusFactura_ char(1) = '',
		@PpalCentroCostoID_ int = 0,
		@PpalConceptoEgresoID_ int = 0,
		@CmpOrdenCompraEncabezadoID_ int = @CmpOrdenCompraEncabezadoID

DECLARE @TipoDocumentoCompraID int = 4,  
		@SeriePredeterminadaID int,
		@SiguienteFolio int

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	-- Lee datos del encabezado de O.C. 
	IF @CmpOrdenCompraEncabezadoID_ > 0
	BEGIN
		SELECT	@PpalSucursalID_  = IsNull(PpalSucursalID,0),
				@TipoDocumentoID_ = IsNull(@TipoDocumentoCompraID,0),
				@SerieID_ = IsNull(PpalSerieID,0),
				@Folio_ = IsNull(Folio,0),
				@PpalProveedorID_  = IsNull(PpalProveedorID,0),
				@PersonalID_ = IsNull(PpalPersonalID,0),
				@Fecha_ = IsNull(Fecha,0),
				@Referencia_ = ISNull(Referencia,''),
				@Concepto_ = IsNull(Concepto,''),
				@EstatusDocumentoID_ = IsNull(CfgEstatusDocumentoID,0),
				@LinkXML_ = ISNull(LinkXML,''),
				@LinkPDF_ = ISNull(LinkPDF,''),
				@EstatusFactura_ = ISNull(EstatusFactura,''),
				@PpalCentroCostoID_ = IsNull(PpalCentroCostoID,0),
				@PpalConceptoEgresoID_ = IsNull(PpalConceptoEgresoID,0)
		   FROM	CmpOrdenCompraEncabezado WHERE CmpOrdenCompraEncabezadoID = @CmpOrdenCompraEncabezadoID_
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID de Orden de Compra:', ' ', @CmpOrdenCompraEncabezadoID);
		-- Si no hubo error Crea la Compra
		IF @Errores = 0
		BEGIN
			-- LEE SERIE PREDETERMINADA DE COMPRAS (SI NO EXISTE -> ERROR)
			SELECT @SeriePredeterminadaID = PpalSerieID, @SiguienteFolio = UltimoFolio + 1
			  FROM PpalSerie WHERE TipoDocumentoID = @TipoDocumentoCompraID AND Predeterminado = 1;
			IF @@RowCount = 0
				SELECT @Errores = 999999, @Mensaje = 'No se encontró el Serie Predeterminada de Compras';
			-- actualiza el folio en serie
			ELSE
				UPDATE	PpalSerie
				   SET	UltimoFolio = UltimoFolio + 1
				 WHERE	PpalSerieID = @SeriePredeterminadaID
			-- Lee último folio de la serie
			SELECT	@Folio_ = UltimoFolio
			  FROM	PpalSerie
			 WHERE	PpalSerieID = @SeriePredeterminadaID

			IF @Errores = 0
			BEGIN
				-- LEE ESTATUS INICIAL DE COMPRA
				SELECT @EstatusDocumentoID_ = CED.CfgEstatusDocumentoID
				  FROM CfgEstatusDocumento CED
					LEFT OUTER JOIN SistemaEstatusTipoDocumento SETD ON CED.SistemaEstatusTipoDocumentoID = SETD.SistemaEstatusTipoDocumentoID
				 WHERE SETD.TipoDocumentoID = 4 AND SETD.Predeterminado = 1
				IF @@RowCount = 0
					SELECT @Errores = 999999, @Mensaje = 'No se encontró el Serie Predeterminada de Compras';
				IF @Errores = 0
				BEGIN
					-- SI EXISTE-> AGREGA ENCABEZADO DE COMPRAS
					INSERT  INTO CmpCompraEncabezado(
							PpalSucursalID,
							TipoDocumentoID,
							PpalSerieID,
							Folio,
							PpalProveedorID,
							CmpTipoMovimientoProveedorID,
							PpalPersonalID,
							Fecha,
							Referencia,
							Concepto,
							CfgEstatusDocumentoID,
							LinkXML,
							LinkPDf,
							EstatusFactura,
							PpalCentroCostoID,
							PpalConceptoEgresoID)
					VALUES  (
							@PpalSucursalID_,
							@TipoDocumentoCompraID,
							@SeriePredeterminadaID,
							@Folio_,
							@PpalProveedorID_,
							1,
							@PersonalID_,
							GetDate(),
							@Referencia_,
							@Concepto_,
							@EstatusDocumentoID_,
							@LinkXML_,
							@LinkPDf_,
							@EstatusFactura_,
							@PpalCentroCostoID_,
							@PpalConceptoEgresoID_
							)
        
					SET     @IDDoctoAgregado = SCOPE_IDENTITY()
				END
				-- SI AGREGÓ -> AGREGA DETALLES
				IF @IDDoctoAgregado > 0
					INSERT INTO CmpCompraDetalle
							(CmpCompraEncabezadoID,				    Renglon,			PpalProductoID,
							Cantidad,								AuxUnidadID,		Costo,
							DescripcionAdicional)
					(SELECT @IDDoctoAgregado,						Renglon,			PpalProductoID,
							Cantidad,								AuxUnidadID,		Costo,
							DescripcionAdicional
					   FROM CmpOrdenCompraDetalle
					  WHERE CmpOrdenCompraEncabezadoID = @CmpOrdenCompraEncabezadoID)
			END

			IF @IDDoctoAgregado > 0
			BEGIN
				/* Procesa Bitácora */
				-- Revisa si el cambio debe ser guardado en Bitácora
				EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
						@UsuarioID			=	@UsuarioIDBitcora,
						@TablaNombre		=   @TablaNombreIDBitacora,
						@Operacion			=	@Operacion

				-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
				IF @isChangeBeLogged = 1 
				BEGIN
					-- logMessage = Cambios efectuados
					SET @logMessage = Concat('CmpCompraEncabezadoID::', @CmpOrdenCompraEncabezadoID_, ':', 0, ';')
					SET @logMessage = Concat(@logMessage, 'PpalSucursalID::', @PpalSucursalID_, ':', 0, ';')
					SET @logMessage = Concat(@logMessage, 'TipoDocumentoID::', @TipoDocumentoID_, ':', 0, ';')
					SET @logMessage = Concat(@logMessage, 'SerieID::', @SerieID_, ':', 0, ';')
					SET @logMessage = Concat('Folio::', @Folio_, ':', 0, ';')
					SET @logMessage = Concat('PpalProveedorID::', @PpalProveedorID_, ':', 0, ';')
					SET @logMessage = Concat(@logMessage, 'TipoMovimientoProveedorID::', @TipoMovimientoProveedorID_, ':;')
					SET @logMessage = Concat(@logMessage, 'PersonalID::', @PersonalID_, ':;')
					SET @logMessage = Concat(@logMessage, 'Fecha::', @Fecha_, ':;')
					SET @logMessage = Concat('Referencia::', @Referencia_, ':;')
					SET @logMessage = Concat('Concepto::', @Concepto_, ':;')
					SET @logMessage = Concat(@logMessage, 'EstatusDocumentoID::', @EstatusDocumentoID_, ':', 0, ';')
					SET @logMessage = Concat('LinkXML::', @LinkXML_, ':;')
					SET @logMessage = Concat('LinkPDf::', @LinkPDf_, ':;')
					SET @logMessage = Concat('EstatusFactura::', @EstatusFactura_, ':;')
					SET @logMessage = Concat('PpalCentroCostoID::', @PpalCentroCostoID_, ':', 0, ';')
					SET @logMessage = Concat('PpalConceptoEgresoID::', @PpalConceptoEgresoID_, ':', 0, ';')

					PRINT @logMessage
					-- Guarda en Bitácora
					EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
															,@TablaID			= @IDDoctoAgregado
															,@TablaColumna1		= ''
															,@TablaColumna2		= ''
															,@Operacion			= @Operacion
															,@UsuarioID			= @UsuarioIDBitcora
															,@Descripcion		= @DescripcionBitacora
															,@Cambios			= @logMessage
															,@IpAddress			= @IpAddress
															,@HostName			= @HostName
				END
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDDoctoAgregado as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompraDesglose_Consultar]...';


GO


CREATE PROCEDURE [dbo].[CmpOrdenCompraDesglose_Consultar]
@CmpOrdenCompraDesgloseID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpOrdenCompraDesglose',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CmpOrdenCompraDesgloseID
	SELECT  CmpOrdenCompraDesgloseID,CmpOrdenCompraDetalleID,Renglon,PpalSucursalID,PpalCentroCostoID,PpalAreaID,PpalAlmacenID,ConceptoEgresoID,PpalCuentaContableID,Cantidad,CmpRequisicionDetalleID
	FROM    CmpOrdenCompraDesglose
	WHERE   CmpOrdenCompraDesgloseID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CmpOrdenCompraDesgloseID::', @CmpOrdenCompraDesgloseID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
				
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompraDesglose_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CmpOrdenCompraDesglose_Eliminar]
@CmpOrdenCompraDesgloseID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpOrdenCompraDesglose',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDABorrar = @CmpOrdenCompraDesgloseID
    DELETE
    FROM    CmpOrdenCompraDesglose
    WHERE   CmpOrdenCompraDesgloseID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @CmpOrdenCompraDesgloseID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CmpOrdenCompraDesgloseID::', @CmpOrdenCompraDesgloseID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompraDesglose_Guardar]...';


GO


CREATE PROCEDURE [dbo].[CmpOrdenCompraDesglose_Guardar]
@CmpOrdenCompraDesgloseID int,
@CmpOrdenCompraDetalleID int,
@Renglon int,
@PpalSucursalID int,
@PpalCentroCostoID int,
@PpalAreaID int,
@AlmacenID int,
@ConceptoEgresoID int,
@CuentaContableID int,
@Cantidad float,
@CmpRequisicionDetalleID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpOrdenCompraDesglose',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CmpOrdenCompraDetalleID_ int = 0,
		@Renglon_ int = 0,
		@PpalSucursalID_ int = 0,
		@CentroCostoID_ int = 0,
		@AreaID_ int = 0,
		@AlmacenID_ int = 0,
		@ConceptoEgresoID_ int = 0,
		@CuentaContableID_ int = 0,
		@Cantidad_ float = 0.0,
		@CmpRequisicionDetalleID_ int = 0,
		@CmpOrdenCompraDesgloseID_ int = @CmpOrdenCompraDesgloseID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CmpOrdenCompraDesgloseID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CmpOrdenCompraDetalleID_  = IsNull(CmpOrdenCompraDetalleID,0),
				@Renglon_  = IsNull(Renglon,0),
				@PpalSucursalID_  = IsNull(PpalSucursalID,0),
				@CentroCostoID_ = IsNull(PpalCentroCostoID,0),
				@AreaID_ = IsNull(PpalAreaID,0),
				@AlmacenID_ = IsNull(PpalAlmacenID,0),
				@ConceptoEgresoID_ = IsNull(ConceptoEgresoID,0),
				@CuentaContableID_ = IsNull(PpalCuentaContableID,0),
				@Cantidad_ = IsNull(Cantidad,0.0),
				@CmpRequisicionDetalleID_ = IsNull(CmpRequisicionDetalleID,0),
				@CmpOrdenCompraDesgloseID_ = IsNull(CmpOrdenCompraDesgloseID,0)
		   FROM CmpOrdenCompraDesglose WHERE CmpOrdenCompraDesgloseID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CmpOrdenCompraDesglose
			SET     CmpOrdenCompraDetalleID = @CmpOrdenCompraDetalleID,
					Renglon = @Renglon,
					PpalSucursalID = @PpalSucursalID,
					PpalCentroCostoID = @PpalCentroCostoID,
					PpalAreaID = @PpalAreaID,
					PpalAlmacenID = @AlmacenID,
					ConceptoEgresoID = @ConceptoEgresoID,
					PpalCuentaContableID = @CuentaContableID,
					Cantidad = @Cantidad,
					CmpRequisicionDetalleID = @CmpRequisicionDetalleID
			WHERE   CmpOrdenCompraDesgloseID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CmpOrdenCompraDesglose(
					CmpOrdenCompraDetalleID,
					Renglon,
					PpalSucursalID,
					PpalCentroCostoID,
					PpalAreaID,
					PpalAlmacenID,
					ConceptoEgresoID,
					PpalCuentaContableID,
					Cantidad,
					CmpRequisicionDetalleID)
			VALUES  (
					@CmpOrdenCompraDetalleID,
					@Renglon,
					@PpalSucursalID,
					@PpalCentroCostoID,
					@PpalAreaID,
					@AlmacenID,
					@ConceptoEgresoID,
					@CuentaContableID,
					@Cantidad,
					@CmpRequisicionDetalleID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CmpOrdenCompraDesgloseID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CmpOrdenCompraDetalleID::', @CmpOrdenCompraDetalleID_, ':', @CmpOrdenCompraDetalleID, ';')
				SET @logMessage = Concat(@logMessage, 'Renglon::', @Renglon_, ':', @Renglon, ';')
				SET @logMessage = Concat(@logMessage, 'PpalSucursalID::', @PpalSucursalID_, ':', @PpalSucursalID, ';')
				SET @logMessage = Concat(@logMessage, 'CentroCostoID::', @CentroCostoID_, ':', @PpalCentroCostoID, ';')
				SET @logMessage = Concat('PpalAreaID::', @AreaID_, ':', @PpalAreaID, ';')
				SET @logMessage = Concat('AlmacenID::', @AlmacenID_, ':', @AlmacenID, ';')
				SET @logMessage = Concat(@logMessage, 'ConceptoEgresoID::', @ConceptoEgresoID_, ':', @ConceptoEgresoID, ';')
				SET @logMessage = Concat(@logMessage, 'CuentaContableID::', @CuentaContableID_, ':', @CuentaContableID, ';')
				SET @logMessage = Concat(@logMessage, 'Cantidad::', @Cantidad_, ':', @Cantidad, ';')
				SET @logMessage = Concat(@logMessage, 'CmpRequisicionDetalleID::', @CmpRequisicionDetalleID_, ':', @CmpRequisicionDetalleID, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
				END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompraDesglose_Listado]...';


GO


CREATE PROCEDURE [dbo].[CmpOrdenCompraDesglose_Listado]
@CmpOrdenCompraDetalleID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacofora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpOrdenCompraDesglose',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  CmpOrdenCompraDesgloseID,CmpOrdenCompraDetalleID,Renglon,PpalSucursalID,COCD.PpalCentroCostoID,PpCc.Nombre,PpalAreaID,PpalAlmacenID,ConceptoEgresoID,PpalCuentaContableID,Cantidad,CmpRequisicionDetalleID
	FROM    CmpOrdenCompraDesglose COCD
	LEFT OUTER JOIN PpalCentroCosto PpCc ON PpCc.PpalCentroCostoID = COCD.PpalCentroCostoID
	WHERE	CmpOrdenCompraDetalleID = @CmpOrdenCompraDetalleID
	ORDER BY PpalAreaID

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacofora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CmpOrdenCompraDetalleID::', @CmpOrdenCompraDetalleID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacofora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompraDetalle_Consultar]...';


GO


CREATE PROCEDURE [dbo].[CmpOrdenCompraDetalle_Consultar]
@CmpOrdenCompraDetalleID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpOrdenCompraDetalle',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CmpOrdenCompraDetalleID
	SELECT  CmpOrdenCompraDetalleID,CmpOrdenCompraEncabezadoID,Renglon,PpalProductoID,Cantidad,AuxUnidadID,Costo,FechaCompromiso
	FROM    CmpOrdenCompraDetalle
	WHERE   CmpOrdenCompraDetalleID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CmpOrdenCompraDetalleID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
						
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompraDetalle_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CmpOrdenCompraDetalle_Eliminar]
@CmpOrdenCompraDetalleID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpOrdenCompraDetalle',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDABorrar = @CmpOrdenCompraDetalleID
    DELETE
    FROM    CmpOrdenCompraDetalle
    WHERE   CmpOrdenCompraDetalleID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CmpOrdenCompraDetalleID::', @CmpOrdenCompraDetalleID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
	/********************* FIN COPY 2  *********************************/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompraDetalle_Guardar]...';


GO


CREATE PROCEDURE [dbo].[CmpOrdenCompraDetalle_Guardar]
@CmpOrdenCompraDetalleID int,
@CmpOrdenCompraEncabezadoID int,
@Renglon int,
@PpalProductoID int,
@Cantidad float,
@UnidadID int,
@Costo float,
@FechaCompromiso datetime,
@DescripcionAdicional varchar(500)
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
SET NOCOUNT ON 
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpOrdenCompraDetalle',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CmpOrdenCompraEncabezadoID_ int = 0,
		@Renglon_ int = 0,
		@ProductoID_ int = 0,
		@Cantidad_ float = 0.0,
		@UnidadID_ int = 0,
		@Costo_ float = 0.0,
		@FechaCompromiso_ datetime = 0,
		@CmpOrdenCompraDetalleID_ int = @CmpOrdenCompraDetalleID,
		@DescripcionAdicional_ varchar(500) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CmpOrdenCompraDetalleID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CmpOrdenCompraEncabezadoID_ = IsNull(CmpOrdenCompraEncabezadoID,0),
				@Renglon_ = IsNull(Renglon,0),
				@ProductoID_ = IsNull(PpalProductoID,0),
				@Cantidad_ = IsNull(Cantidad,0.0),
				@UnidadID_ = IsNull(AuxUnidadID,0),
				@Costo_ = IsNull(Costo,0.0),
				@FechaCompromiso_ = IsNull(FechaCompromiso,0),
				@CmpOrdenCompraDetalleID_ = IsNull(CmpOrdenCompraDetalleID,0),
				@DescripcionAdicional_ = IsNull(@DescripcionAdicional,'')
		   FROM	CmpOrdenCompraDetalle WHERE CmpOrdenCompraDetalleID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN

			UPDATE  CmpOrdenCompraDetalle
			SET     CmpOrdenCompraEncabezadoID = @CmpOrdenCompraEncabezadoID,
					Renglon = @Renglon,
					PpalProductoID = @PpalProductoID,
					Cantidad = @Cantidad,
					AuxUnidadID = @UnidadID,
					Costo = @Costo,
					FechaCompromiso = @FechaCompromiso,
					DescripcionAdicional = @DescripcionAdicional
			WHERE   CmpOrdenCompraDetalleID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CmpOrdenCompraDetalle(
					CmpOrdenCompraEncabezadoID,
					Renglon,
					PpalProductoID,
					Cantidad,
					AuxUnidadID,
					Costo,
					FechaCompromiso,
					DescripcionAdicional)
			VALUES  (
					@CmpOrdenCompraEncabezadoID,
					@Renglon,
					@PpalProductoID,
					@Cantidad,
					@UnidadID,
					@Costo,
					@FechaCompromiso,
					@DescripcionAdicional)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CmpOrdenCompraDetalleID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitcora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CmpOrdenCompraEncabezadoID::', @CmpOrdenCompraEncabezadoID_, ':', @CmpOrdenCompraEncabezadoID, ';')
				SET @logMessage = Concat(@logMessage, 'Renglon::', @Renglon_, ':', @Renglon, ';')
				SET @logMessage = Concat(@logMessage, 'Cantidad::', @Cantidad_, ':', @Cantidad, ';')
				SET @logMessage = Concat(@logMessage, 'UnidadID::', @UnidadID_, ':', @UnidadID, ';')
				SET @logMessage = Concat(@logMessage, 'Costo::', @Costo_, ':', @Costo, ';')
				SET @logMessage = Concat(@logMessage, 'FechaCompromiso::', @FechaCompromiso_, ':', @FechaCompromiso, ';')
				SET @logMessage = Concat(@logMessage, 'DescripcionAdicional::', @DescripcionAdicional_, ':', @DescripcionAdicional, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitcora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
				END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompraDetalle_Listado]...';


GO


CREATE PROCEDURE [dbo].[CmpOrdenCompraDetalle_Listado]
@CmpOrdenCompraEncabezadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpOrdenCompraDetalle',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  CmpOrdenCompraDetalleID,CmpOrdenCompraEncabezadoID,Renglon,PpalProductoID,Cantidad,AuxUnidadID,Costo,FechaCompromiso,
			DescripcionAdicional
	FROM    CmpOrdenCompraDetalle
	WHERE	CmpOrdenCompraEncabezadoID = @CmpOrdenCompraEncabezadoID
	ORDER BY Renglon

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CmpOrdenCompraEncabezadoID::', @CmpOrdenCompraEncabezadoID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
		END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompraEncabezado_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CmpOrdenCompraEncabezado_Consultar]
@CmpOrdenCompraEncabezadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpOrdenCompraEncabezado',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CmpOrdenCompraEncabezadoID
	SELECT  CmpOrdenCompraEncabezadoID,				PpalSucursalID,				TipoDocumentoID,
			PpalSerieID,							Folio,						COCE.PpalProveedorID,
			PpalPersonalID,							Fecha,						Referencia,
			Concepto,								COCE.CfgEstatusDocumentoID,		LinkXML,
			LinkPDF,								EstatusFactura,				PpalCentroCostoID,
			PpalConceptoEgresoID,					PpalAreaID,					EP.RFC,	
			CED.Nombre AS CfgEstatusDocumentoNombre
	FROM    CmpOrdenCompraEncabezado COCE 
			LEFT OUTER JOIN PpalProveedor PP ON COCE.PpalProveedorID = PP.PpalProveedorID
			LEFT OUTER JOIN EspPersona EP ON PP.EspPersonaID = EP.EspPersonaID
			LEFT OUTER JOIN CfgEstatusDocumento CED ON COCE.CfgEstatusDocumentoID = CED.CfgEstatusDocumentoID
	WHERE   CmpOrdenCompraEncabezadoID = @IDAConsultar
			
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CmpOrdenCompraEncabezadoID::', @CmpOrdenCompraEncabezadoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
						
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompraEncabezado_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CmpOrdenCompraEncabezado_Eliminar]
@CmpOrdenCompraEncabezadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpOrdenCompraEncabezado',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDABorrar = @CmpOrdenCompraEncabezadoID
    DELETE
    FROM    CmpOrdenCompraEncabezado
    WHERE   CmpOrdenCompraEncabezadoID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CmpOrdenCompraEncabezadoID::', @CmpOrdenCompraEncabezadoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompraEncabezado_Guardar]...';


GO


CREATE PROCEDURE [dbo].[CmpOrdenCompraEncabezado_Guardar]
@CmpOrdenCompraEncabezadoID int,
@PpalSucursalID int,
@TipoDocumentoID int,
@PpalSerieID int,
@Folio int,
@PpalProveedorID int,
@PpalPersonalID int,
@Fecha datetime,
@Referencia varchar(50) = null,
@Concepto varchar(100) = null,
@CfgEstatusDocumentoID int,
@LinkXML varchar(250),
@LinkPDF varchar(250),
@EstatusFactura char(1),
@PpalCentroCostoID int,
@PpalConceptoEgresoID int,
@PpalAreaID int

-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpOrdenCompraEncabezado',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalSucursalID_ int = 0,
		@TipoDocumentoID_ int = 0,
		@SerieID_ int = 0,
		@Folio_ int = 0,
		@PpalProveedorID_ int = 0,
		@PersonalID_ int = 0,
		@Fecha_ datetime = 0,
		@Referencia_ varchar(50) = '',
		@Concepto_ varchar(100) = '',
		@CfgEstatusDocumentoID_ int = 0,
		@LinkXML_ varchar(250),
		@LinkPDF_ varchar(250),
		@EstatusFactura_ char(1),
		@PpalCentroCostoID_ int,
		@PpalConceptoEgresoID_ int,
		@PpalAreaID_ int,
		@CmpOrdenCompraEncabezadoID_ int = @CmpOrdenCompraEncabezadoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CmpOrdenCompraEncabezadoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@PpalSucursalID_ = IsNull(PpalSucursalID,0),
				@TipoDocumentoID_ = IsNull(TipoDocumentoID,0),
				@SerieID_ = IsNull(PpalSerieID,0),
				@Folio_ = IsNull(Folio,0),
				@PpalProveedorID_ = IsNull(PpalProveedorID,0),
				@PersonalID_ = IsNull(PpalPersonalID,0),
				@Fecha_ = IsNull(Fecha,0),
				@Referencia_ = IsNull(Referencia,''),
				@Concepto_ = IsNull(Concepto,''),
				@CfgEstatusDocumentoID_ = IsNull(CfgEstatusDocumentoID,0),
				@LinkXML_ = LinkXML,
				@LinkPDF_ = LinkPDF,
				@EstatusFactura_ = EstatusFactura,
				@PpalCentroCostoID_ = PpalCentroCostoID,
				@PpalConceptoEgresoID_ = PpalConceptoEgresoID,
				@PpalAreaID_ = PpalAreaID,
				@CmpOrdenCompraEncabezadoID_ = IsNull(CmpOrdenCompraEncabezadoID,0)
		   FROM	CmpOrdenCompraEncabezado WHERE CmpOrdenCompraEncabezadoID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si se indicó ID hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CmpOrdenCompraEncabezado
			SET     PpalSucursalID = @PpalSucursalID,
					TipoDocumentoID = @TipoDocumentoID,
					PpalSerieID = @PpalSerieID,
					Folio = @Folio,
					PpalProveedorID = @PpalProveedorID,
					PpalPersonalID = @PpalPersonalID,
					Fecha = @Fecha,
					Referencia = @Referencia,
					Concepto = @Concepto,
					LinkXML = @LinkXML,
					LinkPDF = @LinkPDF,
					EstatusFactura = @EstatusFactura,
					PpalCentroCostoID = @PpalCentroCostoID,
					PpalConceptoEgresoID = @PpalConceptoEgresoID,
					PpalAreaID = @PpalAreaID,
					CfgEstatusDocumentoID = @CfgEstatusDocumentoID
			WHERE   CmpOrdenCompraEncabezadoID = @IDAActualizar
		END
		ELSE
		BEGIN
			-- Lo actualiza en serie
			UPDATE	PpalSerie
			   SET	UltimoFolio = UltimoFolio + 1
			 WHERE	PpalSerieID = @PpalSerieID
			-- Lee último folio de la serie
			SELECT	@Folio_ = UltimoFolio
			  FROM	PpalSerie
			 WHERE	PpalSerieID = @PpalSerieID
			SET @Folio = @Folio_
			INSERT  INTO CmpOrdenCompraEncabezado(
					PpalSucursalID,
					TipoDocumentoID,
					PpalSerieID,
					Folio,
					PpalProveedorID,
					PpalPersonalID,
					Fecha,
					Referencia,
					Concepto,
					LinkXML,
					LinkPDF,
					EstatusFactura,
					PpalCentroCostoID,
					PpalConceptoEgresoID,
					PpalAreaID,
					CfgEstatusDocumentoID)
			VALUES  (
					@PpalSucursalID,
					@TipoDocumentoID,
					@PpalSerieID,
					@Folio,
					@PpalProveedorID,
					@PpalPersonalID,
					@Fecha,
					@Referencia,
					@Concepto,
					@LinkXML,
					@LinkPDF,
					@EstatusFactura,
					@PpalCentroCostoID,
					@PpalConceptoEgresoID,
					@PpalAreaID,
					@CfgEstatusDocumentoID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CmpOrdenCompraEncabezadoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitcora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalSucursalID::', @PpalSucursalID_, ':', @PpalSucursalID, ';')
				SET @logMessage = Concat(@logMessage, 'TipoDocumentoID::', @TipoDocumentoID_, ':', @TipoDocumentoID, ';')
				SET @logMessage = Concat(@logMessage, 'SerieID::', @SerieID_, ':', @PpalSerieID, ';')
				SET @logMessage = Concat(@logMessage, 'Folio::', @Folio_, ':', @Folio, ';')
				SET @logMessage = Concat('PpalProveedorID::', @PpalProveedorID_, ':', @PpalProveedorID, ';')
				SET @logMessage = Concat('PpalPersonalID::', @PersonalID_, ':', @PpalPersonalID, ';')
				SET @logMessage = Concat(@logMessage, 'Fecha::', @Fecha_, ':', @Fecha, ';')
				SET @logMessage = Concat(@logMessage, 'Referencia::', @Referencia_, ':', @Referencia, ';')
				SET @logMessage = Concat(@logMessage, 'Concepto::', @Concepto_, ':', @Concepto, ';')
				SET @logMessage = Concat(@logMessage, 'CentroCostoID::', @PpalCentroCostoID_, ':', @PpalCentroCostoID, ';')
				SET @logMessage = Concat(@logMessage, 'ConceptoEgresoID::', @PpalConceptoEgresoID_, ':', @PpalConceptoEgresoID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalAreaID::', @PpalAreaID_, ':', @PpalAreaID, ';')
				SET @logMessage = Concat('EstatusDocumentoID::', @CfgEstatusDocumentoID_, ':', @CfgEstatusDocumentoID, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitcora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompraEncabezado_Listado]...';


GO


CREATE PROCEDURE [dbo].[CmpOrdenCompraEncabezado_Listado]
@PpalSucursalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpOrdenCompraEncabezado',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  CmpOrdenCompraEncabezadoID,PpalSucursalID,TipoDocumentoID,PpalSerieID,Folio,PpalProveedorID,PpalPersonalID,Fecha,
			Referencia,Concepto,COCE.CfgEstatusDocumentoID,LinkXML,LinkPDF, EstatusFactura,COCE.PpalCentroCostoID,PpalConceptoEgresoID,
			PpalAreaID,	CED.Nombre AS CfgEstatusDocumentoNombre, PpCc.Nombre AS NombreCentroCosto
	FROM    CmpOrdenCompraEncabezado COCE
			LEFT OUTER JOIN CfgEstatusDocumento CED ON COCE.CfgEstatusDocumentoID = CED.CfgEstatusDocumentoID
	LEFT OUTER JOIN PpalCentroCosto PpCc ON  PpCc.PpalCentroCostoID = COCE.PpalCentroCostoID
	WHERE  PpalSucursalID = @PpalSucursalID
	ORDER BY PpalSerieID 

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('PpalSucursalID::', @PpalSucursalID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompraFactura_Consultar]...';


GO


CREATE PROCEDURE [dbo].[CmpOrdenCompraFactura_Consultar]
@CmpOrdenCompraFacturaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpOrdenCompraFactura',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CmpOrdenCompraFacturaID
	SELECT  CmpOrdenCompraFacturaID,CmpOrdenCompraEncabezadoID,EspFacturaID,Importe
	FROM    CmpOrdenCompraFactura
	WHERE   CmpOrdenCompraFacturaID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CmpOrdenCompraFacturaID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
						
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompraFactura_Guardar]...';


GO


CREATE PROCEDURE [dbo].[CmpOrdenCompraFactura_Guardar]
@CmpOrdenCompraFacturaID int,
@CmpOrdenCompraEncabezadoID int,
@EspFacturaID int,
@Importe decimal(18,2)
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
SET NOCOUNT ON 
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpOrdenCompraFactura',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CmpOrdenCompraEncabezadoID_ int = 0,
		@EspFacturaID_ int = 0,
		@Importe_ decimal(18,2) = 0.0,
		@CmpOrdenCompraFacturaID_ int = @CmpOrdenCompraFacturaID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CmpOrdenCompraFacturaID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CmpOrdenCompraEncabezadoID_ = IsNull(CmpOrdenCompraEncabezadoID,0),
				@EspFacturaID_ = IsNull(EspFacturaID,0),
				@Importe_ = IsNull(Importe,0.0),
				@CmpOrdenCompraFacturaID_ = IsNull(CmpOrdenCompraFacturaID,0)
		   FROM	CmpOrdenCompraFactura WHERE CmpOrdenCompraFacturaID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN

			UPDATE  CmpOrdenCompraFactura
			SET     CmpOrdenCompraEncabezadoID = @CmpOrdenCompraEncabezadoID,
					EspFacturaID = @EspFacturaID,
					Importe = @Importe
			WHERE   CmpOrdenCompraFacturaID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CmpOrdenCompraFactura(
					CmpOrdenCompraEncabezadoID,
					EspFacturaID,
					Importe)
			VALUES  (
					@CmpOrdenCompraEncabezadoID,
					@EspFacturaID,
					@Importe)

			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CmpOrdenCompraFacturaID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitcora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CmpOrdenCompraEncabezadoID::', @CmpOrdenCompraEncabezadoID_, ':', @CmpOrdenCompraEncabezadoID, ';')
				SET @logMessage = Concat(@logMessage, 'EspFacturaID::', @EspFacturaID_, ':', @EspFacturaID, ';')
				SET @logMessage = Concat(@logMessage, 'Importe::', @Importe_, ':', @Importe, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitcora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
				END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompraFactura_Listado]...';


GO


CREATE PROCEDURE [dbo].[CmpOrdenCompraFactura_Listado]
@EspFacturaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CmpOrdenCompraFactura',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  MAX(COCF.CmpOrdenCompraFacturaID) AS CmpOrdenCompraFacturaID,	MAX(COCF.CmpOrdenCompraEncabezadoID) AS CmpOrdenCompraEncabezadoID,
			MAX(COCF.EspFacturaID) AS EspFacturaID,							MAX(COCF.Importe) AS Importe,
			MAX(PSu.Nombre) AS SucursalNombre,								MAX(PSe.PpalSerieClave) AS SerieClave,
			MAX(COCE.Folio) AS Folio,										MAX(COCE.Fecha) AS Fecha,
			SUM(Cantidad * Costo) +
			( SELECT SUM(ROUND(ROUND(COCD.Costo * COCD.Cantidad,2) *  CTI.PorcentajeIVA / 100,2))
				FROM CmpOrdenCompraDetalle COCD
				LEFT OUTER JOIN PpalProducto PP ON COCD.PpalProductoID = PP.PpalProductoID
				LEFT OUTER JOIN CfgTasaIVA CTI ON PP.CfgTasaIVAID = CTI.CfgTasaIVAID
			   WHERE COCD.CmpOrdenCompraEncabezadoID = COCE.CmpOrdenCompraEncabezadoID ) -
			( SELECT SUM(ROUND(CEIRD.Porcentaje * ROUND(COCD.Costo * COCD.Cantidad,2) / 100,2))
				FROM CmpOrdenCompraDetalle COCD, CfgEsquemaImpuestoRetencionDetalle CEIRD
				LEFT OUTER JOIN CfgImpuestoRetencion CIR ON (CEIRD.CfgImpuestoRetencionID = CIR.CfgImpuestoRetencionID)
			   WHERE CEIRD.Activo = 'S' AND CEIRD.CfgEsquemaImpuestoRetencionID = 1 and 
					COCD.CmpOrdenCompraEncabezadoID = COCE.CmpOrdenCompraEncabezadoID)  AS Total,
		    ( SELECT 0) AS Asignado
	FROM    CmpOrdenCompraFactura COCF
	  LEFT OUTER JOIN CmpOrdenCompraEncabezado COCE ON COCF.CmpOrdenCompraEncabezadoID = COCE.CmpOrdenCompraEncabezadoID
	  LEFT OUTER JOIN PpalSucursal PSu ON COCE.PpalSucursalID = PSu.PpalSucursalID
	  LEFT OUTER JOIN PpalSerie PSe ON COCE.PpalSerieID = PSe.PpalSerieID
	  LEFT OUTER JOIN CmpOrdenCompraDetalle COCD ON COCE.CmpOrdenCompraEncabezadoID = COCD.CmpOrdenCompraEncabezadoID
	WHERE	EspFacturaID = @EspFacturaID
	GROUP BY COCE.CmpOrdenCompraEncabezadoID

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EspFacturaID::', @EspFacturaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
		END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpOrdenCompraImpuestosRetenciones_Listado]...';


GO

CREATE PROCEDURE [dbo].[CmpOrdenCompraImpuestosRetenciones_Listado]
@CmpOrdenCompraEncabezadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpOrdenCompraImpuestoRetencion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
DECLARE @CfgEsquemaImpuestoRetencionID int = 0,
		@TotalOC decimal(18,6) = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SELECT @CfgEsquemaImpuestoRetencionID = CASE WHEN PP.AplicaRetenciones = 'S' THEN 1 ELSE 2 END
	  FROM CmpOrdenCompraEncabezado COCE
			LEFT OUTER JOIN PpalProveedor PP ON COCE.PpalProveedorID = PP.PpalProveedorID
	 WHERE COCE.CmpOrdenCompraEncabezadoID = @CmpOrdenCompraEncabezadoID

	SELECT @TotalOC = SUM(ROUND(COCD.Costo * COCD.Cantidad,2))
	  FROM CmpOrdenCompraDetalle COCD
	 WHERE COCD.CmpOrdenCompraEncabezadoID = @CmpOrdenCompraEncabezadoID

	SELECT 'I.V.A.' as Nombre, 'I' AS ImpuestoRetencion, SUM(ROUND(ROUND(COCD.Costo * COCD.Cantidad,2) *  CTI.PorcentajeIVA / 100,2)) Importe
	  FROM CmpOrdenCompraDetalle COCD
			LEFT OUTER JOIN PpalProducto PP ON COCD.PpalProductoID = PP.PpalProductoID
			LEFT OUTER JOIN CfgTasaIVA CTI ON PP.CfgTasaIVAID = CTI.CfgTasaIVAID
	WHERE COCD.CmpOrdenCompraEncabezadoID = @CmpOrdenCompraEncabezadoID
	UNION
	SELECT CIR.NombreCorto, CIR.ImpuestoRetencion,	ROUND(CEIRD.Porcentaje * @TotalOC / 100,2)
	  FROM CfgEsquemaImpuestoRetencionDetalle CEIRD
			LEFT OUTER JOIN CfgImpuestoRetencion CIR ON (CEIRD.CfgImpuestoRetencionID = CIR.CfgImpuestoRetencionID)
	 WHERE CEIRD.Activo = 'S' AND CEIRD.CfgEsquemaImpuestoRetencionID = @CfgEsquemaImpuestoRetencionID

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CmpOrdenCompraEncabezadoID::', @CmpOrdenCompraEncabezadoID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
		END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpRequisicionDetalle_Consultar]...';


GO


CREATE PROCEDURE [dbo].[CmpRequisicionDetalle_Consultar]
@CmpRequisicionDetalleID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpRequisicionDetalle',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CmpRequisicionDetalleID
	SELECT  CmpRequisicionDetalleID,CmpRequisicionEncabezadoID,Renglon,PpalProductoID,Cantidad,AuxUnidadID,PpalAlmacenID,PpalConceptoEgresoID,PpalCuentaContableID,DescripcionAdicional,CfgEstatusDocumentoID
	FROM    CmpRequisicionDetalle
	WHERE   CmpRequisicionDetalleID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CmpRequisicionDetalleID::', @CmpRequisicionDetalleID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpRequisicionDetalle_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CmpRequisicionDetalle_Eliminar]
@CmpRequisicionDetalleID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpRequisicionDetalle',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDABorrar = @CmpRequisicionDetalleID
    DELETE
    FROM    CmpRequisicionDetalle
    WHERE   CmpRequisicionDetalleID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CmpRequisicionDetalleID::', @CmpRequisicionDetalleID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CmpRequisicionDetalle_Guardar]...';


GO


CREATE PROCEDURE [dbo].[CmpRequisicionDetalle_Guardar]
@CmpRequisicionDetalleID int,
@CmpRequisicionEncabezadoID int,
@Renglon int,
@PpalProductoID int,
@Cantidad float,
@UnidadID int,
@AlmacenID int,
@ConceptoEgresoID int,
@CuentaContableID int,
@DescripcioAdicional varchar(500),
@CfgEstatusDocumentoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora  nvarchar(100) = 'CmpRequisicionDetalle',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CmpRequisicionEncabezadoID_ int = 0,
		@Renglon_ int = 0,
		@ProductoID_ int = 0,
		@Cantidad_ float = 0.0,
		@UnidadID_ int = 0,
		@AlmacenID_ int = 0,
		@ConceptoEgresoID_ int = 0,
		@CuentaContableID_ int = 0,
		@DescripcioAdicional_ varchar(500) = '',
		@EstatusDocumentoID_ int = 0,
		@CmpRequisicionDetalleID_ int = @CmpRequisicionDetalleID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CmpRequisicionDetalleID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CmpRequisicionEncabezadoID_ = IsNull(CmpRequisicionEncabezadoID,0),
				@Renglon_ = IsNull(Renglon,0),
				@ProductoID_ = IsNull(PpalProductoID,0),
				@Cantidad_ = IsNull(Cantidad,0.0),
				@UnidadID_ = IsNull(AuxUnidadID,0),
				@AlmacenID_ = IsNull(PpalAlmacenID,0),
				@CuentaContableID_ = IsNull(PpalCuentaContableID,0),
				@DescripcioAdicional_ = IsNull(DescripcionAdicional,''),
				@EstatusDocumentoID_ = IsNull(CfgEstatusDocumentoID,0),
				@CmpRequisicionDetalleID_ = IsNull(CmpRequisicionDetalleID,0)
		   FROM	CmpRequisicionDetalle WHERE CmpRequisicionDetalleID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CmpRequisicionDetalle
			SET     CmpRequisicionEncabezadoID = @CmpRequisicionEncabezadoID,
					Renglon = @Renglon,
					PpalProductoID = @PpalProductoID,
					Cantidad = @Cantidad,
					AuxUnidadID = @UnidadID,
					PpalAlmacenID = @AlmacenID,
					PpalConceptoEgresoID = @ConceptoEgresoID,
					PpalCuentaContableID = @CuentaContableID,
					DescripcionAdicional = @DescripcioAdicional,
					CfgEstatusDocumentoID = @CfgEstatusDocumentoID
			WHERE   CmpRequisicionDetalleID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CmpRequisicionDetalle(
					CmpRequisicionEncabezadoID,
					Renglon,
					PpalProductoID,
					Cantidad,
					AuxUnidadID,
					PpalAlmacenID,
					PpalConceptoEgresoID,
					PpalCuentaContableID,
					DescripcionAdicional,
					CfgEstatusDocumentoID)
			VALUES  (
					@CmpRequisicionEncabezadoID,
					@Renglon,
					@PpalProductoID,
					@Cantidad,
					@UnidadID,
					@AlmacenID,
				    @ConceptoEgresoID,
					@CuentaContableID,
					@DescripcioAdicional,
					@CfgEstatusDocumentoID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CmpRequisicionDetalleID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CmpRequisicionEncabezadoID::', @CmpRequisicionEncabezadoID_, ':', @CmpRequisicionEncabezadoID, ';')
				SET @logMessage = Concat(@logMessage, 'Renglon::', @Renglon_, ':', @Renglon, ';')
				SET @logMessage = Concat(@logMessage, 'ProductoID::', @ProductoID_, ':', @PpalProductoID, ';')
				SET @logMessage = Concat(@logMessage, 'Cantidad::', @Cantidad_, ':', @Cantidad, ';')
				SET @logMessage = Concat('UnidadID::', @UnidadID_, ':', @UnidadID, ';')
				SET @logMessage = Concat('AlmacenID::', @AlmacenID_, ':', @AlmacenID, ';')
				SET @logMessage = Concat(@logMessage, 'ConceptoEgresoID::', @ConceptoEgresoID_, ':', @ConceptoEgresoID, ';')
				SET @logMessage = Concat(@logMessage, 'CuentaContableID::', @CuentaContableID_, ':', @CuentaContableID, ';')
				SET @logMessage = Concat(@logMessage, 'DescripcioAdicional::', @DescripcioAdicional_, ':', @DescripcioAdicional, ';')
				SET @logMessage = Concat(@logMessage, 'EstatusDocumentoID::', @EstatusDocumentoID_, ':', @CfgEstatusDocumentoID, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpRequisicionDetalle_Listado]...';


GO


CREATE PROCEDURE [dbo].[CmpRequisicionDetalle_Listado]
@CmpRequisicionEncabezadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpRequisicionDetalle',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  CmpRequisicionDetalleID,CmpRequisicionEncabezadoID,Renglon,PpalProductoID,Cantidad,AuxUnidadID,PpalAlmacenID,PpalConceptoEgresoID,PpalCuentaContableID,DescripcionAdicional,CfgEstatusDocumentoID
	FROM    CmpRequisicionDetalle
	WHERE	CmpRequisicionEncabezadoID = @CmpRequisicionEncabezadoID
	ORDER BY Renglon

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CmpRequisicionEncabezadoID::', @CmpRequisicionEncabezadoID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpRequisicionEncabezado_Consultar]...';


GO


CREATE PROCEDURE [dbo].[CmpRequisicionEncabezado_Consultar]
@CmpRequisicionEncabezadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpRequisicionEncabezado',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CmpRequisicionEncabezadoID
	SELECT  CmpRequisicionEncabezadoID,TipoDocumentoID,PpalSerieID,PpalSucursalID,Folio,Fecha,Referencia,PpalPersonalID,PpalCentroCostoID,PpalAreaID,Concepto,CfgEstatusDocumentoID,ExplosionID
	FROM    CmpRequisicionEncabezado
	WHERE   CmpRequisicionEncabezadoID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CmpRequisicionEncabezadoID::', @CmpRequisicionEncabezadoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
						
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpRequisicionEncabezado_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CmpRequisicionEncabezado_Eliminar]
@CmpRequisicionEncabezadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpRequisicionEncabezado',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDABorrar = @CmpRequisicionEncabezadoID
    DELETE
    FROM    CmpRequisicionEncabezado
    WHERE   CmpRequisicionEncabezadoID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CmpRequisicionEncabezadoID::', @CmpRequisicionEncabezadoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CmpRequisicionEncabezado_Guardar]...';


GO


CREATE PROCEDURE [dbo].[CmpRequisicionEncabezado_Guardar]
@CmpRequisicionEncabezadoID int,
@TipoDocumentoID int,
@PpalSerieID int,
@PpalSucursalID int,
@Folio int,
@Fecha datetime,
@Referencia varchar(50),
@PersonalID int,
@PpalCentroCostoID int,
@PpalAreaID int,
@Concepto varchar(100),
@EstatusDocumentoID int,
@ExplosionID int

-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpRequisicionEncabezado',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@TipoDocumentoID_ int = 0,
		@SerieID_ int = 0,
		@SucursalID_ int = 0,
		@Folio_ int = 0,
		@Fecha_ datetime = 0,
		@Referencia_ varchar(50) = '',
		@PersonalID_ int = 0,
		@CentroCostoID_ int = 0,
		@AreaID_ int = 0,
		@Concepto_ varchar(100) = '',
		@EstatusDocumentoID_ int = 0,
		@ExplosionID_ int = 0,
		@CmpRequisicionEncabezadoID_ int = @CmpRequisicionEncabezadoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CmpRequisicionEncabezadoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@TipoDocumentoID_ = IsNull(TipoDocumentoID,0),
				@SerieID_ = IsNull(PpalSerieID,0),
				@Folio_ = IsNull(Folio,0),
				@Fecha_ = IsNull(Fecha,0),
				@Referencia_ = IsNull(Referencia,''),
				@Referencia_ = IsNull(Referencia,0),
				@CentroCostoID_ = IsNull(PpalCentroCostoID,0),
				@AreaID_ = IsNull(PpalAreaID,0),
				@Concepto_ = IsNull(Concepto,''),
				@EstatusDocumentoID_ = IsNull(CfgEstatusDocumentoID,0),
				@ExplosionID_ = IsNull(ExplosionID,0),
				@CmpRequisicionEncabezadoID_ = IsNull(CmpRequisicionEncabezadoID,0)
		   FROM	CmpRequisicionEncabezado WHERE CmpRequisicionEncabezadoID = @IDAActualizar
		IF @@RowCount = 0
	SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CmpRequisicionEncabezado
			SET     TipoDocumentoID = @TipoDocumentoID,
					PpalSerieID = @PpalSerieID,
					PpalSucursalID = @PpalSucursalID,
					Folio = @Folio,
					Fecha = @Fecha,
					Referencia = @Referencia,
					PpalPersonalID = @PersonalID,
					PpalCentroCostoID = @PpalCentroCostoID,
					PpalAreaID = @PpalAreaID,
					Concepto = @Concepto,
					CfgEstatusDocumentoID = @EstatusDocumentoID,
					ExplosionID = @ExplosionID
			WHERE   CmpRequisicionEncabezadoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CmpRequisicionEncabezado(
					TipoDocumentoID,
					PpalSerieID,
					PpalSucursalID,
					Folio,
					Fecha,
					Referencia,
					PpalPersonalID,
					PpalCentroCostoID,
					PpalAreaID,
					Concepto,
					CfgEstatusDocumentoID,
					ExplosionID)
			VALUES  (
					@TipoDocumentoID,
					@PpalSerieID,
					@PpalSucursalID,
					@Folio,
					@Fecha,
					@Referencia,
					@PersonalID,
					@PpalCentroCostoID,
					@PpalAreaID,
					@Concepto,
					@EstatusDocumentoID,
					@ExplosionID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CmpRequisicionEncabezadoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitcora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('TipoDocumentoID::', @TipoDocumentoID_, ':', @TipoDocumentoID, ';')
				SET @logMessage = Concat(@logMessage, 'SerieID::', @SerieID_, ':', @PpalSerieID, ';')
				SET @logMessage = Concat(@logMessage, 'SucursalID::', @SucursalID_, ':', @PpalSucursalID, ';')
				SET @logMessage = Concat(@logMessage, 'Folio::', @Folio_, ':', @Folio, ';')
				SET @logMessage = Concat('Referencia::', @Referencia_, ':', @Referencia, ';')
				SET @logMessage = Concat('PersonalID::', @PersonalID_, ':', @PersonalID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalCentroCostoID::', @CentroCostoID_, ':', @PpalCentroCostoID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalAreaID::', @AreaID_, ':', @PpalAreaID, ';')
				SET @logMessage = Concat(@logMessage, 'Concepto::', @Concepto_, ':', @Concepto, ';')
				SET @logMessage = Concat('EstatusDocumentoID::', @EstatusDocumentoID_, ':', @EstatusDocumentoID, ';')
				SET @logMessage = Concat('ExplosionID ::', @ExplosionID_, ':', @ExplosionID , ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitcora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpRequisicionEncabezado_Listado]...';


GO


CREATE PROCEDURE [dbo].[CmpRequisicionEncabezado_Listado]
@PpalSucursalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpRequisicionEncabezado',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  CmpRequisicionEncabezadoID,TipoDocumentoID,PpalSerieID,PpalSucursalID,Folio,Fecha,Referencia,PpalPersonalID,CRE.PpalCentroCostoID,PpCc.Nombre,PpalAreaID,Concepto,CfgEstatusDocumentoID,ExplosionID
	FROM    CmpRequisicionEncabezado CRE
	LEFT OUTER JOIN PpalCentroCosto PpCc ON PpCc.PpalCentroCostoID = CRE.PpalCentroCostoID
	WHERE	PpalSucursalID = @PpalSucursalID
	ORDER BY PpalSerieID

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('PpalSucursalID::', @PpalSucursalID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpTipoMovimientoProveedor_Consultar]...';


GO


CREATE PROCEDURE [dbo].[CmpTipoMovimientoProveedor_Consultar]
@CmpTipoMovimientoProveedorID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpTipoMovimientoProveedor',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CmpTipoMovimientoProveedorID
	SELECT  CmpTipoMovimientoProveedorID,CmpTipoMovimientoProveedorClave,Nombre,NombreCorto,NaturalezaID
	FROM    CmpTipoMovimientoProveedor
	WHERE   CmpTipoMovimientoProveedorID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CmpTipoMovimientoProveedorID::', @CmpTipoMovimientoProveedorID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpTipoMovimientoProveedor_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CmpTipoMovimientoProveedor_Eliminar]
@CmpTipoMovimientoProveedorID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpTipoMovimientoProveedor',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDABorrar = @CmpTipoMovimientoProveedorID
    DELETE
    FROM    CmpTipoMovimientoProveedor
    WHERE   CmpTipoMovimientoProveedorID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CmpTipoMovimientoProveedorID::', @CmpTipoMovimientoProveedorID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CmpTipoMovimientoProveedor_Guardar]...';


GO


CREATE PROCEDURE [dbo].[CmpTipoMovimientoProveedor_Guardar]
@CmpTipoMovimientoProveedorID int,
@CmpTipoMovimientoProveedorClave varchar(10),
@Nombre varchar(50),
@NombreCorto varchar(20),
@NaturalezaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpTipoMovimientoProveedor',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CmpTipoMovimientoProveedorClave_ varchar(10) = '',
		@Nombre_ varchar(50) = '',
		@NombreCorto_ varchar(20) = '',
		@NaturalezaID_ int = '',
		@CmpTipoMovimientoProveedorID_ int = @CmpTipoMovimientoProveedorID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CmpTipoMovimientoProveedorID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN

		SELECT	@CmpTipoMovimientoProveedorClave_ = IsNull(CmpTipoMovimientoProveedorClave,''),
				@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@NaturalezaID_ = IsNull(NaturalezaID,0),
				@CmpTipoMovimientoProveedorID_ = IsNull(CmpTipoMovimientoProveedorID,0)
		   FROM	CmpTipoMovimientoProveedor WHERE CmpTipoMovimientoProveedorID = @CmpTipoMovimientoProveedorID
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE   CmpTipoMovimientoProveedor
			SET      CmpTipoMovimientoProveedorClave = @CmpTipoMovimientoProveedorClave,
					 Nombre = @Nombre,
					 NombreCorto = @NombreCorto,
					 NaturalezaID = @NaturalezaID
			WHERE   CmpTipoMovimientoProveedorID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CmpTipoMovimientoProveedor(
					 CmpTipoMovimientoProveedorClave,
					 Nombre,
					 NombreCorto,
					 NaturalezaID)
			VALUES  (
					 @CmpTipoMovimientoProveedorClave,
					 @Nombre,
					 @NombreCorto,
					 @NaturalezaID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CmpTipoMovimientoProveedorID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitcora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CmpTipoMovimientoProveedorClave::', @CmpTipoMovimientoProveedorClave_, ':', @CmpTipoMovimientoProveedorClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'NaturalezaID::', @NaturalezaID_, ':', @NaturalezaID, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitcora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpTipoMovimientoProveedor_Listado]...';


GO


CREATE PROCEDURE [dbo].[CmpTipoMovimientoProveedor_Listado]
@NaturalezaID int,
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase		int
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpTipoMovimientoProveedor',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	IF @TipoListado = 'Minimo'
		SELECT  CmpTipoMovimientoProveedorID AS ID,		CmpTipoMovimientoProveedorClave AS Clave,
				Nombre,									NombreCorto,								0 AS PadreID
		FROM    CmpTipoMovimientoProveedor
		WHERE	NaturalezaID = @NaturalezaID
		ORDER BY CmpTipoMovimientoProveedorClave
	ELSE
		SELECT  CmpTipoMovimientoProveedorID,CmpTipoMovimientoProveedorClave,Nombre,NombreCorto,NaturalezaID
		FROM    CmpTipoMovimientoProveedor
		WHERE	NaturalezaID = @NaturalezaID
		ORDER BY CmpTipoMovimientoProveedorClave

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('NaturalezaID::', @NaturalezaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpTipoProveedor_Consultar]...';


GO


CREATE PROCEDURE [dbo].[CmpTipoProveedor_Consultar]
@CmpTipoProveedorID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpTipoProveedor',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CmpTipoProveedorID
	SELECT  CmpTipoProveedorID,CmpTipoProveedorClave,Nombre,NombreCorto
	FROM    CmpTipoProveedor
	WHERE   CmpTipoProveedorID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CmpTipoProveedorID::', @CmpTipoProveedorID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
						
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpTipoProveedor_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CmpTipoProveedor_Eliminar]
@CmpTipoProveedorID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpTipoProveedor',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDABorrar = @CmpTipoProveedorID
    DELETE
    FROM    CmpTipoProveedor
    WHERE   CmpTipoProveedorID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CmpTipoProveedorID::', @CmpTipoProveedorID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CmpTipoProveedor_Guardar]...';


GO

CREATE PROCEDURE [dbo].[CmpTipoProveedor_Guardar]
@CmpTipoProveedorID int,
@CmpTipoProveedorClave varchar(10),
@Nombre varchar(50),
@NombreCorto varchar(20)
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpTipoProveedor',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CmpTipoProveedorClave_ varchar(10) = '',
		@Nombre_ varchar(50) = '',
		@NombreCorto_ varchar(20) = '',
		@CmpTipoProveedorID_ int = @CmpTipoProveedorID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CmpTipoProveedorID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CmpTipoProveedorClave_ = IsNull(CmpTipoProveedorClave,''),
				@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@CmpTipoProveedorID_ = IsNull(CmpTipoProveedorID,0)
		   FROM	CmpTipoProveedor WHERE CmpTipoProveedorID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CmpTipoProveedor
			SET     CmpTipoProveedorClave = @CmpTipoProveedorClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   CmpTipoProveedorID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CmpTipoProveedor(
					CmpTipoProveedorClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@CmpTipoProveedorClave,
					@Nombre,
					@NombreCorto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CmpTipoProveedorID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitcora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CmpTipoProveedorClave::', @CmpTipoProveedorClave_, ':', @CmpTipoProveedorClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitcora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpTipoProveedor_Listado]...';


GO


CREATE PROCEDURE [dbo].[CmpTipoProveedor_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpTipoProveedor',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	IF @TipoListado = 'Minimo'
		SELECT  CmpTipoProveedorID AS ID,			CmpTipoProveedorClave AS Clave,
		Nombre,										NombreCorto,
		0 AS PadreID
		FROM    CmpTipoProveedor
		ORDER BY CmpTipoProveedorClave
	ELSE
		SELECT  CmpTipoProveedorID,CmpTipoProveedorClave,Nombre,NombreCorto
		FROM    CmpTipoProveedor
		ORDER BY CmpTipoProveedorClave

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CmpTipoRepresentanteProveedor_Consultar]...';


GO


CREATE PROCEDURE [dbo].[CmpTipoRepresentanteProveedor_Consultar]
@CmpTipoRepresentanteProveedorID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpTipoRepresentanteProveedor',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @CmpTipoRepresentanteProveedorID
	SELECT  CmpTipoRepresentanteProveedorID,CmpTipoRepresentanteProveedorClave,Nombre,NombreCorto
	FROM    CmpTipoRepresentanteProveedor
	WHERE   CmpTipoRepresentanteProveedorID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CmpTipoRepresentanteProveedorID::', @CmpTipoRepresentanteProveedorID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
						
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpTipoRepresentanteProveedor_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[CmpTipoRepresentanteProveedor_Eliminar]
@CmpTipoRepresentanteProveedorID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
SET NOCOUNT ON 
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpTipoRepresentanteProveedor',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDABorrar = @CmpTipoRepresentanteProveedorID
    DELETE
    FROM    CmpTipoRepresentanteProveedor
    WHERE   CmpTipoRepresentanteProveedorID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('CmpTipoRepresentanteProveedorID::', @CmpTipoRepresentanteProveedorID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CmpTipoRepresentanteProveedor_Guardar]...';


GO


CREATE PROCEDURE [dbo].[CmpTipoRepresentanteProveedor_Guardar]
@CmpTipoRepresentanteProveedorID int,
@CmpTipoRepresentanteProveedorClave varchar(4),
@Nombre varchar(50),
@NombreCorto varchar(20)
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDFBitacora   nvarchar(100) = 'CmpTipoRepresentanteProveedor',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CmpTipoRepresentanteProveedorClave_ varchar(4) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@CmpTipoRepresentanteProveedorID_ int = @CmpTipoRepresentanteProveedorID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CmpTipoRepresentanteProveedorID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CmpTipoRepresentanteProveedorClave_ = ISNull(CmpTipoRepresentanteProveedorClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@CmpTipoRepresentanteProveedorID_ = IsNull(CmpTipoRepresentanteProveedorID,0)
		   FROM	CmpTipoRepresentanteProveedor WHERE CmpTipoRepresentanteProveedorID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CmpTipoRepresentanteProveedor
			SET     CmpTipoRepresentanteProveedorClave = @CmpTipoRepresentanteProveedorClave,                
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   CmpTipoRepresentanteProveedorID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CmpTipoRepresentanteProveedor(
					CmpTipoRepresentanteProveedorClave,                
					Nombre,
					NombreCorto)
			VALUES  (
					@CmpTipoRepresentanteProveedorClave,                
					@Nombre,
					@NombreCorto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CmpTipoRepresentanteProveedorID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitcora,
					@TablaNombre		=   @TablaNombreIDFBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CmpTipoRepresentanteProveedorClave::', @CmpTipoRepresentanteProveedorClave_, ':', @CmpTipoRepresentanteProveedorClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDFBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitcora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
					END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CmpTipoRepresentanteProveedor_Listado]...';


GO


CREATE PROCEDURE [dbo].[CmpTipoRepresentanteProveedor_Listado]
--@CmpTipoRepresentanteProveedorID int
-- Parámetros para Bitácora
	 @UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CmpTipoRepresentanteProveedor',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  CmpTipoRepresentanteProveedorID,CmpTipoRepresentanteProveedorClave,Nombre,NombreCorto
	FROM    CmpTipoRepresentanteProveedor
	--WHERE	EmpresaID = @EmpresaID
	ORDER BY CmpTipoRepresentanteProveedorClave

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[CoCmpOrdenCompraEncabezado_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CoCmpOrdenCompraEncabezado_Consultar]
@CmpOrdenCompraEncabezadoID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CoCmpOrdenCompraEncabezado',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@CoPartidaID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @CmpOrdenCompraEncabezadoID
	/************* FIN COPY 1  *********************/
	SELECT  @CoPartidaID_ = CoPartidaID
	FROM    CoCmpOrdenCompraEncabezado
	WHERE   CmpOrdenCompraEncabezadoID = @IDAConsultar

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		--SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
		SET @CoPartidaID_ = 0
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalAreaID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as CmpOrdenCompraEncabezadoID,					@CoPartidaID_ as CoPartidaID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoCmpOrdenCompraEncabezado_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CoCmpOrdenCompraEncabezado_Guardar]
@CmpOrdenCompraEncabezadoID int,
@CoPartidaID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CoCmpOrdenCompraEncabezado',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE @CoPartidaID_ int = 0,
		@CmpOrdenCompraEncabezadoID_ int = @CmpOrdenCompraEncabezadoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CmpOrdenCompraEncabezadoID
	-- Si recibe ID del Encabezado, lo procesa y si no -> error
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	 @CoPartidaID_  = IsNull(CoPartidaID,'')
		   FROM	CoCmpOrdenCompraEncabezado WHERE CmpOrdenCompraEncabezadoID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> Lo agrega y Si lo encontró, lo actualiza
		IF @@RowCount = 0
			BEGIN
				INSERT  INTO CoCmpOrdenCompraEncabezado(
						CmpOrdenCompraEncabezadoID,
						CoPartidaID)
				VALUES  (
						@CmpOrdenCompraEncabezadoID,
						@CoPartidaID);
				-- PARA QUE DETECTE QUE FUE INSERT
				SET @CmpOrdenCompraEncabezadoID = 0;
			END
		ELSE
			UPDATE	CoCmpOrdenCompraEncabezado
			SET		CoPartidaID =  @CoPartidaID
			WHERE	CmpOrdenCompraEncabezadoID = @CmpOrdenCompraEncabezadoID;
	END
	ELSE
		SELECT @Errores = 999996, @Mensaje = CONCAT('No se recibió CmpOrdenEncabezadoID al agregar CoCmpOrdenCompraEncabezado ', '.'),
				@TituloMensaje = 'Error de Protección de Integridad.';

	IF @Errores = 0
	BEGIN
		/* Procesa Bitácora */
		-- Determina si fue UPDATE o INSERT
		IF @CmpOrdenCompraEncabezadoID > 0  SET @Operacion = 'Update' 	
					ELSE SET @Operacion = 'Create' 

		-- Revisa si el cambio debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreBitacora,
				@Operacion			=	@Operacion

		-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- logMessage = Cambios efectuados
			SET @logMessage = Concat('CmpOrdenCompraEncabezadoID::', @CmpOrdenCompraEncabezadoID, ':', @CmpOrdenCompraEncabezadoID_, ';')
			SET @logMessage = Concat(@logMessage, 'CoPartidaID::', @CoPartidaID_, ':', @CoPartidaID, ';')
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
													,@TablaID			= @IDAActualizar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Fin de proceso sin errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoContratista_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CoContratista_Consultar]
@CoContratistaID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoContratista',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@CoContratistaID_ int = 0,
		@PpalProveedorID_ int = 0


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @CoContratistaID
	/************* FIN COPY 1  *********************/
	SELECT	@CoContratistaID_  = CoContratistaID,		@PpalProveedorID_ = PpalProveedorID
	FROM    CoContratista
	WHERE   CoContratistaID = @IDAConsultar

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CoContratistaID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @CoContratistaID_  as CoContratistaID,		@PpalProveedorID_ as PpalProveedorID
	

ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoContratista_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CoContratista_Eliminar]
@CoContratistaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoContratista',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CoContratistaID

	BEGIN
		DELETE
		FROM    CoContratista
		WHERE   CoContratistaID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitcora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CoContratistaID::', @CoContratistaID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @CoContratistaID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitcora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CoContratista_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CoContratista_Guardar]
@CoContratistaID int,
@PpalProveedorID int

/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		--@ClaveNoAsignado varchar(5),			
		@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoContratista',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CoContratistaID_ int = 0,
		@PpalProveedorID_ int = 0


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CoContratistaID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	--SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		--FROM	ParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@CoContratistaID_ = IsNULL(CoContratistaID,0),
				@PpalProveedorID_ = IsNULL(@PpalProveedorID,0)
		
		   FROM	CoContratista WHERE CoContratistaID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		--IF @CoContratistaClave_ = @ClaveNoAsignado and @CoContratistaClave <> @ClaveNoAsignado
		--	SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
		--			@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  CoContratista
			SET    	PpalProveedorID = @PpalProveedorID
			WHERE   CoContratistaID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CoContratista(
					PpalProveedorID)
			VALUES  (
					@PpalProveedorID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CoContratistaID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitcora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CoContratistaID::', @CoContratistaID_, ':', @CoContratistaID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalProveedorID::', @PpalProveedorID_, ':', @PpalProveedorID, ';')
		
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitcora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoContratista_Listado]...';


GO
CREATE PROCEDURE [dbo].[CoContratista_Listado]
@PpalProveedorID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoContratista',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('PpalProveedorID::', @PpalProveedorID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

/************* FIN COPY 1  *********************/

	SELECT  CoContratistaID,	 PpalProveedorID
	FROM    CoContratista
	WHERE	PpalProveedorID = @PpalProveedorID
	ORDER BY PpalProveedorID

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoContrato_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CoContrato_Consultar]
@CoContratoID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoContrato',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@CoContratoClave_ nvarchar(30) = '',
		@Nombre_ nvarchar(80) = '',			
		@NombreCorto_ varchar(15) = '',
		@CoProyectoID_ int = 0,
		@CoContratoID_ int = @CoContratoID,
		@PpalProveedorID_ int = 0,
		@FechaAlta_ date = GetDate(),
		@FechaInicio_ date = GetDate(),
		@FechaFin_ date = GetDate(),
		@TipoContrato_ char(1) = '',
		@Comentarios_ varchar(500) = ''


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @CoContratoID
	/************* FIN COPY 1  *********************/
	SELECT	 @CoContratoClave_ = CoContratoClave,	@Nombre_ = Nombre,					@NombreCorto_ = NombreCorto,
			@CoProyectoID_ = CoProyectoID,			 @CoContratoID_ = CoContratoID,				 @PpalProveedorID_ = PpalProveedorID, 
			@FechaAlta_ = FechaAlta,				 @FechaInicio_ = FechaInicio,				@FechaFin_ = FechaFin, 
			@TipoContrato_ = TipoContrato,			@Comentarios_ = Comentarios
	FROM    CoContrato
	WHERE   CoContratoID = @IDAConsultar

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CoContratoID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @CoContratoClave_ as CoContratoClave,	@Nombre_ as Nombre,					@NombreCorto_ as NombreCorto,
			@CoProyectoID_ as CoProyectoID,			 @CoContratoID_ as CoContratoID,				 @PpalProveedorID_ as PpalProveedorID, 
			@FechaAlta_ as FechaAlta,				 @FechaInicio_ as FechaInicio,				@FechaFin_ as FechaFin, 
			@TipoContrato_ as TipoContrato,			@Comentarios_ as Comentarios
	

ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoContrato_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CoContrato_Eliminar]
@CoContratoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoContrato',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CoContratoID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(PpalAreaClave,'')
	  FROM	PpalArea WHERE PpalAreaID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    PpalArea
		WHERE   PpalAreaID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CoContratoID::', @CoContratoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @CoContratoID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CoContrato_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CoContrato_Guardar]
@CoContratoID int,
@CoContratoClave varchar(30) = null,
@Nombre varchar(80) = null,
@NombreCorto varchar(15) = null,
@CoProyectoID int = null,
@PpalProveedorID int = null,
@FechaAlta date = null,
@FechaInicio date = null,
@FechaFin date = null,
@TipoContrato char(1) = null,
@Comentarios varchar(500) = null
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UserIDBitacora	int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoContrato',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CoContratoClave_ nvarchar(30) = '',
		@Nombre_ nvarchar(80) = '',			
		@NombreCorto_ varchar(15) = '',
		@CoProyectoID_ int = 0,
		@CoContratoID_ int = @CoContratoID,
		@PpalProveedorID_ int = 0,
		@FechaAlta_ date = GetDate(),
		@FechaInicio_ date = GetDate(),
		@FechaFin_ date = GetDate(),
		@TipoContrato_ char(1) = '',
		@Comentarios_ varchar(500) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CoContratoID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@CoContratoClave_ = IsNull(CoContratoClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@CoProyectoID_ = IsNull(CoProyectoID,0),
				@CoContratoID_ = IsNull(CoContratoID,0),
				@PpalProveedorID_ = IsNull(PpalProveedorID,0),
				@FechaAlta_ = IsNull(FechaAlta,GetDate()),
				@FechaInicio_ = IsNull(FechaInicio,GetDate()),
				@FechaFin_ = IsNull(FechaFin,GetDate()),
				@TipoContrato_ = IsNull(TipoContrato,''),
				@Comentarios_ = IsNull(Comentarios,'')
		   FROM	CoContrato WHERE CoContratoID = @IDAActualizar

		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @CoContratoClave_ = @ClaveNoAsignado and @CoContratoClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  CoContrato
			SET     CoContratoClave = @CoContratoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					CoProyectoID = @CoProyectoID,
					CoContratoID = @CoContratoID,
					PpalProveedorID = @PpalProveedorID,
					FechaAlta = @FechaAlta,
					FechaInicio = @FechaInicio,
					FechaFin = @FechaFin,
					TipoContrato = @TipoContrato,
					Comentarios = @Comentarios
			WHERE   CoContratoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CoContrato(
					CoContratoClave,			Nombre,					NombreCorto,
					CoProyectoID,				CoContratoID,			PpalProveedorID,
					FechaAlta,					FechaInicio,			FechaFin,
					TipoContrato,				Comentarios)
			VALUES  (
					@CoContratoClave,			@Nombre,				@NombreCorto,
					@CoProyectoID,				@CoContratoID,			@PpalProveedorID,
					@FechaAlta,					@FechaInicio,			@FechaFin,
					@TipoContrato,				@Comentarios)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CoContratoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UserIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CoContratoClave::', @CoContratoClave_, ':', @CoContratoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'CoProyectoID::', @CoProyectoID_, ':', @CoProyectoID, ';')
				SET @logMessage = Concat(@logMessage, 'CoContratoID::', @CoContratoID_, ':', @CoContratoID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalProveedorID::', @PpalProveedorID_, ':', @PpalProveedorID, ';')
				SET @logMessage = Concat(@logMessage, 'FechaAlta::', @FechaAlta_, ':', @FechaAlta, ';')
				SET @logMessage = Concat(@logMessage, 'FechaInicio::', @FechaInicio_, ':', @FechaInicio, ';')
				SET @logMessage = Concat(@logMessage, 'FechaFin::', @FechaFin_, ':', @FechaFin, ';')
				SET @logMessage = Concat(@logMessage, 'TipoContrato::', @TipoContrato_, ':', @TipoContrato, ';')
				SET @logMessage = Concat(@logMessage, 'Comentarios::', @Comentarios_, ':', @Comentarios, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UserIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoContrato_Listado]...';


GO
CREATE PROCEDURE [dbo].[CoContrato_Listado]
@CoProyectoID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoContrato',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CoProyectoID::', @CoProyectoID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

/************* FIN COPY 1  *********************/

	SELECT  CoContratoID,CoContratoClave,Nombre,NombreCorto,CoProyectoID,PpalProveedorID,
			FechaAlta,FechaInicio,FechaFin,TipoContrato,Comentarios
	FROM    CoContrato
	WHERE	CoProyectoID = @CoProyectoID
	ORDER BY Nombre

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoContratoPartidaDetalle_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CoContratoPartidaDetalle_Consultar]
@CoContratoPartidaDetalleID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoContratoPartidaDetalle',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@CoContratoPartidaDetalleID_ int = 0,
		@CoContratoID_ int = 0 ,			
		@CoPartidaDetalleID_ int = 0,
		@Cantidad_ decimal(18,6) = 0,
		@Precio_ decimal(18,6) = 0,
		@Adicional_ varchar(500) = '',
		@SustituirConAdicional_ bit = 0,
		@CfgEstatusDocumentoID_ int = 0


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @CoContratoPartidaDetalleID
	/************* FIN COPY 1  *********************/
	SELECT	@CoContratoPartidaDetalleID_  = CoContratoPartidaDetalleID,		@CoContratoID_	= CoContratoID,		
			@CoPartidaDetalleID_ = CoPartidaDetalleID,		@Cantidad_ = Cantidad, 
			@Precio_ = Precio,			@Adicional_ = Adicional,
			@SustituirConAdicional_ = SustituirConAdicional, @CfgEstatusDocumentoID_ = CfgEstatusDocumentoID 
	FROM    CoContratoPartidaDetalle
	WHERE   CoContratoPartidaDetalleID = @IDAConsultar

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CoContratoPartidaDetalleID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @CoContratoPartidaDetalleID_  as CoContratoPartidaDetalleID,		@CoContratoID_	as CoContratoID,		
			@CoPartidaDetalleID_ as CoPartidaDetalleID,		@Cantidad_ as Cantidad, 
			@Precio_ as Precio,			@Adicional_ as Adicional,
			@SustituirConAdicional_ as SustituirConAdicional, @CfgEstatusDocumentoID_ as CfgEstatusDocumentoID 
	

ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoContratoPartidaDetalle_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CoContratoPartidaDetalle_Eliminar]
@CoContratoPartidaDetalleID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoContratoPartidaDetalle',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CoContratoPartidaDetalleID

	BEGIN
		DELETE
		FROM    CoContratoPartidaDetalle
		WHERE   CoContratoPartidaDetalleID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitcora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CoContratoPartidaDetalleID::', @CoContratoPartidaDetalleID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @CoContratoPartidaDetalleID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitcora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CoContratoPartidaDetalle_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CoContratoPartidaDetalle_Guardar]
@CoContratoPartidaDetalleID int,
@CoContratoID int,			
@CoPartidaDetalleID int,
@Cantidad decimal(18,6),
@Precio decimal(18,6),
@Adicional varchar(500) = null,
@SustituirConAdicional bit,
@CfgEstatusDocumentoID int

/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoContratoPartidaDetalle',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CoContratoPartidaDetalleID_ int = 0,
		@CoContratoID_ int = 0 ,			
		@CoPartidaDetalleID_ int = 0,
		@Cantidad_ decimal(18,6) = 0,
		@Precio_ decimal(18,6) = 0,
		@Adicional_ varchar(500) = '',
		@SustituirConAdicional_ bit = 0,
		@CfgEstatusDocumentoID_ int = 0


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CoContratoPartidaDetalleID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@CoContratoPartidaDetalleID_ = IsNULL(CoContratoPartidaDetalleID,0),
				@CoContratoID_ =	IsNULL(CoContratoID,0),
				@CoPartidaDetalleID_ = IsNULL(CoPartidaDetalleID,0),
				@Cantidad_ = IsNULL(Cantidad,0),
				@Precio_ = IsNULL(Precio,0),
				@Adicional_ = IsNull(Adicional,''),
				@SustituirConAdicional_ = IsNULL(SustituirConAdicional,0),
				@CfgEstatusDocumentoID_ = IsNULL(CfgEstatusDocumentoID,0)
		
		   FROM	CoContratoPartidaDetalle WHERE CoContratoPartidaDetalleID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		--IF @CoContratoPartidaDetalleClave_ = @ClaveNoAsignado and @CoContratoPartidaDetalleClave <> @ClaveNoAsignado
			--SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
				--	@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  CoContratoPartidaDetalle
			SET		CoContratoID	= @CoContratoID,		
					CoPartidaDetalleID = @CoPartidaDetalleID, 
					Cantidad = @Cantidad, 
					Precio = @Precio,
					Adicional = @Adicional,
					SustituirConAdicional = @SustituirConAdicional, 
					CfgEstatusDocumentoID = @CfgEstatusDocumentoID 
			WHERE   CoContratoPartidaDetalleID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CoContratoPartidaDetalle(
					CoContratoID,		
					CoPartidaDetalleID, 
					Cantidad, 
					Precio,
					Adicional,
					SustituirConAdicional, 
					CfgEstatusDocumentoID)
			VALUES  (
					@CoContratoID,		
					@CoPartidaDetalleID, 
					@Cantidad, 
					@Precio,
					@Adicional,
					@SustituirConAdicional, 
					@CfgEstatusDocumentoID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CoContratoPartidaDetalleID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CoContratoPartidaDetalleID::', @CoContratoPartidaDetalleID_, ':', @CoContratoPartidaDetalleID, ';')
				SET @logMessage = Concat(@logMessage, 'CoContratoID::', @CoContratoID_, ':', @CoContratoID, ';')
				SET @logMessage = Concat(@logMessage, 'CoPartidaDetalleID::', @CoPartidaDetalleID_, ':', @CoPartidaDetalleID, ';')
				SET @logMessage = Concat(@logMessage, 'Cantidad::', @Cantidad_, ':', @Cantidad, ';')
				SET @logMessage = Concat(@logMessage, 'Precio::', @Precio_, ':', @Precio, ';')
				SET @logMessage = Concat(@logMessage, 'Adicional::', @Adicional_, ':', @Adicional, ';')
				SET @logMessage = Concat(@logMessage, 'SustituirConAdicional::', @SustituirConAdicional_, ':', @SustituirConAdicional, ';')
				SET @logMessage = Concat(@logMessage, 'CfgEstatusDocumentoID::', @CfgEstatusDocumentoID_, ':', @CfgEstatusDocumentoID, ';')

		
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoContratoPartidaDetalle_Listado]...';


GO
CREATE PROCEDURE [dbo].[CoContratoPartidaDetalle_Listado]
@CoContratoID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoContratoPartidaDetalle',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CoContratoID::', @CoContratoID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

/************* FIN COPY 1  *********************/

	SELECT  CoContratoPartidaDetalleID,		 CoContratoID,		  CoPartidaDetalleID,	  Cantidad, 
			Precio,	  Adicional,  SustituirConAdicional,   CfgEstatusDocumentoID 
	FROM    CoContratoPartidaDetalle
	WHERE	CoContratoID = @CoContratoID
	ORDER BY CoContratoPartidaDetalleID

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoContratoRetencion_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CoContratoRetencion_Consultar]
@CoContratoRetencionID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoContratoRetencion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@CoContratoRetencionID_ int = 0,
		@CoContratoRetencionClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(50) = '',			
		@NombreCorto_ varchar(10) = '',
		@CoContratoID_ int = 0,
		@TipoRetencion_ char(1) = '',
		@Porcentaje_ decimal(5,2) = 0,
		@EstimacionInicialAmortizacion_ smallint = 0,
		@EstimacionFinalAmortizacion_ smallint = 0,
		@TipoAmortizacion_ char(1) = '',
		@PorcentajeInicialAmortizacion_ decimal(5,2) = 0,
		@PorcentajeFinalAmortizacion_ decimal(5,2) = 0


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @CoContratoRetencionID
	/************* FIN COPY 1  *********************/
	SELECT	@CoContratoRetencionID_  = CoContratoRetencionID,		@CoContratoRetencionClave_ = CoContratoRetencionClave,	@Nombre_ = Nombre,			
			@NombreCorto_ = NombreCorto,	@CoContratoID_ = CoContratoID,		@TipoRetencion_ = TipoRetencion,	@Porcentaje_ = Porcentaje,
			@EstimacionInicialAmortizacion_ = EstimacionInicialAmortizacion,	@EstimacionFinalAmortizacion_ = EstimacionFinalAmortizacion,
			@TipoAmortizacion_ = TipoAmortizacion,	@PorcentajeInicialAmortizacion_ = PorcentajeInicialAmortizacion, 
			@PorcentajeFinalAmortizacion_ = PorcentajeFinalAmortizacion
	FROM    CoContratoRetencion
	WHERE   CoContratoRetencionID = @IDAConsultar

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CoContratoRetencionID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @CoContratoRetencionID_  as CoContratoRetencionID,		@CoContratoRetencionClave_ as CoContratoRetencionClave,	@Nombre_ as Nombre,			
			@NombreCorto_ as NombreCorto,	@CoContratoID_ as CoContratoID,		@TipoRetencion_ as TipoRetencion,	@Porcentaje_ as Porcentaje,
			@EstimacionInicialAmortizacion_ as EstimacionInicialAmortizacion,	@EstimacionFinalAmortizacion_ as EstimacionFinalAmortizacion,
			@TipoAmortizacion_ as TipoAmortizacion,	@PorcentajeInicialAmortizacion_ as PorcentajeInicialAmortizacion, 
			@PorcentajeFinalAmortizacion_ as PorcentajeFinalAmortizacion
	

ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoContratoRetencion_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CoContratoRetencion_Eliminar]
@CoContratoRetencionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoContratoRetencion',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CoContratoRetencionID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CoContratoRetencionClave,'')
	  FROM	CoContratoRetencion WHERE CoContratoRetencionID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    CoContratoRetencion
		WHERE   CoContratoRetencionID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CoContratoRetencionID::', @CoContratoRetencionID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @CoContratoRetencionID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CoContratoRetencion_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CoContratoRetencion_Guardar]
@CoContratoRetencionID int,
@CoContratoRetencionClave nvarchar(10) = null,
@Nombre nvarchar(80) = null,			
@NombreCorto varchar(12) = null,
@CoContratoID int,
@TipoRetencion char(1) = null,
@Porcentaje decimal(5,2),
@EstimacionInicialAmortizacion smallint,
@EstimacionFinalAmortizacion smallint,
@TipoAmortizacion char(1) = null,
@PorcentajeInicialAmortizacion decimal(5,2),
@PorcentajeFinalAmortizacion decimal(5,2)  

/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoContratoRetencion',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CoContratoRetencionID_ int = 0,
		@CoContratoRetencionClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(50) = '',			
		@NombreCorto_ varchar(10) = '',
		@CoContratoID_ int = 0,
		@TipoRetencion_ char(1) = '',
		@Porcentaje_ decimal(5,2) = 0,
		@EstimacionInicialAmortizacion_ smallint = 0,
		@EstimacionFinalAmortizacion_ smallint = 0,
		@TipoAmortizacion_ char(1) = '',
		@PorcentajeInicialAmortizacion_ decimal(5,2) = 0,
		@PorcentajeFinalAmortizacion_ decimal(5,2) = 0


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CoContratoRetencionID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@CoContratoRetencionID_ = IsNULL(CoContratoRetencionID,0),
				@CoContratoRetencionClave_  = IsNull(CoContratoRetencionClave,''),
				@Nombre_  = IsNull(Nombre,''),			
				@NombreCorto_  = IsNull(NombreCorto,''),
				@CoContratoID_ = IsNULL(CoContratoID,0),
				@TipoRetencion_ = IsNull(TipoRetencion,''),
				@Porcentaje_  = IsNull(Porcentaje,0),
				@EstimacionInicialAmortizacion_  = IsNull(EstimacionInicialAmortizacion,0),
				@EstimacionFinalAmortizacion_  = IsNull(EstimacionFinalAmortizacion,0),
				@TipoAmortizacion_ = IsNull(TipoAmortizacion,''),
				@PorcentajeInicialAmortizacion_  = IsNull(PorcentajeInicialAmortizacion,0),
				@PorcentajeFinalAmortizacion_ = IsNull(PorcentajeFinalAmortizacion,0)
		
		   FROM	CoContratoRetencion WHERE CoContratoRetencionID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @CoContratoRetencionClave_ = @ClaveNoAsignado and @CoContratoRetencionClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  CoContratoRetencion
			SET    	CoContratoRetencionClave = @CoContratoRetencionClave,	Nombre = @Nombre,			
					NombreCorto = @NombreCorto,	CoContratoID = @CoContratoID,		TipoRetencion = @TipoRetencion,	Porcentaje = @Porcentaje,
					EstimacionInicialAmortizacion = @EstimacionInicialAmortizacion,	EstimacionFinalAmortizacion = @EstimacionFinalAmortizacion,
					TipoAmortizacion = @TipoAmortizacion,	PorcentajeInicialAmortizacion = @PorcentajeInicialAmortizacion, 
					PorcentajeFinalAmortizacion = @PorcentajeFinalAmortizacion
			WHERE   CoContratoRetencionID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CoContratoRetencion(
					CoContratoRetencionClave,
					Nombre,			
					NombreCorto,
					CoContratoID,	
					TipoRetencion,	 
					Porcentaje,
					EstimacionInicialAmortizacion,	
					EstimacionFinalAmortizacion,
					TipoAmortizacion,	
					PorcentajeInicialAmortizacion, 
					PorcentajeFinalAmortizacion)
			VALUES  (
					@CoContratoRetencionClave,
					@Nombre,			
					@NombreCorto,
					@CoContratoID,	
					@TipoRetencion,	 
					@Porcentaje,
					@EstimacionInicialAmortizacion,	
					@EstimacionFinalAmortizacion,
					@TipoAmortizacion,	
					@PorcentajeInicialAmortizacion, 
					@PorcentajeFinalAmortizacion)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CoContratoRetencionID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CoContratoRetencionID::', @CoContratoRetencionID_, ':', @CoContratoRetencionID, ';')
				SET @logMessage = Concat(@logMessage, 'CoContratoRetencionClave::', @CoContratoRetencionClave_, ':', @CoContratoRetencionClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'CoContratoID::', @CoContratoID_, ':', @CoContratoID, ';')
				SET @logMessage = Concat(@logMessage, 'TipoRetencion::', @TipoRetencion_, ':', @TipoRetencion, ';')
				SET @logMessage = Concat(@logMessage, 'Porcentaje::', @Porcentaje_, ':', @Porcentaje, ';')
				SET @logMessage = Concat(@logMessage, 'EstimacionInicialAmortizacion::', @EstimacionInicialAmortizacion_, ':', @EstimacionInicialAmortizacion, ';')
				SET @logMessage = Concat(@logMessage, 'EstimacionFinalAmortizacion::', @EstimacionFinalAmortizacion_, ':', @EstimacionFinalAmortizacion, ';')
				SET @logMessage = Concat(@logMessage, 'TipoAmortizacion::', @TipoAmortizacion_, ':', @TipoAmortizacion, ';')
				SET @logMessage = Concat(@logMessage, 'PorcentajeInicialAmortizacion::', @PorcentajeInicialAmortizacion_, ':', @PorcentajeInicialAmortizacion, ';')
				SET @logMessage = Concat(@logMessage, 'PorcentajeFinalAmortizacion::', @PorcentajeFinalAmortizacion_, ':', @PorcentajeFinalAmortizacion, ';')

		
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoContratoRetencion_Listado]...';


GO
CREATE PROCEDURE [dbo].[CoContratoRetencion_Listado]
@CoContratoID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoContratoRetencion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CoContratoID::', @CoContratoID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

/************* FIN COPY 1  *********************/

	SELECT  CoContratoRetencionID,  CoContratoRetencionClave,  Nombre,			
			NombreCorto,	  CoContratoID,		  TipoRetencion,	  Porcentaje,
			EstimacionInicialAmortizacion,	  EstimacionFinalAmortizacion, TipoAmortizacion, 
			PorcentajeInicialAmortizacion,   PorcentajeFinalAmortizacion
	FROM    CoContratoRetencion
	WHERE	CoContratoID = @CoContratoID
	ORDER BY Nombre

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoElemento_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CoElemento_Consultar]
@CoElementoID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoElemento',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@CoElementoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(80) = '',			
		@NombreCorto_ varchar(12) = '',
		@CoLoteID_ int = 0,
		@CoTipoPresupuestoID_ int = 0,
		@CoModeloID_ int = 0,
		@CoFachadaID_ int = 0,
		@CoContratoIDActual_ int = 0


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @CoElementoID
	/************* FIN COPY 1  *********************/
	SELECT  @CoElementoClave_ = CoElementoClave,	@Nombre_ = Nombre,		@NombreCorto_ = NombreCorto,
			@CoLoteID_ = CoLoteID,		@CoTipoPresupuestoID_ = CoTipoPresupuestoID,	@CoModeloID_ = CoModeloID,	
			@CoFachadaID_ = CoFachadaID,		@CoContratoIDActual_ = CoContratoIDActual
	FROM    CoElemento
	WHERE   CoElementoID = @IDAConsultar

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CoElementoID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @CoElementoClave_ as CoElementoClave,	@Nombre_ as Nombre,		@NombreCorto_ as NombreCorto,
			@CoLoteID_ as CoLoteID,		@CoTipoPresupuestoID_ as CoTipoPresupuestoID,	@CoModeloID_ as CoModeloID,	
			@CoFachadaID_ as CoFachadaID,		@CoContratoIDActual_ as CoContratoIDActual		
	

ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoElemento_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CoElemento_Eliminar]
@CoElementoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoElemento',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CoElementoID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(PpalAreaClave,'')
	  FROM	PpalArea WHERE PpalAreaID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    PpalArea
		WHERE   PpalAreaID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CoElementoID::', @CoElementoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @CoElementoID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CoElemento_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CoElemento_Guardar]
@CoElementoID int,
@CoElementoClave varchar(10) = null,
@Nombre varchar(80) = null,
@NombreCorto varchar(12) = null,
@CoLoteID int,
@CoTipoPresupuestoID int,
@CoModeloID int,
@CoFachadaID int,
@CoContratoIDActual int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreIDBItacora   nvarchar(100) = 'CoElemento',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	
		@CoElementoID_ int = @CoElementoID,
		@CoElementoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@CoLoteID_ int = 0,
		@CoTipoPresupuestoID_ int = 0,
		@CoModeloID_ int = 0,
		@CoFachadaID_ int = 0,
		@CoContratoIDActual_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CoElementoID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@CoElementoClave_ = IsNull(CoElementoClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@CoLoteID_ = IsNull(CoLoteID,0),
				@CoTipoPresupuestoID_ = IsNull(CoTipoPresupuestoID,0),
				@CoModeloID_ = IsNull(CoModeloID,0),
				@CoFachadaID_ = IsNull(CoFachadaID,0),
				@CoContratoIDActual_ = IsNull(CoContratoIDActual,0)

		   FROM	CoElemento WHERE CoElementoID = @IDAActualizar

		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @CoElementoClave_ = @ClaveNoAsignado and @CoElementoClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  CoElemento
			SET     CoElementoClave = @CoElementoClave,		Nombre = @Nombre,		NombreCorto = @NombreCorto,
					CoLoteID = @CoLoteID,		CoTipoPresupuestoID = @CoTipoPresupuestoID,		CoModeloID = @CoModeloID,
					CoFachadaID = @CoFachadaID,		CoContratoIDActual = @CoContratoIDActual

			WHERE   CoElementoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CoElemento(
					CoElementoClave,			
					Nombre,					
					NombreCorto,
					CoLoteID,
					CoTipoPresupuestoID,
					CoModeloID,
					CoFachadaID,
					CoContratoIDActual)
			VALUES  (
					@CoElementoClave,
					@Nombre,
					@NombreCorto,
					@CoLoteID,
					@CoTipoPresupuestoID,
					@CoModeloID,
					@CoFachadaID,
					@CoContratoIDActual)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CoElementoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBItacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CoElementoClave::', @CoElementoClave_, ':', @CoElementoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'CoLoteID::', @CoLoteID_, ':', @CoLoteID, ';')
				SET @logMessage = Concat(@logMessage, 'CoTipoPresupuestoID::', @CoTipoPresupuestoID_, ':', @CoTipoPresupuestoID, ';')
				SET @logMessage = Concat(@logMessage, 'CoModeloID::', @CoModeloID_, ':', @CoModeloID, ';')
				SET @logMessage = Concat(@logMessage, 'CoFachadaID::', @CoFachadaID_, ':', @CoFachadaID, ';')
				SET @logMessage = Concat(@logMessage, 'CoContratoIDActual::', @CoContratoIDActual_, ':', @CoContratoIDActual, ';')


				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBItacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoElemento_Listado]...';


GO
CREATE PROCEDURE [dbo].[CoElemento_Listado]
@CoLoteID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoElemento',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CoLoteID::', @CoLoteID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

/************* FIN COPY 1  *********************/

	SELECT  CoElementoID,			CoElementoClave,			Nombre,			NombreCorto,
			CoLoteID,				CoLoteID,			CoTipoPresupuestoID,	CoModeloID,
			CoFachadaID,			CoContratoIDActual
	FROM    CoElemento
	WHERE	CoLoteID = @CoLoteID
	ORDER BY Nombre

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoEtapa_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CoEtapa_Consultar]
@CoEtapaID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoEtapa',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@CoEtapaClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@CoProyectoID_ int = 0,
		@CoEtapaID_ int = @CoEtapaID,
		@FechaInicial_ date = GetDate(),
		@FechaFinal_ date = GetDate()


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @CoEtapaID
	/************* FIN COPY 1  *********************/
	SELECT	 @CoEtapaClave_ = CoEtapaClave,	@Nombre_ = Nombre,					@NombreCorto_ = NombreCorto,
			@CoProyectoID_ = CoProyectoID,			 @CoEtapaID_ = CoEtapaID,	@FechaInicial_ = FechaInicial,
			@FechaFinal_ = FechaFinal
	FROM    CoEtapa
	WHERE   CoEtapaID = @IDAConsultar

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CoEtapaID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @CoEtapaClave_ as CoEtapaClave,	@Nombre_ as Nombre,					@NombreCorto_ as NombreCorto,
			@CoProyectoID_ as CoProyectoID,			 @CoEtapaID_ as CoEtapaID,	@FechaInicial_ as FechaInicial,
			@FechaFinal_ as FechaFinal
	

ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoEtapa_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CoEtapa_Eliminar]
@CoEtapaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoEtapa',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CoEtapaID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(PpalAreaClave,'')
	  FROM	PpalArea WHERE PpalAreaID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    PpalArea
		WHERE   PpalAreaID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CoEtapaID::', @CoEtapaID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @CoEtapaID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CoEtapa_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CoEtapa_Guardar]
@CoEtapaID int,
@CoEtapaClave varchar(10) = null,
@Nombre varchar(60) = null,
@NombreCorto varchar(10) = null,
@CoProyectoID int = null,
@FechaInicial date = null,
@FechaFinal date = null
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBItacora	int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoEtapa',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	
		@CoEtapaID_ int = @CoEtapaID,
		@CoEtapaClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@CoProyectoID_ int = 0,
		@FechaInicial_ date = GetDate(),
		@FechaFinal_ date = GetDate()

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CoEtapaID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@CoEtapaClave_ = IsNull(CoEtapaClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@CoProyectoID_ = IsNull(CoProyectoID,0),
				@CoEtapaID_ = IsNull(CoEtapaID,0),
				@FechaInicial_ = IsNull(FechaInicial,GetDate()),
				@FechaFinal_ = IsNull(FechaFinal,GetDate())

		   FROM	CoEtapa WHERE CoEtapaID = @IDAActualizar

		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @CoEtapaClave_ = @ClaveNoAsignado and @CoEtapaClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  CoEtapa
			SET     CoEtapaClave = @CoEtapaClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					CoProyectoID = @CoProyectoID,
					FechaInicial = @FechaInicial,
					FechaFinal = @FechaFinal
			WHERE   CoEtapaID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CoEtapa(
					CoEtapaClave,			Nombre,					NombreCorto,
					CoProyectoID,			FechaInicial,
					FechaFinal)
			VALUES  (
					@CoEtapaClave,			@Nombre,			@NombreCorto,
					@CoProyectoID,			@FechaInicial,
					@FechaFinal)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CoEtapaID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBItacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CoEtapaClave::', @CoEtapaClave_, ':', @CoEtapaClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'CoProyectoID::', @CoProyectoID_, ':', @CoProyectoID, ';')
				SET @logMessage = Concat(@logMessage, 'CoEtapaID::', @CoEtapaID_, ':', @CoEtapaID, ';')
				SET @logMessage = Concat(@logMessage, 'FechaInicial::', @FechaInicial_, ':', @FechaInicial, ';')
				SET @logMessage = Concat(@logMessage, 'FechaFinal::', @FechaFinal_, ':', @FechaFinal, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBItacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoEtapa_Listado]...';


GO
CREATE PROCEDURE [dbo].[CoEtapa_Listado]
@CoProyectoID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoEtapa',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CoProyectoID::', @CoProyectoID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

/************* FIN COPY 1  *********************/

	SELECT  CoEtapaID,			CoEtapaClave,			Nombre,			NombreCorto,
			CoProyectoID,		FechaInicial,			FechaFinal
	FROM    CoEtapa
	WHERE	CoProyectoID = @CoProyectoID
	ORDER BY Nombre

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoFachada_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CoFachada_Consultar]
@CoFachadaID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoFachada',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@CoFachadaID_ int = 0,
		@CoFachadaClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@EmpresaID_ int = 0


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @CoFachadaID
	/************* FIN COPY 1  *********************/
	SELECT	@CoFachadaID_  = CoFachadaID,		@CoFachadaClave_ = CoFachadaClave,	@Nombre_ = Nombre,			
			@NombreCorto_ = NombreCorto,	@EmpresaID_ = EmpresaID
	FROM    CoFachada
	WHERE   CoFachadaID = @IDAConsultar

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CoFachadaID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @CoFachadaID_  as CoFachadaID,		@CoFachadaClave_ as CoFachadaClave,	@Nombre_ as Nombre,			
			@NombreCorto_ as NombreCorto,	@EmpresaID_ as EmpresaID
	

ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoFachada_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CoFachada_Eliminar]
@CoFachadaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoFachada',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CoFachadaID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CoFachadaClave,'')
	  FROM	CoFachada WHERE CoFachadaID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    CoFachada
		WHERE   CoFachadaID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CoFachadaID::', @CoFachadaID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @CoFachadaID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CoFachada_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CoFachada_Guardar]
@CoFachadaID int,
@CoFachadaClave nvarchar(10) = null,
@Nombre nvarchar(60) = null,			
@NombreCorto varchar(10) = null,
@EmpresaID int

/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoFachada',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CoFachadaID_ int = 0,
		@CoFachadaClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@EmpresaID_ int = 0


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CoFachadaID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@CoFachadaID_ = IsNULL(CoFachadaID,0),
				@CoFachadaClave_  = IsNull(CoFachadaClave,''),
				@Nombre_  = IsNull(Nombre,''),			
				@NombreCorto_  = IsNull(NombreCorto,''),
				@EmpresaID_  = IsNull(EmpresaID,0)
		
		   FROM	CoFachada WHERE CoFachadaID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @CoFachadaClave_ = @ClaveNoAsignado and @CoFachadaClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  CoFachada
			SET    	CoFachadaClave  =  @CoFachadaClave,	Nombre = @Nombre,			
					NombreCorto = @NombreCorto,	EmpresaID =	@EmpresaID
			WHERE   CoFachadaID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CoFachada(
					CoFachadaClave,
					Nombre,			
					NombreCorto,
					EmpresaID)
			VALUES  (
					@CoFachadaClave,
					@Nombre,			
					@NombreCorto,
					@EmpresaID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CoFachadaID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CoFachadaID::', @CoFachadaID_, ':', @CoFachadaID, ';')
				SET @logMessage = Concat(@logMessage, 'CoFachadaClave::', @CoFachadaClave_, ':', @CoFachadaClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'EmpresaID::', @EmpresaID_, ':', @EmpresaID, ';')
		
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoFachada_Listado]...';


GO
CREATE PROCEDURE [dbo].[CoFachada_Listado]
@EmpresaID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoFachada',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaID::', @EmpresaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

/************* FIN COPY 1  *********************/

	SELECT  CoFachadaID,			CoFachadaClave,		Nombre,			NombreCorto,  
			EmpresaID
	FROM    CoFachada
	WHERE	EmpresaID = @EmpresaID
	ORDER BY Nombre

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoLote_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CoLote_Consultar]
@CoLoteID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoLote',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@CoLoteID_ int = 0,
		@CoLoteClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(80) = '',			
		@NombreCorto_ varchar(12) = '',
		@CoSeccionID_ int = 0


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @CoLoteID
	/************* FIN COPY 1  *********************/
	SELECT	@CoLoteID_  = CoLoteID,		@CoLoteClave_ = CoLoteClave,	@Nombre_ = Nombre,			
			@NombreCorto_ = NombreCorto,	@CoSeccionID_ = CoSeccionID
	FROM    CoLote
	WHERE   CoLoteID = @IDAConsultar

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CoLoteID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @CoLoteID_  as CoLoteID,		@CoLoteClave_ as CoLoteClave,	@Nombre_ as Nombre,			
			@NombreCorto_ as NombreCorto,	@CoSeccionID_ as CoSeccionID
	

ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoLote_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CoLote_Eliminar]
@CoLoteID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoLote',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CoLoteID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CoLoteClave,'')
	  FROM	CoLote WHERE CoLoteID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    CoLote
		WHERE   CoLoteID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitcora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CoLoteID::', @CoLoteID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @CoLoteID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitcora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CoLote_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CoLote_Guardar]
@CoLoteID int,
@CoLoteClave nvarchar(10) = null,
@Nombre nvarchar(80) = null,			
@NombreCorto varchar(12) = null,
@CoSeccionID int

/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuaioIDBitacora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoLote',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CoLoteID_ int = 0,
		@CoLoteClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(80) = '',			
		@NombreCorto_ varchar(12) = '',
		@CoSeccionID_ int = 0


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CoLoteID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@CoLoteID_ = IsNULL(CoLoteID,0),
				@CoLoteClave_  = IsNull(CoLoteClave,''),
				@Nombre_  = IsNull(Nombre,''),			
				@NombreCorto_  = IsNull(NombreCorto,''),
				@CoSeccionID_  = IsNull(CoSeccionID,0)
		
		   FROM	CoLote WHERE CoLoteID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @CoLoteClave_ = @ClaveNoAsignado and @CoLoteClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  CoLote
			SET    	CoLoteClave  =  @CoLoteClave,	Nombre = @Nombre,			
					NombreCorto = @NombreCorto,	CoSeccionID =	@CoSeccionID
			WHERE   CoLoteID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CoLote(
					CoLoteClave,
					Nombre,			
					NombreCorto,
					CoSeccionID)
			VALUES  (
					@CoLoteClave,
					@Nombre,			
					@NombreCorto,
					@CoSeccionID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CoLoteID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuaioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CoLoteID::', @CoLoteID_, ':', @CoLoteID, ';')
				SET @logMessage = Concat(@logMessage, 'CoLoteClave::', @CoLoteClave_, ':', @CoLoteClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'CoSeccionID::', @CoSeccionID_, ':', @CoSeccionID, ';')
		
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuaioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoLote_Listado]...';


GO
CREATE PROCEDURE [dbo].[CoLote_Listado]
@CoSeccionID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoLote',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CoSeccionID::', @CoSeccionID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

/************* FIN COPY 1  *********************/

	SELECT  CoLoteID,			CoLoteClave,		Nombre,			NombreCorto,  
			CoSeccionID
	FROM    CoLote
	WHERE	CoSeccionID = @CoSeccionID
	ORDER BY Nombre

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoModelo_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CoModelo_Consultar]
@CoModeloID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoModelo',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@CoModeloID_ int = 0,
		@CoModeloClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@EmpresaID_ int = 0


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @CoModeloID
	/************* FIN COPY 1  *********************/
	SELECT	@CoModeloID_  = CoModeloID,		@CoModeloClave_ = CoModeloClave,	@Nombre_ = Nombre,			
			@NombreCorto_ = NombreCorto,	@EmpresaID_ = EmpresaID
	FROM    CoModelo
	WHERE   CoModeloID = @IDAConsultar

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CoModeloID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @CoModeloID_  as CoModeloID,		@CoModeloClave_ as CoModeloClave,	@Nombre_ as Nombre,			
			@NombreCorto_ as NombreCorto,	@EmpresaID_ as EmpresaID
	

ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoModelo_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CoModelo_Eliminar]
@CoModeloID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoModelo',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CoModeloID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CoModeloClave,'')
	  FROM	CoModelo WHERE CoModeloID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    CoModelo
		WHERE   CoModeloID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CoModeloID::', @CoModeloID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @CoModeloID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CoModelo_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CoModelo_Guardar]
@CoModeloID int,
@CoModeloClave nvarchar(10) = null,
@Nombre nvarchar(60) = null,			
@NombreCorto varchar(10) = null,
@EmpresaID int

/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoModelo',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CoModeloID_ int = 0,
		@CoModeloClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@EmpresaID_ int = 0


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CoModeloID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@CoModeloID_ = IsNULL(CoModeloID,0),
				@CoModeloClave_  = IsNull(CoModeloClave,''),
				@Nombre_  = IsNull(Nombre,''),			
				@NombreCorto_  = IsNull(NombreCorto,''),
				@EmpresaID_  = IsNull(EmpresaID,0)
		
		   FROM	CoModelo WHERE CoModeloID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @CoModeloClave_ = @ClaveNoAsignado and @CoModeloClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  CoModelo
			SET    	CoModeloClave  =  @CoModeloClave,	Nombre = @Nombre,			
					NombreCorto = @NombreCorto,	EmpresaID =	@EmpresaID
			WHERE   CoModeloID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CoModelo(
					CoModeloClave,
					Nombre,			
					NombreCorto,
					EmpresaID)
			VALUES  (
					@CoModeloClave,
					@Nombre,			
					@NombreCorto,
					@EmpresaID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CoModeloID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CoModeloID::', @CoModeloID_, ':', @CoModeloID, ';')
				SET @logMessage = Concat(@logMessage, 'CoModeloClave::', @CoModeloClave_, ':', @CoModeloClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'EmpresaID::', @EmpresaID_, ':', @EmpresaID, ';')
		
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoModelo_Listado]...';


GO
CREATE PROCEDURE [dbo].[CoModelo_Listado]
@EmpresaID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoModelo',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaID::', @EmpresaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

/************* FIN COPY 1  *********************/

	SELECT  CoModeloID,			CoModeloClave,		Nombre,			NombreCorto,  
			EmpresaID
	FROM    CoModelo
	WHERE	EmpresaID = @EmpresaID
	ORDER BY Nombre

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoPartida_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CoPartida_Consultar]
@CoPartidaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoPartida',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@PadreID_ int = 0,
		@CoPartidaClave_ nvarchar(5) = '',
		@Nombre_ nvarchar(40) = '',			
		@NombreCorto_ varchar(10) = '',
		@CoTipoPresupuestoID_ int = 0,
		@PpalAreaIDInicio_ int = 0,
		@PpalConceptoEgresoIDInicio_ int = 0,
		@AplicaIVA_ char(1) = '',
		@CoTipoConstruccionID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @CoPartidaID
	/************* FIN COPY 1  *********************/
	SELECT	@PadreID_	= PadreID,					@CoPartidaClave_ = CoPartidaClave,				@Nombre_ = Nombre,		
			@NombreCorto_ = NombreCorto,			@CoTipoPresupuestoID_ = CoTipoPresupuestoID,	@PpalAreaIDInicio_ = PpalAreaIDInicio,
			@PpalConceptoEgresoIDInicio_ = PpalConceptoEgresoIDInicio,								@AplicaIVA_ = AplicaIVA,
			@CoTipoConstruccionID_ = CoTipoConstruccionID
	FROM    CoPartida
	WHERE   CoPartidaID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CoPartidaID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @PadreID_	as PadreID,					@CoPartidaClave_ as CoPartidaClave,				@Nombre_ as Nombre,		
			@NombreCorto_ as NombreCorto,			@CoTipoPresupuestoID_ as CoTipoPresupuestoID,	@PpalAreaIDInicio_ as PpalAreaIDInicio,
			@PpalConceptoEgresoIDInicio_ as PpalConceptoEgresoIDInicio,								@AplicaIVA_ as AplicaIVA,
			@CoTipoConstruccionID_ as CoTipoConstruccionID
	

ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CoPartida_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CoPartida_Eliminar]
@CoPartidaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CoPartida',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CoPartidaID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CoPartidaClave,'')
	  FROM	CoPartida WHERE CoPartidaID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    CoPartida
		WHERE   CoPartidaID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CoPartidaID::', @CoPartidaID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @CoPartidaID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CoPartida_Guardar]...';


GO

CREATE PROCEDURE [dbo].[CoPartida_Guardar]
@CoPartidaID int,
@PadreID int,
@CoPartidaClave varchar(5) = null,
@Nombre varchar(40) = null,
@NombreCorto varchar(10) = null,
@CoTipoPresupuestoID int,
@PpalAreaIDInicio int,
@PpalConceptoEgresoIDInicio int,
@AplicaIVA char(1),
@CoTipoConstruccionID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CoPartida',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CoPartidaID_ int = @CoPartidaID,
		@PadreID_ int  = 0,
		@CoPartidaClave_ varchar(5) = '',
		@Nombre_ varchar(40) = '',
		@NombreCorto_ varchar(10) = '',
		@CoTipoPresupuestoID_ int = 0,
		@PpalAreaIDInicio_ int = 0,
		@PpalConceptoEgresoIDInicio_ int = 0,
		@AplicaIVA_ char(1) = '',
		@CoTipoConstruccionID_ int = 0


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CoPartidaID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@CoPartidaID_ = IsNULL(CoPartidaID,0),
				@PadreID_ = IsNULL(PadreID,0),
				@CoPartidaClave_ = IsNULL(CoPartidaClave,''),
				@Nombre_ = IsNULL(Nombre,''),
				@NombreCorto_ = IsNULL(NombreCorto,''),
				@CoTipoPresupuestoID_ = IsNULL(CoTipoPresupuestoID,0),
				@PpalAreaIDInicio_ = IsNULL(PpalAreaIDInicio,0),
				@PpalConceptoEgresoIDInicio_ = IsNULL(PpalConceptoEgresoIDInicio,0),
				@AplicaIVA_ = IsNull(AplicaIVA,''),
				@CoTipoConstruccionID_ = IsNull(CoTipoConstruccionID,0)
		   FROM	CoPartida WHERE CoPartidaID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @CoPartidaClave_ = @ClaveNoAsignado and @CoPartidaClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CoPartida
			SET    	PadreID  = CASE WHEN @PadreID = 0 THEN NULL ELSE @PadreID END,
					CoPartidaClave = @CoPartidaClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					CoTipoPresupuestoID = @CoTipoPresupuestoID,
					PpalAreaIDInicio = @PpalAreaIDInicio,
					PpalConceptoEgresoIDInicio = @PpalConceptoEgresoIDInicio,
					AplicaIVA = @AplicaIVA,
					CoTipoConstruccionID = @CoTipoConstruccionID
			WHERE   CoPartidaID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CoPartida(
					PadreID,
					CoPartidaClave,
					Nombre,
					NombreCorto,
					CoTipoPresupuestoID,
					PpalAreaIDInicio,
					PpalConceptoEgresoIDInicio,
					AplicaIVA,
					CoTipoConstruccionID)
			VALUES  (
					CASE WHEN @PadreID = 0 THEN NULL ELSE @PadreID END,
					@CoPartidaClave,
					@Nombre,
					@NombreCorto,
					@CoTipoPresupuestoID,
					@PpalAreaIDInicio,
					@PpalConceptoEgresoIDInicio,
					@AplicaIVA,
					@CoTipoConstruccionID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CoPartidaID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PadreID::', @PadreID_, ':', @PadreID, ';')
				SET @logMessage = Concat(@logMessage, 'CoPartidaClave::', @CoPartidaClave_, ':', @CoPartidaClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'CoTipoPresupuestoID::', @CoTipoPresupuestoID_, ':', @CoTipoPresupuestoID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalAreaIDInicio::', @PpalAreaIDInicio_, ':', @PpalAreaIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'PPalConceptoEgresoIDinicio::', @PPalConceptoEgresoIDinicio_, ':', @PPalConceptoEgresoIDinicio, ';')
				SET @logMessage = Concat(@logMessage, 'AplicaIVA::', @AplicaIVA_, ':', @AplicaIVA, ';')
				SET @logMessage = Concat(@logMessage, 'CoTipoConstruccionID::', @CoTipoConstruccionID_, ':', @CoTipoConstruccionID, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CoPartida_Listado]...';


GO
CREATE PROCEDURE [dbo].[CoPartida_Listado]
@CoTipoPresupuestoID int,
@TipoListado varchar(10)
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoPartida',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CoTipoPresupuestoID::', @CoTipoPresupuestoID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	IF @TipoListado = 'Minimo'
		SELECT  CoPartidaID as ID,				CoPartidaClave as Clave,				CPro.NombreCorto + ' / ' + CTP.NombreCorto + ' / ' + CPar.Nombre as Nombre,
				CPar.NombreCorto,				CPar.CoTipoConstruccionID as PadreID,	CAST(CPro.PpalCentroCostoID as varchar) as Extra1,
				CAST(PpalAreaIDInicio as varchar) as Extra2,							CAST(PpalConceptoEgresoIDInicio as varchar) as Extra3
		FROM    CoPartida CPar
		inner join CoTipoPresupuesto CTP ON CPar.CoTipoPresupuestoID = CTP.CoTipoPresupuestoID
		inner join CoProyecto CPro ON CPro.CoProyectoID = CTP.CoProyectoID
		WHERE	@CoTipoPresupuestoID = @CoTipoPresupuestoID
		ORDER BY 3
	ELSE IF @TipoListado = 'Parcial' OR @TipoListado = 'Completo'
		SELECT  CoPartidaID,			PadreID,				CoPartidaClave,				Nombre,
				NombreCorto,			CoTipoPresupuestoID,	PpalAreaIDInicio,			PpalConceptoEgresoIDInicio,
				AplicaIVA,				CoTipoConstruccionID
		FROM    CoPartida
		WHERE	@CoTipoPresupuestoID = @CoTipoPresupuestoID
		ORDER BY CoPartidaClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoPartidaBase_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CoPartidaBase_Consultar]
@CoPartidaBaseID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoPartidaBase',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@PadreID_ int = 0,
		@CoPartidaBaseClave_ nvarchar(5) = '',
		@Nombre_ nvarchar(40) = '',			
		@NombreCorto_ varchar(10) = '',
		@CoTipoPresupuestoBaseID_ int = 0,
		@PpalAreaIDInicio_ int = 0,
		@PpalConceptoEgresoIDInicio_ int = 0,
		@AplicaIVA_ char(1) = '',
		@CoTipoConstruccionID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @CoPartidaBaseID
	/************* FIN COPY 1  *********************/
	SELECT	@PadreID_	= PadreID,					@CoPartidaBaseClave_ = CoPartidaBaseClave,				@Nombre_ = Nombre,		
			@NombreCorto_ = NombreCorto,			@CoTipoPresupuestoBaseID_ = CoTipoPresupuestoBaseID,	@PpalAreaIDInicio_ = PpalAreaIDInicio,
			@PpalConceptoEgresoIDInicio_ = PpalConceptoEgresoIDInicio,								@AplicaIVA_ = AplicaIVA,
			@CoTipoConstruccionID_ = CoTipoConstruccionID
	FROM    CoPartidaBase
	WHERE   CoPartidaBaseID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CoPartidaBaseID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @PadreID_	as PadreID,					@CoPartidaBaseClave_ as CoPartidaBaseClave,				@Nombre_ as Nombre,		
			@NombreCorto_ as NombreCorto,			@CoTipoPresupuestoBaseID_ as CoTipoPresupuestoBaseID,	@PpalAreaIDInicio_ as PpalAreaIDInicio,
			@PpalConceptoEgresoIDInicio_ as PpalConceptoEgresoIDInicio,								@AplicaIVA_ as AplicaIVA,
			@IDAConsultar as CoPartidaBaseID
	

ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CoPartidaBase_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CoPartidaBase_Eliminar]
@CoPartidaBaseID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CoPartidaBase',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CoPartidaBaseID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CoPartidaBaseClave,'')
	  FROM	CoPartidaBase WHERE CoPartidaBaseID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    CoPartidaBase
		WHERE   CoPartidaBaseID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CoPartidaBaseID::', @CoPartidaBaseID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @CoPartidaBaseID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CoPartidaBase_Guardar]...';


GO

CREATE PROCEDURE [dbo].[CoPartidaBase_Guardar]
@CoPartidaBaseID int,
@PadreID int,
@CoPartidaBaseClave varchar(5) = null,
@Nombre varchar(40) = null,
@NombreCorto varchar(10) = null,
@CoTipoPresupuestoBaseID int,
@PpalAreaIDInicio int,
@PpalConceptoEgresoIDInicio int,
@AplicaIVA char(1),
@CoTipoConstruccionID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CoPartidaBase',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CoPartidaBaseID_ int = @CoPartidaBaseID,
		@PadreID_ int  = 0,
		@CoPartidaBaseClave_ varchar(5) = '',
		@Nombre_ varchar(40) = '',
		@NombreCorto_ varchar(10) = '',
		@CoTipoPresupuestoBaseID_ int = 0,
		@PpalAreaIDInicio_ int  =0,
		@PpalConceptoEgresoIDInicio_ int = 0,
		@AplicaIVA_ char(1) = '',
		@CoTipoConstruccionID_ int = 0


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CoPartidaBaseID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@CoPartidaBaseID_ = IsNULL(CoPartidaBaseID,0),
				@PadreID_ = IsNULL(PadreID,0),
				@CoPartidaBaseClave_ = IsNULL(CoPartidaBaseClave,''),
				@Nombre_ = IsNULL(Nombre,''),
				@NombreCorto_ = IsNULL(NombreCorto,''),
				@CoTipoPresupuestoBaseID_ = IsNULL(CoTipoPresupuestoBaseID,0),
				@PpalAreaIDInicio_ = IsNULL(PpalAreaIDInicio,0),
				@PpalConceptoEgresoIDInicio_ = IsNULL(PpalConceptoEgresoIDInicio,0),
				@AplicaIVA_ = IsNull(AplicaIVA,''),
				@CoTipoConstruccionID_ = ISNULL(CoTipoConstruccionID,0)
		   FROM	CoPartidaBase WHERE CoPartidaBaseID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @CoPartidaBaseClave_ = @ClaveNoAsignado and @CoPartidaBaseClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CoPartidaBase
			SET    	PadreID  = CASE WHEN @PadreID = 0 THEN NULL ELSE @PadreID END,
					CoPartidaBaseClave = @CoPartidaBaseClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					CoTipoPresupuestoBaseID = @CoTipoPresupuestoBaseID,
					PpalAreaIDInicio = @PpalAreaIDInicio,
					PpalConceptoEgresoIDInicio = @PpalConceptoEgresoIDInicio,
					AplicaIVA = @AplicaIVA,
					CoTipoConstruccionID = @CoTipoConstruccionID
			WHERE   CoPartidaBaseID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CoPartidaBase(
					PadreID,
					CoPartidaBaseClave,
					Nombre,
					NombreCorto,
					CoTipoPresupuestoBaseID,
					PpalAreaIDInicio,
					PpalConceptoEgresoIDInicio,
					AplicaIVA,
					CoTipoConstruccionID)
			VALUES  (
					CASE WHEN @PadreID = 0 THEN NULL ELSE @PadreID END,
					@CoPartidaBaseClave,
					@Nombre,
					@NombreCorto,
					@CoTipoPresupuestoBaseID,
					@PpalAreaIDInicio,
					@PpalConceptoEgresoIDInicio,
					@AplicaIVA,
					@CoTipoConstruccionID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CoPartidaBaseID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PadreID::', @PadreID_, ':', @PadreID, ';')
				SET @logMessage = Concat(@logMessage, 'CoPartidaBaseClave::', @CoPartidaBaseClave_, ':', @CoPartidaBaseClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'CoTipoPresupuestoBaseID::', @CoTipoPresupuestoBaseID_, ':', @CoTipoPresupuestoBaseID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalAreaIDInicio::', @PpalAreaIDInicio_, ':', @PpalAreaIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'PPalConceptoEgresoIDinicio::', @PPalConceptoEgresoIDinicio_, ':', @PPalConceptoEgresoIDinicio, ';')
				SET @logMessage = Concat(@logMessage, 'AplicaIVA::', @AplicaIVA_, ':', @AplicaIVA, ';')
				SET @logMessage = Concat(@logMessage, 'CoTipoConstruccionID::', @CoTipoConstruccionID_, ':', @CoTipoConstruccionID, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CoPartidaBase_Listado]...';


GO
CREATE PROCEDURE [dbo].[CoPartidaBase_Listado]
@CoTipoPresupuestoBaseID int,
@TipoListado varchar(10)
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoPartidaBase',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CoTipoPresupuestoBaseID::', @CoTipoPresupuestoBaseID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	IF @TipoListado = 'Minimo'
		SELECT  CoPartidaBaseID as ID,			CoPartidaBaseClave as Clave,			CTP.NombreCorto + ' / ' + CPar.Nombre as Nombre,
				CPar.NombreCorto,				CPar.CoTipoConstruccionID as PadreID,	'' as Extra1,
				CAST(PpalAreaIDInicio as varchar) as Extra2,				CAST(PpalConceptoEgresoIDInicio as varchar) as Extra3
		FROM    CoPartidaBase CPar
		inner join CoTipoPresupuestoBase CTP ON CPar.CoTipoPresupuestoBaseID = CTP.CoTipoPresupuestoBaseID
		WHERE	@CoTipoPresupuestoBaseID = @CoTipoPresupuestoBaseID
		ORDER BY CoPartidaBaseClave
	ELSE IF @TipoListado = 'Parcial' OR @TipoListado = 'Completo'
		SELECT  CoPartidaBaseID,			PadreID,				CoPartidaBaseClave,				Nombre,
				NombreCorto,			CoTipoPresupuestoBaseID,	PpalAreaIDInicio,			PpalConceptoEgresoIDInicio,
				AplicaIVA,				CoTipoConstruccionID
		FROM    CoPartidaBase
		WHERE	@CoTipoPresupuestoBaseID = @CoTipoPresupuestoBaseID
		ORDER BY CoPartidaBaseClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoPartidaDetalle_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CoPartidaDetalle_Consultar]
@CoPartidaDetalleID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoPartidaDetalle',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@CoPartidaDetalleID_ int = @CoPartidaDetalleID,
		@CoPartidaID_ int = 0,
		@PpalProductoID_ int = 0,
		@Cantidad_ decimal(18,6) = 0,
		@Precio_ decimal(18,6) = 0,
		@AuxUnidadID_ int = 0,
		@Adicional_ varchar(500) = '',
		@Observaciones_ varchar(500) = '',
		@PpalAreaID_ int = 0,
		@SustituirConAdicional_ bit = 0,
		@PpalConceptoEgresoID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @CoPartidaDetalleID
	/************* FIN COPY 1  *********************/
	SELECT  @CoPartidaDetalleID_ = CoPartidaDetalleID,		@CoPartidaID_ = CoPartidaID,		@PpalProductoID_  = PpalProductoID,
			@Cantidad_ = Cantidad,			@Precio_ = Precio,				@AuxUnidadID_  = AuxUnidadID,
			@Adicional_ = Adicional,		@Observaciones_ = Observaciones,		@PpalAreaID_  = PpalAreaID,
			@SustituirConAdicional_ = SustituirConAdicional,		@PpalConceptoEgresoID_  = PpalConceptoEgresoID
		
	FROM    CoPartidaDetalle
	WHERE   CoPartidaDetalleID = @IDAConsultar

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CoPartidaDetalleID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @CoPartidaDetalleID_ as CoPartidaDetalleID,		@CoPartidaID_ as CoPartidaID,		@PpalProductoID_  as PpalProductoID,
			@Cantidad_ as Cantidad,			@Precio_ as Precio,				@AuxUnidadID_  as AuxUnidadID,
			@Adicional_ as Adicional,		@Observaciones_ as Observaciones,		@PpalAreaID_  as PpalAreaID,
			@SustituirConAdicional_ as SustituirConAdicional,		@PpalConceptoEgresoID_  as PpalConceptoEgresoID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoPartidaDetalle_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CoPartidaDetalle_Eliminar]
@CoPartidaDetalleID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoPartidaDetalle',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CoPartidaDetalleID

	BEGIN
		DELETE
		FROM    CoPartidaDetalle
		WHERE   CoPartidaDetalleID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitcora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CoPartidaDetalleID::', @CoPartidaDetalleID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @CoPartidaDetalleID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitcora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CoPartidaDetalle_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CoPartidaDetalle_Guardar]
@CoPartidaDetalleID int,
@CoPartidaID int,
@PpalProductoID int,
@Cantidad decimal(18,6),
@Precio decimal(18,6),
@AuxUnidadID int,
@Adicional varchar(500) = null,
@Observaciones varchar(500) = null,
@PpalAreaID int,
@SustituirConAdicional bit,
@PpalConceptoEgresoID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoPartidaDetalle',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CoPartidaDetalleID_ int = @CoPartidaDetalleID,
		@CoPartidaID_ int = 0,
		@PpalProductoID_ int = 0,
		@Cantidad_ decimal(18,6) = 0,
		@Precio_ decimal(18,6) = 0,
		@AuxUnidadID_ int = 0,
		@Adicional_ varchar(500) = '',
		@Observaciones_ varchar(500) = '',
		@PpalAreaID_ int = 0,
		@SustituirConAdicional_ bit = 0,
		@PpalConceptoEgresoID_ int = 0
		
		

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CoPartidaDetalleID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@CoPartidaDetalleID_  = IsNull(CoPartidaDetalleID,0),
				@CoPartidaID_ = IsNull(CoPartidaID,0),
				@PpalProductoID_ = IsNull(PpalProductoID,0),
				@Cantidad_ = IsNull(Cantidad,0),
				@Precio_ = IsNull(Precio,0),
				@AuxUnidadID_ = IsNull(AuxUnidadID,0),
				@Adicional_ = IsNull(Adicional,''),
				@Observaciones_ = IsNull(Observaciones,''),
				@PpalAreaID_ = IsNull(CoPartidaID,0),
				@SustituirConAdicional_ = IsNull(CoPartidaID,0),
				@PpalConceptoEgresoID_ = IsNull(CoPartidaID,0)
	
		   FROM	CoPartidaDetalle WHERE CoPartidaDetalleID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		--IF @CoPartidaDetalleClave_ = @ClaveNoAsignado and @CoPartidaDetalleClave <> @ClaveNoAsignado
			--SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					--@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  CoPartidaDetalle
			SET CoPartidaID = @CoPartidaID,
				PpalProductoID = @PpalProductoID,
				Cantidad = @Cantidad,
				Precio = @Precio,
				AuxUnidadID = @AuxUnidadID,
				Adicional = @Adicional,
				Observaciones = @Observaciones,
				PpalAreaID = @PpalAreaID,
				SustituirConAdicional = @SustituirConAdicional, 
				PpalConceptoEgresoID = @PpalConceptoEgresoID
			WHERE   CoPartidaDetalleID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CoPartidaDetalle(
					CoPartidaID,
					PpalProductoID,
					Cantidad,
					Precio,
					AuxUnidadID,
					Adicional,
					Observaciones,
					PpalAreaID,
					SustituirConAdicional, 
					PpalConceptoEgresoID)
			VALUES  (
					@CoPartidaID,
					@PpalProductoID,
					@Cantidad,
					@Precio,
					@AuxUnidadID,
					@Adicional,
					@Observaciones,
					@PpalAreaID,
					@SustituirConAdicional, 
					@PpalConceptoEgresoID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CoPartidaDetalleID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CoPartidaDetalleID::', @CoPartidaDetalleID_, ':', @CoPartidaDetalleID, ';')
				SET @logMessage = Concat(@logMessage, 'CoPartidaID::', @CoPartidaID_, ':', @CoPartidaID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalProductoID::', @PpalProductoID_, ':', @PpalProductoID, ';')
				SET @logMessage = Concat(@logMessage, 'Cantidad::', @Cantidad_, ':', @Cantidad, ';')
				SET @logMessage = Concat(@logMessage, 'Precio::', @Precio_, ':', @Precio, ';')
				SET @logMessage = Concat(@logMessage, 'AuxUnidadID::', @AuxUnidadID_, ':', @AuxUnidadID, ';')
				SET @logMessage = Concat(@logMessage, 'Adicional::', @Adicional_, ':', @Adicional, ';')
				SET @logMessage = Concat(@logMessage, 'Observaciones::', @Observaciones_, ':', @Observaciones, ';')
				SET @logMessage = Concat(@logMessage, 'PpalAreaID::', @PpalAreaID_, ':', @PpalAreaID, ';')
				SET @logMessage = Concat(@logMessage, 'SustituirConAdicional::', @SustituirConAdicional_, ':', @SustituirConAdicional, ';')
				SET @logMessage = Concat(@logMessage, 'PpalConceptoEgresoID::', @PpalConceptoEgresoID_, ':', @PpalConceptoEgresoID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoPartidaDetalle_Listado]...';


GO
CREATE PROCEDURE [dbo].[CoPartidaDetalle_Listado]
@CoTipoPresupuestoID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoPartidaDetalle',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CoPartidaID::', @CoTipoPresupuestoID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

/************* FIN COPY 1  *********************/

	SELECT  CoPartidaDetalleID,			CPD.CoPartidaID,		PpalProductoID,			Cantidad,
			Precio,						AuxUnidadID,			Adicional,				Observaciones,
			PpalAreaID,					SustituirConAdicional,	PpalConceptoEgresoID
	FROM    CoPartidaDetalle CPD
			LEFT OUTER JOIN CoPartida CP ON CPD.CoPartidaID = CP.CoPartidaID
	WHERE	CoTipoPresupuestoID = @CoTipoPresupuestoID
	ORDER BY CPD.CoPartidaID, PpalProductoID

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoPartidaGeneral_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CoPartidaGeneral_Consultar]
@CoPartidaGeneralID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoPartidaGeneral',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@PadreID_ int = 0,
		@CoPartidaGeneralClave_ nvarchar(5) = '',
		@Nombre_ nvarchar(40) = '',			
		@NombreCorto_ varchar(10) = '',
		@PpalAreaIDInicio_ int = 0,
		@PpalConceptoEgresoIDInicio_ int = 0,
		@AplicaIVA_ char(1) = '',
		@CoTipoConstruccionID_ int = 0
SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @CoPartidaGeneralID
	/************* FIN COPY 1  *********************/
	SELECT	@PadreID_	= PadreID,					@CoPartidaGeneralClave_ = CoPartidaGeneralClave,		@Nombre_ = Nombre,		
			@NombreCorto_ = NombreCorto,			@PpalAreaIDInicio_ = PpalAreaIDInicio,
			@PpalConceptoEgresoIDInicio_ = PpalConceptoEgresoIDInicio,										@AplicaIVA_ = AplicaIVA,
			@CoTipoConstruccionID_ = CoTipoConstruccionID
	FROM    CoPartidaGeneral
	WHERE   CoPartidaGeneralID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CoPartidaGeneralID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @PadreID_	as PadreID,					@CoPartidaGeneralClave_ as CoPartidaGeneralClave,				@Nombre_ as Nombre,		
			@NombreCorto_ as NombreCorto,			@PpalAreaIDInicio_ as PpalAreaIDInicio,
			@PpalConceptoEgresoIDInicio_ as PpalConceptoEgresoIDInicio,								@AplicaIVA_ as AplicaIVA,
			@CoTipoConstruccionID_ as CoTipoConstruccionID
	

ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CoPartidaGeneral_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CoPartidaGeneral_Eliminar]
@CoPartidaGeneralID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CoPartidaGeneral',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CoPartidaGeneralID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CoPartidaGeneralClave,'')
	  FROM	CoPartidaGeneral WHERE CoPartidaGeneralID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    CoPartidaGeneral
		WHERE   CoPartidaGeneralID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CoPartidaGeneralID::', @CoPartidaGeneralID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @CoPartidaGeneralID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CoPartidaGeneral_Guardar]...';


GO

CREATE PROCEDURE [dbo].[CoPartidaGeneral_Guardar]
@CoPartidaGeneralID int,
@PadreID int,
@CoPartidaGeneralClave varchar(5) = null,
@Nombre varchar(40) = null,
@NombreCorto varchar(10) = null,
@PpalAreaIDInicio int,
@PpalConceptoEgresoIDInicio int,
@AplicaIVA char(1),
@CoTipoConstruccionID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CoPartidaGeneral',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CoPartidaGeneralID_ int = @CoPartidaGeneralID,
		@PadreID_ int  = 0,
		@CoPartidaGeneralClave_ varchar(5) = '',
		@Nombre_ varchar(40) = '',
		@NombreCorto_ varchar(10) = '',
		@PpalAreaIDInicio_ int  =0,
		@PpalConceptoEgresoIDInicio_ int = 0,
		@AplicaIVA_ char(1) = '',
		@CoTipoConstruccionID_ int = 0


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CoPartidaGeneralID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@CoPartidaGeneralID_ = IsNULL(CoPartidaGeneralID,0),
				@PadreID_ = IsNULL(PadreID,0),
				@CoPartidaGeneralClave_ = IsNULL(CoPartidaGeneralClave,''),
				@Nombre_ = IsNULL(Nombre,''),
				@NombreCorto_ = IsNULL(NombreCorto,''),
				@PpalAreaIDInicio_ = IsNULL(PpalAreaIDInicio,0),
				@PpalConceptoEgresoIDInicio_ = IsNULL(PpalConceptoEgresoIDInicio,0),
				@AplicaIVA_ = ISNULL(AplicaIVA,''),
				@CoTipoConstruccionID_ = ISNULL(CoTipoConstruccionID,0)
		   FROM	CoPartidaGeneral WHERE CoPartidaGeneralID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @CoPartidaGeneralClave_ = @ClaveNoAsignado and @CoPartidaGeneralClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CoPartidaGeneral
			SET    	PadreID  = CASE WHEN @PadreID = 0 THEN NULL ELSE @PadreID END,
					CoPartidaGeneralClave = @CoPartidaGeneralClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					PpalAreaIDInicio =  @PpalAreaIDInicio,
					PpalConceptoEgresoIDInicio = @PpalConceptoEgresoIDInicio,
					AplicaIVA = @AplicaIVA,
					CoTipoConstruccionID = @CoTipoConstruccionID
			WHERE   CoPartidaGeneralID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CoPartidaGeneral(
					PadreID,
					CoPartidaGeneralClave,
					Nombre,
					NombreCorto,
					PpalAreaIDInicio,
					PpalConceptoEgresoIDInicio,
					AplicaIVA,
					CoTipoConstruccionID)
			VALUES  (
					CASE WHEN @PadreID = 0 THEN NULL ELSE @PadreID END,
					@CoPartidaGeneralClave,
					@Nombre,
					@NombreCorto,
					@PpalAreaIDInicio,
					@PpalConceptoEgresoIDInicio,
					@AplicaIVA,
					@CoTipoConstruccionID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CoPartidaGeneralID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PadreID::', @PadreID_, ':', @PadreID, ';')
				SET @logMessage = Concat(@logMessage, 'CoPartidaGeneralClave::', @CoPartidaGeneralClave_, ':', @CoPartidaGeneralClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'PpalAreaIDInicio::', @PpalAreaIDInicio_, ':', @PpalAreaIDInicio, ';')
				SET @logMessage = Concat(@logMessage, 'PPalConceptoEgresoIDinicio::', @PPalConceptoEgresoIDinicio_, ':', @PPalConceptoEgresoIDinicio, ';')
				SET @logMessage = Concat(@logMessage, 'AplicaIVA::', @AplicaIVA_, ':', @AplicaIVA, ';')
				SET @logMessage = Concat(@logMessage, 'CoTipoConstruccionID::', @CoTipoConstruccionID_, ':', @CoTipoConstruccionID, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CoPartidaGeneral_Listado]...';


GO
CREATE PROCEDURE [dbo].[CoPartidaGeneral_Listado]
@TipoListado varchar(10)
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoPartidaGeneral',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CoTipoPresupuestoID::',0, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	IF @TipoListado = 'Minimo'
		SELECT  CoPartidaGeneralID as ID,		CoPartidaGeneralClave as Clave,				Nombre,
				NombreCorto,					CoTipoConstruccionID as PadreID
		FROM    CoPartidaGeneral
		ORDER BY CoPartidaGeneralClave
	ELSE IF @TipoListado = 'Parcial' OR @TipoListado = 'Completo'
		SELECT  CoPartidaGeneralID,			PadreID,				CoPartidaGeneralClave,				Nombre,
				NombreCorto,				PpalAreaIDInicio,		PpalConceptoEgresoIDInicio,			AplicaIVA,
				CoTipoConstruccionID
		FROM    CoPartidaGeneral
		ORDER BY CoPartidaGeneralClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoProyecto_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CoProyecto_Consultar]
@CoProyectoID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora  nvarchar(100) = 'CoProyecto',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@PpalSucursalID_ int = 0,
		@CoProyectoClave_ varchar(12) = '',
		@Nombre_ varchar(150) = '',
		@NombreCorto_ varchar(40) = '',
		@NivelPartidaInicio_ int = 0,
		@PpalCentroCostoID_ int = 0,
		@ManejaElementoInicio_ bit = 0,
		@NivelCalendarioInicio_ int = 0,
		@FechaAlta_ date = GetDate(),
		@CP_ int = 0,
		@Inscipcion_ varchar(30) = '',
		@Libro_ varchar(30) = '',
		@Seccion_ varchar(30) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @CoProyectoID
	/************* FIN COPY 1  *********************/
	SELECT  @PpalSucursalID_ = PpalSucursalID,		@CoProyectoClave_ = CoProyectoClave,			@Nombre_ = Nombre,
			@NombreCorto_ = NombreCorto,			@NivelPartidaInicio_ = NivelPartidaInicio,		@PpalCentroCostoID_ = PpalCentroCostoID,
			@ManejaElementoInicio_ = ManejaElementoInicio,	@NivelCalendarioInicio_ = NivelCalendarioInicio,
			@FechaAlta_ = FechaAlta,				@CP_ = EspCP,										@Inscipcion_ = Inscripcion,
			@Libro_ = Libro,						@Seccion_  = Seccion		
	FROM    CoProyecto
	WHERE   CoProyectoID = @IDAConsultar

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CoProyectoID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as CoProyectoID,					@PpalSucursalID_ as PpalSucursalID,		
			@CoProyectoClave_ as CoProyectoClave,			@Nombre_ as Nombre,	
			@NombreCorto_ as NombreCorto,					@NivelPartidaInicio_ as NivelPartidaInicio,
			@PpalCentroCostoID_ as PpalCentroCostoID,
			@ManejaElementoInicio_ as ManejaElementoInicio,	@NivelCalendarioInicio_ as NivelCalendarioInicio,
			@FechaAlta_ as FechaAlta,						@CP_ as CP,
			@Inscipcion_ as Inscripcion,					@Libro_ as Libro,
			@Seccion_  as Seccion
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoProyecto_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CoProyecto_Eliminar]
@CoProyectoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoProyecto',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CoProyectoID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CoProyectoClave,'')
	  FROM	CoProyecto WHERE CoProyectoID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    CoProyecto
		WHERE   CoProyectoID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CoProyectoID::', @CoProyectoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar]		@TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @CoProyectoID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CoProyecto_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CoProyecto_Guardar]
@CoProyectoID int,
@PpalSucursalID int,
@CoProyectoClave varchar(10) = null,
@Nombre varchar(60) = null,
@NombreCorto varchar(10) = null,
@NivelPartidaInicio tinyint,
@PpalCentroCostoID int,
@ManejaElementoInicio bit,
@NivelCalendarioInicio tinyint,
@FechaAlta date,
@EspCP int,
@Inscripcion varchar(30),
@Libro varchar(30),
@Seccion varchar(30),
@TipoCapturaAvance tinyint
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombre   nvarchar(100) = 'CoProyecto',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CoProyectoID_ int = @CoProyectoID,
		@PpalSucursalID_ int = 0,
		@CoProyectoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@NivelPartidaInicio_ tinyint = 0,
		@PpalCentroCostoID_ int = 0,
		@ManejaElementoInicio_ bit = 0,
		@NivelCalendarioInicio_ tinyint = 0,
		@FechaAlta_ date = GetDAte(),
		@EspCP_ int = 0,
		@TipoCapturaAvance_ tinyint = 0,
		@Inscripcion_ varchar(30) = '',
		@Libro_ varchar(30) = '',
		@Seccion_ varchar(30) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CoProyectoID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@CoProyectoID_ = IsNull(CoProyectoID,0),
				@PpalSucursalID_ = IsNull(PpalSucursalID,0),
				@CoProyectoClave_ = IsNull(CoProyectoClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@NivelPartidaInicio_ = IsNull(NivelPartidaInicio,0),
				@PpalCentroCostoID_= IsNull(PpalCentroCostoID,0),
				@ManejaElementoInicio_ = IsNull(ManejaElementoInicio,0),
				@NivelCalendarioInicio_ = IsNull(NivelCalendarioInicio,0),
				@FechaAlta_ = FechaAlta,
				@EspCP_ = IsNull(EspCP,0),
				@TipoCapturaAvance = IsNull(TipoCapturaAvance,0),
				@Inscripcion_ = Inscripcion,
				@Libro_ = Libro,
				@Seccion_ = Seccion
		   FROM	CoProyecto WHERE CoProyectoID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @CoProyectoClave_ = @ClaveNoAsignado and @CoProyectoClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  CoProyecto
			SET     PpalSucursalID = @PpalSucursalID,
					CoProyectoClave = @CoProyectoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					NivelPartidaInicio = @NivelPartidaInicio,
					PpalCentroCostoID = @PpalCentroCostoID,
					ManejaElementoInicio = @ManejaElementoInicio,
					NivelCalendarioInicio = @NivelCalendarioInicio,
					FechaAlta = @FechaAlta,
					EspCP = @EspCP,
					TipoCapturaAvance = @TipoCapturaAvance,
					Inscripcion = @Inscripcion,
					Libro = @Libro,
					Seccion = @Seccion
			WHERE   CoProyectoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CoProyecto(
					PpalSucursalID,
					CoProyectoClave,
					Nombre,
					NombreCorto,
					NivelPartidaInicio,
					PpalCentroCostoID,
					ManejaElementoInicio,
					NivelCalendarioInicio,
					FechaAlta,
					EspCP,
					TipoCapturaAvance,
					Inscripcion,
					Libro,
					Seccion)
			VALUES  (
					@PpalSucursalID,
					@CoProyectoClave,
					@Nombre,
					@NombreCorto,
					@NivelPartidaInicio,
					@PpalCentroCostoID,
					@ManejaElementoInicio,
					@NivelCalendarioInicio,
					@FechaAlta,
					@EspCP,
					@TipoCapturaAvance,
					@Inscripcion,
					@Libro,
					@Seccion)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CoProyectoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombre,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalSucursalID::', @PpalSucursalID_, ':', @PpalSucursalID, ';')
				SET @logMessage = Concat(@logMessage, 'CoProyectoClave::', @CoProyectoClave_, ':', @CoProyectoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'NivelPartidaInicio::', @NivelPartidaInicio_, ':', @NivelPartidaInicio, ';')
				SET @logMessage = Concat(@logMessage, 'PpalCentroCostoID::', @PpalCentroCostoID_, ':', @PpalCentroCostoID, ';')
				SET @logMessage = Concat(@logMessage, 'ManejaElementoInicio::', @ManejaElementoInicio_, ':', @ManejaElementoInicio, ';')
				SET @logMessage = Concat(@logMessage, 'NivelCalendarioInicio::', @NivelCalendarioInicio_, ':', @NivelCalendarioInicio, ';')
				SET @logMessage = Concat(@logMessage, 'FechaAlta::', @FechaAlta_, ':', @FechaAlta, ';')
				SET @logMessage = Concat(@logMessage, 'CP::', @EspCP_, ':', @EspCP, ';')
				SET @logMessage = Concat(@logMessage, 'TipoCapturaAvance::', @TipoCapturaAvance_, ':', @TipoCapturaAvance, ';')
				SET @logMessage = Concat(@logMessage, 'Inscripcion::', @Inscripcion_, ':', @Inscripcion, ';')
				SET @logMessage = Concat(@logMessage, 'Libro::', @Libro_, ':', @Libro, ';')
				SET @logMessage = Concat(@logMessage, 'Seccion::', @Seccion_, ':', @Seccion, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombre
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoProyecto_Listado]...';


GO
CREATE PROCEDURE [dbo].[CoProyecto_Listado]
@SegUsuarioID int,
@EmpresaID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoProyecto',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaID::', @EmpresaID, ':',0, ';')
		SET @logMessage =  Concat(@logMessage, 'SegUsuarioID::', @SegUsuarioID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

/************* FIN COPY 1  *********************/

	SELECT  CoProyectoID,			PpalSucursalID,				CoProyectoClave,			Nombre,
			NombreCorto,			NivelPartidaInicio,			PpalCentroCostoID,
			ManejaElementoInicio,	NivelCalendarioInicio,		FechaAlta,					EspCP,
			Inscripcion,			Libro,						Seccion
	FROM    CoProyecto
	WHERE	PpalSucursalID in (SELECT PpalSucursalID 
								 FROM PpalSucursal
								WHERE EmpresaID = @EmpresaID) AND
			((SELECT PpalSucursalID 
			   FROM PpalSucursal
			  WHERE PpalSucursalClave = (SELECT ClaveNoAsignado FROM SistemaParamCosmos)) in 
				(SELECT PpalSucursalID
				  FROM SegUsuarioSucursal
				 WHERE SegUsuarioID = @SegUsuarioID) OR
			PpalSucursalID in 
				(SELECT PpalSucursalID
				  FROM SegUsuarioSucursal
				 WHERE SegUsuarioID = @SegUsuarioID) OR
				 @SegUsuarioID = 0) AND
			((SELECT PpalCentroCostoID 
			   FROM PpalCentroCosto
			  WHERE PpalCentroCostoClave = (SELECT ClaveNoAsignado FROM SistemaParamCosmos)) in 
				(SELECT PpalCentroCostoID
				  FROM SegUsuarioCentroCosto
				 WHERE SegUsuarioID = @SegUsuarioID) OR
			PpalCentroCostoID in 
				(SELECT PpalCentroCostoID
				  FROM SegUsuarioCentroCosto
				 WHERE SegUsuarioID = @SegUsuarioID) OR
				 @SegUsuarioID = 0)
	ORDER BY Nombre

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoSeccion_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CoSeccion_Consultar]
@CoSeccionID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoSeccion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@CoSeccionClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(80) = '',			
		@NombreCorto_ varchar(12) = '',
		@CoProyectoID_ int = 0,
		@ManejaElemento_ bit = 0


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @CoSeccionID
	/************* FIN COPY 1  *********************/
	SELECT  @CoSeccionClave_ = CoSeccionClave,	@Nombre_ = Nombre,		@NombreCorto_ = NombreCorto,
			@CoProyectoID_ = CoProyectoID,		@ManejaElemento_ = ManejaElemento
	FROM    CoSeccion
	WHERE   CoSeccionID = @IDAConsultar

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CoSeccionID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as CoSeccionID,  @CoSeccionClave_ as CoSeccionClave,	@Nombre_ as Nombre,
			@NombreCorto_ as NombreCorto,			@CoProyectoID_ as CoProyectoID,		@ManejaElemento_ as ManejaElemento		
	

ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoSeccion_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CoSeccion_Eliminar]
@CoSeccionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoSeccion',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CoSeccionID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CoSeccionClave,'')
	  FROM	CoSeccion WHERE CoSeccionID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    CoSeccion
		WHERE   CoSeccionID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CoSeccionID::', @CoSeccionID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @CoSeccionID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CoSeccion_Guardar]...';


GO
CREATE PROCEDURE [dbo].[CoSeccion_Guardar]
@CoSeccionID int,
@CoSeccionClave varchar(10) = null,
@Nombre varchar(80) = null,
@NombreCorto varchar(12) = null,
@CoProyectoID int,
@ManejaElemento bit

/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoSeccion',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CoSeccionClave_ nvarchar(10) = '',
		@CoSeccionID_ int = @CoSeccionID,
		@Nombre_ nvarchar(80) = '',			
		@NombreCorto_ varchar(12) = '',
		@CoProyectoID_ int = 0,
		@ManejaElemento_ bit = 0
		

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CoSeccionID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@CoSeccionClave_ = IsNull(CoSeccionClave,''),
				@CoSeccionID_ = IsNull(CoSeccionID,0),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@CoProyectoID_ = IsNull(CoProyectoID,0),
				@ManejaElemento_ = IsNull(ManejaElemento,0)

				
		   FROM	CoSeccion WHERE CoSeccionID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @CoSeccionClave_ = @ClaveNoAsignado and @CoSeccionClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  CoSeccion
			SET     CoSeccionClave = @CoSeccionClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					CoProyectoID = @CoProyectoID,
					ManejaElemento = @ManejaElemento

			WHERE   CoSeccionID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CoSeccion(
					CoSeccionClave,
					Nombre,
					NombreCorto,
					CoProyectoID,
					ManejaElemento)
			VALUES  (
					@CoSeccionClave,
					@Nombre,
					@NombreCorto,
					@CoProyectoID,
					@ManejaElemento)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CoSeccionID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CoSeccionClave::', @CoSeccionClave_, ':', @CoSeccionClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'CoProyectoID::', @CoProyectoID_, ':', @CoProyectoID, ';')
				SET @logMessage = Concat(@logMessage, 'ManejaElemento::', @ManejaElemento_, ':', @ManejaElemento, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoSeccion_Listado]...';


GO
CREATE PROCEDURE [dbo].[CoSeccion_Listado]
@CoProyectoID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoSeccion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CoProyectoID::', @CoProyectoID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

/************* FIN COPY 1  *********************/

	SELECT  CoSeccionID,			CoSeccionClave,			Nombre,				NombreCorto,
			CoProyectoID,					ManejaElemento
	FROM    CoSeccion
	WHERE	CoProyectoID = @CoProyectoID
	ORDER BY Nombre

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoTipoConstruccion_Listado]...';


GO
CREATE PROCEDURE [dbo].[CoTipoConstruccion_Listado]
@TipoListado varchar(10) = ''
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CoTipoConstruccion',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaID::', @EmpresaIDSolicitudBase, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
/************* FIN COPY 1  *********************/
	IF @TipoListado = 'Minimo'
		SELECT  CoTipoConstruccionID AS ID,	CoTipoConstruccionClave AS Clave,		Nombre, 
				NombreCorto,		0 AS PadreID
		FROM    CoTipoConstruccion
		ORDER BY CoTipoConstruccionClave
	ELSE 
		SELECT  CoTipoConstruccionID,	CoTipoConstruccionClave,	Nombre,		NombreCorto
		FROM    CoTipoConstruccion
		ORDER BY CoTipoConstruccionClave

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoTipoPresupuesto_Arbol]...';


GO
CREATE PROCEDURE [dbo].[CoTipoPresupuesto_Arbol]
@CoTipoPresupuestoID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoTipoPresupuesto',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CoTipoPresupuestoID::', @CoTipoPresupuestoID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= 'Tree'
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

/************* FIN COPY 1  *********************/

	SELECT  CoPartidaID AS NodoID,			'Partida' as NodoTipo,
			CASE WHEN (SELECT CoPartidaClave FROM CoPartida CPb WHERE CPb.CoPartidaID = CP.PadreID) = 
						(SELECT ClaveNoAsignado  FROM SistemaParamCosmos) THEN 0 ELSE PadreID END as PadreID,	
						'Partida' as PadreTipo, 
			Nombre as NodoNombre, CoTipoPresupuestoID
	FROM    CoPartida CP
	WHERE	CoTipoPresupuestoID = @CoTipoPresupuestoID
	AND		CoPartidaClave <> (SELECT ClaveNoAsignado  FROM SistemaParamCosmos)

	UNION

	SELECT  CoPartidaDetalleID AS NodoID,	'Partida Detalle' AS NodoTipo,
			CPD.CoPartidaID AS PadreID,		'Partida' AS PadreTIpo,
			PP.NombreCorto as NodoNombre,	CoTipoPresupuestoID
	FROM    CoPartidaDetalle CPD
			LEFT OUTER JOIN CoPartida CP ON CPD.CoPartidaID = CP.CoPartidaID
			LEFT OUTER JOIN PpalProducto PP ON CPD.PpalProductoID = PP.PpalProductoID
	WHERE	CoTipoPresupuestoID = @CoTipoPresupuestoID
	ORDER BY 3, 1

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoTipoPresupuesto_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CoTipoPresupuesto_Consultar]
@CoTipoPresupuestoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoTipoPresupuesto',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@CoTipoPresupuestoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(80) = '',			
		@NombreCorto_ varchar(12) = '',
		@CoProyectoID_ int = 0,
		@NivelPartida_ tinyint = 0,
		@NivelCalendario_ tinyint = 0,
		@CfgEstatusDocumentoID_ int = 0,
		@CoTipoPresupuestoBaseID_ int = 0,
		@CoTipoConstruccionID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @CoTipoPresupuestoID
	SELECT  @CoTipoPresupuestoClave_ = CoTipoPresupuestoClave,	@Nombre_ = Nombre,		@NombreCorto_ = NombreCorto,
			@CoProyectoID_ = CoProyectoID,		@NivelPartida_ = NivelPartida,			@NivelCalendario_ = NivelCalendario,
			@CfgEstatusDocumentoID_ = CfgEstatusDocumentoID, @CoTipoPresupuestoBaseID_ = CoTipoPresupuestoBaseID,
			@CoTipoConstruccionID_ = CoTipoConstruccionID
	FROM    CoTipoPresupuesto
	WHERE   CoTipoPresupuestoID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CoTipoPresupuestoID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as CoTipoPresupuestoID,  @CoTipoPresupuestoClave_ as CoTipoPresupuestoClave,	@Nombre_ as Nombre,
			@NombreCorto_ as NombreCorto,			@CoProyectoID_ as CoProyectoID,		@NivelPartida_ as NivelPartida,			
			@NivelCalendario_ as NivelCalendario,		@CfgEstatusDocumentoID_ as CfgEstatusDocumentoID,
			@CoTipoPresupuestoBaseID_ as CoTipoPresupuestoBaseID,		@CoTipoConstruccionID_ as CoTipoConstruccionID
	

ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CoTipoPresupuesto_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CoTipoPresupuesto_Eliminar]
@CoTipoPresupuestoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CoTipoPresupuesto',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CoTipoPresupuestoID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CoTipoPresupuestoClave,'')
	  FROM	CoTipoPresupuesto WHERE CoTipoPresupuestoID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    CoTipoPresupuesto
		WHERE   CoTipoPresupuestoID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CoTipoPresupuestoID::', @CoTipoPresupuestoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @CoTipoPresupuestoID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CoTipoPresupuesto_Guardar]...';


GO

CREATE PROCEDURE [dbo].[CoTipoPresupuesto_Guardar]
@CoTipoPresupuestoID int,
@CoTipoPresupuestoClave varchar(10) = null,
@Nombre varchar(80) = null,
@NombreCorto varchar(12) = null,
@CoProyectoID int,
@NivelPartida tinyint,
@NivelCalendario tinyint,
@CfgEstatusDocumentoID int,
@CoTipoPresupuestoBaseID int,
@CoTipoConstruccionID int

-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CoTipoPresupuesto',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CoTipoPresupuestoClave_ nvarchar(10) = '',
		@CoTipoPresupuestoID_ int = @CoTipoPresupuestoID,
		@Nombre_ nvarchar(80) = '',			
		@NombreCorto_ varchar(12) = '',
		@CoProyectoID_ int = 0,
		@NivelPartida_ tinyint = 0,
		@NivelCalendario_ tinyint = 0,
		@CfgEstatusDocumentoID_ int = 0,
		@CoTipoPresupuestoBaseID_ int = 0,
		@CoTipoConstruccionID_ int = 0
		

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CoTipoPresupuestoID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@CoTipoPresupuestoClave_ = IsNull(CoTipoPresupuestoClave,''),
				@CoTipoPresupuestoID_ = IsNull(CoTipoPresupuestoID,0),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@CoProyectoID_ = IsNull(CoProyectoID,0),
				@NivelPartida_ = IsNull(NivelPartida,0),
				@NivelCalendario_ = IsNull(NivelCalendario,0),
				@CfgEstatusDocumentoID_ = IsNull(CfgEstatusDocumentoID,0),
				@CoTipoPresupuestoBaseID_ = IsNull(CoTipoPresupuestoBaseID,0),
				@CoTipoConstruccionID_ = IsNull(CoTipoConstruccionID,0)
		   FROM	CoTipoPresupuesto WHERE CoTipoPresupuestoID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @CoTipoPresupuestoClave_ = @ClaveNoAsignado and @CoTipoPresupuestoClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CoTipoPresupuesto
			SET     CoTipoPresupuestoClave = @CoTipoPresupuestoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					CoProyectoID = @CoProyectoID,
					NivelPartida = @NivelPartida,
					NivelCalendario = @NivelCalendario,
					CfgEstatusDocumentoID = @CfgEstatusDocumentoID,
					CoTipoPresupuestoBaseID = @CoTipoPresupuestoBaseID,
					CoTipoConstruccionID = @CoTipoConstruccionID
					
			WHERE   CoTipoPresupuestoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CoTipoPresupuesto(
					CoTipoPresupuestoClave,
					Nombre,
					NombreCorto,
					CoProyectoID,
					NivelPartida,
					NivelCalendario,
					CfgEstatusDocumentoID,
					CoTipoPresupuestoBaseID,
					CoTipoConstruccionID)
			VALUES  (
					@CoTipoPresupuestoClave,
					@Nombre,
					@NombreCorto,
					@CoProyectoID,
					@NivelPartida,
					@NivelCalendario,
					@CfgEstatusDocumentoID,
					@CoTipoPresupuestoBaseID,
					@CoTipoConstruccionID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CoTipoPresupuestoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CoTipoPresupuestoClave::', @CoTipoPresupuestoClave_, ':', @CoTipoPresupuestoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'CoProyectoID::', @CoProyectoID_, ':', @CoProyectoID, ';')
				SET @logMessage = Concat(@logMessage, 'NivelPartida::', @NivelPartida_, ':', @NivelPartida, ';')
				SET @logMessage = Concat(@logMessage, 'NivelCalendario::', @NivelCalendario_, ':', @NivelCalendario, ';')
				SET @logMessage = Concat(@logMessage, 'CfgEstatusDocumentoID::', @CfgEstatusDocumentoID_, ':', @CfgEstatusDocumentoID, ';')
				SET @logMessage = Concat(@logMessage, 'CoTipoPresupuestoBaseID::', @CoTipoPresupuestoBaseID_, ':', @CoTipoPresupuestoBaseID, ';')
				SET @logMessage = Concat(@logMessage, 'CoTipoConstruccionID::', @CoTipoConstruccionID_, ':', @CoTipoConstruccionID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CoTipoPresupuesto_Listado]...';


GO
CREATE PROCEDURE [dbo].[CoTipoPresupuesto_Listado]
@CoProyectoID int,
@TipoListado varchar(10)
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoTipoPresupuesto',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('CoProyectoID::', @CoProyectoID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	IF @TipoListado = 'Minimo'
		SELECT  CoTipoPresupuestoID as ID,			CoTipoPresupuestoClave as Clave,			Nombre,
				NombreCorto,						CoProyectoID as PadreID
		FROM    CoTipoPresupuesto
		WHERE	@CoProyectoID = @CoProyectoID
		ORDER BY Nombre
	ELSE IF @TipoListado = 'Parcial' OR @TipoListado = 'Completo'
		SELECT  CoTipoPresupuestoID,			CoTipoPresupuestoClave,			Nombre,				NombreCorto,
				CoProyectoID,					NivelPartida,					NivelCalendario,	CfgEstatusDocumentoID,
				CoTipoPresupuestoBaseID,		CoTipoConstruccionID	
		FROM    CoTipoPresupuesto
		WHERE	@CoProyectoID = @CoProyectoID
		ORDER BY Nombre

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[CoTipoPresupuestoBase_Consultar]...';


GO
CREATE PROCEDURE [dbo].[CoTipoPresupuestoBase_Consultar]
@CoTipoPresupuestoBaseID int
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoTipoPresupuestoBase',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@CoTipoPresupuestoBaseClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(80) = '',			
		@NombreCorto_ varchar(12) = '',
		@CoTipoConstruccionID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @CoTipoPresupuestoBaseID
	SELECT  @CoTipoPresupuestoBaseClave_ = CoTipoPresupuestoBaseClave,	@Nombre_ = Nombre,		@NombreCorto_ = NombreCorto,
			@CoTipoConstruccionID_ = CoTipoConstruccionID
	FROM    CoTipoPresupuestoBase
	WHERE   CoTipoPresupuestoBaseID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitcora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CoTipoPresupuestoBaseID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitcora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as CoTipoPresupuestoBaseID,		@CoTipoPresupuestoBaseClave_ as CoTipoPresupuestoBaseClave,	
			@Nombre_ as Nombre,								@NombreCorto_ as NombreCorto,
			@CoTipoConstruccionID_ as CoTipoConstruccionID
	

ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[CoTipoPresupuestoBase_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[CoTipoPresupuestoBase_Eliminar]
@CoTipoPresupuestoBaseID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CoTipoPresupuestoBase',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CoTipoPresupuestoBaseID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(CoTipoPresupuestoBaseClave,'')
	  FROM	CoTipoPresupuestoBase WHERE CoTipoPresupuestoBaseID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    CoTipoPresupuestoBase
		WHERE   CoTipoPresupuestoBaseID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CoTipoPresupuestoBaseID::', @CoTipoPresupuestoBaseID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @CoTipoPresupuestoBaseID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[CoTipoPresupuestoBase_Guardar]...';


GO

CREATE PROCEDURE [dbo].[CoTipoPresupuestoBase_Guardar]
@CoTipoPresupuestoBaseID int,
@CoTipoPresupuestoBaseClave varchar(10) = null,
@Nombre varchar(80) = null,
@NombreCorto varchar(12) = null,
@CoTipoConstruccionID int

-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'CoTipoPresupuestoBase',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CoTipoPresupuestoBaseClave_ nvarchar(10) = '',
		@CoTipoPresupuestoBaseID_ int = @CoTipoPresupuestoBaseID,
		@Nombre_ nvarchar(80) = '',			
		@NombreCorto_ varchar(12) = '',
		@CoTipoConstruccionID_ int = 0
		

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @CoTipoPresupuestoBaseID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@CoTipoPresupuestoBaseClave_ = IsNull(CoTipoPresupuestoBaseClave,''),
				@CoTipoPresupuestoBaseID_ = IsNull(CoTipoPresupuestoBaseID,0),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@CoTipoConstruccionID_ = ISNULL(CoTipoConstruccionID,0)
		   FROM	CoTipoPresupuestoBase WHERE CoTipoPresupuestoBaseID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @CoTipoPresupuestoBaseClave_ = @ClaveNoAsignado and @CoTipoPresupuestoBaseClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  CoTipoPresupuestoBase
			SET     CoTipoPresupuestoBaseClave = @CoTipoPresupuestoBaseClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					CoTipoConstruccionID = @CoTipoConstruccionID

			WHERE   CoTipoPresupuestoBaseID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO CoTipoPresupuestoBase(
					CoTipoPresupuestoBaseClave,
					Nombre,
					NombreCorto,
					CoTipoConstruccionID)
			VALUES  (
					@CoTipoPresupuestoBaseClave,
					@Nombre,
					@NombreCorto,
					@CoTipoConstruccionID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CoTipoPresupuestoBaseID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CoTipoPresupuestoBaseClave::', @CoTipoPresupuestoBaseClave_, ':', @CoTipoPresupuestoBaseClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'CoTipoConstruccionID::', @CoTipoConstruccionID_, ':', @CoTipoConstruccionID, ';')


				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[CoTipoPresupuestoBase_Listado]...';


GO
CREATE PROCEDURE [dbo].[CoTipoPresupuestoBase_Listado]
@TipoListado varchar(10)
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CoTipoPresupuestoBase',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitcora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitcora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	IF @TipoListado = 'Minimo'
		SELECT  CoTipoPresupuestoBaseID as ID,			CoTipoPresupuestoBaseClave as Clave,			Nombre,
				NombreCorto,							CoTipoConstruccionID as PadreID
		FROM    CoTipoPresupuestoBase
		ORDER BY Nombre
	ELSE IF @TipoListado = 'Parcial' OR @TipoListado = 'Completo'
		SELECT  CoTipoPresupuestoBaseID,				CoTipoPresupuestoBaseClave,					Nombre,				
				NombreCorto,							CoTipoConstruccionID
		FROM    CoTipoPresupuestoBase
		ORDER BY Nombre

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[EspCiudad_Consultar]...';


GO


CREATE PROCEDURE [dbo].[EspCiudad_Consultar]
@EspCiudadID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspCiudad',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@EspCiudadClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@EspCiudadID_ int = @EspCiudadID,
		@MunicipioID_ int = 0 

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @EspCiudadID
	SELECT  @EspCiudadID_=EspCiudadID,			@EspCiudadClave_=EspCiudadClave,
			@Nombre_=Nombre,					@NombreCorto_ = NombreCorto, 
			@MunicipioID_ = EspMunicipioID 
	FROM    EspCiudad
	WHERE   EspCiudadID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('EspBancoID::', @EspCiudadID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as AuxBancoID,					@EspCiudadClave_ as AuxBancoClave,	
			@Nombre_ as Nombre,								@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[EspCiudad_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[EspCiudad_Eliminar]
@EspCiudadID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspCiudad',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @EspCiudadID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(EspCiudadClave,'')
	  FROM	EspCiudad WHERE EspCiudadID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    EspCiudad
		WHERE   EspCiudadID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('EspBancoID::', @EspCiudadID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[EspCiudad_Guardar]...';


GO


CREATE PROCEDURE [dbo].[EspCiudad_Guardar]
@EspCiudadID int,
@EspCiudadClave varchar(6),
@Nombre varchar(50),
@NombreCorto varchar(15),
@EspMunicipioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspCiudad',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@EspCiudadClave_	nvarchar(4) = '',
		@Nombre_			nvarchar(30) = '',			
		@NombreCorto_		varchar(10) = '',
		@EspCiudadID_		int = @EspCiudadID,
		@EspMunicipioID_	int = 0 

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @EspCiudadID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@EspCiudadClave_ = IsNull(EspCiudadClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@EspCiudadID_ = IsNull(EspCiudadID,0),
				@EspMunicipioID_ = ISNULL(EspMunicipioID, 0)
		   FROM	EspCiudad WHERE EspCiudadID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  EspCiudad
			SET     EspCiudadClave = @EspCiudadClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					EspMunicipioID = @EspMunicipioID
			WHERE   EspCiudadID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO EspCiudad(
					EspCiudadClave,
					Nombre,
					NombreCorto,
					EspMunicipioID)
			VALUES  (
					@EspCiudadClave,
					@Nombre,
					@NombreCorto,
					@EspMunicipioID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @EspCiudadID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('EspCiudadClave::', @EspCiudadClave_, ':', @EspCiudadClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END

		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[EspCiudad_Listado]...';


GO
CREATE PROCEDURE [dbo].[EspCiudad_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'EspCiudad',	
		@Operacion				nvarchar(20) = 'List', 
		@logMessage				varchar(Max) = '',
		@isChangeBeLogged		bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar]		 @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  EspCiudadID AS ID,					EspCiudadClave AS Clave,
				Nombre,								NombreCorto,
				0 as PadreID
		FROM    EspCiudad
		ORDER BY EspCiudadClave
	ELSE
		SELECT  *
		FROM    EspCiudad
		ORDER BY EspCiudadClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[EspCiudad_ListadoMunicipioID]...';


GO

CREATE  PROCEDURE [dbo].[EspCiudad_ListadoMunicipioID]
@MunicipioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'EspCiudad',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT	 a.*
	FROM	 EspCiudad a 
	WHERE	 a.EspMunicipioID = @MunicipioID
	ORDER BY a.Nombre

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[EspCiudad_ListadoPaisID]...';


GO


CREATE PROCEDURE [dbo].[EspCiudad_ListadoPaisID]
@espPaisID INT = NULL
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'EspCiudad',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT c.EspCiudadID,c.EspCiudadClave, c.Nombre, c.NombreCorto, c.EspMunicipioID,c.Nombre as NombreCompleto from EspCiudad c
	left outer join EspMunicipio m on c.EspMunicipioID = m.EspMunicipioID
	left outer join EspEstado e on m.EspEstadoID = e.EspEstadoID
	left outer join EspPais p on e.EspPaisID = p.EspPaisID
	WHERE e.EspPaisID = @espPaisID
	order by EspCiudadID

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[EspColonia_Consultar]...';


GO


CREATE PROCEDURE [dbo].[EspColonia_Consultar]
@EspColoniaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspColonia',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@EspColoniaClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@EspColoniaID_ int = @EspColoniaID,
		@TipoAsentamientoID_  int = 0,
		@CiudadID int = 0,
		@CP_ int = 0
SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @EspColoniaID
	SELECT  @EspColoniaID_ = EspColoniaID,		@EspColoniaClave_ = EspColoniaClave,					@Nombre_ = Nombre,
			@NombreCorto_ = NombreCorto,		@TipoAsentamientoID_ = CfgTipoAsentamientoID,			@CiudadID = EspCiudadID,
			@CP_ = EspCP
	FROM    EspColonia
	WHERE   EspColoniaID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('EspColoniaID::', @EspColoniaID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @EspColoniaID_ as ColoniaID,		@EspColoniaClave_ as ColoniaClave,					@Nombre_ as Nombre,
			@NombreCorto_ as NombreCorto,	@TipoAsentamientoID_ as TipoAsentamientoID,		@CiudadID as CiudadID,
			@CP_ as CP
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[EspColonia_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[EspColonia_Eliminar]
@EspColoniaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspColonia',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @EspColoniaID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(EspColoniaClave,'')
	  FROM	EspColonia WHERE EspColoniaID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    EspColonia
		WHERE   EspColoniaID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('EspColoniaID::', @EspColoniaID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[EspColonia_Guardar]...';


GO


CREATE PROCEDURE [dbo].[EspColonia_Guardar]
@EspColoniaID int,
@EspColoniaClave varchar(7),
@Nombre varchar(60),
@NombreCorto varchar(15),
@TipoAsentamientoID int,
@CiudadID int,
@CP int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspColonia',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@EspColoniaID_ int = @EspColoniaID,
		@EspColoniaClave_ varchar(7) = '',
		@Nombre_ varchar(60) = '',
		@NombreCorto_ varchar(15) = '',
		@TipoAsentamientoID_ int = 0,
		@CiudadID_ int = 0,
		@CP_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @EspColoniaID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@EspColoniaID_  =		IsNull(EspColoniaID,''),
				@EspColoniaClave_ =		IsNull(EspColoniaClave,''),
				@Nombre_ =				IsNull(Nombre,''),
				@NombreCorto_ =			IsNull(NombreCorto,''),
				@TipoAsentamientoID_ =	IsNull(CfgTipoAsentamientoID,''),
				@CiudadID_ =			IsNull(EspCiudadID,''),
				@CP_ =					IsNull(EspCP,'')
		   FROM	EspColonia WHERE EspColoniaID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  EspColonia
			SET     EspColoniaClave = @EspColoniaClave,				Nombre = @Nombre,			NombreCorto = @NombreCorto,	
					CfgTipoAsentamientoID = @TipoAsentamientoID,	EspCiudadID = @CiudadID,	EspCP = @CP
			WHERE   EspColoniaID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO EspColonia(
					EspColoniaID,
					EspColoniaClave,
					Nombre,
					NombreCorto,
					CfgTipoAsentamientoID,
					EspCiudadID,
					EspCP)
			VALUES  (
					@EspColoniaID,
					@EspColoniaClave,
					@Nombre,
					@NombreCorto,
					@TipoAsentamientoID,
					@CiudadID,
					@CP)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @EspColoniaID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('EspColoniaClave::', @EspColoniaClave_, ':', @EspColoniaClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END

		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[EspColonia_Listado]...';


GO


CREATE PROCEDURE [dbo].[EspColonia_Listado]
  -- Parámetros para Bitácora
	 @UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspColonia',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  EspColoniaID,		EspColoniaClave,		Nombre,
			NombreCorto,		CfgTipoAsentamientoID,	EspCiudadID, EspCP
	FROM    EspColonia
	ORDER BY EspColoniaClave

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[EspColonia_ListadoCiudadID]...';


GO


CREATE PROCEDURE [dbo].[EspColonia_ListadoCiudadID]
@EspCiudadID INT = NULL
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspColonia',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	select max(ciu.EspMunicipioID)as EspMunicipioID, Max(m.Nombre) as MunicipioNombre,max(m.EspEstadoID) as EspEstadoID,
	max(e.Nombre) as EstadoNombre, max(c.EspColoniaID) as ColoniaID,max(c.Nombre) as NombreColonia,
	max(c.EspCP) as EspCP,max(c.EspCiudadID) as EspCiudadID
	FROM			EspCP cod
	LEFT OUTER JOIN EspCiudad	 ciu ON cod.EspCiudadID = ciu.EspCiudadID
	LEFT OUTER JOIN EspMunicipio m ON ciu.EspMunicipioID = m.EspMunicipioID
	LEFT OUTER JOIN EspEstado	 e ON m.EspEstadoID = e.EspEstadoID
	LEFT OUTER JOIN EspColonia	 c on cod.EspCP = c.EspCP
	where c.EspCiudadID=@EspCiudadID

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[EspColonia_ListadoCP]...';


GO


CREATE PROCEDURE [dbo].[EspColonia_ListadoCP]
@espCP INT = NULL
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspColonia',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT MAX(cod.EspCiudadID)as CiudadID,MAX(ciu.Nombre )as CiudadNombre, MAX(ciu.EspMunicipioID)as MunicipioID,
	MAX(m.Nombre) as MunicipioNombre, MAX(e.EspEstadoID) as EstadoID,MAX(e.Nombre) as EstadoNombre,MAX(cod.EspCP)as CP
	FROM EspCP cod
		LEFT OUTER JOIN EspCiudad ciu ON cod.EspCiudadID = ciu.EspCiudadID
		LEFT OUTER JOIN EspMunicipio m ON ciu.EspMunicipioID = m.EspMunicipioID
		LEFT OUTER JOIN EspEstado e ON m.EspEstadoID = e.EspEstadoID
		LEFT OUTER JOIN EspColonia c on cod.EspCP = c.EspCP
	Where cod.EspCP = @espCP
	group by cod.EspCiudadID


	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[EspCP_Consultar]...';


GO


CREATE PROCEDURE [dbo].[EspCP_Consultar]
@CP int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspCP',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@CiudadID_ int = 0,
		@CP_ int = @CP

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @CP
	SELECT  @CP_=EspCP,@CiudadID_=EspCiudadID
	FROM    EspCP
	WHERE   EspCP = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('CpID::', @CP, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as CP,					@CiudadID_ as CiudadID	
			
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[EspCP_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[EspCP_Eliminar]
@CP int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspCP',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @CP
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(EspCP,'')
	  FROM	EspCP WHERE EspCP = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    EspCP
		WHERE   EspCP = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('CP::', @CP, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[EspCP_Guardar]...';


GO


CREATE PROCEDURE [dbo].[EspCP_Guardar]
@CP int,
@CiudadID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspCP',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CP_ int = @CP,
		@CiudadID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAActualizar = @CP
    -- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 

	IF @IDAActualizar > 0
	BEGIN
		SELECT	@CP_ = IsNull(EspCP,''),
	 			@CiudadID_ = IsNull(EspCiudadID,'')				
		   FROM	EspCP WHERE EspCP = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  EspCP
			SET     EspCP = @CP,
					EspCiudadID = @CiudadID
			WHERE   EspCP = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO EspCP(
					EspCP,
					EspCiudadID)
			VALUES  (
					@CP,
					@CiudadID
					)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @CiudadID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CP::', @CP_, ':', @CP, ';')
				SET @logMessage = Concat(@logMessage, 'CiudadID::', @CiudadID_, ':', @CiudadID, ';')
					PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END

		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as CP
GO
PRINT N'Creando Procedimiento [dbo].[EspCP_Listado]...';


GO


CREATE PROCEDURE [dbo].[EspCP_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'EspCP',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  * FROM  EspCP	ORDER BY EspCP

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[EspCP_ListadoCiudadID]...';


GO

CREATE PROCEDURE [dbo].[EspCP_ListadoCiudadID]
	@CiudadID INT
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'EspCP',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT c.*
	FROM				EspCP c
	left outer join		EspCiudad ciu ON c.EspCiudadID=ciu.EspCiudadID
	WHERE c.EspCiudadID=@CiudadID

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[EspDomicilio_Consultar]...';


GO


CREATE PROCEDURE [dbo].[EspDomicilio_Consultar]
@EspDomicilioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspDomicilio',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@EspDomicilioID_ int = @EspDomicilioID,
		@Calle_ varchar(50) = '',
		@NumeroExterior_ varchar(20) = '',
		@NumeroInterior_ varchar(20) = '',
		@EntreCalle1_ varchar(40) = '',
		@EntreCalle2_ varchar(40) = '',
		@CodigoPostal_ int = 0,
		@EspColoniaID_ int = 0,
		@Coordenadas_ varchar(40) = '',
		@Observaciones_ varchar(100) = ''
SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @EspDomicilioID
	SELECT  EspDomicilioID = @EspDomicilioID_,				Calle =			@Calle_,			NumeroExterior =	@NumeroExterior_,
			NumeroInterior = @NumeroInterior_,				EntreCalle1 =	@EntreCalle1_,		EntreCalle2 =		@EntreCalle2_,
			CodigoPostal =	 @CodigoPostal_,				EspColoniaID =	@EspColoniaID_,		Coordenadas =		@Coordenadas_,
			Observaciones =	 @Observaciones_,				c.EspCiudadID,						c.EspMunicipioID, 
			m.EspEstadoID,										e.EspPaisID, 
			Calle + ' ' + NumeroExterior + ' ' +  c.Nombre + ' ' + e.Nombre as DomicilioCompleto
	FROM    EspDomicilio d, EspCiudad c, EspMunicipio m, EspEstado e
	WHERE   EspDomicilioID = @EspDomicilioID and d.EspCiudadID = c.EspCiudadID and c.EspMunicipioID = m.EspMunicipioID 
			and m.EspEstadoID = e.EspEstadoID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('EspDomicilioID::', @EspDomicilioID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar	 as EspDomicilioID, 		@Calle_			as Calle,				@NumeroExterior_ as NumeroExterior,
			@NumeroInterior_ as NumeroInterior,			@EntreCalle1_	as EntreCalle1,			@EntreCalle2_ as EntreCalle2,
			@CodigoPostal_	 as CodigoPostal,			@EspColoniaID_	as EspColoniaID,		@Coordenadas_ as Coordinadas, 
			@Observaciones_	 as Observaciones
			
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[EspDomicilio_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[EspDomicilio_Eliminar]
@EspDomicilioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspDomicilio',	
		@Operacion				 nvarchar(20) = 'Delete', 
		@logMessage				 varchar(Max) = '',
		@isChangeBeLogged		 bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @EspDomicilioID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;

		DELETE
		FROM    EspDomicilio
		WHERE   EspDomicilioID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('EspDomicilioID::', @EspDomicilioID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[EspDomicilio_Guardar]...';


GO


CREATE PROCEDURE [dbo].[EspDomicilio_Guardar]
@DomicilioID int,
@Calle varchar(50),
@NumeroExterior varchar(20),
@NumeroInterior varchar(20),
@EntreCalle1 varchar(40),
@EntreCalle2 varchar(40),
@CodigoPostal int,
@ColoniaID int,
@Coordenadas varchar(40) = null,
@CiudadID int,
@Observaciones varchar(100)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspDomicilio',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@Calle_ varchar(50)='',
	 	@NumeroExterior_ varchar(20)='',
		@NumeroInterior_ varchar(20)='',
		@EntreCalle1_ varchar(40)='',
		@EntreCalle2_ varchar(40)='',
		@CodigoPostal_ int=0,
		@ColoniaID_ int=0,
		@Coordenadas_ varchar(40)='',
		@CiudadID_ int=0,
		@Observaciones_ varchar(100)='',
		@DomicilioID_ int = @DomicilioID
		 
SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @DomicilioID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@Calle_ = IsNull(Calle,''),
	 			@NumeroExterior_ = IsNull(NumeroExterior,''),
				@NumeroInterior_ = IsNull(NumeroInterior,''),
				@EntreCalle1_ = IsNull(EntreCalle1,''),
				@EntreCalle2_ = IsNull(EntreCalle2,''),
				@CodigoPostal_ = IsNull(CodigoPostal,0),
				@ColoniaID_ = IsNull(EspColoniaID,0),
				@Coordenadas_ = IsNull(Coordenadas,''),
				@CiudadID_ = IsNull(EspCiudadID,0),
				@Observaciones_ = IsNull(Observaciones,''),
				@DomicilioID_ = IsNull(EspDomicilioID,0)
		   FROM	EspDomicilio WHERE EspDomicilioID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		--IF @PpalAreaClave_ = @ClaveNoAsignado and @PpalAreaClave <> @ClaveNoAsignado
		--	SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  EspDomicilio
			SET     Calle =				@Calle,
					NumeroExterior =	@NumeroExterior,
					NumeroInterior =	@NumeroInterior,
					EntreCalle1 =		@EntreCalle1,
					EntreCalle2 =		@EntreCalle2,
					CodigoPostal =		@CodigoPostal,
					EspColoniaID =		@ColoniaID,
					Coordenadas =		@Coordenadas,
					EspCiudadID =		@CiudadID,
					Observaciones =		@Observaciones
			WHERE   EspDomicilioID =	@DomicilioID
		END
		ELSE
		BEGIN        
			INSERT  INTO EspDomicilio(
					Calle,
					NumeroExterior,
					NumeroInterior,
					EntreCalle1,
					EntreCalle2,
					CodigoPostal,
					EspColoniaID,
					Coordenadas,
					EspCiudadID,
					Observaciones)
			VALUES  (
					@Calle,
					@NumeroExterior,
					@NumeroInterior,
					@EntreCalle1,
					@EntreCalle2,
					@CodigoPostal,
					@ColoniaID,
					@Coordenadas,
					@CiudadID,
					@Observaciones)
        
			SET     @DomicilioID = SCOPE_IDENTITY()
    END
	IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @DomicilioID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('Calle::', @Calle_, ':', @Calle, ';')
				SET @logMessage = Concat(@logMessage, 'NumeroExterior::', @NumeroExterior_, ':', @NumeroExterior, ';')
				SET @logMessage = Concat(@logMessage, 'NumeroInterior::', @NumeroInterior_, ':', @NumeroInterior, ';')
				SET @logMessage = Concat(@logMessage, 'EntreCalle1::', @EntreCalle1_, ':', @EntreCalle1, ';')
				SET @logMessage = Concat(@logMessage, 'EntreCalle2::', @EntreCalle2_, ':', @EntreCalle2, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@DomicilioID as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[EspDomicilio_Listado]...';


GO


CREATE PROCEDURE [dbo].[EspDomicilio_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'EspDomicilio',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion
	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  EspDomicilioID,Calle,NumeroExterior,NumeroInterior,EntreCalle1,EntreCalle2,CodigoPostal,EspColoniaID,Coordenadas,EspCiudadID,Observaciones
	FROM    EspDomicilio

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[EspEstado_Consultar]...';


GO


CREATE PROCEDURE [dbo].[EspEstado_Consultar]
@EspEstadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspEstado',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@EspEstadoID_	int = @EspEstadoID,	@EspEstadoClave_ varchar(6) = '',	@ClaveCURP_ varchar(3) = '',		@Clave2_ varchar(2) = '',
		@Clave3_ varchar(3) = '',		@Nombre_ varchar(50) = '',		@NombreCorto_ varchar(15)= '',	@NombreCompleto_ varchar(50) = '',
		@EspPaisID_	int = 0				

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @EspEstadoID
	SELECT  @EspEstadoID_ = EspEstadoID, @EspEstadoClave_ = EspEstadoClave, @ClaveCURP_ = ClaveCURP, @Clave2_ = Clave2, 
			@Clave3_ = Clave3, @Nombre_ = Nombre, @NombreCorto_ = NombreCorto, @NombreCompleto_ = NombreCompleto, @EspPaisID_ = EspPaisID
	FROM    EspEstado
	WHERE   EspEstadoID = @EspEstadoID


	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('EspEstadoID::', @EspEstadoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as EspEstadoID, @EspEstadoClave_ as EspEstadoClave, @ClaveCURP_ as ClaveCURP, @Clave2_ as Clave2, 
			@Clave3_ as Clave3, @Nombre_ as Nombre, @NombreCorto_ as NombreCorto, @NombreCompleto_ as NombreCompleto, @EspPaisID_ as EspPaisID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[EspEstado_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[EspEstado_Eliminar]
@EstadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspEstado',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @EstadoID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(EspEstadoClave,'')
	  FROM	EspEstado WHERE EspEstadoID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    EspEstado
		WHERE   EspEstadoID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('EspEstadoID::', @EstadoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[EspEstado_Guardar]...';


GO


CREATE PROCEDURE [dbo].[EspEstado_Guardar]
@EspEstadoID int,
@EspEstadoClave varchar(6),
@ClaveCURP varchar(3),
@Clave2 varchar(2),
@Clave3 varchar(3),
@Nombre varchar(50),
@NombreCorto varchar(15),
@NombreCompleto varchar(50),
@EspPaisID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspEstado',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@EspEstadoID_ int = @EspEstadoID,
		@EspEstadoClave_ varchar(6) = '',
		@ClaveCURP_ varchar(3) = '',
		@Clave2_ varchar(2) = '',
		@Clave3_ varchar(3) = '',
		@Nombre_ varchar(50) = '',
		@NombreCorto_ varchar(15) = '',
		@NombreCompleto_ varchar(50) = '',
		@EspPaisID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @EspEstadoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@EspEstadoID_  =		IsNull(EspEstadoID,''),
				@EspEstadoClave_ =		IsNull(EspEstadoClave,''),
				@ClaveCURP_ =		IsNull(ClaveCURP,''),
				@Clave2_ =			IsNull(Clave2,''),
				@Clave3_ =			IsNull(Clave3,''),
				@Nombre_ =			IsNull(Nombre,''),
				@NombreCorto_ =		IsNull(NombreCorto,''),
				@NombreCompleto_ =	IsNull(NombreCompleto,''),
				@EspPaisID_ = IsNull(EspPaisID,0)
		   FROM	EspEstado WHERE EspEstadoID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  EspEstado
			SET     EspEstadoClave = @EspEstadoClave,
					ClaveCURP = @ClaveCURP,
					Clave2 = @Clave2,
					Clave3 = @Clave3,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					NombreCompleto = @NombreCompleto,
					EspPaisID = @EspPaisID
			WHERE   EspEstadoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO EspEstado(
					EspEstadoID,
					EspEstadoClave,
					ClaveCURP,
					Clave2,
					Clave3,
					Nombre,
					NombreCorto,
					NombreCompleto,
					EspPaisID
					)
			VALUES  (
					@EspEstadoID,
					@EspEstadoClave,
					@ClaveCURP,
					@Clave2,
					@Clave3,
					@Nombre,
					@NombreCorto,
					@NombreCompleto,
					@EspPaisID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @EspEstadoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('EstadoClave::', @EspEstadoClave_, ':', @EspEstadoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END

		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[EspEstado_Listado]...';


GO


CREATE PROCEDURE [dbo].[EspEstado_Listado]
-- Parámetros para Bitácora
	 @UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspEstado',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  EspEstadoID,EspEstadoClave,Clave2,Clave3,Nombre,NombreCorto,NombreCompleto,EspPaisID
	FROM    EspEstado order by EspEstadoClave

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[EspEstado_ListadoPaisID]...';


GO
CREATE PROCEDURE [dbo].[EspEstado_ListadoPaisID]
@EspPaisID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspEstado',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT	a.*
	FROM	EspEstado a 
	WHERE	a.EspPaisID = @EspPaisID
	ORDER	BY a.Nombre

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[EspFactura_Consultar]...';


GO
CREATE PROCEDURE [dbo].[EspFactura_Consultar]
@EspFacturaID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'EspFactura',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@UUID_ nvarchar(10) = '',
		@RFC_ nvarchar(60) = '',
		@Serie_ varchar(10) = '',
		@Folio_ int = 0,
		@Importe_ decimal = 0,
		@Fecha_ dateTime = GetDate(),
		@LinkXML_ varchar(250) = '',
		@LinkPDF_ varchar(250) = '',
		@EstatusFactura_ char(1) = '',
		@MetodoPago_ varchar(4) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @EspFacturaID
	/************* FIN COPY 1  *********************/
	SELECT  @UUID_ = UUID,			@RFC_ = RFC,			@Serie_ = Serie,
			@Folio_ = Folio,		@Importe_ = Importe,	@Fecha_ = Fecha,
			@LinkXML_ = LinkXML,	@LinkPDF_ = LinkPDF,	@EstatusFactura_ = EstatusFactura,
			@MetodoPago_ = MetodoPago
	FROM    EspFactura
	WHERE   EspFacturaID = @IDAConsultar

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('EspFacturaID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as EspFacturaID,					@UUID_ as UUID,			
			@RFC_ as RFC,									@Serie_ as Serie,
			@Importe_ as Importe,							@Fecha_ as Fecha,
			@LinkXML_ as LinkXML,							@LinkPDF_ as LinkPDF,	
			@EstatusFactura_ as EstatusFactura,				@MetodoPago_ as MetodoPago
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[EspFactura_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[EspFactura_Eliminar]
@EspFacturaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'EspFactura',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @EspFacturaID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
/*	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(EspFacturaClave,'')
	  FROM	EspFactura WHERE EspFacturaID = @IDABorrar 
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END 
	ELSE */
	BEGIN
		DELETE
		FROM    EspFactura
		WHERE   EspFacturaID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('EspFacturaID::', @EspFacturaID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @EspFacturaID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[EspFactura_Guardar]...';


GO
CREATE PROCEDURE [dbo].[EspFactura_Guardar]
@EspFacturaID int,
@UUID varchar(50) = null,
@RFC varchar(20) = null,
@Serie varchar(10) = null,
@Folio int,
@Importe decimal(18,2),
@Fecha datetime,
@LinkXML varchar(250),
@LinkPDF varchar(250),
@EstatusFactura char(1),
@MetodoPago varchar(4)
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'EspFactura',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@UUID_ nvarchar(10) = '',
		@RFC_ nvarchar(60) = '',			
		@Serie_ varchar(10) = '',
		@Folio_ int = 0,
		@Importe_ decimal(18,2) = 0,
		@Fecha_ datetime = GetDate(),
		@LinkXML_ varchar(250) = '',
		@LinkPDF_ varchar(250) = '',
		@EstatusFactura_ char(1) = '',
		@EspFacturaID_ int = @EspFacturaID,
		@MetodoPago_ varchar(4) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @EspFacturaID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
	/*	-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;  */
		-- Lee Valores anteriores para Bitácora
		SELECT	@UUID_ = IsNull(UUID,''),
	 			@RFC_ = IsNull(RFC,''),
				@Serie_ = IsNull(Serie,''),
				@Folio_ = IsNull(Folio,0),
				@Importe_ = IsNull(Importe,0),
				@Fecha_ = IsNull(Fecha,GetDate()),
				@LinkXML_ = IsNull(LinkXML,''),
				@LinkPDF_ = IsNull(LinkPDF,''),
				@EstatusFactura_ = IsNull(EstatusFactura,''),
				@EspFacturaID_ = IsNull(EspFacturaID,0),
				@MetodoPago_ = IsNull(MetodoPago,'')
		   FROM	EspFactura WHERE EspFacturaID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
	/*	-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @UUID_ = @ClaveNoAsignado and @UUID <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.'; */
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  EspFactura
			SET     UUID = @UUID,
					RFC = @RFC,
					Serie = @Serie,
					Folio = @Folio,
					Importe = @Importe,
					Fecha = @Fecha,
					LinkXML = @LinkXML,
					LinkPDF = @LinkPDF,
					EstatusFactura = @EstatusFactura,
					MetodoPago = @MetodoPago
			WHERE   EspFacturaID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO EspFactura(
					UUID,
					RFC,
					Serie,
					Folio,
					Importe,
					Fecha,
					LinkXML,
					LinkPDF,
					EstatusFactura,
					MetodoPago)
			VALUES  (
					@UUID,
					@RFC,
					@Serie,
					@Folio,
					@Importe,
					@Fecha,
					@LinkXML,
					@LinkPDF,
					@EstatusFactura,
					@MetodoPago)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @EspFacturaID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('UUID::', @UUID_, ':', @UUID, ';')
				SET @logMessage = Concat(@logMessage, 'RFC::', @RFC_, ':', @RFC, ';')
				SET @logMessage = Concat(@logMessage, 'Serie::', @Serie_, ':', @Serie, ';')
				SET @logMessage = Concat(@logMessage, 'Folio::', @Folio_, ':', @Folio, ';')
				SET @logMessage = Concat(@logMessage, 'Fecha::', @Fecha_, ':', @Fecha, ';')
				SET @logMessage = Concat(@logMessage, 'Importe::', @Importe_, ':', @Importe, ';')
				SET @logMessage = Concat(@logMessage, 'LinkXML::', @LinkXML_, ':', @LinkXML, ';')
				SET @logMessage = Concat(@logMessage, 'LinkPDF::', @LinkPDF_, ':', @LinkPDF, ';')
				SET @logMessage = Concat(@logMessage, 'EstatusFactura::', @EstatusFactura_, ':', @EstatusFactura, ';')
				SET @logMessage = Concat(@logMessage, 'MetodoPago::', @MetodoPago_, ':', @MetodoPago, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[EspFactura_Validar]...';


GO
CREATE PROCEDURE [dbo].[EspFactura_Validar]
@UUID varchar(50)
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
-- OJO PVP 2022-06-18 LA VALIDACIÓN NO ES NECESARIAMENTE CON EL ID, EN ESTE CASO ES CON EL UUID
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'EspFactura',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@UUID_ nvarchar(10) = '',
		@RFC_ nvarchar(60) = '',			
		@Serie_ varchar(10) = '',
		@Folio_ int = 0,
		@Importe_ decimal = 0,
		@Fecha_ dateTime = GetDate(),
		@LinkXML_ varchar(250) = '',
		@LinkPDF_ varchar(250) = '',
		@EstatusFactura_ char(1) = '',
		@MetodoPago_ varchar(4) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	--SET @IDAConsultar = @EspFacturaID
	/************* FIN COPY 1  *********************/
	SELECT  @UUID_ = UUID,			@RFC_ = RFC,			@Serie_ = Serie,
			@Folio_ = Folio,		@Importe_ = Importe,	@Fecha_ = Fecha,
			@LinkXML_ = LinkXML,	@LinkPDF_ = LinkPDF,	@EstatusFactura_ = EstatusFactura,
			@MetodoPago_ = MetodoPago,						@IDAConsultar = EspFacturaID
	FROM    EspFactura
	WHERE   UUID = @UUID

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> ESTÁ CORRECTO
	IF @@RowCount = 0
		SET @IDAConsultar = 0
	ELSE
	BEGIN 
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('UUID::', @UUID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as EspFacturaID,					@UUID_ as UUID,			
			@RFC_ as RFC,									@Serie_ as Serie,
			@Importe_ as Importe,							@Fecha_ as Fecha,
			@LinkXML_ as LinkXML,							@LinkPDF_ as LinkPDF,
			@EstatusFactura_ as EstatusFactura,				@MetodoPago_ as MetodoPago
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[EspMunicipio_Consultar]...';


GO


CREATE PROCEDURE [dbo].[EspMunicipio_Consultar]
@EspMunicipioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspMunicipio',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@EspMunicipioClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@EspMunicipioID_ int = @EspMunicipioID,
		@EstadoID_ int = 0 

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @EspMunicipioID
	SELECT  @EspMunicipioID_ = EspMunicipioID, @EspMunicipioClave_ = EspMunicipioClave, @Nombre_ = Nombre,@NombreCorto_ = NombreCorto,@EstadoID_ = EspEstadoID
	FROM    EspMunicipio
	WHERE   EspMunicipioID = @EspMunicipioID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('MunicipioID::', @EspMunicipioID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as MunicipioID,					@EspMunicipioClave_ as AuxBancoClave,	@EstadoID_ as EstadoID,
			@Nombre_ as Nombre,								@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[EspMunicipio_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[EspMunicipio_Eliminar]
@MunicipioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspMunicipio',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @MunicipioID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(EspMunicipioClave,'')
	  FROM	EspMunicipio WHERE EspMunicipioID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    EspMunicipio
		WHERE   EspMunicipioID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('EspMunicipioID::', @MunicipioID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[EspMunicipio_Guardar]...';


GO


CREATE PROCEDURE [dbo].[EspMunicipio_Guardar]
@EspMunicipioID int,
@EspMunicipioClave varchar(6),
@Nombre varchar(50),
@NombreCorto varchar(15),
@EspEstadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspMunicipio',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@EspMunicipioClave_ nvarchar(4) = '',
		@Nombre_ nvarchar(30) = '',			
		@NombreCorto_ varchar(10) = '',
		@EspMunicipioID_ int = @EspMunicipioID,
		@EspEstadoID_ int = 0 

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @EspMunicipioID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@EspMunicipioClave_ = IsNull(EspMunicipioClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@EspMunicipioID_ = IsNull(EspMunicipioID,0),
				@EspEstadoID_ = IsNull(EspEstadoID, 0)
		   FROM	EspMunicipio WHERE EspMunicipioID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  EspMunicipio
			SET     EspMunicipioClave = @EspMunicipioClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					EspEstadoID = @EspEstadoID
			WHERE   EspMunicipioID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO EspMunicipio(
					EspMunicipioClave,
					Nombre,
					NombreCorto,
					EspEstadoID)
			VALUES  (
					@EspMunicipioClave,
					@Nombre,
					@NombreCorto,
					@EspEstadoID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @EspMunicipioID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('BancoClave::', @EspMunicipioClave_, ':', @EspMunicipioClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END

		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[EspMunicipio_Listado]...';


GO


CREATE PROCEDURE [dbo].[EspMunicipio_Listado]
-- Parámetros para Bitácora
	 @UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspMunicipio',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT		EspMunicipioID,
				EspMunicipioClave,
				Nombre,
				NombreCorto,EspEstadoID
	FROM		EspMunicipio
	ORDER BY	EspMunicipioClave

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[EspMunicipio_ListadoEstadoID]...';


GO

CREATE PROCEDURE [dbo].[EspMunicipio_ListadoEstadoID]
@EspEstadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspMunicipio',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT	a.*
	FROM	EspMunicipio a 
	WHERE	a.EspEstadoID = @EspEstadoID
	ORDER	BY a.Nombre

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[EspPais_Consultar]...';


GO


CREATE PROCEDURE [dbo].[EspPais_Consultar]
@EspPaisID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspPais',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@EspPaisClave_				nvarchar(10) = '',
		@Nombre_				nvarchar(60) = '',			
		@NombreCorto_			varchar(10) = '',
		@EspPaisID_				int = @EspPaisID,
		@CodigoAlfa2_			varchar(2) = '',
		@CodigoAlfa3_			varchar(3) = '',
		@ClaveTelefonicaPais_	varchar(15) = ''
SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @EspPaisID
	SELECT  @EspPaisID_ = EspPaisID,@EspPaisClave_ = EspPaisClave,@Nombre_ = Nombre,
			@NombreCorto_ = NombreCorto,@CodigoAlfa2_ = CodigoAlfa2,@CodigoAlfa3_ = CodigoAlfa3,@ClaveTelefonicaPais_ = ClaveTelefonicaPais
	FROM    EspPais
	WHERE   EspPaisID = @EspPaisID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('EspPaisID::', @EspPaisID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as PaisID,					@EspPaisClave_ as AuxBancoClave,	
			@EspPaisID_  as PaisID,						@CodigoAlfa2_  as CodigoAlfa2,
			@CodigoAlfa3_ as CodigoAlfa2,				@ClaveTelefonicaPais_ as ClaveTelefonicaPais,
			@Nombre_ as Nombre,							@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[EspPais_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[EspPais_Eliminar]
@EspPaisID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspPais',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @EspPaisID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(EspPaisClave,'')
	  FROM	EspPais WHERE EspPaisID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    EspPais
		WHERE   EspPaisID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('PaisID::', @EspPaisID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[EspPais_Guardar]...';


GO


CREATE PROCEDURE [dbo].[EspPais_Guardar]
@EspPaisID int,
@EspPaisClave varchar(6) = null,
@Nombre varchar(50),
@NombreCorto varchar(15),
@CodigoAlfa2 varchar(2),
@CodigoAlfa3 varchar(3),
@ClaveTelefonicaPais varchar(15)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora	nvarchar(100) = 'EspPais',	
		@Operacion				nvarchar(20) = '', 
		@logMessage				varchar(Max) = '',
		@isChangeBeLogged		bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@EspPaisClave_	nvarchar(4) = '',
		@Nombre_		nvarchar(30) = '',			
		@NombreCorto_	varchar(10) = '',
		@EspPaisID_		int = @EspPaisID,
		@CodigoAlfa2_	varchar(2) = '',
		@CodigoAlfa3_	varchar(3) = '',
		@ClaveTelefonicaPais_ varchar(15) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @EspPaisID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@EspPaisClave_ =		IsNull(EspPaisClave,''),
	 			@Nombre_ =				IsNull(Nombre,''),
				@NombreCorto_ =			IsNull(NombreCorto,''),
				@EspPaisID_ =			IsNull(EspPaisID,0),
				@CodigoAlfa2 =			IsNull(CodigoAlfa2,0),
				@CodigoAlfa3 =			IsNull(CodigoAlfa3,0),
				@ClaveTelefonicaPais =	IsNull(ClaveTelefonicaPais,0)
		   FROM	EspPais WHERE EspPaisID = @IDAActualizar
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  EspPais
			SET     EspPaisClave = @EspPaisClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					CodigoAlfa2 = @CodigoAlfa2,
					CodigoAlfa3 = @CodigoAlfa3,
					ClaveTelefonicaPais = @ClaveTelefonicaPais
			WHERE   EspPaisID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO EspPais(
					EspPaisClave,
					Nombre,
					NombreCorto,
					EspPaisID,
					CodigoAlfa2,
					CodigoAlfa3,
					ClaveTelefonicaPais)
			VALUES  (
					@EspPaisClave,
					@Nombre,
					@NombreCorto,
					@EspPaisID,
					@CodigoAlfa2,
					@CodigoAlfa3,
					@ClaveTelefonicaPais
					)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @EspPaisID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PaisClave::', @EspPaisClave_, ':', @EspPaisClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END

		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[EspPais_Listado]...';


GO


CREATE PROCEDURE [dbo].[EspPais_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspPais',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  EspPaisID,EspPaisClave,Nombre,NombreCorto,CodigoAlfa2,CodigoAlfa3,ClaveTelefonicaPais
	FROM    EspPais
	ORDER BY EspPaisClave

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[EspPais_ListadoClaveTelefonica]...';


GO


CREATE PROCEDURE [dbo].[EspPais_ListadoClaveTelefonica]
@ClaveTelefonicaPais varchar(10)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspPais',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT EspPaisID
	FROM   EspPais 
	WHERE  ClaveTelefonicaPais = @ClaveTelefonicaPais

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[EspPais_ListadoClaveTelefonicaPais]...';


GO
CREATE PROCEDURE [dbo].[EspPais_ListadoClaveTelefonicaPais]
@ClaveTelefonicaPais varchar(10)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspPais',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT *
	FROM   EspPais 
	WHERE  ClaveTelefonicaPais = @ClaveTelefonicaPais

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[EspPersona_Consultar]...';


GO


CREATE PROCEDURE [dbo].[EspPersona_Consultar]
@EspPersonaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspPersona',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@EspPersonaID_ int = @EspPersonaID,
		@FisicaMoral_ char(1) = '',
		@NombreComercial_ nvarchar(120) = '',
		@RazonSocial_ nvarchar(120) = '',
		@Nombre_ nvarchar(35) = '',
		@ApellidoPaterno_ nvarchar(30) = '',
		@ApellidoMaterno_ nvarchar(30) = '',
		@RFC_ nvarchar(13) = '',
		@CURP_ nvarchar(18) = '',
		@SistemaSexoID_ int = 0,
		@FechaNacimiento_ date = null,
		@EspCiudadNacimientoID_ int = 0,
		@AuxEstadoCivilID_ int = 0,
		@CasadoCivil_ bit,
		@CasadoIglesia_ bit,
		@Iniciales_ varchar(6) = '',
		@SobreNombre_ varchar(25) = '',
		@NombreCorto_ varchar(25) ='',
		@EspDomicilioIDFacturacion_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @EspPersonaID
	
	SELECT  @EspPersonaID_ = EspPersonaID,			@FisicaMoral_ = FisicaMoral,			@NombreComercial_ = NombreComercial,	@RazonSocial_ = RazonSocial,
			@Nombre_ = Nombre,						@ApellidoPaterno_ = ApellidoPaterno,	@ApellidoMaterno_ = ApellidoMaterno,	@RFC_ = RFC,
			@CURP_ = CURP,							@SistemaSexoID_ = SistemaSexoID,		@FechaNacimiento_ = FechaNacimiento,	@EspCiudadNacimientoID_ = EspCiudadNacimientoID,
			@AuxEstadoCivilID_ = AuxEstadoCivilID,	@CasadoCivil_ = CasadoCivil,			@CasadoIglesia_ = CasadoIglesia,		@Iniciales_ = Iniciales,
			@SobreNombre_ = SobreNombre,			@NombreCorto_ = NombreCorto,            @EspDomicilioIDFacturacion_ = EspDomicilioIDFacturacion
	FROM    EspPersona
	WHERE   EspPersonaID = @EspPersonaID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('EspPersonaID::', @EspPersonaID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar		as PaisID,				@FisicaMoral_	  as FisicaMoral,			@NombreComercial_		as NombreComercial,
			@RazonSocial_		as RazonSocial,			@Nombre_		  as nombre,				@ApellidoPaterno_		as ApellidoPaterno,
			@ApellidoMaterno_	as ApellidoMaterno,		@RFC_			  as RFC,					@CURP_				    as CURP,
			@SistemaSexoID_		as SexoID,				@FechaNacimiento_ as FechaNacimiento,		@EspCiudadNacimientoID_ as CiudadNacimientoID,
			@AuxEstadoCivilID_	as EstadoCivilID,		@CasadoCivil_     as CasaCivil,				@CasadoIglesia_			as CasadoIglesia,
			@Iniciales_			as Iniciales,			@SobreNombre_     as SobreNombre,			@NombreCorto_			as NombreCorto,
			@EspDomicilioIDFacturacion_ as EspDomicilioIDFacturacion
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[EspPersona_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[EspPersona_Eliminar]
@EspPersonaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspPersona',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @EspPersonaID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	
		DELETE
		FROM    EspPersona
		WHERE   EspPersonaID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('EspPersonaID::', @EspPersonaID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[EspPersona_Listado]...';


GO


CREATE PROCEDURE [dbo].[EspPersona_Listado]
@TipoListado varchar(10) = ''
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspPersona',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	IF @TipoListado = 'Minimo'
		SELECT  EspPersonaID AS ID,						'' AS Clave,
				CASE WHEN FisicaMoral = 'F' THEN Nombre + ' ' + ApellidoPaterno + ' ' + ApellidoMaterno 
											ELSE NombreComercial END AS Nombre,
				CASE WHEN FisicaMoral = 'F' THEN SobreNombre ELSE NombreCorto END AS NombreCorto,
				0 AS PadreID
		FROM    EspPersona
		ORDER BY 3
	ELSE
		SELECT  EspPersonaID,FisicaMoral,NombreComercial,RazonSocial,Nombre,ApellidoPaterno,ApellidoMaterno,RFC,CURP,SistemaSexoID,FechaNacimiento,EspCiudadNacimientoID,
				AuxEstadoCivilID,CasadoCivil,CasadoIglesia,Iniciales,SobreNombre, EspDomicilioIDFacturacion
		FROM    EspPersona
		ORDER BY Nombre

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[EspPersona_ValidarUnicoCURP]...';


GO

CREATE PROCEDURE [dbo].[EspPersona_ValidarUnicoCURP]
@CURP varchar(18)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspPersona',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  P.EspPersonaID,P.FisicaMoral,P.NombreComercial,P.RazonSocial,P.Nombre,P.ApellidoPaterno,P.ApellidoMaterno,P.RFC,P.CURP,P.SistemaSexoID,P.FechaNacimiento,
		P.EspCiudadNacimientoID, P.AuxEstadoCivilID,P.CasadoCivil,P.CasadoIglesia,P.Iniciales,P.SobreNombre,P.NombreCorto,
		S.Nombre as SexoNombre, C.Nombre as CiudadNacimientoNombre, EC.Nombre as EstadoCivilNombre
	FROM EspPersona P
	inner join SistemaSexo S on P.SistemaSexoID = S.SexoID
	inner join EspCiudad C on P.EspCiudadNacimientoID = C.EspCiudadID
	inner join AuxEstadoCivil EC on P.AuxEstadoCivilID = EC.AuxEstadoCivilID
	WHERE CURP = @CURP

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[EspPersona_ValidarUnicoRFC]...';


GO


CREATE PROCEDURE [dbo].[EspPersona_ValidarUnicoRFC]
@RFC varchar(13)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspPersona',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  P.EspPersonaID,P.FisicaMoral,P.NombreComercial,P.RazonSocial,P.Nombre,P.ApellidoPaterno,P.ApellidoMaterno,P.RFC,P.CURP,P.SistemaSexoID,P.FechaNacimiento,
		P.EspCiudadNacimientoID, P.AuxEstadoCivilID,P.CasadoCivil,P.CasadoIglesia,P.Iniciales,P.SobreNombre,P.NombreCorto,
		S.Nombre as SexoNombre, C.Nombre as CiudadNacimientoNombre, EC.Nombre as EstadoCivilNombre
	FROM EspPersona P
	inner join SistemaSexo S on P.SistemaSexoID = S.SexoID
	inner join EspCiudad C on P.EspCiudadNacimientoID = C.EspCiudadID
	inner join AuxEstadoCivil EC on P.AuxEstadoCivilID = EC.AuxEstadoCivilID
	WHERE RFC = @RFC

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[EspPersonaFecha_Consultar]...';


GO
CREATE PROCEDURE [dbo].[EspPersonaFecha_Consultar]
@PersonaFechaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspPersonaFecha',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

DECLARE @Fecha_				datetime = '',
		@PersonaID_			int = 0,			
		@TipoFechaID_		int = 0,
		@Comentario_		varchar(100) = '',
		@Predeterminado_	bit = 0,
		@PersonaFechaID_	int = @PersonaFechaID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @PersonaFechaID
	SELECT  @PersonaFechaID_ = EspPersonaFechaID, @Fecha_ = Fecha, @PersonaID_ = EspPersonaID, @TipoFechaID_ = CfgTipoFechaID, @Comentario_ = Comentario, @Predeterminado_ = Predeterminado
	FROM    EspPersonaFecha
	WHERE   EspPersonaFechaID = @PersonaFechaID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('EspPersonaFechaID::', @PersonaFechaID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[EspPersonaFecha_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[EspPersonaFecha_Eliminar]
@PersonaFechaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspPersonaFecha',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @PersonaFechaID
    DELETE
    FROM    EspPersonaFecha
    WHERE   EspPersonaFechaID = @PersonaFechaID

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('EspPersonaFechaID::', @PersonaFechaID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[EspPersonaFecha_Guardar]...';


GO
CREATE PROCEDURE [dbo].[EspPersonaFecha_Guardar]
@PersonaFechaID int,
@Fecha datetime,
@PersonaID int,
@TipoFechaID int,
@Comentario varchar(100) = null,
@Predeterminado bit
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspPersonaFecha',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@Fecha_				datetime = '',
		@PersonaID_			int = 0,			
		@TipoFechaID_		int = 0,
		@Comentario_		varchar(100) = '',
		@Predeterminado_	bit = 0,
		@PersonaFechaID_	int = @PersonaFechaID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PersonaFechaID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@Fecha_ =			IsNull(Fecha,''),
	 			@PersonaID_ =		IsNull(EspPersonaID,0),
				@TipoFechaID_ =		IsNull(CfgTipoFechaID,0),
				@Comentario_ =		IsNull(Comentario,''),
				@Predeterminado_ =	IsNull(Predeterminado,0),
				@PersonaFechaID_ =	IsNull(EspPersonaFechaID,0)
		   FROM	EspPersonaFecha WHERE EspPersonaFechaID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  EspPersonaFecha
			SET     Fecha =				@Fecha,
					EspPersonaID =		@PersonaID,
					CfgTipoFechaID =	@TipoFechaID,
					Comentario =		@Comentario,
					Predeterminado =	@Predeterminado
			WHERE   EspPersonaFechaID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO EspPersonaFecha(
					Fecha,
					EspPersonaID,
					CfgTipoFechaID,
					Comentario,
					Predeterminado)
			VALUES  (
					@Fecha,
					@PersonaID,
					@TipoFechaID,
					@Comentario,
					@Predeterminado)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PersonaFechaID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('Fecha::', @Fecha_, ':', @Fecha, ';')
				SET @logMessage = Concat(@logMessage, 'PersonaID::', @PersonaID_, ':', @PersonaID, ';')
				SET @logMessage = Concat(@logMessage, 'TipoFechaID::', @TipoFechaID_, ':', @TipoFechaID, ';')
				SET @logMessage = Concat(@logMessage, 'Comentario::', @Comentario_, ':', @Comentario, ';')
				SET @logMessage = Concat(@logMessage, 'Predeterminado::', @Predeterminado_, ':', @Predeterminado, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[EspPersonaFecha_Listado]...';


GO
CREATE PROCEDURE [dbo].[EspPersonaFecha_Listado]
@PersonaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspPersonaFecha',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  EspPersonaFechaID,Fecha,EspPersonaID,CfgTipoFechaID,Comentario,Predeterminado
	FROM    EspPersonaFecha
	WHERE	EspPersonaID = @PersonaID
	ORDER BY CfgTipoFechaID

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EspPersonaFechaID::', @PersonaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

		-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[EspTelefono_Consultar]...';


GO


CREATE PROCEDURE [dbo].[EspTelefono_Consultar]
@TelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspTelefono',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @TelefonoID
	SELECT  EspTelefonoID,ClaveTelefonicaPais,NumeroTelefonico,SistemaEstatusTelefonoID,CfgTipoTelefonoID,Comentario
	FROM    EspTelefono
	WHERE   EspTelefonoID = @TelefonoID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('EspTelefonoID::', @TelefonoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[EspTelefono_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[EspTelefono_Eliminar]
@TelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspTelefono',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @TelefonoID
    DELETE
    FROM    EspTelefono
    WHERE   EspTelefonoID = @TelefonoID

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('EspTelefonoID::', @TelefonoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[EspTelefono_Guardar]...';


GO


CREATE PROCEDURE [dbo].[EspTelefono_Guardar]
--@ModificacionUsuarioID int = null,
@TelefonoID int,
@ClaveTelefonicaPais varchar(3),
@NumeroTelefonico varchar(10),
@EstatusTelefonoID int,
@CfgTipoTelefonoID int,
@Comentario varchar(100)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspTelefono',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@ClaveTelefonicaPais_ varchar(3)='',
		@NumeroTelefonico_ varchar(10)='',
		@EstatusTelefonoID_ int =0,
		@CfgTipoTelefonoID_ int =0,
		@Comentario_ varchar(100)='',
		@TelefonoID_ int = @TelefonoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @TelefonoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@ClaveTelefonicaPais_ =IsNull(ClaveTelefonicaPais,''),
				@NumeroTelefonico_ =IsNull(NumeroTelefonico,''),
				@EstatusTelefonoID_ = IsNull(SistemaEstatusTelefonoID,0),
				@CfgTipoTelefonoID_ = IsNull(CfgTipoTelefonoID,0),
				@Comentario_ =IsNull(Comentario,'')
		   FROM	EspTelefono WHERE EspTelefonoID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		--IF @PpalAreaClave_ = @ClaveNoAsignado and @PpalAreaClave <> @ClaveNoAsignado
		--	SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  EspTelefono
			SET     ClaveTelefonicaPais = @ClaveTelefonicaPais,
					NumeroTelefonico = @NumeroTelefonico,
					SistemaEstatusTelefonoID = @EstatusTelefonoID,
					CfgTipoTelefonoID = @CfgTipoTelefonoID,
					Comentario = @Comentario
			WHERE   EspTelefonoID = @TelefonoID
		END
		ELSE
		BEGIN        
			INSERT  INTO EspTelefono(
					ClaveTelefonicaPais,
					NumeroTelefonico,
					SistemaEstatusTelefonoID,
					CfgTipoTelefonoID,
					Comentario)
			VALUES  (
					@ClaveTelefonicaPais,
					@NumeroTelefonico,
					@EstatusTelefonoID,
					@CfgTipoTelefonoID,
					@Comentario)
        
			SET     @TelefonoID = SCOPE_IDENTITY()
		END
  IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @TelefonoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('ClaveTelefonicaPais::', @ClaveTelefonicaPais_, ':', @ClaveTelefonicaPais, ';')
				SET @logMessage = Concat(@logMessage, 'NumeroTelefonico::', @NumeroTelefonico_, ':', @NumeroTelefonico, ';')
				SET @logMessage = Concat(@logMessage, 'EstatusTelefonoID::', @EstatusTelefonoID_, ':', @EstatusTelefonoID, ';')
				SET @logMessage = Concat(@logMessage, 'CfgTipoTelefonoID::', @CfgTipoTelefonoID_, ':', @CfgTipoTelefonoID, ';')
				SET @logMessage = Concat(@logMessage, 'Comentario::', @Comentario_, ':', @Comentario, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[EspTelefono_Listado]...';


GO


CREATE PROCEDURE [dbo].[EspTelefono_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'EspTelefono',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  EspTelefonoID,ClaveTelefonicaPais,NumeroTelefonico,SistemaEstatusTelefonoID,CfgTipoTelefonoID,Comentario
	FROM    EspTelefono
	order by ClaveTelefonicaPais

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('BancoID::', @BancoID, ':',0, ';')
		SET @logMessage = ''
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[InvMovimientoDesglose_Consultar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[InvMovimientoDesglose_Consultar]
@InvMovimientoDesgloseID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'InvMovimientoDesglose',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@InvMovimientoDesgloseID_ int = @InvMovimientoDesgloseID,
		@InvMovimientoDetalleID_ int = 0,
		@Renglon_ int = 0,
		@CmpRequisionDetalleID_ int = 0,
		@CmpOrdenCompraDesgloseID_ int = 0,
		@CmpCompraDesgloseID_ int = 0,
		@PpalSucursalID_ int = 0,
		@PpalCentroCostoID_ int = 0,
		@PpalAreaID_ int = 0,
		@PpalAlmacenID_ int = 0,
		@PpalConceptoEgresoID_ int = 0,
		@PpalCuentaContableID_ int = 0,
		@cantidad_ float = 0,
		@InvMovimientoDesgloseReferenciaID_ int = 0 

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @InvMovimientoDesgloseID
	SELECT  InvMovimientoDesgloseID,	InvMovimientoDetalleID,		Renglon,
			CmpRequisicionDetalleID,	CmpOrdenCompraDesgloseID,	CmpCompraDesgloseID,
			PpalSucursalID,				PpalCentroCostoID,			PpalAreaID,
			PpalAlmacenID,				PpalConceptoEgresoID,		PpalCuentaContableID,
			cantidad,					InvMovimientoDesgloseReferenciaID
	FROM    InvMovimientoDesglose
	WHERE   InvMovimientoDesgloseID = @IDAConsultar

-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('InvTipoMovimientoInventarioID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @InvMovimientoDesgloseID_	as InvMovimientoDesgloseID,
			@InvMovimientoDetalleID_	as InvMovimientoDetalleID,
			@Renglon_					AS Renglon,
			@CmpRequisionDetalleID_		as CmpRequisicionDetalleID,
			@CmpOrdenCompraDesgloseID_	as CmpOrdenCompraDesgloseID,
			@CmpCompraDesgloseID_		as CmpCompraDesgloseID,
			@PpalSucursalID_			as PpalSucursalID,
			@PpalCentroCostoID_			as PpalCentroCostoID,
			@PpalAreaID_				as PpalAreaID,
			@PpalAlmacenID_				as PpalAlmacenID,
			@PpalConceptoEgresoID_		as PpalConceptoEgresoID,
			@PpalCuentaContableID_		as PpalCuentaContableID,
			@cantidad_					as cantidad,
			@InvMovimientoDesgloseReferenciaID_ as InvMovimientoDesgloseReferenciaID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[InvMovimientoDesglose_Eliminar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[InvMovimientoDesglose_Eliminar]
@InvMovimientoDesgloseID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'InvMovimientoDesglose',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''
SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

		SET @IDABorrar = @InvMovimientoDesgloseID
		DELETE
		FROM    InvMovimientoDesglose
		WHERE   InvMovimientoDesgloseID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('InvMovimientoDesgloseID::', @InvMovimientoDesgloseID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[InvMovimientoDesglose_Guardar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[InvMovimientoDesglose_Guardar]
@InvMovimientoDesgloseID int,
@InvMovimientoDetalleID int,
@Renglon int,
@CmpRequisionDetalleID int,
@CmpOrdenCompraDesgloseID int,
@CmpCompraDesgloseID int,
@PpalSucursalID int,
@PpalCentroCostoID int,
@PpalAreaID int,
@PpalAlmacenID int,
@PpalConceptoEgresoID int,
@PpalCuentaContableID int,
@cantidad float,
@InvMovimientoDesgloseReferenciaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'InvMovimientoEncabezado',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@InvMovimientoDesgloseID_ int = @InvMovimientoDesgloseID,
		@InvMovimientoDetalleID_ int = 0,
		@Renglon_ int = 0,
		@CmpRequisionDetalleID_ int = 0,
		@CmpOrdenCompraDesgloseID_ int = 0,
		@CmpCompraDesgloseID_ int = 0,
		@PpalSucursalID_ int = 0,
		@PpalCentroCostoID_ int = 0,
		@PpalAreaID_ int = 0,
		@PpalAlmacenID_ int = 0,
		@PpalConceptoEgresoID_ int = 0,
		@PpalCuentaContableID_ int = 0,
		@cantidad_ float = 0,
		@InvMovimientoDesgloseReferenciaID_ int = 0 

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @InvMovimientoDesgloseID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN

		SELECT	@InvMovimientoDesgloseID_ = IsNull(InvMovimientoDesgloseID,0),
				@InvMovimientoDetalleID_ = IsNull(InvMovimientoDetalleID,0),
				@Renglon_ =	ISNULL(Renglon, 0),
				@CmpRequisionDetalleID_ = ISNULL(CmpRequisicionDetalleID, 0),
				@CmpOrdenCompraDesgloseID_ = ISNULL(CmpOrdenCompraDesgloseID,0),
				@CmpCompraDesgloseID_ = ISNULL(CmpCompraDesgloseID,0),
				@PpalSucursalID_ = ISNull(PpalSucursalID, 0),
				@PpalCentroCostoID_ = ISNULL(PpalCentroCostoID, 0),
				@PpalAreaID_ = ISNULL(PpalAreaID, 0),
				@PpalAlmacenID_ = ISNULL(PpalAlmacenID, 0),
				@PpalConceptoEgresoID_ = ISNULL(PpalConceptoEgresoID, 0),
				@PpalCuentaContableID_ = ISNULL(PpalCuentaContableID, 0),
				@cantidad_ = ISNULL(cantidad, 0),
				@InvMovimientodesgloseID_ = IsNull(InvMovimientoDesgloseID,0)
		   FROM	InvMovimientoDesglose WHERE InvMovimientoDesgloseID = @InvMovimientoDesgloseID
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE		InvMovimientoDesglose
			SET			InvMovimientoDetalleID = @InvMovimientoDetalleID,
						Renglon = @Renglon, 
						CmpRequisicionDetalleID = @CmpRequisionDetalleID,
						CmpOrdenCompraDesgloseID = @CmpOrdenCompraDesgloseID,
						CmpCompraDesgloseID = @CmpCompraDesgloseID,
						PpalSucursalID = @PpalSucursalID,
						PpalCentroCostoID = @PpalCentroCostoID,
						PpalAreaID = @PpalAreaID,
						PpalAlmacenID =@PpalAlmacenID,
						PpalConceptoEgresoID = @PpalConceptoEgresoID,
						PpalCuentaContableID = @PpalCuentaContableID,
						cantidad = @cantidad
			WHERE		InvMovimientoDesgloseID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO InvMovimientoDesglose(
						 InvMovimientoDetalleID,
						 Renglon, 
						 CmpRequisicionDetalleID,
						 CmpOrdenCompraDesgloseID,
						 CmpCompraDesgloseID,
						 PpalSucursalID,
						 PpalCentroCostoID,
						 PpalAreaID,
						 PpalAlmacenID,
						 PpalConceptoEgresoID,
						 PpalCuentaContableID,
						 cantidad)
			VALUES  (
						@InvMovimientoDetalleID,
						@Renglon,
						@CmpRequisionDetalleID,
						@CmpOrdenCompraDesgloseID,
						@CmpCompraDesgloseID,
						@PpalSucursalID,
						@PpalCentroCostoID,
						@PpalAreaID,
						@PpalAlmacenID,
						@PpalConceptoEgresoID,
						@PpalCuentaContableID,
						@cantidad)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @InvMovimientoDesgloseID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat(@logMessage, 'InvMovimientoDetalleID::', @InvMovimientoDetalleID_, ':', @InvMovimientoDetalleID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalSucursalID::', @PpalSucursalID_, ':', @PpalSucursalID, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[InvMovimientoDesglose_Listado]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[InvMovimientoDesglose_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'InvMovimientoDesglose',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT		*	FROM		InvMovimientoDesglose

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[InvMovimientoDetalle_Consultar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[InvMovimientoDetalle_Consultar]
@InvMovimientoDetalleID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'InvMovimientoEncabezado',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@InvMovimientoDetalleID_ int = @InvMovimientoDetalleID,
		@InvMovimientoEncabezadoID_ int = 0,
		@Renglon_ int = 0,
		@PpalProductoID_ int = 0,
		@Cantidad_ int = 0,
		@AuxUnidadID_ int = 0,
		@Costo_ float = 0,
		@CantidadUnidadBase_ float = 0,
		@CmpOrdenCompraDetalleID_ int = 0,
		@CmpCompraDetalleID_ int = 0,
		@InvMovimientoDetalleReferenciaID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @InvMovimientoDetalleID
	SELECT  InvMovimientoDetalleID,		InvMovimientoEncabezadoID,		Renglon,
			PpalProductoID,				Cantidad,						AuxUnidadID,
			Costo,						CantidadUnidadBase,				CmpOrdenCompraDetalleID,
			CmpCompraDetalleID,			InvMovimientoDetalleReferenciaID
	FROM    InvMovimientoDetalle
	WHERE   InvMovimientoEncabezadoID = @IDAConsultar

-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('InvMovimientoDetalleID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @InvMovimientoDetalleID_			as InvMovimientoDetalleID,
			@InvMovimientoEncabezadoID_			as InvMovimientoEncabezadoID,
			@Renglon_							as Renglon,
			@PpalProductoID_					as PpalProductoID,
			@Cantidad_							as Cantidad,
			@AuxUnidadID_						as AuxUnidadID,
			@Costo_								as Costo,
			@CantidadUnidadBase_				as CantidadUnidadBase,
			@CmpOrdenCompraDetalleID_			as CmpOrdenCompraDetalleID,
			@CmpCompraDetalleID_				as CmpCompraDetalleID,
			@InvMovimientoDetalleReferenciaID_	as InvMovimientoDetalleReferenciaID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[InvMovimientoDetalle_Eliminar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[InvMovimientoDetalle_Eliminar]
@InvMovimientoDetalleID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'InvMovimientoDetalle',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''
SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

		SET @IDABorrar = @InvMovimientoDetalleID
		DELETE
		FROM    InvMovimientoDetalle
		WHERE   @InvMovimientoDetalleID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('InvMovimientoDetalleID::', @InvMovimientoDetalleID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[InvMovimientoDetalle_Guardar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[InvMovimientoDetalle_Guardar]
@InvMovimientoDetalleID int,
@InvMovimientoEncabezadoID int,
@Renglon int,
@PpalProductoID int,
@Cantidad int,
@AuxUnidadID int,
@Costo float,
@CantidadUnidadBase float,
@CmpOrdenCompraDetalleID int,
@CmpCompraDetalleID int,
@InvMovimientoDetalleReferenciaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS	

-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'InvMovimientoDetalle',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@InvMovimientoDetalleID_ int = @InvMovimientoDetalleID,
		@InvMovimientoEncabezadoID_ int = 0,
		@Renglon_ int = 0,
		@PpalProductoID_ int = 0,
		@Cantidad_ int = 0,
		@AuxUnidadID_ int = 0,
		@Costo_ float = 0,
		@CantidadUnidadBase_ float = 0,
		@CmpOrdenCompraDetalleID_ int = 0,
		@CmpCompraDetalleID_ int = 0,
		@InvMovimientoDetalleReferenciaID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @InvMovimientoDetalleID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN

		SELECT	@InvMovimientoDetalleID_	= ISNULL(InvMovimientoDetalleID, 0),
		@InvMovimientoEncabezadoID_			= ISNULL(InvMovimientoEncabezadoID, 0),
		@Renglon_							= ISNULL(Renglon, 0),
		@PpalProductoID_					= ISNULL(PpalProductoID, 0),
		@Cantidad_							= ISNULL(Cantidad, 0),
		@AuxUnidadID_						= ISNULL(AuxUnidadID, 0),
		@Costo_								= ISNULL(Costo, 0),
		@CantidadUnidadBase_				= ISNULL(CantidadUnidadBase, 0),
		@CmpOrdenCompraDetalleID_			= ISNULL(CmpOrdenCompraDetalleID, 0),
		@CmpCompraDetalleID_				= ISNULL(CmpCompraDetalleID, 0),
		@InvMovimientoDetalleReferenciaID_	= ISNULL(InvMovimientoDetalleReferenciaID, 0)
		   FROM	InvMovimientoDetalle WHERE InvMovimientoDetalleID = @InvMovimientoDetalleID
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE		InvMovimientoDetalle
			SET			InvMovimientoEncabezadoID	= @InvMovimientoEncabezadoID,
						Renglon						= @Renglon,
						PpalProductoID				= @PpalProductoID,
						Cantidad					= @Cantidad,
						AuxUnidadID					= @AuxUnidadID,
						Costo						= @Costo,
						CantidadUnidadBase			= @CantidadUnidadBase,
						CmpOrdenCompraDetalleID		= @CmpOrdenCompraDetalleID,
						CmpCompraDetalleID          = @CmpCompraDetalleID,
						InvMovimientoDetalleReferenciaID = @InvMovimientoDetalleReferenciaID
			WHERE		InvMovimientoDetalleID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO InvMovimientoDetalle(
						 InvMovimientoEncabezadoID,
						 Renglon,
						 PpalProductoID,
						 Cantidad,
						 AuxUnidadID,
						 Costo,
						 CantidadUnidadBase,
						 CmpOrdenCompraDetalleID,
						 CmpCompraDetalleID,
						 InvMovimientoDetalleReferenciaID)
			VALUES  (
						@InvMovimientoEncabezadoID,
						@Renglon,
						@PpalProductoID,
						@Cantidad,
						@AuxUnidadID,
						@Costo,
						@CantidadUnidadBase,
						@CmpOrdenCompraDetalleID,
						@CmpCompraDetalleID,
						@InvMovimientoDetalleReferenciaID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @InvMovimientoDetalleID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat(@logMessage, 'Cantidad::', @Cantidad_, ':', @Cantidad, ';')
				SET @logMessage = Concat(@logMessage, 'Costo::', @Costo_, ':', @Costo, ';')
				
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[InvMovimientoDetalle_Listado]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[InvMovimientoDetalle_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'InvMovimientoDetalle',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT	*	FROM InvMovimientoDetalle

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[InvMovimientoEncabezado_Consultar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[InvMovimientoEncabezado_Consultar]
@InvMovimientoEncabezadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'InvMovimientoEncabezado',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@InvMovimientoEncabezadoID_ int = @InvMovimientoEncabezadoID,	
		@PpalSucursalID_ int = 0,
		@TipoDocumentoID_ int = 0,
		@PpalSerieID_ int = 0,
		@Folio_ int = 0,
		@InvTipoMovimientoInventarioID_ int = 0,
		@PpalPersonalID_ int = 0,
		@Fecha_ datetime = 0,
		@Concepto_ varchar(100) = '',
		@CfgEstatusDocumentoID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @InvMovimientoEncabezadoID
	SELECT  InvMovimientoEncabezadoID,	PpalSucursalID,					TipoDocumentoID,	PpalSerieID,
			Folio,						InvTipoMovimientoInventarioID,	Fecha,				Referencia,
			Concepto,					CfgEstatusDocumentoID
	FROM    InvMovimientoEncabezado
	WHERE   InvMovimientoEncabezadoID = @IDAConsultar

-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('InvMovimientoEncabezadoID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @InvMovimientoEncabezadoID_ as InvMovimientoEncabezadoID	,	
			@PpalSucursalID_			as	PpalSucursalID,
			@TipoDocumentoID_			as	TipoDocumentoID,
			@PpalSerieID_				as	PpalSerieID,
			@Folio_						as	Folio,
			@InvTipoMovimientoInventarioID_ as InvTipoMovimientoInventarioID,
			@PpalPersonalID_			as	PpalPersonalID,
			@Fecha_						as	Fecha,
			@Concepto_					as	Concepto,
			@CfgEstatusDocumentoID_		as	CfgEstatusDocumentoID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[InvMovimientoEncabezado_Eliminar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[InvMovimientoEncabezado_Eliminar]
@InvMovimientoEncabezadoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'InvMovimientoEncabezado',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''
SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

		SET @IDABorrar = @InvMovimientoEncabezadoID
		DELETE
		FROM    InvMovimientoEncabezado
		WHERE   InvMovimientoEncabezadoID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('InvMovimientoEncabezadoID::', @InvMovimientoEncabezadoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[InvMovimientoEncabezado_Guardar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[InvMovimientoEncabezado_Guardar]
@InvMovimientoEncabezadoID int,
@PpalSucursalID int,
@TipoDocumentoID int,
@PpalSerieID int,
@Folio int,
@InvTipoMovimientoInventarioID int,
@PpalPersonalID int,
@Fecha int,
@Referencia varchar(50),
@Concepto varchar(100),
@CfgEstatusDocumentoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'InvMovimientoEncabezado',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@InvMovimientoEncabezadoID_ int = @InvMovimientoEncabezadoID,	
		@PpalSucursalID_ int = 0,
		@TipoDocumentoID_ int = 0,
		@PpalSerieID_ int = 0,
		@Folio_ int = 0,
		@InvTipoMovimientoInventarioID_ int = 0,
		@PpalPersonalID_ int = 0,
		@Fecha_ datetime = 0,
		@Referencia_ varchar(50) = '',
		@Concepto_ varchar(100) = '',
		@CfgEstatusDocumentoID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @InvMovimientoEncabezadoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN

		SELECT	@InvMovimientoEncabezadoID_ = IsNull(InvTipoMovimientoInventarioID,0),
				@PpalSucursalID_ =	ISNULL(PpalSucursalID, 0),
				@TipoDocumentoID_ = ISNULL(TipoDocumentoID, 0),
				@PpalSerieID_ = ISNULL(PpalSerieID,0),
				@Folio_ = ISNull(Folio, 0),
				@InvTipoMovimientoInventarioID_ = ISNULL(InvTipoMovimientoInventarioID, 0),
				@PpalPersonalID_ = ISNULL(PpalPersonalID, 0),
				@Fecha_ = ISNULL(Fecha, 0),
				@Referencia_ = ISNULL(Referencia, 0),
				@Concepto_ = ISNULL(Concepto, 0),
				@CfgEstatusDocumentoID_ = ISNULL(CfgEstatusDocumentoID, 0)
		   FROM	InvMovimientoEncabezado WHERE InvMovimientoEncabezadoID = @InvMovimientoEncabezadoID
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE		InvMovimientoEncabezado
			SET			PpalSucursalID = @PpalSucursalID,
						TipoDocumentoID = @TipoDocumentoID,
						PpalSerieID = @PpalSerieID,
						Folio = @Folio,
						InvTipoMovimientoInventarioID = @InvTipoMovimientoInventarioID,
						PpalPersonalID = @PpalPersonalID,
						Fecha = @Fecha,
						Referencia = @Referencia,
						Concepto = @Concepto,
						CfgEstatusDocumentoID = @CfgEstatusDocumentoID
			WHERE		InvMovimientoEncabezadoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO InvMovimientoEncabezado(
						 PpalSucursalID,
						 TipoDocumentoID,
						 PpalSerieID,
						 Folio,
						 InvTipoMovimientoInventarioID,
						 PpalPersonalID,
						 Fecha,
						 Referencia,
						 Concepto,
						 CfgEstatusDocumentoID)
			VALUES  (
						@PpalSucursalID,
						@TipoDocumentoID,
						@PpalSerieID,
						@Folio,
						@InvTipoMovimientoInventarioID,
						@PpalPersonalID,
						@Fecha,
						@Referencia,
						@Concepto,
						@CfgEstatusDocumentoID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @InvMovimientoEncabezadoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat(@logMessage, 'Folio::', @Folio_, ':', @Folio, ';')
				SET @logMessage = Concat(@logMessage, 'Fecha::', @Fecha_, ':', @Fecha, ';')
				SET @logMessage = Concat(@logMessage, 'Concepto::', @Concepto_, ':', @Concepto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[InvMovimientoEncabezado_Listado]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[InvMovimientoEncabezado_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'InvMovimientoEncabezado',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT		*	FROM		InvMovimientoEncabezado

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[InvTipoMovimientoInventario_Consultar]...';


GO
CREATE PROCEDURE [dbo].[InvTipoMovimientoInventario_Consultar]
@InvTipoMovimientoInventarioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'InvTipoMovimientoInventario',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@InvTipoMovimientoInventarioID_ int = 0	,	
		@InvTipoMovimientoInventarioClave_ nvarchar(10) = '',
		@Nombre_ varchar(50) = '',
		@NombreCorto_ varchar(20) = '',
		@EntradaSalida_ char(1) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @InvTipoMovimientoInventarioID
	SELECT  InvTipoMovimientoInventarioID, InvTipoMovimientoInventarioClave, Nombre, NombreCorto, EntradaSalida
	FROM    InvTipoMovimientoInventario
	WHERE   InvTipoMovimientoInventarioID = @IDAConsultar

-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('InvTipoMovimientoInventarioID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @InvTipoMovimientoInventarioID_ as InvTipoMovimientoInventarioID, @InvTipoMovimientoInventarioClave_ as InvTipoMovimientoInventarioClave,
			@Nombre_ as nombre,				@NombreCorto_		as NombreCorto,		@EntradaSalida_ as EntradaSalida
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[InvTipoMovimientoInventario_Eliminar]...';


GO

CREATE PROCEDURE [dbo].[InvTipoMovimientoInventario_Eliminar]
@InvTipoMovimientoInventarioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'InvTipoMovimientoInventario',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''
SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @InvTipoMovimientoInventarioID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(InvTipoMovimientoInventarioClave,'')
	  FROM	InvTipoMovimientoInventario WHERE InvTipoMovimientoInventarioID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    InvTipoMovimientoInventario
		WHERE   InvTipoMovimientoInventarioID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('InvTipoMovimientoInventarioID::', @InvTipoMovimientoInventarioID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[InvTipoMovimientoInventario_Guardar]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[InvTipoMovimientoInventario_Guardar]
@InvTipoMovimientoInventarioID int,
@InvTipoMovimientoInventarioClave varchar(10),
@Nombre varchar(50),
@NombreCorto varchar(20),
@EntradaSalida char(1)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'InvTipoMOvimientoInventario',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@InvTipoMovimientoInventarioID_ int = @InvTipoMovimientoInventarioID,
		@InvTipoMovimientoInventarioClave_ varchar(10) = @InvTipoMovimientoInventarioClave,
		@Nombre_ varchar(50) = @Nombre,
		@NombreCorto_ varchar(20) = @NombreCorto,
		@EntradaSalida_ char(1) = @EntradaSalida

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @InvTipoMovimientoInventarioID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN

		SELECT	@InvTipoMovimientoInventarioID_ = IsNull(InvTipoMovimientoInventarioID,0),
				@InvTipoMovimientoInventarioClave_ = IsNull(InvTipoMovimientoInventarioClave,''),
				@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@EntradaSalida_ = IsNull(EntradaSalida,0)
				
		   FROM	InvTipoMovimientoInventario WHERE InvTipoMovimientoInventarioID = @InvTipoMovimientoInventarioID
		IF @@RowCount = 0
		SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE	 InvTipoMovimientoInventario
			SET      InvTipoMovimientoInventarioClave = @InvTipoMovimientoInventarioClave,
					 Nombre = @Nombre,
					 NombreCorto = @NombreCorto,
					 EntradaSalida = @EntradaSalida
			WHERE	 InvTipoMovimientoInventarioID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO InvTipoMovimientoInventario(
						 InvTipoMovimientoInventarioClave,
						Nombre,
						NombreCorto,
						EntradaSalida)
			VALUES  (
						@InvTipoMovimientoInventarioClave,
						@Nombre,
						@NombreCorto,
						@EntradaSalida)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @InvTipoMovimientoInventarioID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('InvTipoMovimientoInventarioClave::', @InvTipoMovimientoInventarioClave_, ':', @InvTipoMovimientoInventarioClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'EntradaSalida::', @EntradaSalida_, ':', @EntradaSalida_, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[InvTipoMovimientoInventario_Listado]...';


GO
-- =============================================
-- Author:      <Author, , Name>
-- Create Date: <Create Date, , >
-- Description: <Description, , >
-- =============================================
CREATE PROCEDURE [dbo].[InvTipoMovimientoInventario_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'InvTipoMovimientoInventario',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT		InvTipoMovimientoInventarioID,InvTipoMovimientoInventarioClave,Nombre,NombreCorto,EntradaSalida
	FROM		InvTipoMovimientoInventario
	ORDER BY	InvTipoMovimientoInventarioClave

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_PermisoConversacion_Guardar]...';


GO

CREATE Procedure [dbo].[Mensajeria_Chat_PermisoConversacion_Guardar]

	 @PermisoConversacionID			int				= null
	,@Nombre		int
	
	/************************************************/
	/* Campos para Log */
	,@UserIDForLog		int
	,@Descripcion		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
	/************************************************/
As

Declare @TablaNombreIDForLog   nvarchar(100) = 'MsjChatPermisoConversacion'
Declare @Errores bit, @MensajeSistema nvarchar(300)

Begin Transaction 

Begin Try

	declare @isChangeBeLogged bit
	declare @logMessage       varchar(Max) = ''

    If Exists(Select PermisoConversacionID From MsjChatPermisoConversacion Where PermisoConversacionID = @PermisoConversacionID)
    Begin

		/****************************************************************************/
		/* Log */

		Exec	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID				=	@UserIDForLog,
				@TablaNombre		=   @TablaNombreIDForLog

		if @isChangeBeLogged = 1

		Begin

			declare 	@PermisoConversacionID_ int
			declare 	@Nombre_ int

			Select 	@PermisoConversacionID_		= PermisoConversacionID,
					@Nombre_		= Nombre
			From MsjChatPermisoConversacion 
			Where PermisoConversacionID = @PermisoConversacionID
		
			if @PermisoConversacionID != @PermisoConversacionID_ set @logMessage = Concat(@logMessage, 'PermisoConversacionID::', @PermisoConversacionID_, ':', @PermisoConversacionID, ';')
			if @Nombre != @Nombre_ set @logMessage = Concat(@logMessage, 'PersmisoCoversacionNombre::', @Nombre_, ':', @Nombre, ';')
			
			 Print @logMessage
			
		End
		/* Log */
		/****************************************************************************/


        Update  MsjChatPermisoConversacion
        Set     Nombre = @Nombre
        Where   PermisoConversacionID = @PermisoConversacionID


		/****************************************************************************/
		/* Log */
		If @isChangeBeLogged = 1 And @@RowCount > 0 And Len(@logMessage) > 0

		Begin

			Execute 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDForLog
													,@TablaID			= @PermisoConversacionID
													,@TablaColumna1		= Null
													,@TablaColumna2		= Null
													,@Operacion			= 'Update'
													,@UsuarioID			= @UserIDForLog
													,@Descripcion		= @Descripcion
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		End
		/****************************************************************************/

    End
    Else
    Begin     
	
        Insert  Into MsjChatPermisoConversacion (
				Nombre
				)
        Values  (
				@Nombre
				)
        
        Set     @PermisoConversacionID = SCOPE_IDENTITY()


		/****************************************************************************/
		/* Log */

		Exec	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID				=	@UserIDForLog,
				@TablaNombre		=   @TablaNombreIDForLog

		If @isChangeBeLogged = 1 And @@RowCount > 0

			set @logMessage = Concat(@logMessage, 'PermisoConversacionID::', '', ':', @PermisoConversacionID, ';')
			set @logMessage = Concat(@logMessage, 'PersmisoCoversacionNombre::', '', ':', @Nombre, ';')

			 Print @logMessage

		Begin

			Execute 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDForLog
													,@TablaID			= @PermisoConversacionID
													,@TablaColumna1		= Null
													,@TablaColumna2		= Null
													,@Operacion			= 'Insert'
													,@UsuarioID			= @UserIDForLog
													,@Descripcion		= @Descripcion
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		End
		/****************************************************************************/

    End
    Commit Transaction
End Try
Begin Catch
    RollBack Transaction
    Select @Errores = 1, @MensajeSistema = ERROR_MESSAGE()
End Catch 

Select  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@MensajeSistema, '') as Mensaje,
        @PermisoConversacionID as PermisoConversacionID
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_UltimaConsultaConversacion_Consultar]...';


GO

Create Procedure [dbo].[Mensajeria_Chat_UltimaConsultaConversacion_Consultar]

	@UsuarioID		int,
	@ConversacionID int
	
	/************************************************/
	/* Campos para Log */
	,@UserIDForLog		int				= 1
	,@Descripcion		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
	/************************************************/

As

	declare @Ultima_Consulta		datetime
	declare @Ultima_Consulta_Update datetime

	/* Consultamos la últifa fecha en la cual se consulto. */
	set @Ultima_Consulta = (
			Select	UltimaConsulta 
			From	MsjChatUltimaConsultaConversacion
			Where	UsuarioID      = @UsuarioID And
					ConversacionID = @ConversacionID
			)

	/* Si no habia sido consultada, entonces crea una por default y la graba. */
	if @Ultima_Consulta is null
		Begin
			Set @Ultima_Consulta_Update = CAST('2020-01-01' AS datetime)
			Set @Ultima_Consulta = @Ultima_Consulta_Update
		End
	Else
		Begin
			Set @Ultima_Consulta_Update = GetUTCDate()
		End

	Exec Mensajeria_Chat_UltimaConsultaConversacion_Guardar
			@UsuarioID			= @UsuarioID
			,@ConversacionID	= @ConversacionID
			,@UltimaConsulta	= @Ultima_Consulta_Update
			,@UserIDForLog		= @UserIDForLog
			,@Descripcion		= @Descripcion
			,@IpAddress			= @IpAddress
			,@HostName			= @HostName

	Select @Ultima_Consulta

Return 0
GO
PRINT N'Creando Procedimiento [dbo].[PpalAlmacen_Consultar]...';


GO
CREATE PROCEDURE [dbo].[PpalAlmacen_Consultar]
@PpalAlmacenID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalAlmacen',	
		@Operacion				 nvarchar(20) = 'Read', 
		@logMessage				 varchar(Max) = '',
		@isChangeBeLogged		 bit

-- Variables para valores de columnas
DECLARE @PpalAlmacenID_		nvarchar(10) = @PpalAlmacenID,
		@PpalAlmacenClave_	nvarchar(20) = '',
		@Nombre_			nvarchar(60) = '',
		@NombreCorto_		nvarchar(10) = '',
		@PpalSucursalID_	int = 0
		

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY	
	BEGIN TRANSACTION

	SET @IDAConsultar = @PpalAlmacenID
	SELECT  @PpalAlmacenID_		= PpalAlmacenID, 
			@PpalAlmacenClave_	= PpalAlmacenClave,
			@Nombre_			= Nombre,
			@NombreCorto_		= NombreCorto,
			@PpalSucursalID_	= PpalSucursalID
	FROM PpalAlmacen
	WHERE PpalAlmacenID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @PpalAlmacenID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalAlmacenID::', @PpalAlmacenID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @PpalAlmacenID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
		-- Si no hubo errores -> COMMIT
		COMMIT TRANSACTION	
	END
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar		as PpalAlmacenID,					@PpalAlmacenClave_	as PpalAlmacenClave,	
			@Nombre_			as Nombre,							@NombreCorto_		as NombreCorto,
			@PpalSucursalID_	as PpalSucursalID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalAlmacen_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[PpalAlmacen_Eliminar]
@PpalAlmacenID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
SET NOCOUNT ON 
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalAlmacen',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave					nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDABorrar = @PpalAlmacenID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(PpalAlmacenClave,'')
	  FROM	PpalAlmacen WHERE PpalAlmacenID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
		DELETE
		FROM    PpalAlmacen
		WHERE   PpalAlmacenID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('PpalAlmacenID::', @PpalAlmacenID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalAlmacen_Guardar]...';


GO
CREATE PROCEDURE [dbo].[PpalAlmacen_Guardar]
@PpalAlmacenID int,
@PpalAlmacenClave varchar(20) = null,
@Nombre varchar(60) = null,
@NombreCorto varchar(10) = null,
@PpalSucursalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalAlmacen',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@AlmacenClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@PpalSucursalID_ int = 0,
		@PpalAlmacenID_ int = @PpalAlmacenID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalAlmacenID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@AlmacenClave_ =	IsNull(PpalAlmacenClave,''),
	 			@Nombre_ =			IsNull(Nombre,''),
				@NombreCorto_ =		IsNull(NombreCorto,''),
				@PpalSucursalID_ =	IsNull(PpalSucursalID,0),
				@PpalAlmacenID_ =		IsNull(PpalAlmacenID,0)
		   FROM	PpalAlmacen WHERE PpalAlmacenID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalAlmacen
			SET     PpalAlmacenClave = @PpalAlmacenClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					PpalSucursalID = @PpalSucursalID
			WHERE   PpalAlmacenID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalAlmacen(
					PpalAlmacenClave,
					Nombre,
					NombreCorto,
					PpalSucursalID)
			VALUES  (
					@PpalAlmacenClave,
					@Nombre,
					@NombreCorto,
					@PpalSucursalID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalAlmacenID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('AlmacenClave::', @AlmacenClave_, ':', @PpalAlmacenClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'PpalSucursalID::', @PpalSucursalID_, ':', @PpalSucursalID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalAlmacen_Listado]...';


GO
CREATE PROCEDURE [dbo].[PpalAlmacen_Listado]
@PpalSucursalID int,
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalAlmacen',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('PpalSucursalID::', @PpalSucursalID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT		PpalAlmacenID AS ID,			PpalAlmacenClave AS Clave,
					Nombre,							NombreCorto,
					0 AS PadreID
		  FROM		PpalAlmacen
		 WHERE		PpalSucursalID = @PpalSucursalID
		ORDER BY	PpalAlmacenClave
	ELSE
		SELECT		*
		FROM		PpalAlmacen
		ORDER BY	PpalAlmacenClave
	

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalArea_Consultar]...';


GO
CREATE PROCEDURE [dbo].[PpalArea_Consultar]
@PpalAreaID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalArea',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@PpalAreaClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@EmpresaID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @PpalAreaID
	/************* FIN COPY 1  *********************/
	SELECT  @PpalAreaClave_ = PpalAreaClave,	@Nombre_ = Nombre,		@NombreCorto_ = NombreCorto,
			@EmpresaID_ = EmpresaID 
	FROM    PpalArea
	WHERE   PpalAreaID = @IDAConsultar

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalAreaID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as PpalAreaID,					@PpalAreaClave_ as PpalAreaClave,			
			@Nombre_ as Nombre,								@NombreCorto_ as NombreCorto,
			@EmpresaID_ as EmpresaID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[PpalArea_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[PpalArea_Eliminar]
@PpalAreaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalArea',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @PpalAreaID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(PpalAreaClave,'')
	  FROM	PpalArea WHERE PpalAreaID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    PpalArea
		WHERE   PpalAreaID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('PpalAreaID::', @PpalAreaID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @PpalAreaID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalArea_Guardar]...';


GO
CREATE PROCEDURE [dbo].[PpalArea_Guardar]
@PpalAreaID int,
@EmpresaID int,
@PpalAreaClave varchar(10) = null,
@Nombre varchar(60) = null,
@NombreCorto varchar(10) = null
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalArea',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalAreaClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@EmpresaID_ int = 0,
		@PpalAreaID_ int = @PpalAreaID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalAreaID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@PpalAreaClave_ = IsNull(PpalAreaClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@EmpresaID_ = IsNull(EmpresaID,0),
				@PpalAreaID_ = IsNull(PpalAreaID,0)
		   FROM	PpalArea WHERE PpalAreaID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @PpalAreaClave_ = @ClaveNoAsignado and @PpalAreaClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  PpalArea
			SET     PpalAreaClave = @PpalAreaClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					EmpresaID = @EmpresaID
			WHERE   PpalAreaID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalArea(
					PpalAreaClave,
					Nombre,
					NombreCorto,
					EmpresaID)
			VALUES  (
					@PpalAreaClave,
					@Nombre,
					@NombreCorto,
					@EmpresaID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalAreaID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalAreaClave::', @PpalAreaClave_, ':', @PpalAreaClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'EmpresaID::', @EmpresaID_, ':', @EmpresaID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[PpalArea_Listado]...';


GO
CREATE PROCEDURE [dbo].[PpalArea_Listado]
@TipoListado varchar(10) = ''
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalArea',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaID::', @EmpresaIDSolicitudBase, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
/************* FIN COPY 1  *********************/
	IF @TipoListado = 'Minimo'
		SELECT  PpalAreaID AS ID,	PpalAreaClave AS Clave,		Nombre, 
				NombreCorto,		0 AS PadreID
		FROM    PpalArea
		WHERE	EmpresaID = @EmpresaIDSolicitudBase AND
		  ((SELECT administrador
			   FROM SegUsuario
			  WHERE SegUsuarioID = @UsuarioIDBitacora) = 1 OR
			(SELECT PpalAreaID 
			   FROM PpalArea
			  WHERE PpalAreaClave = (SELECT ClaveNoAsignado FROM SistemaParamCosmos)) in 
				(SELECT PpalAreaID
				  FROM SegUsuarioArea
				 WHERE SegUsuarioID = @UsuarioIDBitacora) OR
			PpalAreaID in 
				(SELECT PpalAreaID
				  FROM SegUsuarioArea
				 WHERE SegUsuarioID = @UsuarioIDBitacora))
		ORDER BY PpalAreaClave
	ELSE 
		SELECT  PpalAreaID,PpalAreaClave,Nombre,NombreCorto,EmpresaID
		FROM    PpalArea
--		WHERE	EmpresaID = @EmpresaIDSolicitudBase
		ORDER BY PpalAreaClave

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[PpalArea_Listado_SegUsuarioID]...';


GO
CREATE PROCEDURE [dbo].[PpalArea_Listado_SegUsuarioID]
@EmpresaID int,
@SegUsuarioID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalArea',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaID::', @EmpresaID, ':',0, ',', ' UsuarioID::', @SegUsuarioID, ':', 0,  ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

/************* FIN COPY 1  *********************/
	/* regresa las áreas de la @EmpresaID que o el @SegUsuarioID tenga acceso a todas o estén permitidas para el @SegUsuarioID */
	SELECT  PpalAreaID,PpalAreaClave,Nombre,NombreCorto,EmpresaID
	FROM    PpalArea
	WHERE	EmpresaID = @EmpresaID and 
			((SELECT PpalAreaID 
			   FROM PpalArea
			  WHERE PpalAreaClave = (SELECT ClaveNoAsignado FROM SistemaParamCosmos)) in 
				(SELECT PpalAreaID
				  FROM SegUsuarioArea
				 WHERE SegUsuarioID = @SegUsuarioID) OR
			PpalAreaID in 
				(SELECT PpalAreaID
				  FROM SegUsuarioArea
				 WHERE SegUsuarioID = @SegUsuarioID))
	ORDER BY Nombre

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[PpalCentroCosto_Consultar]...';


GO
CREATE PROCEDURE [dbo].[PpalCentroCosto_Consultar]
@PpalCentroCostoID int

-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalCentroCosto',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
--Variable para valores de columna
DECLARE @PpalCentroCostoClave_ nvarchar(6) = '',
		@Nombre_ nvarchar(40) = '',
		@NombreCorto_ nvarchar(10) = '',
		@Administracion_ char(1) = '',
		@EmpresaID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET		@IDAConsultar = @PpalCentroCostoID

	SELECT	@PpalCentroCostoClave_ = PpalCentroCostoClave,		@Nombre_ = Nombre,		@NombreCorto_ = NombreCorto,
			@EmpresaID_ = EmpresaID,							@Administracion_ = Administracion
	FROM    PpalCentroCosto
	WHERE   PpalCentroCostoID = @IDAConsultar


	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalCentroCostoID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as PpalCentroCostoID,				@PpalCentroCostoClave_ as PpalCentroCostoClave,			
			@Nombre_ as Nombre,								@NombreCorto_ as NombreCorto,
			@EmpresaID_ as EmpresaID,						@Administracion_ as Administracion
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
	        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalCentroCosto_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalCentroCosto_Eliminar]
@PpalCentroCostoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
SET NOCOUNT ON 
-- Variables para manejo de Errores
DECLARE @Errores int, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalCentroCosto',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @PpalCentroCostoID
    DELETE
    FROM    PpalCentroCosto
    WHERE   PpalCentroCostoID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('PpalCentroCostoID::', @PpalCentroCostoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalCentroCosto_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalCentroCosto_Guardar]
@PpalCentroCostoID int,
@EmpresaID int,
@PpalCentroCostoClave varchar(6) = null,
@Nombre varchar(40) = null,
@NombreCorto varchar(10) = null,
@Administracion char(1) = null
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalCentroCosto',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalCentroCostoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(40) = '',			
		@NombreCorto_ varchar(10) = '',
		@EmpresaID_ int = 0,
		@Administracion_ char(1) = '',
		@PpalCentroCostoID_ int = @PpalCentroCostoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalCentroCostoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update)
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@PpalCentroCostoClave_ = IsNull(PpalCentroCostoClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@EmpresaID_ = IsNull(EmpresaID,0),
				@PpalCentroCostoID_ = IsNull(PpalCentroCostoID,0),
				@Administracion_ = IsNull(Administracion,'')
	   FROM	PpalCentroCosto WHERE PpalCentroCostoID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalCentroCosto
			SET     EmpresaID = @EmpresaID,
					PpalCentroCostoClave = @PpalCentroCostoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					Administracion = @Administracion
			WHERE   PpalCentroCostoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalCentroCosto(
					EmpresaID,
					PpalCentroCostoClave,
					Nombre,
					NombreCorto,
					Administracion)
			VALUES  (
					@EmpresaID,
					@PpalCentroCostoClave,
					@Nombre,
					@NombreCorto,
					@Administracion)
        
        SET     @IDAActualizar = SCOPE_IDENTITY()
    END
	
	IF @@RowCount > 0
	BEGIN
		/* Procesa Bitácora */
		-- Determina si fue UPDATE o INSERT
		IF @PpalCentroCostoID_ > 0  SET @Operacion = 'Update' 	
							ELSE SET @Operacion = 'Create' 

		-- Revisa si el cambio debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- logMessage = Cambios efectuados
			SET @logMessage = Concat('PpalCentroCostoClave::', @PpalCentroCostoClave_, ':', @PpalCentroCostoClave, ';')
			SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
			SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
			SET @logMessage = Concat(@logMessage, 'EmpresaID::', @EmpresaID_, ':', @EmpresaID, ';')
			SET @logMessage = Concat(@logMessage, 'Administracion::', @Administracion_, ':', @Administracion, ';')
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAActualizar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalCentroCosto_Listado]...';


GO

CREATE PROCEDURE [dbo].[PpalCentroCosto_Listado]
@TipoListado varchar(10),
-- Parámetros para Bitácora
	@EmpresaIDSolicitudBase int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora         
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'CentroCosto',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaID::', @EmpresaIDSolicitudBase, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  PpalCentroCostoID AS ID,		PpalCentroCostoClave AS Clave,				Nombre, 
				NombreCorto,					0 AS PadreID,
				CASE WHEN (SELECT COUNT(*) FROM CoProyecto 
							WHERE PpalCentroCosto.PpalCentroCostoID = CoProyecto.PpalCentroCostoID) > 0 THEN 'S' ELSE 'N' END AS Extra1
		FROM    PpalCentroCosto
		WHERE	EmpresaID = @EmpresaIDSolicitudBase AND
			((SELECT Administrador
			   FROM SegUsuario
			  WHERE SegUsuarioID = @UsuarioIDBitacora) = 1 OR
			((SELECT PpalCentroCostoID 
			   FROM PpalCentroCosto
			  WHERE PpalCentroCostoClave = (SELECT ClaveNoAsignado FROM SistemaParamCosmos)) in 
				(SELECT PpalCentroCostoID
				  FROM SegUsuarioCentroCosto
				 WHERE SegUsuarioID = @UsuarioIDBitacora) OR
			PpalCentroCostoID in 
				(SELECT PpalCentroCostoID
				  FROM SegUsuarioCentroCosto
				 WHERE SegUsuarioID = @UsuarioIDBitacora)))		ORDER BY PpalCentroCostoClave
	ELSE 
		SELECT  PpalCentroCostoID,EmpresaID,PpalCentroCostoClave,Nombre,NombreCorto,Administracion
		FROM    PpalCentroCosto
		WHERE	EmpresaID = @EmpresaIDSolicitudBase 
		ORDER BY PpalCentroCostoClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalConceptoEgreso_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalConceptoEgreso_Consultar]
@PpalConceptoEgresoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalConceptoEgreso',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@PpalConceptoEgresoID_ int  = @PpalConceptoEgresoID,
		@PpalConceptoEgresoClave_ varchar(10) = '',
		@Nombre_ varchar(60) = '',
		@NombreCorto_ varchar(10) = '',
		@CompraFactura_ char(1) = '',
		@Desglosar_ char(1) = '',
		@EmpresaID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @PpalConceptoEgresoID
	SELECT   @PpalConceptoEgresoID_ = PpalConceptoEgresoID,
			 @PpalConceptoEgresoClave_ = PpalConceptoEgresoClave,
			@Nombre_ = Nombre,
			@NombreCorto_ = NombreCorto,
			@CompraFactura_ = CompraFactura,
			@Desglosar_ = Desglosar, 
			@EmpresaID_ = EmpresaID
	FROM    PpalConceptoEgreso
	WHERE   PpalConceptoEgresoID = @PpalConceptoEgresoID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalConceptoEgresoID::', @PpalConceptoEgresoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar   as	ppalConceptoEgresoID,		@PpalConceptoEgresoClave_ as AuxBancoClave,	
			@Nombre_        as	Nombre,						@NombreCorto_             as NombreCorto,
			@CompraFactura_ as	CompraFactura,				@Desglosar_               as Desglosar, 
			@EmpresaID_     as	EmpresaID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalConceptoEgreso_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalConceptoEgreso_Eliminar]
@PpalConceptoEgresoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalConceptoEgreso',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @PpalConceptoEgresoID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(PpalConceptoEgresoClave,'')
	  FROM	PpalConceptoEgreso WHERE PpalConceptoEgresoID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    PpalConceptoEgreso
		WHERE   PpalConceptoEgresoID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('PpalConceptoEgresoID::', @PpalConceptoEgresoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @PpalConceptoEgresoID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalConceptoEgreso_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalConceptoEgreso_Guardar]
@ConceptoEgresoID int,
@ConceptoEgresoClave varchar(10),
@Nombre varchar(60),
@NombreCorto varchar(10),
@CompraFactura char(1),
@Desglosar char(1),
@EmpresaID int = 0
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalConceptoAlmacen',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@ConceptoEgresoID_ int = @ConceptoEgresoID,
		@ConceptoEgresoClave_ varchar(10) = '',
		@Nombre_ varchar(60) = '',
		@NombreCorto_ varchar(10) = '',
		@CompraFactura_ char(1) = '',
		@Desglosar_ char(1) = '',
		@EmpresaID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @ConceptoEgresoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@ConceptoEgresoClave_ =		IsNull(PpalConceptoEgresoClave,''),
	 			@Nombre_			  =		IsNull(Nombre,''),
				@NombreCorto_		  =		IsNull(NombreCorto,''),
				@ConceptoEgresoID_	  =		IsNull(PpalConceptoEgresoID,0),
				@CompraFactura_		  =		ISNULL(CompraFactura, ''),
				@Desglosar_			  =		ISNULL(Desglosar, ''),
				@EmpresaID_			  =		ISNULL(EmpresaID, '')
		   FROM	PpalConceptoEgreso WHERE PpalConceptoEgresoID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalConceptoEgreso
			SET     PpalConceptoEgresoClave =	@ConceptoEgresoClave,
					Nombre          =			@Nombre,
					NombreCorto     =			@NombreCorto,
					CompraFactura   =			@CompraFactura,
					Desglosar       =			@Desglosar, 
					EmpresaID       =			@EmpresaID
			WHERE   PpalConceptoEgresoID   =	@IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalConceptoEgreso(
						PpalConceptoEgresoClave,
						Nombre,
						NombreCorto,
						CompraFactura,
						Desglosar,
						EmpresaID)
			VALUES  (
						@ConceptoEgresoClave,
						@Nombre,
						@NombreCorto,
						@CompraFactura,
						@Desglosar, 
						@EmpresaID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @ConceptoEgresoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalConceptoEgresoClave::', @ConceptoEgresoClave_, ':', @ConceptoEgresoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalConceptoEgreso_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalConceptoEgreso_Listado]
@TipoListado varchar(10),
-- Parámetros para Bitácora
	@EmpresaIDSolicitudBase int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalConceptoEgreso',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaID::', @EmpresaIDSolicitudBase, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  PpalConceptoEgresoID AS ID,					PpalConceptoEgresoClave AS Clave,
				Nombre,										NombreCorto,
				0 as PadreID
		FROM    PpalConceptoEgreso
		WHERE	EmpresaID  = @EmpresaIDSolicitudBase AND
			((SELECT administrador
			   FROM SegUsuario
			  WHERE SegUsuarioID = @UsuarioIDBitacora) = 1 OR
			(SELECT PpalConceptoEgresoID 
			   FROM PpalConceptoEgreso
			  WHERE PpalConceptoEgresoClave = (SELECT ClaveNoAsignado FROM SistemaParamCosmos)) in 
				(SELECT PpalConceptoEgresoID
				  FROM SegUsuarioConceptoEgreso
				 WHERE SegUsuarioID = @UsuarioIDBitacora) OR
			PpalConceptoEgresoID in 
				(SELECT PpalConceptoEgresoID
				  FROM SegUsuarioConceptoEgreso
				 WHERE SegUsuarioID = @UsuarioIDBitacora))		order by Nombre
	ELSE
		SELECT  PpalConceptoEgresoID,PpalConceptoEgresoClave,Nombre,NombreCorto,CompraFactura,Desglosar, EmpresaID
		FROM    PpalConceptoEgreso
		WHERE	EmpresaID  = @EmpresaIDSolicitudBase
		order by PpalConceptoEgresoClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalConceptoIngreso_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalConceptoIngreso_Consultar]
@PpalConceptoIngresoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalConceptoIngreso',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@PpalConceptoIngresoID_			int  = @PpalConceptoIngresoID,
		@PpalConceptoIngresoClave_		varchar(10)	= '',
		@Nombre_						varchar(60) = '',
		@NombreCorto_					varchar(10) = '',
		@SistemaEmpresaID_	varchar(4)	= ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @PpalConceptoIngresoID
	SELECT   @PpalConceptoIngresoID_ = PpalConceptoIngresoID,
			 @PpalConceptoIngresoClave_ = PpalConceptoIngresoClave,
			 @Nombre_ = Nombre,
			 @NombreCorto_ = NombreCorto,
			 @SistemaEmpresaID_ = SistemaEmpresaID
	FROM    PpalConceptoIngreso
	WHERE   PpalConceptoIngresoID = @PpalConceptoIngresoID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalConceptoIngresoID::', @PpalConceptoIngresoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar		as	ppalConceptoEgresoID,		@PpalConceptoIngresoClave_ as PpalConceptoIngresoClave,	
			@Nombre_			as	Nombre,						@NombreCorto_             as NombreCorto,
			@SistemaEmpresaID_  as SistemaEmpresaID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalConceptoIngreso_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalConceptoIngreso_Eliminar]
@PpalConceptoIngresoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalConceptoIngreso',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @PpalConceptoIngresoID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(PpalConceptoIngresoClave,'')
	  FROM	PpalConceptoIngreso WHERE PpalConceptoIngresoID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    PpalConceptoIngreso
		WHERE   PpalConceptoIngresoID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('PpalConceptoEgresoID::', @PpalConceptoIngresoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @PpalConceptoIngresoID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalConceptoIngreso_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalConceptoIngreso_Guardar]
@PpalConceptoIngresoID int,
@PpalConceptoIngresoClave varchar(10),
@Nombre varchar(60),
@NombreCorto varchar(10), 
@SistemaEmpresaID int = 0
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalConceptoIngreso',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalConceptoIngresoID_		int = @PpalConceptoIngresoID,
		@PpalConceptoIngresoClave_	varchar(10)	= '',
		@Nombre_					varchar(60) = '',
		@NombreCorto_				varchar(10)= '', 
		@SistemaEmpresaID_					int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalConceptoIngresoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@PpalConceptoIngresoClave_ =		IsNull(PpalConceptoIngresoClave,''),
	 			@Nombre_			  =				IsNull(Nombre,''),
				@NombreCorto_		  =				IsNull(NombreCorto,''),
				@PpalConceptoIngresoID_	  =			IsNull(PpalConceptoIngresoID,0),
				@SistemaEmpresaID_			  =		ISNULL(SistemaEmpresaID, '')
		   FROM	PpalConceptoIngreso WHERE PpalConceptoIngresoID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalConceptoIngreso
			SET     PpalConceptoIngresoClave = @PpalConceptoIngresoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto, 
					SistemaEmpresaID = @SistemaEmpresaID
			WHERE   PpalConceptoIngresoID = @PpalConceptoIngresoID
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalConceptoIngreso(
					PpalConceptoIngresoClave,
					Nombre,
					NombreCorto,
					SistemaEmpresaID)
			VALUES  (
					@PpalConceptoIngresoClave,
					@Nombre,
					@NombreCorto,
					@SistemaEmpresaID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalConceptoIngresoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalConceptoIngresoClave::', @PpalConceptoIngresoClave_, ':', @PpalConceptoIngresoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalConceptoIngreso_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalConceptoIngreso_Listado]
@EmpresaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalConceptoIngreso',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaID::', @EmpresaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  PpalConceptoIngresoID, PpalConceptoIngresoClave, Nombre,NombreCorto, SistemaEmpresaID
	FROM    PpalConceptoIngreso
	WHERE	SistemaEmpresaID = @EmpresaID
	order by PpalConceptoIngresoClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalContactoPersonal_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalContactoPersonal_Consultar]
@PpalContactoPersonalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora		nvarchar(100) = 'PpalContactoPersonal',	
		@Operacion					nvarchar(20) = 'Read', 
		@logMessage					varchar(Max) = '',
		@isChangeBeLogged			bit
-- Variables para valores de columnas
DECLARE @PpalContactoPersonalID_	int = 0,
		@PpalPersonalID_			int = 0,
		@EspPersonalID_				int = 0,
		@TipoContactoPersonalID_	int = 0

SET NOCOUNT ON
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

		SET @IDAConsultar = @PpalContactoPersonalID
		SELECT	@PpalContactoPersonalID_	= PpalContactoPersonalID,
				@PpalPersonalID_			= PpalPersonalID,
				@EspPersonalID_				= EspPersonaID,
				@TipoContactoPersonalID_	= TipoContactoPersonalID
		FROM	PpalContactoPersonal
		WHERE   PpalContactoPersonalID = @PpalContactoPersonalID

		-- Si no se encontró registro a Consultar -> error
		IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
		ELSE 
		BEGIN
			/* Procesa Bitácora */
			-- Revisa si la consulta debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- LogMessage = Parámetros de Consulta
				SET @logMessage = Concat('PpalContactoPersonalID::', @PpalContactoPersonalID, ':', 0, ';')
				
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as PpalContactoPersonalID,	@PpalPersonalID_ as PpalPersonalID,	
			@EspPersonalID_ as EspPersonalID,			@TipoContactoPersonalID_ as TipoContactoPersonalID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalContactoPersonal_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalContactoPersonal_Eliminar]
@PpalContactoPersonalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
SET NOCOUNT ON 
-- Variables para manejo de Errores
DECLARE @Errores int, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalContactoPersonal',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
		SET @IDABorrar = @PpalContactoPersonalID

		DELETE
			FROM    PpalContactoPersonal
			WHERE   PpalContactoPersonalID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('PpalContactoPersonalID::', @PpalContactoPersonalID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
		END
		-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
	SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
		COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalContactoPersonal_Guardar]...';


GO

CREATE PROCEDURE [dbo].[PpalContactoPersonal_Guardar]
@PpalContactoPersonalID int,
@PpalPersonalID int,
@EspPersonaID int,
@TipoContactoPersonalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300), @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalContactoPersonal',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE @PpalContactoPersonalID_	int = @PpalContactoPersonalID,
		@PpalPersonalID_			int = @PpalPersonalID,
		@EspPersonaID_					int  = @EspPersonaID,
		@TipoContatoPersonalID_		int = @TipoContactoPersonalID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRANSACTION 
BEGIN TRY
    BEGIN TRANSACTION

	SET @IDAActualizar = @PpalContactoPersonalID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@PpalContactoPersonalID_	=	IsNull(PpalContactoPersonalID,''),
	 			@PpalPersonalID_			=	IsNull(PpalPersonalID,''),
				@EspPersonaID_					=	IsNull(EspPersonaID,''),
				@TipoContactoPersonalID		=	IsNull(TipoContactoPersonalID,0)
		   FROM	PpalContactoPersonal WHERE PpalContactoPersonalID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalContactoPersonal
			SET     
					PpalPersonalID = @PpalPersonalID,
					EspPersonaID = @EspPersonaID, 
					TipoContactoPersonalID = @TipoContactoPersonalID
			WHERE   PpalContactoPersonalID = @PpalContactoPersonalID
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalContactoPersonal(
					PpalContactoPersonalID,
					PpalPersonalID,
					EspPersonaID,
					TipoContactoPersonalID)
			VALUES  (
					@PpalContactoPersonalID,
					@PpalPersonalID,
					@EspPersonaID,
					@TipoContactoPersonalID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalContactoPersonalID > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalContactoPersonalID::', @PpalContactoPersonalID_, ':', @PpalContactoPersonalID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @PpalContactoPersonalID as PpalContactoPersonalID
GO
PRINT N'Creando Procedimiento [dbo].[PpalContactoPersonal_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalContactoPersonal_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS 
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalContactoPersonal',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  a.PpalContactoPersonalID, a.PpalPersonalID, a.EspPersonaID, a.TipoContactoPersonalID, 
		b.ApellidoMaterno, b.ApellidoPaterno, b.CasadoCivil, b.CasadoIglesia, 
		b.EspCiudadNacimientoID, b.CURP, b.AuxEstadoCivilID, b.FechaNacimiento, b.FisicaMoral, b.Iniciales, 
		b.Nombre, b.NombreComercial, 
		b.RazonSocial, b.RFC, b.SistemaSexoID, b.SobreNombre
	FROM    PpalContactoPersonal a
			LEFT OUTER JOIN EspPersona b ON a.EspPersonaID = b.EspPersonaID

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalContactoPersonalDomicilio_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalContactoPersonalDomicilio_Consultar]
@PpalContactoPersonalDomicilioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora		nvarchar(100) = 'AuxBanco',	
		@Operacion					nvarchar(20) = 'Read', 
		@logMessage					varchar(Max) = '',
		@isChangeBeLogged			bit
--Variables para valores de columnas
DECLARE @PpalContactoPersonalDomicilioID_	int = 0,
		@PpalContactoPersonalID_			int = 0,
		@EspDomicilioID_					int = 0,
		@CfgTipoDomicilioID_				int = 0,
		@comentarios_						nvarchar(100) = '',
		@Predeterminado_					bit

SET NOCOUNT ON
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @PpalContactoPersonalDomicilioID
	SELECT  @PpalContactoPersonalDomicilioID_ = PpalContactoPersonalDomicilioID,
			@PpalContactoPersonalID_ = PpalContactoPersonalID,
			@EspDomicilioID_ = EspDomicilioID, 
			@CfgTipoDomicilioID_ = CfgTipoDomicilioID, 
			@comentarios_ = Comentarios, 
			@Predeterminado_ = Predeterminado
	FROM    PpalContactoPersonalDomicilio
	WHERE   PpalContactoPersonalDomicilioID = @PpalContactoPersonalDomicilioID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion
	
	-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalContactoPersonalDomicilioID::', @PpalContactoPersonalDomicilioID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar		as PpalContactoPersonalDomicilioID,		@PpalContactoPersonalID_	as PpalContactoPersonalID,	
			@EspDomicilioID_	as EspDomicilioID,						@CfgTipoDomicilioID_		as CfgTipoDomicilioID,
			@comentarios_		as comentarios,						@Predeterminado_				as Predeterminado
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalContactoPersonalDomicilio_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalContactoPersonalDomicilio_Eliminar]
@PpalContactoPersonalDomicilioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
SET NOCOUNT ON 
-- Variables para manejo de Errores
DECLARE @Errores int, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalContactoPersonalDomicilio',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @PpalContactoPersonalDomicilioID
    DELETE
    FROM    PpalContactoPersonalDomicilio
    WHERE   PpalContactoPersonalDomicilioID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('PpalContactoPersonalDomicilioID::', @PpalContactoPersonalDomicilioID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalContactoPersonalDomicilio_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalContactoPersonalDomicilio_Guardar]
--@ModificacionUsuarioID int = null,
@PpalContactoPersonalDomicilioID int,
@PpalContactoPersonalID int,
@DomicilioID int,
@TipoDomicilioID int,
@Comentarios varchar(100),
@Predeterminado bit
-- Parámetros para Bitácora
	,@UsuarioIDBitcora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalContactoPersonalDomicilio',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalContactoPersonalID_ int = 0,
		@DomicilioID_ int = 0,			
		@TipoDomicilioID_ int = 0,
		@Comentarios_ varchar(100) = '',
		@Predeterminado_ bit = 0,
		@PpalContactoPersonalDomicilioID_ int = @PpalContactoPersonalDomicilioID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalContactoPersonalDomicilioID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@PpalContactoPersonalID_ = IsNull(PpalContactoPersonalID,0),
	 			@DomicilioID_ = IsNull(EspDomicilioID,0),
				@TipoDomicilioID_ = IsNull(CfgTipoDomicilioID,''),
				@Comentarios_ = IsNull(Comentarios,0),
				@Predeterminado_ = IsNull(@Predeterminado_,0)
		   FROM	PpalContactoPersonalDomicilio WHERE PpalContactoPersonalDomicilioID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		--IF @PpalAreaClave_ = @ClaveNoAsignado and @PpalAreaClave <> @ClaveNoAsignado
		--	SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalContactoPersonalDomicilio
			SET     PpalContactoPersonalID = @PpalContactoPersonalID,
					EspDomicilioID = @DomicilioID,
					CfgTipoDomicilioID = @TipoDomicilioID,
					Comentarios = @Comentarios,
					Predeterminado = @Predeterminado
			WHERE   PpalContactoPersonalDomicilioID = @PpalContactoPersonalDomicilioID
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalContactoPersonalDomicilio(
					PpalContactoPersonalID,
					EspDomicilioID,
					CfgTipoDomicilioID,
					Comentarios,
					Predeterminado)
			VALUES  (
					@PpalContactoPersonalID,
					@DomicilioID,
					@TipoDomicilioID,
					@Comentarios,
					@Predeterminado)
        
			SET     @PpalContactoPersonalDomicilioID = SCOPE_IDENTITY()
		END
    IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalContactoPersonalDomicilioID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitcora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalContactoPersonalID::', @PpalContactoPersonalID_, ':', @PpalContactoPersonalID, ';')
				SET @logMessage = Concat(@logMessage, 'DomicilioID::', @DomicilioID_, ':', @DomicilioID, ';')
				SET @logMessage = Concat(@logMessage, 'TipoDomicilioID::', @TipoDomicilioID_, ':', @TipoDomicilioID, ';')
				SET @logMessage = Concat(@logMessage, 'Comentarios::', @Comentarios_, ':', @Comentarios, ';')
				SET @logMessage = Concat(@logMessage, 'Predeterminado::', @Predeterminado_, ':', @Predeterminado, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitcora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalContactoPersonalDomicilio_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalContactoPersonalDomicilio_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS 
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalContactoPersonalDomicilio',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  a.PpalContactoPersonalDomicilioID, a.PpalContactoPersonalID, a.EspDomicilioID,a.CfgTipoDomicilioID,a.Comentarios, a.Predeterminado,
			b.Calle, b.EspCiudadID, b.CodigoPostal, b.ColoniaNombre, b.Coordenadas, b.DomicilioCompleto, b.EntreCalle1, 
			b.EntreCalle2, b.NumeroExterior, b.NumeroInterior
	FROM    PpalContactoPersonalDomicilio a 
			LEFT OUTER JOIN vDomicilio b ON a.EspDomicilioID = b.EspDomicilioID

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalContactoPersonalFecha_Consultar]...';


GO
CREATE PROCEDURE [dbo].[PpalContactoPersonalFecha_Consultar]
@PpalContactoPersonalFechaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalContactoPersonalFecha',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@PpalContactoPersonalID_ int = 0,
		@Fecha_ Datetime = '',			
		@TipoFechaID_ int = 0,
		@Comentarios_ varchar(100) = '',
		@Predeterminado_ bit = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	
	SET		@IDAConsultar = @PpalContactoPersonalFechaID
	SELECT  @PpalContactoPersonalID_ = PpalContactoPersonalID,	@Fecha_ = Fecha,		@TipoFechaID_ = CfgTipoFechaID,
			@Comentarios_ = Comentarios , @Predeterminado_ = Predeterminado
	FROM    PpalContactoPersonalFecha
	WHERE   @PpalContactoPersonalFechaID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('ContactoPersonalFechaID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @PpalContactoPersonalID_ as PpalContactoPersonalID,	@Fecha_ as Fecha,		@TipoFechaID_ as TipoFechaID,
			@Comentarios_ as Comentarios, @Predeterminado_ as Predeterminado
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalContactoPersonalFecha_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[PpalContactoPersonalFecha_Eliminar]
@PpalContactoPersonalFechaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalContactoPersonalFecha',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @PpalContactoPersonalFechaID
	BEGIN
		DELETE
		FROM    PpalContactoPersonalFecha
		WHERE   PpalContactoPersonalFechaID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @PpalContactoPersonalFechaID)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('PpalContactoPersonalFechaID::', @PpalContactoPersonalFechaID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @PpalContactoPersonalFechaID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalContactoPersonalFecha_Guardar]...';


GO
CREATE PROCEDURE [dbo].[PpalContactoPersonalFecha_Guardar]
@PpalContactoPersonalFechaID int,
@PpalContactoPersonalID int,
@Fecha date,
@TipoFechaID int,
@Comentarios varchar(100) = null,
@Predeterminado bit
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalContactoPersonalFecha',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@Predeterminado_ bit = 0,
		@PpalContactoPersonalID_ int = 0,			
		@Fecha_ date,
		@TipoFechaID_ int = 0,
		@Comentarios_ varchar(100) = '',
		@PpalContactoPersonalFechaID_ int = @PpalContactoPersonalFechaID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalContactoPersonalFechaID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@Predeterminado_ = IsNull(Predeterminado,0),
	 			@PpalContactoPersonalID_ = IsNull(PpalContactoPersonalID,''),
				--@Fecha_ = IsNull(Fecha,2007-05-08),
				@TipoFechaID_ = IsNull(CfgTipoFechaID,0),
				@Comentarios_ = IsNull(Comentarios,0),
				@PpalContactoPersonalFechaID_ = IsNull(PpalContactoPersonalFechaID,0)
		   FROM	PpalContactoPersonalFecha WHERE PpalContactoPersonalFechaID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		--IF @AreaClave_ = @ClaveNoAsignado and @AreaClave <> @ClaveNoAsignado
			--SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalContactoPersonalFecha
			SET     Predeterminado = @Predeterminado,
					PpalContactoPersonalID = @PpalContactoPersonalID,
					Fecha = @Fecha,
					CfgTipoFechaID = @TipoFechaID,
					Comentarios = @Comentarios
			WHERE   PpalContactoPersonalFechaID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalContactoPersonalFecha(
					Predeterminado,
					PpalContactoPersonalID,
					Fecha,
					CfgTipoFechaID,
					Comentarios)
			VALUES  (
					@Predeterminado,
					@PpalContactoPersonalID,
					@Fecha,
					@TipoFechaID,
					@Comentarios)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalContactoPersonalFechaID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('Predeterminado::', @Predeterminado_, ':', @Predeterminado, ';')
				SET @logMessage = Concat(@logMessage, 'PpalContactoPersonalID::', @PpalContactoPersonalID_, ':', @PpalContactoPersonalID, ';')
				--SET @logMessage = Concat(@logMessage, 'Fecha::', @Fecha_, ':', @Fecha, ';')
				SET @logMessage = Concat(@logMessage, 'TipoFechaID::', @TipoFechaID_, ':', @TipoFechaID, ';')
				SET @logMessage = Concat(@logMessage, 'Comentarios::', @Comentarios_, ':', @Comentarios, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalContactoPersonalFecha_Listado]...';


GO
CREATE PROCEDURE [dbo].[PpalContactoPersonalFecha_Listado]
-- Parámetros para Bitácora
	 @UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalContactoPersonalFecha',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	SELECT  PpalContactoPersonalFechaID,PpalContactoPersonalID,Fecha,CfgTipoFechaID,Comentarios,Predeterminado
	FROM    PpalContactoPersonalFecha
	ORDER BY CfgTipoFechaID

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalContactoPersonalMail_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalContactoPersonalMail_Consultar]
@PpalContactoPersonalMailID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora		nvarchar(100) = 'AuxBanco',	
		@Operacion					nvarchar(20) = 'Read', 
		@logMessage					varchar(Max) = '',
		@isChangeBeLogged			bit

-- Variables para valores de columnas
DECLARE @PpalContactoPersonalMailID_	int = 0,
		@PpalContactoPersonalID_		int = 0,
		@CfgTipoMailID_					int = 0,
		@Email_							nvarchar(100) = '',
		@Predeterminado_				bit,
		@Comentarios_					nvarchar(100) = ''

SET NOCOUNT ON
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @PpalContactoPersonalMailID
	SELECT  @PpalContactoPersonalMailID_	= PpalContactoPersonalMailID,
			@PpalContactoPersonalID_		= PpalContactoPersonalID,
			@Email_							= Email,
			@CfgTipoMailID_					= CfgTipoMailID,
			@Predeterminado_				= Predeterminado,
			@Comentarios_					= Comentarios
	FROM    PpalContactoPersonalMail
	WHERE   PpalContactoPersonalMailID = @PpalContactoPersonalMailID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion
	-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalContactoPersonalMailID::', @PpalContactoPersonalMailID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as PpalContactoPersonalMailID,	@PpalContactoPersonalID_ as PpalContactoPersonalID,	
			@Email_ as Email,								@CfgTipoMailID_ as CfgTipoMailID,
			@Predeterminado_ as Predeterminado,				@Comentarios_ as Comentarios
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalContactoPersonalMail_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalContactoPersonalMail_Eliminar]
@PpalContactoPersonalMailID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
SET NOCOUNT ON 
-- Variables para manejo de Errores
DECLARE @Errores int, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalContactoPersonalMail',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @PpalContactoPersonalMailID
    DELETE
    FROM    PpalContactoPersonalMail
    WHERE   PpalContactoPersonalMailID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('PpalContactoPersonalMailID::', @PpalContactoPersonalMailID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalContactoPersonalMail_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalContactoPersonalMail_Guardar]
@PpalContactoPersonalMailID int,
@PpalContactoPersonalID int,
@Email varchar(100),
@Predeterminado bit,
@Comentarios varchar(100),
@TipoMailID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300), @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalContactoPersonalMail',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE @PpalContactoPersonalMailID_		int = @PpalContactoPersonalMailID,
		@PpalContactoPersonalID_			int = @PpalContactoPersonalID,
		@Email_								varchar(100) = '',
		@Predeterminado_					bit = 0,
		@Comentarios_						varchar(100) = '',
		@TipoMailID_						int = 0
		
BEGIN TRANSACTION 
BEGIN TRY
	SET @IDAActualizar = @PpalContactoPersonalID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@PpalContactoPersonalMailID_		=	IsNull(PpalContactoPersonalMailID,0),
				@PpalContactoPersonalID_			= ISNULL(PpalContactoPersonalID, 0),
	 			@Email_								=	IsNull(Email,''),
				@Predeterminado_					=	IsNull(Predeterminado,''),
				@Comentarios_						=	IsNull(Comentarios,0),
				@TipoMailID_						= ISNULL(CfgTipoMailID, 0)
		   FROM	PpalContactoPersonalMail WHERE PpalContactoPersonalID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalContactoPersonalMail
				SET     PpalContactoPersonalID = @PpalContactoPersonalID,
						Email = @Email,
						Predeterminado = @Predeterminado,
						Comentarios = @Comentarios,
						CfgTipoMailID = @TipoMailID
				WHERE   PpalContactoPersonalMailID = @PpalContactoPersonalMailID
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalContactoPersonalMail(
							PpalContactoPersonalID,
							Email,
							Predeterminado,
							Comentarios,
							CfgTipoMailID)
					VALUES  (
							@PpalContactoPersonalID,
							@Email,
							@Predeterminado,
							@Comentarios,
							@TipoMailID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalContactoPersonalID > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalContactoPersonalID::', @PpalContactoPersonalID_, ':', @PpalContactoPersonalID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
        @PpalContactoPersonalMailID as PpalContactoPersonalMailID
GO
PRINT N'Creando Procedimiento [dbo].[PpalContactoPersonalMail_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalContactoPersonalMail_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS 
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalContactoPersonalMail',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  PpalContactoPersonalMailID,PpalContactoPersonalID,Email,CfgTipoMailID,Predeterminado,Comentarios
	FROM    PpalContactoPersonalMail

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalContactoPersonalTelefono_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalContactoPersonalTelefono_Consultar]
@PpalContactoPersonalTelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora		nvarchar(100) = 'AuxBanco',	
		@Operacion					nvarchar(20) = 'Read', 
		@logMessage					varchar(Max) = '',
		@isChangeBeLogged			bit
-- Variables para valores de Columna
DECLARE @PpalContactoPersonalTelefonoID_ int = 0,
		@PpalContactoPersonalID_			int = 0,
		@EspTelefonoID_						int = 0,
		@Extension_							int = 0,
		@Predeterminado_					bit,
		@Comentarios_						nvarchar(100) = '',
		@CfgUsoTelefonoID_					int = 0

SET NOCOUNT ON
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @PpalContactoPersonalTelefonoID
	SELECT  @PpalContactoPersonalTelefonoID_ = PpalContactoPersonalTelefonoID,
			@PpalContactoPersonalID_ = PpalContactoPersonalID,
			@EspTelefonoID_ = EspTelefonoID,
			@Extension_ = Extension,
			@Predeterminado_ = Predeterminado,
			@Comentarios_ = Comentarios,
			@CfgUsoTelefonoID_ = CfgUsoTelefonoID
	FROM    PpalContactoPersonalTelefono
	WHERE   PpalContactoPersonalTelefonoID = @PpalContactoPersonalTelefonoID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

	-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalContactoPersonalTelefonoID::', @PpalContactoPersonalTelefonoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as PpalContactoPersonalTelefonoID,		@PpalContactoPersonalID_ as PpalContactoPersonalID,	
			@EspTelefonoID_ as EspTelefonoID,						@Extension_ as Extension,
			@Predeterminado_ as Predeterminado,						@Comentarios_ as Comentarios,
			@CfgUsoTelefonoID_ as CfgUsoTelefonoID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalContactoPersonalTelefono_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalContactoPersonalTelefono_Eliminar]
@PpalContactoPersonalTelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
SET NOCOUNT ON 
-- Variables para manejo de Errores
DECLARE @Errores int, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalContactoPersonalTelefono',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @PpalContactoPersonalTelefonoID
    DELETE
    FROM    PpalContactoPersonalTelefono
    WHERE   PpalContactoPersonalTelefonoID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('PpalContactoPersonalTelefonoID::', @PpalContactoPersonalTelefonoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalContactoPersonalTelefono_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalContactoPersonalTelefono_Guardar]
@ModificacionUsuarioID int = null,
@PpalContactoPersonalTelefonoID int,
@PpalContactoPersonalID int,
@TelefonoID int,
@Extension varchar(10),
@Predeterminado bit,
@Comentarios varchar(100),
@CfgUsoTelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalContactoPersonalTelefono',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalContactoPersonalID_ int = 0,
		@TelefonoID_ int = 0,			
		@TipoTelefonoID_ int = 0,
		@Comentarios_ varchar(100) = '',
		@Predeterminado_ bit = 0,
		@PpalContactoPersonalTelefonoID_ int = @PpalContactoPersonalTelefonoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION


	SET @IDAActualizar = @PpalContactoPersonalTelefonoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@PpalContactoPersonalID_ = IsNull(PpalContactoPersonalID,0),
	 			@TelefonoID_ = IsNull(EspTelefonoID,0),
				@Comentarios_ = IsNull(Comentarios,0),
				@Predeterminado_ = IsNull(@Predeterminado_,0)
		   FROM	PpalContactoPersonalTelefono WHERE PpalContactoPersonalTelefonoID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
    BEGIN
        UPDATE  PpalContactoPersonalTelefono
        SET     PpalContactoPersonalID = @PpalContactoPersonalID,
				EspTelefonoID = @TelefonoID,
				Extension = @Extension,
				Predeterminado = @Predeterminado,
				Comentarios = @Comentarios,
				CfgUsoTelefonoID = @CfgUsoTelefonoID
        WHERE   PpalContactoPersonalTelefonoID = @PpalContactoPersonalTelefonoID
    END
    ELSE
    BEGIN        
        INSERT  INTO PpalContactoPersonalTelefono(
                PpalContactoPersonalID,
				EspTelefonoID,
				Extension,
				Predeterminado,
				Comentarios,
				CfgUsoTelefonoID)
        VALUES  (
                @PpalContactoPersonalID,
				@TelefonoID,
				@Extension,
				@Predeterminado,
				@Comentarios,
				@CfgUsoTelefonoID)
        
        SET     @PpalContactoPersonalTelefonoID = SCOPE_IDENTITY()
    END
IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalContactoPersonalTelefonoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalContactoPersonalID::', @PpalContactoPersonalID_, ':', @PpalContactoPersonalID, ';')
				SET @logMessage = Concat(@logMessage, 'TelefonoID::', @TelefonoID_, ':', @TelefonoID, ';')
				SET @logMessage = Concat(@logMessage, 'Comentarios::', @Comentarios_, ':', @Comentarios, ';')
				SET @logMessage = Concat(@logMessage, 'Predeterminado::', @Predeterminado_, ':', @Predeterminado, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalContactoPersonalTelefono_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalContactoPersonalTelefono_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS 
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalContactoPersonalTelefono',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  PpalContactoPersonalTelefonoID,PpalContactoPersonalID,EspTelefonoID,Extension,Predeterminado,Comentarios,CfgUsoTelefonoID
	FROM    PpalContactoPersonalTelefono

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalCuentaContable_Consultar]...';


GO
CREATE PROCEDURE [dbo].[PpalCuentaContable_Consultar]
@PpalCuentaContableID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalCuentaContable',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@PpalCuentaContableClave_ nvarchar(20) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@EmpresaID_ int = 0,
		@PadreID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @PpalCuentaContableID
	/************* FIN COPY 1  *********************/
	SELECT  @PpalCuentaContableClave_ = PpalCuentaContableClave,	@Nombre_ = Nombre,	
			@EmpresaID_ = EmpresaID,  @PadreID_ = PadreID
	FROM    PpalCuentaContable
	WHERE   PpalCuentaContableID = @IDAConsultar

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalCuentaContableID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as PpalCuentaContableID,					@PpalCuentaContableClave_ as PpalCuentaContableClave,			
			@Nombre_ as Nombre,										@EmpresaID_ as EmpresaID,
			@PadreID_ as PadreID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[PpalCuentaContable_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[PpalCuentaContable_Eliminar]
@PpalCuentaContableID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalCuentaContable',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @PpalCuentaContableID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(PpalCuentaContableClave,'')
	  FROM	PpalCuentaContable WHERE PpalCuentaContableID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    PpalCuentaContable
		WHERE   PpalCuentaContableID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('PpalCuentaContableID::', @PpalCuentaContableID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @PpalCuentaContableID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalCuentaContable_Guardar]...';


GO
CREATE PROCEDURE [dbo].[PpalCuentaContable_Guardar]
@PpalCuentaContableID int,
@EmpresaID int,
@PpalCuentaContableClave varchar(20),
@Nombre varchar(60),
@PadreID int =0
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalArea',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalCuentaContableClave_ nvarchar(20) = '',
		@Nombre_ nvarchar(60) = '',
		@EmpresaID_ int = 0,
		@PadreID_ int = 0,
		@PpalCuentaContableID_ int = @PpalCuentaContableID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalCuentaContableID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@PpalCuentaContableClave_ = IsNull(PpalCuentaContableClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@EmpresaID_ = IsNull(EmpresaID,0),
				@PadreID_ = IsNull(PadreID,0),
				@PpalCuentaContableID_ = IsNull(PpalCuentaContableID,0)
		   FROM	PpalCuentaContable WHERE PpalCuentaContableID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @PpalCuentaContableClave_ = @ClaveNoAsignado and @PpalCuentaContableClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  PpalCuentaContable
			SET     PpalCuentaContableClave = @PpalCuentaContableClave,
					Nombre = @Nombre,
					EmpresaID = @EmpresaID,
					PadreID = @PadreID
			WHERE   PpalCuentaContableID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalCuentaContable(
					PpalCuentaContableClave,
					Nombre,
					EmpresaID,
					PadreID)
			VALUES  (
					@PpalCuentaContableClave,
					@Nombre,
					@EmpresaID,
					@PadreID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalCuentaContableID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalAreaClave::', @PpalCuentaContableClave_, ':', @PpalCuentaContableClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'EmpresaID::', @EmpresaID_, ':', @EmpresaID, ';')
				SET @logMessage = Concat(@logMessage, 'PadreID::', @PadreID_, ':', @PadreID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[PpalCuentaContable_Listado]...';


GO
CREATE PROCEDURE [dbo].[PpalCuentaContable_Listado]
@TipoListado varchar(10) = ''
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalArea',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaID::', @EmpresaIDSolicitudBase, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
/************* FIN COPY 1  *********************/
	IF @TipoListado = 'Minimo'
		SELECT  PpalCuentaContableID AS ID,	PpalCuentaContableClave AS Clave,		Nombre, 
				Nombre,		0 AS PadreID
		FROM    PpalCuentaContable
		WHERE	EmpresaID = @EmpresaIDSolicitudBase
		UNION
		SELECT  Null AS ID,	'' AS Clave,		'(Ninguna)', 
				'(Ninguna)',		0 
		ORDER BY PpalCuentaContableClave

	ELSE
		SELECT  PpalCuentaContableID, EmpresaID, PpalCuentaContableClave,Nombre,PadreID
		FROM    PpalCuentaContable
		WHERE	EmpresaID = @EmpresaIDSolicitudBase
		ORDER BY PpalCuentaContableClave

/****************** COPY 2 ************************************************/
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonal_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonal_Consultar]
@PpalPersonalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalPersonal',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@PpalPersonalClave_ nvarchar(10) = '',
		@EmpresaID_ int = 0	,		
		@PuestoID_ int = 0,
		@ReportaAPpalPersonalID_ int = 0,
		@PpalAreaID_ int = 0,
		@PpalPersonalID_ int = 0,
		@PpalCentroCostoID_ int = 0,
		@AuxHorarioPersonalID_ int = 0,
		@CfgEstatusPersonalID_ int = 0,
		@EspPersonalID_ int = 0,
		--Variebles Persona
		@FisicaMoral_ char = '',
		@NombreComercial_ varchar(120) = '',
		@RazonSocial_ varchar(120) = '',
		@Nombre_ varchar(35) = '',
		@ApellidoPaterno_ varchar(30) = '',
		@ApellidoMaterno_ varchar(30) = '',
		@RFC_ varchar(13) = '',
		@CURP_ varchar(18) = '',
		@SexoID_ int = 0,
		@FechaNacimiento_ DateTime = GetDate(),
		@EspCiudadNacimientoID_ int = 0,
		@AuxEstadoCivilID_ int = 0,
		@CasadoCivil_ bit = 0,
		@CasadoIglesia_ bit = 0,
		@Iniciales_ varchar(6) = '',
		@SobreNombre_ varchar(25) = '',
		@NombreCorto_ varchar(25) = '',
		@PpalProveedorClave_ varchar(10) = '',
		@NombreCompleto_ varchar(97) = ''


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @PpalPersonalID
	SELECT  @PpalPersonalID_ = PP.PpalPersonalID,
			@PpalPersonalClave_ = PP.PpalPersonalClave,
			@EmpresaID_ = PP.EmpresaID,
			@PuestoID_ = PP.AuxPuestoID,
			@ReportaAPpalPersonalID_ = PP.ReportaAPpalPersonalID,
			@PpalAreaID_ = PP.PpalAreaID,
			@PpalCentroCostoID_ = PP.PpalCentroCostoID,
			@AuxHorarioPersonalID_ = PP.AuxHorarioPersonalID,
			@CfgEstatusPersonalID_ = PP.CfgEstatusPersonalID,
			@EspPersonalID_ = EP.EspPersonaID,
			@FisicaMoral_ = EP.FisicaMoral,
			@NombreComercial_ = EP.NombreComercial,
			@RazonSocial_ = EP.RazonSocial,
			@Nombre_ = EP.Nombre,
			@ApellidoPaterno_ = EP.ApellidoPaterno,
			@ApellidoMaterno_ = EP.ApellidoMaterno,
			@RFC_ = EP.RFC,
			@CURP_ = EP.CURP,
			@SexoID_ = EP.SistemaSexoID,
			@FechaNacimiento_ = EP.FechaNacimiento,
			@EspCiudadNacimientoID_ = EP.EspCiudadNacimientoID,
			@AuxEstadoCivilID_ = EP.AuxEstadoCivilID,
			@CasadoCivil_ = EP.CasadoCivil,
			@CasadoIglesia_ = EP.CasadoIglesia,
			@Iniciales_ = EP.Iniciales,
			@SobreNombre_ = EP.SobreNombre,
			@NombreCorto_ = EP.NombreCorto,
			@NombreCompleto_ = EP.Nombre + ' ' + EP.ApellidoPaterno + ' ' + EP.ApellidoMaterno
	FROM    PpalPersonal PP
	inner join EspPersona EP on  PP.EspPersonaID = EP.EspPersonaID
	WHERE   PpalPersonalID = @PpalPersonalID

-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalPersonalID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as PpalPersonalID,					@PpalPersonalClave_ as PpalPersonalClave,	
			@EmpresaID_ as EmpresaID,							@PuestoID_ as PuestoID,			
			@ReportaAPpalPersonalID_ as ReportaAPpalPersonalID,			@PpalAreaID_ as PpalAreaID,
			@PpalCentroCostoID_ as PpalCentroCostoID,			@AuxHorarioPersonalID_ as AuxHorarioPersonalID,
			@CfgEstatusPersonalID_ as CfgEstatusPersonalID,		@EspPersonalID_ as EspPersonalID,
			@IDAConsultar as PpalProveedorID,					@UsuarioIDBitacora as SegUsuarioID,
			@FisicaMoral_ as FisicaMoral,					@NombreComercial_ as NombreComercial,
			@RazonSocial_ as RazonSocial,					@Nombre_ as Nombre,
			@ApellidoPaterno_ as ApellidoPaterno,			@ApellidoMaterno_ as ApellidoMaterno,
			@RFC_ as RFC,									@CURP_ as CURP,
			@SexoID_ as SexoID,								@FechaNacimiento_ as FechaNacimiento,
			@EspCiudadNacimientoID_ as EspCiudadNacimientoID,	@AuxEstadoCivilID_ as AuxEstadoCivilID,
			@CasadoCivil_ as CasadoCivil,					@CasadoIglesia_ as CasadoIglesia,
			@PpalProveedorClave_ as PpalProveedorClave,		@Iniciales_ as Iniciales,
			@NombreCorto_ as NombreCorto,					@SobreNombre_ as SobreNombre,
			@EmpresaID_ as EmpresaID,						@NombreCompleto_ as NombreCompleto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonal_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonal_Eliminar]
@PpalPersonalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5),@EliminarPersonaID int 
SELECT @EliminarPersonaID = EspPersonaID FROM PpalPersonal WHERE PpalPersonalID = @PpalPersonalID
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalPersonalID',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @PpalPersonalID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(PpalPersonalClave,'')
	  FROM	PpalPersonal WHERE PpalPersonalID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    PpalPersonal
		WHERE   PpalPersonalID = @PpalPersonalID
    
    -- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('PpalPersonalID::', @PpalPersonalID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @PpalPersonalID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonal_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonal_Guardar]
@PpalPersonalID int,
@PpalPersonalClave varchar(10),
@EmpresaIDSolicitudBase int,
@AuxPuestoID int,
@ReportaAPpalPersonalID int,
@PpalAreaID int,
@PpalCentroCostoID int,
@AuxHorarioPersonalID int,
@CfgEstatusPersonalID int,
--Variables Persona ->
@EspPersonaID int,
@FisicaMoral char(1),
@NombreComercial nvarchar(120),
@RazonSocial nvarchar(120),
@Nombre nvarchar(35),
@ApellidoPaterno nvarchar(30),
@ApellidoMaterno nvarchar(30),
@RFC nvarchar(13),
@CURP nvarchar(18),
@SexoID int = 0,
@FechaNacimiento datetime = null,
@EspCiudadNacimientoID int = 0,
@AuxEstadoCivilID int = 0,
@CasadoCivil bit,
@CasadoIglesia bit,
@Iniciales varchar(6),
@SobreNombre varchar(25),
@NombreCorto varchar(25)
--@Estatus bit
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalPersonal',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalPersonalClave_ varchar(10) = '',
		@EmpresaID_ int = 0,
		@EspPersonaID_ int,
		@AuxPuestoID_ int = 0,
		@ReportaAPpalPersonalID_ int = 0,
		@PpalAreaID_ int = 0,
		@PpalCentroCostoID_ int = 0,
		@AuxHorarioPersonalID_ int = 0,
		@CfgEstatusPersonalID_ int = 0,
		@PpalPersonalID_ int = @PpalPersonalID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalPersonalID

	-- actualiza en Persona
	EXEC @EspPersonaID = [dbo].[EspPersona_Guardar]
			@EspPersonaID = @EspPersonaID,
			@FisicaMoral = @FisicaMoral,
			@NombreComercial= @NombreComercial,
			@RazonSocial = @RazonSocial,
			@Nombre = @Nombre,
			@ApellidoPaterno = @ApellidoPaterno,
			@ApellidoMaterno = @ApellidoMaterno,
			@RFC = @RFC,
			@CURP = @CURP,
			@SexoID = @SexoID,
			@FechaNacimiento = @FechaNacimiento,
			@CiudadNacimientoID = @EspCiudadNacimientoID,
			@EstadoCivilID = @AuxEstadoCivilID,
			@CasadoCivil = @CasadoCivil,
			@CasadoIglesia = @CasadoIglesia,
			@Iniciales = @Iniciales,
			@SobreNombre = @SobreNombre,
			@NombreCorto = @NombreCorto,
			@EspDomicilioIDFacturacion = 2
			,@UsuarioIDBitacora		= @UsuarioIDBitacora
			,@DescripcionBitacora	= @DescripcionBitacora
			,@IpAddress			= @IpAddress	
			,@HostName			= @HostName

	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@PpalPersonalClave_ = IsNull(PpalPersonalClave,''),
	 			@EmpresaID_ = IsNull(EmpresaID,''),
				@EspPersonaID_ = IsNull(EspPersonaID,0), --Variable agregada
				@AuxPuestoID_ = IsNull(AuxPuestoID,''),
				@ReportaAPpalPersonalID_ = IsNull(ReportaAPpalPersonalID,0),
				@PpalAreaID_ = IsNull(PpalAreaID,0),
				@PpalCentroCostoID_ = IsNull(PpalCentroCostoID,0),
				@AuxHorarioPersonalID_ = IsNull(AuxHorarioPersonalID,0),
				@CfgEstatusPersonalID_ = IsNull(CfgEstatusPersonalID,0),
				@PpalPersonalID_ = IsNull(PpalPersonalID,0)
		   FROM	PpalPersonal WHERE PpalPersonalID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @PpalPersonalClave_ = @ClaveNoAsignado and @PpalPersonalClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalPersonal
			SET     PpalPersonalClave = @PpalPersonalClave,
					EspPersonaID = @EspPersonaID,
					EmpresaID = @EmpresaIDSolicitudBase,
					AuxPuestoID = @AuxPuestoID,
					ReportaAPpalPersonalID = @ReportaAPpalPersonalID,
					PpalAreaID = @PpalAreaID,
					PpalCentroCostoID = @PpalCentroCostoID,
					AuxHorarioPersonalID = @AuxHorarioPersonalID,
					CfgEstatusPersonalID = @CfgEstatusPersonalID
			WHERE   PpalPersonalID = @PpalPersonalID
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalPersonal(
					PpalPersonalClave,
					EmpresaID,
					EspPersonaID,
					AuxPuestoID,
					ReportaAPpalPersonalID,
					PpalAreaID,
					PpalCentroCostoID,
					AuxHorarioPersonalID,
					CfgEstatusPersonalID)
			VALUES  (
					@PpalPersonalClave,
					@EmpresaIDSolicitudBase,
					@EspPersonaID,
					@AuxPuestoID,
					@ReportaAPpalPersonalID,
					@PpalAreaID,
					@PpalCentroCostoID,
					@AuxHorarioPersonalID,
					@CfgEstatusPersonalID)
        
        SET     @IDAActualizar = SCOPE_IDENTITY()
    END
    IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalPersonalID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalPersonalClave::', @PpalPersonalClave_, ':', @PpalPersonalClave, ';')
				SET @logMessage = Concat(@logMessage, 'EmpresaID::', @EmpresaID_, ':', @EmpresaIDSolicitudBase, ';')
				SET @logMessage = Concat(@logMessage, 'PuestoID::', @AuxPuestoID_, ':', @AuxPuestoID, ';')
				SET @logMessage = Concat(@logMessage, 'ReportaAPpalPersonalID::', @ReportaAPpalPersonalID_, ':', @ReportaAPpalPersonalID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalAreaID::', @PpalAreaID_, ':', @PpalAreaID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalCentroCostoID::', @PpalCentroCostoID_, ':', @PpalCentroCostoID, ';')
				SET @logMessage = Concat(@logMessage, 'HorarioPersonalID::', @AuxHorarioPersonalID_, ':', @AuxHorarioPersonalID, ';')
				SET @logMessage = Concat(@logMessage, 'CfgEstatusPersonalID::', @CfgEstatusPersonalID_, ':', @CfgEstatusPersonalID, ';')
				
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonal_Listado]...';


GO
CREATE PROCEDURE [dbo].[PpalPersonal_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalPersonal',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaIDSolicitudBase::', @EmpresaIDSolicitudBase, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  PP.PpalPersonalID AS ID, PP.PpalPersonalClave Clave, EP.Nombre + ' ' + EP.ApellidoPaterno + ' ' + EP.ApellidoMaterno as Nombre, 
				PP.PpalPersonalClave NombreCorto, 0 as PadreID
		FROM    PpalPersonal PP
				inner join EspPersona EP on PP.EspPersonaID = EP.EspPersonaID 
		WHERE	PP.EmpresaID = @EmpresaIDSolicitudBase
		ORDER BY 3
	ELSE IF @TipoListado = 'Parcial'
		SELECT  PP.PpalPersonalID,					PP.PpalPersonalClave,		PP.EmpresaID, 
				PP.AuxPuestoID,						PP.ReportaAPpalPersonalID,	PP.PpalAreaID,
				PP.PpalCentroCostoID,				PP.AuxHorarioPersonalID,	PP.CfgEstatusPersonalID,
				PP.EspPersonaID,
				EP.FisicaMoral,						EP.NombreComercial,
				EP.RazonSocial,						EP.Nombre,					EP.ApellidoPaterno,
				EP.ApellidoMaterno,					EP.CURP,					EP.SistemaSexoID,
				EP.FechaNacimiento,					EP.EspCiudadNacimientoID,	EP.AuxEstadoCivilID,
				EP.CasadoCivil,						EP.CasadoIglesia,			EP.Iniciales,
				EP.Sobrenombre,						EP.NombreCorto,				EP.RFC,
				PCC.Nombre as CentroCostoNombre,	AP.Nombre as PuestoNombre,	CEP.Nombre as EstatusNombre,
				EP.Nombre + ' ' + EP.ApellidoPaterno + ' ' + EP.ApellidoMaterno as NombreCompleto
		FROM    PpalPersonal PP
		inner join EspPersona EP on PP.EspPersonaID = EP.EspPersonaID 
		inner join PpalCentroCosto PCC on PP.PpalCentroCostoID = PCC.PpalCentroCostoID 
		inner join AuxPuesto AP on PP.AuxPuestoID = AP.AuxPuestoID 
		inner join CfgEstatusPersonal CEP on PP.CfgEstatusPersonalID = CEP.CfgEstatusPersonalID 
		WHERE	PP.EmpresaID = @EmpresaIDSolicitudBase
	ELSE
		SELECT  a.PpalPersonalID, a.PpalPersonalClave, a.EmpresaID, a.AuxPuestoID, a.ReportaAPpalPersonalID, a.PpalAreaID, a.PpalCentroCostoID, a.AuxHorarioPersonalID, a.CfgEstatusPersonalID
		FROM    PpalPersonal a 		
		WHERE	a.EmpresaID = @EmpresaIDSolicitudBase

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonalDomicilio_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonalDomicilio_Consultar]
@PpalPersonalDomicilioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBItacora   nvarchar(100) = 'PpalPersonalDomicilio',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@PpalPersonalID_ int = 0,
		@DomicilioID_ int = 0,			
		@TipoDomicilioID_ int = 0,
		@Predeterminado_ bit = 0,
		@Comentarios varchar(60) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @PpalPersonalDomicilioID

	SELECT  PpalPersonalDomicilioID,PpalPersonalID,EspDomicilioID,CfgTipoDomicilioID,Comentarios,Predeterminado
	FROM    PpalPersonalDomicilio
	WHERE   PpalPersonalDomicilioID = @PpalPersonalDomicilioID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBItacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalPersonalDomicilioID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBItacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @PpalPersonalID_ as PpalPersonalID, @DomicilioID_ as DomicilioID, @TipoDomicilioID_ as TipoDomicilioID,
			@Predeterminado_ as Predeterminado, @Comentarios as Comentarios
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonalDomicilio_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonalDomicilio_Eliminar]
@PpalPersonalDomicilioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5), @EliminarDomicilioID int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalPersonalDomicilio',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

select @EliminarDomicilioID = EspDomicilioID  from PpalPersonalDomicilio where PpalPersonalDomicilioID = @PpalPersonalDomicilioID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @PpalPersonalDomicilioID

	BEGIN

		DELETE
		FROM    PpalPersonalDomicilio
		WHERE   PpalPersonalDomicilioID = @PpalPersonalDomicilioID
    -- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('PpalPersonalDomicilioID::', @PpalPersonalDomicilioID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @PpalPersonalDomicilioID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
exec [EspDomicilio_Eliminar]
		@PpalDomicilioID = @EliminarDomicilioID
		,@UserIDBitacora	= 1
		,@Descripcion	= "null"
		,@IpAddress				= "null"
		,@HostName					= "null"
SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonalDomicilio_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonalDomicilio_Guardar]
@PpalPersonalDomicilioID int,
@PpalPersonalID int,
@DomicilioID int,
@TipoDomicilioID int,
@Comentarios varchar(100),
@Predeterminado bit
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalPersonalDomicilio',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalPersonalID_ int = 0,
		@DomicilioID_ int = 0,			
		@TipoDomicilioID_ int = 0,
		@Comentarios_ varchar(100) = '',
		@Predeterminado_ bit = 0,
		@PpalPersonalDomicilioID_ int = @PpalPersonalDomicilioID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalPersonalDomicilioID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@PpalPersonalID_ = IsNull(PpalPersonalID,0),
	 			@DomicilioID_ = IsNull(EspDomicilioID,0),
				@TipoDomicilioID_ = IsNull(CfgTipoDomicilioID,''),
				@Comentarios_ = IsNull(Comentarios,0),
				@Predeterminado_ = IsNull(@Predeterminado_,0)
		   FROM	PpalPersonalDomicilio WHERE PpalPersonalDomicilioID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalPersonalDomicilio
			SET     PpalPersonalID = @PpalPersonalID,
					EspDomicilioID = @DomicilioID,
					CfgTipoDomicilioID = @TipoDomicilioID,
					Comentarios = @Comentarios,
					Predeterminado = @Predeterminado

			WHERE   PpalPersonalDomicilioID = @PpalPersonalDomicilioID
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalPersonalDomicilio(
					PpalPersonalID,
					EspDomicilioID,
					CfgTipoDomicilioID,
					Comentarios,
					Predeterminado)
			VALUES  (
					@PpalPersonalID,
					@DomicilioID,
					@TipoDomicilioID,
					@Comentarios,
					@Predeterminado)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalPersonalDomicilioID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalPersonalID::', @PpalPersonalID_, ':', @PpalPersonalID, ';')
				SET @logMessage = Concat(@logMessage, 'DomicilioID::', @DomicilioID_, ':', @DomicilioID, ';')
				SET @logMessage = Concat(@logMessage, 'TipoDomicilioID::', @TipoDomicilioID_, ':', @TipoDomicilioID, ';')
				SET @logMessage = Concat(@logMessage, 'Comentarios::', @Comentarios_, ':', @Comentarios, ';')
				SET @logMessage = Concat(@logMessage, 'Predeterminado::', @Predeterminado_, ':', @Predeterminado, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonalDomicilio_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonalDomicilio_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalPersonalDomicilio',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('EmpresaID::', @EmpresaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  a.PpalPersonalDomicilioID, a.PpalPersonalID, a.espDomicilioID, a.CfgTipoDomicilioID, a.Comentarios, a.Predeterminado,
			b.Calle, b.EspCiudadID, b.CodigoPostal, b.ColoniaNombre, b.Coordenadas, b.DomicilioCompleto, b.EntreCalle1, 
			b.EntreCalle2, b.NumeroExterior, b.NumeroInterior
	FROM    PpalPersonalDomicilio a
			LEFT OUTER JOIN vDomicilio b ON a.EspDomicilioID = b.EspDomicilioID

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonalDomicilio_ListadoPpalPersonalID]...';


GO
CREATE PROCEDURE [dbo].[PpalPersonalDomicilio_ListadoPpalPersonalID]
@PpalPersonalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalPersonalDomicilio',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('PpalPersonalID::', @PpalPersonalID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  a.PpalPersonalDomicilioID, a.PpalPersonalID, a.EspDomicilioID, a.CfgTipoDomicilioID, a.Comentarios, a.Predeterminado,
			b.Calle, b.EspCiudadID, b.CodigoPostal, b.ColoniaNombre, b.Coordenadas, b.DomicilioCompleto, b.EntreCalle1, 
			b.EntreCalle2, b.NumeroExterior, b.NumeroInterior
	FROM    PpalPersonalDomicilio a
			LEFT OUTER JOIN vDomicilio b ON a.EspDomicilioID = b.EspDomicilioID
	WHERE   PpalPersonalID = @PpalPersonalID

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonalFecha_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonalFecha_Consultar]
@PpalPersonalFechaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalPersonalFecha',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE @PpalPersonalID_ int = 0	,		
		@Fecha_ int = 0,
		@TipoFechaID_ int = 0,
		@Comentarios_ varchar = 0,
		@Predeterminado_ bit = 0,
		@PpalPersonalFechaID_ int

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @PpalPersonalFechaID
	SELECT  PpalPersonalFechaID,PpalPersonalID,Fecha,CfgTipoFechaID,Comentarios,Predeterminado
	FROM    PpalPersonalFecha
	WHERE   PpalPersonalFechaID = @PpalPersonalFechaID

-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalPersonalFechaID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @PpalPersonalID_ as PpalPersonalID,	@Fecha_ as Fecha, @TipoFechaID_ as TipoFechaID,
			@Comentarios_ as Comentarios, @Predeterminado_ as Predeterminado
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonalFecha_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonalFecha_Eliminar]
@PpalPersonalFechaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora  nvarchar(100) = 'PpalPersonalFecha',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	BEGIN
	SET @IDABorrar = @PpalPersonalFechaID
		DELETE
		FROM    PpalPersonalFecha
		WHERE   PpalPersonalFechaID = @PpalPersonalFechaID
     -- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('PpalPersonalFechaID::', @PpalPersonalFechaID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @PpalPersonalFechaID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonalFecha_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonalFecha_Guardar]
@PpalPersonalFechaID int,
@PpalPersonalID int,
@Fecha Date,
@TipoFechaID int,
@Comentarios varchar(100),
@Predeterminado bit
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalPersonalFecha',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalPersonalID_ int = 0,	
		@Fecha_ Date ='',
		@TipoFechaID_ int = 0,
		@Comentarios_ varchar(100) = '',
		@Predeterminado_ bit = 0,
		@PpalPersonalFechaID_ int = @PpalPersonalFechaID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalPersonalFechaID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@PpalPersonalID_ = IsNull(PpalPersonalID,0),
				@TipoFechaID_ = IsNull(CfgTipoFechaID,''),
				@Comentarios_ = IsNull(Comentarios,0),
				@Predeterminado_ = IsNull(@Predeterminado_,0)
		   FROM	PpalPersonalFecha WHERE PpalPersonalFechaID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalPersonalFecha
			SET     PpalPersonalID = @PpalPersonalID,
					Fecha = @Fecha,
					CfgTipoFechaID = @TipoFechaID,
					Comentarios = @Comentarios,
					Predeterminado = @Predeterminado

			WHERE   PpalPersonalFechaID = @PpalPersonalFechaID
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalPersonalFecha(
					PpalPersonalID,
					Fecha,
					CfgTipoFechaID,
					Comentarios,
					Predeterminado)
			VALUES  (
					@PpalPersonalID,
					@Fecha,
					@TipoFechaID,
					@Comentarios,
					@Predeterminado)
        
        SET     @PpalPersonalFechaID = SCOPE_IDENTITY()
    END
    IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalPersonalFechaID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalPersonalID::', @PpalPersonalID_, ':', @PpalPersonalID, ';')
				SET @logMessage = Concat(@logMessage, 'TipoFechaID::', @TipoFechaID_, ':', @TipoFechaID, ';')
				SET @logMessage = Concat(@logMessage, 'Comentarios::', @Comentarios_, ':', @Comentarios, ';')
				SET @logMessage = Concat(@logMessage, 'Predeterminado::', @Predeterminado_, ':', @Predeterminado, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre			= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonalFecha_ListadoPpalPersonalID]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonalFecha_ListadoPpalPersonalID]
@PpalPersonalID int 
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalPersonalFecha',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('EmpresaID::', @EmpresaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	SELECT	PpalPersonalFechaID,PpalPersonalID,Fecha,CfgTipoFechaID,Comentarios,Predeterminado
	FROM    PpalPersonalFecha
	WHERE   PpalPersonalID =  @PpalPersonalID

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonalMail_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonalMail_Consultar]
@PpalPersonalMailID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalPersonalMail',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@PpalPersonalID_ int = 0,
		@Email_ nvarchar(60) = '',			
		@TipoMailID_ int = 0,
		@Predeterminado_ bit = 0,
		@Comentarios varchar(60) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @PpalPersonalMailID
	SELECT  PpalPersonalMailID,PpalPersonalID,Email,CfgTipoMailID,Predeterminado,Comentarios
	FROM    PpalPersonalMail
	WHERE   PpalPersonalMailID = @PpalPersonalMailID

-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalPersonalMailID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @PpalPersonalID_ as PpalPersonalID, @Email_ as Email, @TipoMailID_ as TipoMailID,
			@Predeterminado_ as Predeterminado, @Comentarios as Comentarios
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonalMail_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonalMail_Eliminar]
@PpalPersonalMailID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalPersonalMail',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @PpalPersonalMailID

	BEGIN
		DELETE
		FROM    PpalPersonalMail
		WHERE   PpalPersonalMailID = @PpalPersonalMailID
    
     -- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('PpalPersonalMailID::', @PpalPersonalMailID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @PpalPersonalMailID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonalMail_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonalMail_Guardar]
@PpalPersonalMailID int,
@PpalPersonalID int,
@Email varchar(100),
@TipoMailID int,
@Predeterminado bit,
@Comentarios varchar(100)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalPersonalMail',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalPersonalID_ int = 0,
		@Email_ varchar(100) = '',			
		@TipoMailID_ int = 0,
		@Comentarios_ varchar(100) = '',
		@Predeterminado_ bit = 0,
		@PpalPersonalMailID_ int = @PpalPersonalMailID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalPersonalMailID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@PpalPersonalID_ = IsNull(PpalPersonalID,0),
	 			@Email_ = IsNull(Email,0),
				@TipoMailID_ = IsNull(CfgTipoMailID,''),
				@Comentarios_ = IsNull(Comentarios,0),
				@Predeterminado_ = IsNull(@Predeterminado_,0)
		   FROM	PpalPersonalMail WHERE PpalPersonalMailID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalPersonalMail
			SET     PpalPersonalID = @PpalPersonalID,
					Email = @Email,
					CfgTipoMailID = @TipoMailID,
					Predeterminado = @Predeterminado,
					Comentarios = @Comentarios
			WHERE   PpalPersonalMailID = @PpalPersonalMailID
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalPersonalMail(
					PpalPersonalID,
					Email,
					CfgTipoMailID,
					Predeterminado,
					Comentarios)
			VALUES  (
					@PpalPersonalID,
					@Email,
					@TipoMailID,
					@Predeterminado,
					@Comentarios)
        
			SET     @PpalPersonalMailID = SCOPE_IDENTITY()
		END
    IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalPersonalMailID > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalPersonalID::', @PpalPersonalID_, ':', @PpalPersonalID, ';')
				SET @logMessage = Concat(@logMessage, 'Email::', @Email_, ':', @Email, ';')
				SET @logMessage = Concat(@logMessage, 'TipoMailID::', @TipoMailID_, ':', @TipoMailID, ';')
				SET @logMessage = Concat(@logMessage, 'Comentarios::', @Comentarios_, ':', @Comentarios, ';')
				SET @logMessage = Concat(@logMessage, 'Predeterminado::', @Predeterminado_, ':', @Predeterminado, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonalMail_ListadoPpalPersonalID]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonalMail_ListadoPpalPersonalID]
@PpalPersonalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalPersonalMail',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('EmpresaID::', @EmpresaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  PpalPersonalMailID,PpalPersonalID,Email,CfgTipoMailID,Predeterminado,Comentarios
	FROM    PpalPersonalMail
	WHERE   PpalPersonalID = @PpalPersonalID

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonalTelefono_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonalTelefono_Consultar]
@PpalPersonalTelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalPersonalTelefono',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@PpalPersonalID_ int = 0,
		@TelefonoID_ int = 0,			
		@TipoTelefonoID_ int = 0,
		@Extension_ int = 0,
		@Predeterminado_ bit = 0,
		@Comentarios varchar(60) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @PpalPersonalTelefonoID

	SELECT  PpalPersonalTelefonoID,PpalPersonalID,EspTelefonoID,Extension,Predeterminado,Comentarios,CfgUsoTelefonoID
	FROM    PpalPersonalTelefono
	WHERE   PpalPersonalTelefonoID = @PpalPersonalTelefonoID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalPersonalTelefonoID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @PpalPersonalID_ as PpalPersonalID, @TelefonoID_ as TelefonoID, @TipoTelefonoID_ as TipoTelefonoID,
			@Predeterminado_ as Predeterminado, @Comentarios as Comentarios
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonalTelefono_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonalTelefono_Eliminar]
@PpalPersonalTelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5), @EliminarTelefonoID int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalPersonalTelefono',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''
SELECT @EliminarTelefonoID = EspTelefonoID FROM PpalPersonalTelefono WHERE PpalPersonalTelefonoID = @PpalPersonalTelefonoID
SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @PpalPersonalTelefonoID

	BEGIN
		DELETE
		FROM    PpalPersonalTelefono
		WHERE   PpalPersonalTelefonoID = @PpalPersonalTelefonoID
    
     -- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('PpalPersonalTelefonoID::', @PpalPersonalTelefonoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @PpalPersonalTelefonoID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
exec [EspTelefono_Eliminar]
		@TelefonoID = @EliminarTelefonoID,
		@UsuarioIDBitacora = @UsuarioIDBitacora
SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonalTelefono_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonalTelefono_Guardar]
@ModificacionUsuarioID int = null,
@PpalPersonalTelefonoID int,
@PpalPersonalID int,
@TelefonoID int,
@Extension varchar(10),
@Predeterminado bit,
@Comentarios varchar(100),
@CfgUsoTelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null


AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalPersonalTelefono',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalPersonalID_ int = 0,
		@TelefonoID_ int = 0,			
		@TipoTelefonoID_ int = 0,
		@Comentarios_ varchar(100) = '',
		@Predeterminado_ bit = 0,
		@PpalPersonalTelefonoID_ int = @PpalPersonalTelefonoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION


	SET @IDAActualizar = @PpalPersonalTelefonoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@PpalPersonalID_ = IsNull(PpalPersonalID,0),
	 			@TelefonoID_ = IsNull(EspTelefonoID,0),
				@Comentarios_ = IsNull(Comentarios,0),
				@Predeterminado_ = IsNull(@Predeterminado_,0)
		   FROM	PpalPersonalTelefono WHERE PpalPersonalTelefonoID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalPersonalTelefono
			SET     PpalPersonalID = @PpalPersonalID,
					EspTelefonoID = @TelefonoID,
					Extension = @Extension,
					Predeterminado = @Predeterminado,
					Comentarios = @Comentarios,
					CfgUsoTelefonoID = @CfgUsoTelefonoID
			WHERE   PpalPersonalTelefonoID = @PpalPersonalTelefonoID
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalPersonalTelefono(
					PpalPersonalID,
					EspTelefonoID,
					Extension,
					Predeterminado,
					Comentarios,
					CfgUsoTelefonoID)
			VALUES  (
					@PpalPersonalID,
					@TelefonoID,
					@Extension,
					@Predeterminado,
					@Comentarios,
					@CfgUsoTelefonoID)
        
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalPersonalTelefonoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalPersonalID::', @PpalPersonalID_, ':', @PpalPersonalID, ';')
				SET @logMessage = Concat(@logMessage, 'TelefonoID::', @TelefonoID_, ':', @TelefonoID, ';')
				SET @logMessage = Concat(@logMessage, 'Comentarios::', @Comentarios_, ':', @Comentarios, ';')
				SET @logMessage = Concat(@logMessage, 'Predeterminado::', @Predeterminado_, ':', @Predeterminado, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalPersonalTelefono_ListadoPpalPersonalID]...';


GO


CREATE PROCEDURE [dbo].[PpalPersonalTelefono_ListadoPpalPersonalID]
@PpalPersonalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalPersonalTelefono',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('PpalPersonalID::', @PpalPersonalID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  a.PpalPersonalTelefonoID, a.PpalPersonalID, a.EspTelefonoID, a.Extension, a.Predeterminado, a.Comentarios,a.CfgUsoTelefonoID,
			b.ClaveTelefonicaPais, b.NumeroTelefonico, b.CfgTipoTelefonoID, b.CfgTipoTelefonoID
	FROM    PpalPersonalTelefono a 
			INNER JOIN EspTelefono b ON a.EspTelefonoID = b.EspTelefonoID
	WHERE   PpalPersonalID = @PpalPersonalID


	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalProducto_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalProducto_Consultar]
@PpalProductoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalProducto',	
		@Operacion				 nvarchar(20) = 'Read', 
		@logMessage				 varchar(Max) = '',
		@isChangeBeLogged		 bit

-- Variables para valores de columnas
DECLARE @PpalProductoID_		nvarchar(10) = @PpalProductoID,
		@MarcaID_	            int = 0,
		@Nombre_				nvarchar(100) = '',
		@NombreCorto_			nvarchar(20) = '',
		@AuxUnidadID_			int = 0,
		@ClaseProductoID_		int = 0,
		@CfgTipoProductoID_		int = 0,
		@NivelProductoID_		int = 0,
		@MetodoCosteoID_		int = 0,
		@ManejaLotes_			char(1) = '0',
		@ManejaSeries_			char(1) = '0',
		@Reorden_				decimal(18,6) = 0.0,
		@CfgFamiliaProductoID_	int = 0,
		@EstatusProductoID_		int = 0,
		@Maximo_				decimal(18,6) = 0.0,
		@Minimo_				decimal(18,6) = 0.0,
		@CostoPromedio_			decimal(18,6) = 0.0,
		@UltimoCosto_			decimal(18,6) = 0.0,
		@PpalProductoClave_			varchar(20) = '',
		@EmpresaID_				int = 0,
		@CfgTasaIVAID_			int = 0,
		@ExentoIVA_				char(1) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY	
	BEGIN TRANSACTION

	SET @IDAConsultar = @PpalProductoID
	SELECT  @PpalProductoID_		= PpalProductoID,
			@MarcaID_	            = MarcaID,
			@Nombre_				= Nombre,
			@NombreCorto_			= NombreCorto,
			@AuxUnidadID_			= AuxUnidadID,
			@ClaseProductoID_		= ClaseProductoID,
			@CfgTipoProductoID_		= CfgTipoProductoID,
			@NivelProductoID_		= NivelProductoID,
			@MetodoCosteoID_		= MetodoCosteoID,
			@ManejaLotes_			= ManejaLotes,
			@ManejaSeries_			= ManejaSeries,
			@Reorden_				= Reorden,
			@CfgFamiliaProductoID_	= CfgFamiliaProductoID,
			@EstatusProductoID_		= EstatusProductoID,
			@Maximo_				= Maximo,
			@Minimo_				= Minimo,
			@CostoPromedio_			= CostoPromedio,
			@UltimoCosto_			= UltimoCosto,
			@PpalProductoClave_			= PpalProductoClave,
			@EmpresaID_				= EmpresaID,
			@CfgTasaIVAID_			= CfgTasaIVAID,
			@ExentoIVA_				= ExentoIVA
	FROM PpalProducto
	WHERE PpalProductoID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @PpalProductoID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalAlmacenID::', @PpalProductoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @PpalProductoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
		-- Si no hubo errores -> COMMIT
		COMMIT TRANSACTION	
	END
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar		as PpalProductoID,				@PpalProductoID_		as PpalProductoID,
			@MarcaID_	            as MarcaID,					@Nombre_				as Nombre,
			@NombreCorto_			as NombreCorto,				@AuxUnidadID_			as AuxUnidadID,
			@ClaseProductoID_		as ClaseProductoID,			@CfgTipoProductoID_		as CfgTipoProductoID,
			@NivelProductoID_		as NivelProductoID,			@MetodoCosteoID_		as MetodoCosteoID,
			@ManejaLotes_			as ManejaLotes,				@ManejaSeries_			as ManejaSeries,
			@Reorden_				as Reorden,					@CfgFamiliaProductoID_	as CfgFamiliaProductoID,
			@EstatusProductoID_		as EstatusProductoID,		@Maximo_				as Maximo,
			@Minimo_				as Minimo,					@CostoPromedio_			as CostoPromedio,
			@UltimoCosto_			as UltimoCosto,				@PpalProductoClave_		as PpalProductoClave,
			@EmpresaID_				as EmpresaID,				@CfgTasaIVAID_			as CfgTasaIVAID,
			@ExentoIVA_				as ExentoIVA

ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProducto_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalProducto_Eliminar]
@PpalProductoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
SET NOCOUNT ON 
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalProducto',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave					nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDABorrar = @PpalProductoID
	DELETE
		FROM    PpalProducto
		WHERE   PpalProductoID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('PpalAlmacenID::', @PpalProductoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT

END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalProducto_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalProducto_Guardar]
@PpalProductoID		nvarchar(10) = null,
@MarcaID	        int ,
@Nombre				nvarchar(100) = null,
@NombreCorto		nvarchar(20) = null,
@AuxUnidadID		int,
@ClaseProductoID	int,
@CfgTipoProductoID	int,
@NivelProductoID	int,
@MetodoCosteoID		int,
@ManejaLotes		char(1),
@ManejaSeries		char(1),
@Reorden			decimal(18,6),
@CfgFamiliaProductoID	int,
@EstatusProductoID		int,
@Maximo					decimal(18,6),
@Minimo					decimal(18,6),
@CostoPromedio			decimal(18,2),
@UltimoCosto			decimal(18,2),
@PpalProductoClave		varchar(20),
@EmpresaID				int,
@CfgTasaIVAID			int,
@ExentoIVA				char(1)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalProducto',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalProductoID_		nvarchar(10) = @PpalProductoID,
		@MarcaID_	            int = 0,
		@Nombre_				nvarchar(100) = '',
		@NombreCorto_			nvarchar(20) = '',
		@AuxUnidadID_			int = 0,
		@ClaseProductoID_		int = 0,
		@CfgTipoProductoID_		int = 0,
		@NivelProductoID_		int = 0,
		@MetodoCosteoID_		int = 0,
		@ManejaLotes_			char(1) = '0',
		@ManejaSeries_			char(1) = '0',
		@Reorden_				decimal(18,6) = 0.0,
		@CfgFamiliaProductoID_	int = 0,
		@EstatusProductoID_		int = 0,
		@Maximo_				decimal(18,6) = 0.0,
		@Minimo_				decimal(18,6) = 0.0,
		@CostoPromedio_			decimal(18,2) = 0.0,
		@UltimoCosto_			decimal(18,2) = 0.0,
		@PpalProductoClave_		varchar(20) = '',
		@EmpresaID_				int = 0,
		@CfgTasaIVAID_			int = 0,
		@ExentoIVA_			char(1) = '0'

DECLARE	@ProductoUltimaClave	varchar(20) = '',
		@PpalProductoDigitos	tinyint

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalProductoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@PpalProductoID_	=	ISNULL(PpalProductoID, 0),
				@MarcaID_	        =    ISNULL(MarcaID, 0),
				@Nombre_			=	ISNULL(Nombre, ''),
				@NombreCorto_		=	ISNULL(NombreCorto, ''),
				@AuxUnidadID_		=	ISNULL(AuxUnidadID, 0),
				@ClaseProductoID_	=	ISNULL(ClaseProductoID, 0),
				@CfgTipoProductoID_	=	ISNULL(CfgTipoProductoID, 0),
				@NivelProductoID_	=	ISNULL(NivelProductoID, 0),
				@MetodoCosteoID_	=	ISNULL(MetodoCosteoID, 0),
				@ManejaLotes_		=	ISNULL(ManejaLotes, '0'),
				@ManejaSeries_		=	ISNULL(ManejaSeries, '0'),
				@Reorden_			=	ISNULL(Reorden, 0.0),
				@CfgFamiliaProductoID_	 = ISNULL(CfgFamiliaProductoID, 0),
				@EstatusProductoID_	=	ISNULL(EstatusProductoID, 0),
				@Maximo_			=	ISNULL(Maximo, 0.0),
				@Minimo_			=	ISNULL(Minimo, 0.0),
				@CostoPromedio_		=	ISNULL(CostoPromedio, 0.0),
				@UltimoCosto_		=	ISNULL(UltimoCosto, 0.0),
				@PpalProductoClave_	=	ISNULL(PpalProductoClave, ''),
				@EmpresaID_			=	ISNULL(EmpresaID, 0),
				@CfgTasaIVAID_		=	ISNULL(CfgTasaIVAID, 0),
				@ExentoIVA_		=	ISNULL(ExentoIVA, '')
		   FROM	PpalProducto WHERE PpalProductoID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalProducto
			SET     
					MarcaID = @MarcaID ,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					AuxUnidadID = @AuxUnidadID,
					ClaseProductoID = @ClaseProductoID,
					CfgTipoProductoID = @CfgTipoProductoID,
					NivelProductoID = @NivelProductoID,
					MetodoCosteoID = @MetodoCosteoID,
					ManejaLotes = @ManejaLotes,
					ManejaSeries = @ManejaSeries,
					Reorden = @Reorden,
					CfgFamiliaProductoID = @CfgFamiliaProductoID,
					EstatusProductoID = @EstatusProductoID,
					Maximo = @Maximo,
					Minimo = @Minimo,
					CostoPromedio = @CostoPromedio,
					UltimoCosto = @UltimoCosto,
					PpalProductoClave = @PpalProductoClave,
					EmpresaID = @EmpresaID,
					CfgTasaIVAID = @CfgTasaIVAID,
					ExentoIVA = @ExentoIVA
			WHERE   PpalProductoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			IF (SELECT ProductoClaveAutomatico  FROM CfgParamConfigUsuarioCosmos) = 'S'
			BEGIN
				-- Lo actualiza en parámetros
				UPDATE	CfgParamConfigUsuarioCosmos
				   SET	ProductoUltimaClave = ProductoUltimaClave + 1
				-- Lee último folio de la serie
				SELECT	@ProductoUltimaClave = ProductoUltimaClave
				  FROM	CfgParamConfigUsuarioCosmos

				SELECT @PpalProductoDigitos = (SELECT ProductoClaveDigitos FROM CfgParamConfigUsuarioCosmos)
				SET @PpalProductoClave = right('00000000000000000000' + cast(cast(@ProductoUltimaClave as decimal) as varchar), @PpalProductoDigitos)
			END
			INSERT  INTO PpalProducto(
					MarcaID,
					Nombre,
					NombreCorto,
					AuxUnidadID,
					ClaseProductoID,
					CfgTipoProductoID,
					NivelProductoID,
					MetodoCosteoID,
					ManejaLotes,
					ManejaSeries,
					Reorden,
					CfgFamiliaProductoID,
					EstatusProductoID,
					Maximo,
					Minimo,
					CostoPromedio,
					UltimoCosto,
					PpalProductoClave,
					EmpresaID,
					CfgTasaIVAID,
					ExentoIVA)
			VALUES  (
					@MarcaID ,
					@Nombre,
					@NombreCorto,
					@AuxUnidadID,
					@ClaseProductoID,
					@CfgTipoProductoID,
					@NivelProductoID,
					@MetodoCosteoID,
					@ManejaLotes,
					@ManejaSeries,
					@Reorden,
					@CfgFamiliaProductoID,
					@EstatusProductoID,
					@Maximo,
					@Minimo,
					@CostoPromedio,
					@UltimoCosto,
					@PpalProductoClave,
					@EmpresaID,
					@CfgTasaIVAID,
					@ExentoIVA)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalProductoID > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProducto_Listado]...';


GO

CREATE PROCEDURE [dbo].[PpalProducto_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalProducto',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo' 
		SELECT  PpalProductoID AS ID,				PpalProductoClave AS Clave,				Nombre,			
				NombreCorto,						AuxUnidadID as PadreID
		FROM    PpalProducto
		ORDER BY PpalProductoClave
	ELSE IF @TipoListado = 'Parcial'
		SELECT  PpalProductoID,						PpalProductoClave,						PP.Nombre,
				AU.Nombre AS UnidadNombre,			CTP.Nombre AS TipoProductoNombre,		CFP.Nombre AS FamiliaProductoNombre,
				SEP.Nombre AS EstatusNombre,		PP.NombreCorto,							PP.AuxUnidadID,
				ClaseProductoID,					PP.CfgTipoProductoID,					NivelProductoID,
				MetodoCosteoID,						ManejaLotes,							ManejaSeries,
				Reorden,							PP.CfgFamiliaProductoID,				PP.EstatusProductoID,
				Maximo,								Minimo,									CostoPromedio,
				UltimoCosto,						PpalProductoClave,						EmpresaID,
				CfgTasaIVAID,						ExentoIVA
		FROM    PpalProducto PP
		inner join AuxUnidad AU ON PP.AuxUnidadID = AU.AuxUnidadID
		inner join CfgTipoProducto CTP ON PP.CfgTipoProductoID = CTP.CfgTipoProductoID
		inner join CfgFamiliaProducto CFP ON PP.CfgFamiliaProductoID = CFP.CfgFamiliaProductoID
		inner join SistemaEstatusProducto SEP ON PP.EstatusProductoID = SEP.EstatusProductoID
		ORDER BY PP.PpalProductoClave
	ELSE
		SELECT  PpalProductoID,MarcaID,Nombre,NombreCorto,AuxUnidadID,ClaseProductoID,CfgTipoProductoID,NivelProductoID,MetodoCosteoID,ManejaLotes,ManejaSeries,
				Reorden,CfgFamiliaProductoID,EstatusProductoID,Maximo, Minimo, CostoPromedio, UltimoCosto, PpalProductoClave, EmpresaID,
				CfgTasaIVAID,						ExentoIVA
		FROM    PpalProducto
		ORDER BY PpalProductoClave
	

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalProductoAlmacen_Consultar]...';


GO

CREATE PROCEDURE [dbo].[PpalProductoAlmacen_Consultar]
@PpalProductoAlmacenID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalProductoEmpresa',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@PpalProductoAlmacenID_ int = @PpalProductoAlmacenID,
		@PpalProductoID_ int = 0,
		@AlmacenID_ int = 0,
		@Maximo_ decimal = 0,
		@Minimo_ decimal = 0,
		@Reorden_ decimal = 0,
		@CostoPromedio_ decimal = 0,
		@UltimoCosto_ decimal = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @PpalProductoAlmacenID
	SELECT		@PpalProductoAlmacenID_  = PpalProductoAlmacenID,
				@PpalProductoID_ = PpalProductoID,
				@AlmacenID_ = PpalAlmacenID,
				@Maximo_  = Maximo,
				@Minimo_ = Minimo,
				@Reorden_ = Reorden,
				@CostoPromedio_ = CostoPromedio,
				@UltimoCosto_ = UltimoCosto
	FROM    PpalProductoAlmacen
	WHERE   PpalProductoAlmacenID = @PpalProductoAlmacenID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalProductoAlmacenID::', @PpalProductoAlmacenID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar   as PpalProductoAlmacenID,	@PpalProductoID_ as PpalProductoID,		@AlmacenID_ as PpalAlmacenID,
			@Maximo_        as Maximo,					@Minimo_         as Minimo,				@Reorden_   as Reorden,
			@CostoPromedio_ as CostoPromedio,			@UltimoCosto_    as UltimoCosto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProductoAlmacen_Eliminar]...';


GO

CREATE PROCEDURE [dbo].[PpalProductoAlmacen_Eliminar]
@PpalProductoAlmacenID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalproductoAlmacen',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @PpalProductoAlmacenID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    PpalProductoAlmacen
		WHERE   PpalProductoAlmacenID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('PpalProductoAlmacenID::', @PpalProductoAlmacenID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @PpalProductoAlmacenID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalProductoAlmacen_Guardar]...';


GO

CREATE PROCEDURE [dbo].[PpalProductoAlmacen_Guardar]
@ProductoAlmacenID int,
@PpalProductoID int,
@AlmacenID int,
@Maximo decimal,
@Minimo decimal,
@Reorden decimal,
@CostoPromedio decimal,
@UltimoCosto decimal
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalProductoAlmacen',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@ProductoAlmacenID_ int = @ProductoAlmacenID,
		@PpalProductoID_ int = 0,
		@AlmacenID_ int = 0,
		@Maximo_ decimal = 0,
		@Minimo_ decimal = 0,
		@Reorden_ decimal = 0,
		@CostoPromedio_ decimal = 0,
		@UltimoCosto_ decimal = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalProductoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@ProductoAlmacenID_ =	ISNULL(PpalProductoAlmacenID, 0),
				@PpalProductoID_ =		ISNULL(PpalProductoID, 0),
				@AlmacenID_ =			ISNULL(PpalAlmacenID, 0),
				@Maximo_ =				ISNULL(Maximo, 0),
				@Minimo_ =				ISNULL(Minimo, 0),
				@CostoPromedio_ =		ISNULL(CostoPromedio, 0),
				@UltimoCosto_ =			ISNULL(UltimoCosto, 0)	 			
		   FROM	PpalProductoAlmacen WHERE PpalProductoAlmacenID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalProductoAlmacen
			SET     
               		PpalProductoID = @PpalProductoID,
					PpalAlmacenID = @AlmacenID,
					Maximo = @Maximo,
					Minimo = @Minimo,
					Reorden = @Reorden,
					CostoPromedio = @CostoPromedio,
					UltimoCosto = @UltimoCosto
			WHERE   PpalProductoAlmacenID = @ProductoAlmacenID
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalProductoAlmacen(
               				PpalProductoID,
							PpalAlmacenID,
							Maximo,
							Minimo,
							Reorden,
							CostoPromedio,
							UltimoCosto)
					VALUES  (
               				@PpalProductoID,
							@AlmacenID,
							@Maximo,
							@Minimo,
							@Reorden,
							@CostoPromedio,
							@UltimoCosto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @ProductoAlmacenID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat(@logMessage, 'Maximo::', @Maximo_, ':', @Maximo, ';')
				SET @logMessage = Concat(@logMessage, 'Minimo::', @Minimo_, ':', @Minimo, ';')
				SET @logMessage = Concat(@logMessage, 'PpalProductoAlmacenID::', @ProductoAlmacenID_, ':', @ProductoAlmacenID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar]		@TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProductoAlmacen_Listado]...';


GO

CREATE PROCEDURE [dbo].[PpalProductoAlmacen_Listado]
@ProductoAlmacenID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalProductoAlmacen',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('PpalProductoEmpresaID::', @ProductoAlmacenID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  PpalProductoAlmacenID,PpalProductoID,PpalAlmacenID,Maximo,Minimo,Reorden,CostoPromedio,UltimoCosto
	FROM    PpalProductoAlmacen
	WHERE		PpalProductoAlmacenID = @ProductoAlmacenID

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalProductoEmpresa_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalProductoEmpresa_Consultar]
@PpalProductoEmpresaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalProductoEmpresa',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

-- Variables para valores de columnas
DECLARE	@PpalProductoEmpresaID_ int = @PpalProductoEmpresaID,
		@EmpresaID_ int = 0,
		@PpalProductoID_ int = 0,
		@ProductoClave_ varchar(20) = ''
		

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @PpalProductoEmpresaID
	SELECT	@PpalProductoEmpresaID_ = PpalProductoEmpresaID,
			@EmpresaID_ = EmpresaID,
			@PpalProductoID_ = PpalProductoID,
			@ProductoClave_ = ProductoClave
	FROM    PpalProductoEmpresa
	WHERE   PpalProductoEmpresaID = @PpalProductoEmpresaID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalProductoEmpresaID::', @PpalProductoEmpresaID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
									
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar   as PpalProductoEmpresaID,	@EmpresaID_ as EmpresaID,	
			@PpalProductoID_ as PpalProductoIDm,		@ProductoClave_ as ProductoClave
			
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProductoEmpresa_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalProductoEmpresa_Eliminar]
@PpalProductoEmpresaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalproductoEmpresa',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @PpalProductoEmpresaID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    PpalProductoEmpresa
		WHERE   PpalProductoEmpresaID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('PpalProductoEmpresaID::', @PpalProductoEmpresaID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @PpalProductoEmpresaID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalProductoEmpresa_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalProductoEmpresa_Guardar]
@ProductoEmpresaID int,
@EmpresaID int,
@PpalProductoID int,
@ProductoClave varchar(20)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalProductoEmpresa',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@ProductoEmpresaID_ int = @ProductoEmpresaID,
		@EmpresaID_ int = 0,
		@PpalProductoID_ int = 0,
		@ProductoClave_ varchar(20) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalProductoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@ProductoEmpresaID_ =	ISNULL(PpalProductoEmpresaID, 0),
				@EmpresaID_ =			ISNULL(EmpresaID, 0),
				@PpalProductoID_ =		ISNULL(PpalProductoID, 0),
				@ProductoClave_ =		ISNULL(ProductoClave, 0)
		   FROM	PpalProductoEmpresa WHERE PpalProductoEmpresaID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalProductoEmpresa
			SET     
               		
					EmpresaID = @EmpresaID,
					PpalProductoID = @PpalProductoID,
					ProductoClave = @ProductoClave
			WHERE   PpalProductoEmpresaID = @ProductoEmpresaID
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalProductoEmpresa(
               				PpalProductoEmpresaID,
							EmpresaID,
							PpalProductoID,
							ProductoClave)
					VALUES  (
               				@ProductoEmpresaID,
							@EmpresaID,
							@PpalProductoID,
							@ProductoClave)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @ProductoEmpresaID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat(@logMessage, 'EmpresaID::', @EmpresaID_, ':', @EmpresaID, ';')
				SET @logMessage = Concat(@logMessage, 'ProductoClave::', @ProductoClave_, ':', @ProductoClave, ';')
				SET @logMessage = Concat(@logMessage, 'PpalProductoEmpresaID::', @ProductoEmpresaID_, ':', @ProductoEmpresaID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProductoEmpresa_Listado]...';


GO


CREATE PROCEDURE [dbo].[PpalProductoEmpresa_Listado]
@ProductoEmpresaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalProductoEmpresa',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('PpalProductoEmpresaID::', @ProductoEmpresaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  PpalProductoEmpresaID,EmpresaID,PpalProductoID,ProductoClave
	FROM    PpalProductoEmpresa
	WHERE		PpalProductoEmpresaID = @ProductoEmpresaID

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalProductoUltimoCodigo_Listado]...';


GO

CREATE PROCEDURE [dbo].[PpalProductoUltimoCodigo_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje varchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalProductoUltimoCodigo',	
		@Operacion	varchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- 
DECLARE @PpalProductoClave decimal,
		@PpalProductoDigitos int,
		@PpalProductoClaveString varchar(20)

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		IF (SELECT ProductoClaveAutomatico  FROM CfgParamConfigUsuarioCosmos) = 'S'
		BEGIN
			SELECT @PpalProductoClave = (SELECT ProductoUltimaClave FROM CfgParamConfigUsuarioCosmos)
			SELECT @PpalProductoDigitos = (SELECT ProductoClaveDigitos FROM CfgParamConfigUsuarioCosmos)
			SET @PpalProductoClaveString = right('00000000000000000000' + cast(@PpalProductoClave + 1 as varchar), @PpalProductoDigitos)
			SELECT  0 AS ID,						@PpalProductoClaveString AS Clave,				'' AS Nombre,			
					'' AS NombreCorto,				0 as PadreID
		END
		ELSE
			SELECT  0 AS ID,						'' AS Clave,				'' AS Nombre,			
					'' AS NombreCorto,				0 as PadreID
	ELSE	
			SELECT  0 AS ID,						'' AS Clave,				'' AS Nombre,			
					'' AS NombreCorto,				0 as PadreID

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedor_Consultar]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedor_Consultar]
@PpalProveedorID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalProveedor',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@EspPersonaID_ int = 0,
		@CmpTipoProveedorID_ int = 0,
		@AuxGiroEmpresaID_ int = 0,
		@AuxMedioContactoID_ int = 0,
		@AuxVinculoID_ int = 0,
		@AplicaRetenciones_ char(1),
		@AuxGiroEmpresaNombre_ varchar(60),
		@EmpresaID_ int = 0,
		@SegUsuarioID_ int = 0,
		@FisicaMoral_ char = '',
		@NombreComercial_ varchar(120) = '',
		@RazonSocial_ varchar(120) = '',
		@Nombre_ varchar(35) = '',
		@ApellidoPaterno_ varchar(30) = '',
		@ApellidoMaterno_ varchar(30) = '',
		@RFC_ varchar(13) = '',
		@CURP_ varchar(18) = '',
		@SexoID_ int = 0,
		@FechaNacimiento_ DateTime = GetDate(),
		@EspCiudadNacimientoID_ int = 0,
		@AuxEstadoCivilID_ int = 0,
		@CasadoCivil_ bit = 0,
		@CasadoIglesia_ bit = 0,
		@Iniciales_ varchar(6) = '',
		@SobreNombre_ varchar(25) = '',
		@NombreCorto_ varchar(25) = '',
		@PpalProveedorClave_ varchar(10) = '',
		@NombreCompleto_ varchar(97) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @PpalProveedorID
	/************* FIN COPY 1  *********************/
	SELECT  @EspPersonaID_ = EP.EspPersonaID,			@CmpTipoProveedorID_ = CmpTipoProveedorID,
			@AuxGiroEmpresaID_ = PP.AuxGiroEmpresaID,	@AuxMedioContactoID_ = AuxMedioContactoID,
			@AuxVinculoID_ = PP.AuxVinculoID,			@AplicaRetenciones_ = AplicaRetenciones,
			@AuxGiroEmpresaNombre_ = AGE.Nombre,
			@FisicaMoral_ = EP.FisicaMoral,				@NombreComercial_ = EP.NombreComercial,
			@RazonSocial_ = EP.RazonSocial,				@Nombre_ = EP.Nombre,
			@ApellidoPaterno_ = EP.ApellidoPaterno,		@ApellidoMaterno_ = EP.ApellidoMaterno,
			@RFC_ = EP.RFC,								@CURP_ = EP.CURP,
			@SexoID_ = EP.SistemaSexoID,				@FechaNacimiento_ = EP.FechaNacimiento,
			@EspCiudadNacimientoID_ = EP.EspCiudadNacimientoID,		@AuxEstadoCivilID_ = EP.AuxEstadoCivilID,
			@CasadoCivil_ = EP.CasadoCivil,				@CasadoIglesia_ = EP.CasadoIglesia,
			@Iniciales_ = EP.Iniciales,					@SobreNombre_ = EP.SobreNombre,
			@NombreCorto_ = EP.NombreCorto,				@PpalProveedorClave_ = PPES.PpalProveedorClave,
			@EmpresaID_ = PPES.EmpresaID,
			@NombreCompleto_ = EP.Nombre + ' ' + EP.ApellidoPaterno + ' ' + EP.ApellidoMaterno
	FROM    PpalProveedor PP
	inner join EspPersona EP on  PP.EspPersonaID = EP.EspPersonaID
	inner join AuxGiroEmpresa AGE  on  PP.AuxGiroEmpresaID = AGE.AuxGiroEmpresaID
	inner join PpalProveedorEmpresaSucursal PPES  on  PPES.PpalProveedorID = PP.PpalProveedorID
	WHERE   PP.PpalProveedorID = @PpalProveedorID

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalProveedorID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as PpalProveedorID,				@EspPersonaID_ as EspPersonaID,
			@CmpTipoProveedorID_ as CmpTipoProveedorID,		@AuxGiroEmpresaID_ as AuxGiroEmpresaID,
			@AuxMedioContactoID_ as AuxMedioContactoID,		@AuxVinculoID_ as AuxVinculoID,
			@AuxGiroEmpresaNombre_ as GiroEmpresaNombre,	@UsuarioIDBitacora as SegUsuarioID,
			@FisicaMoral_ as FisicaMoral,					@AplicaRetenciones_ as AplicaRetenciones,
			@NombreComercial_ as NombreComercial,
			@RazonSocial_ as RazonSocial,					@Nombre_ as Nombre,
			@ApellidoPaterno_ as ApellidoPaterno,			@ApellidoMaterno_ as ApellidoMaterno,
			@RFC_ as RFC,									@CURP_ as CURP,
			@SexoID_ as SexoID,								@FechaNacimiento_ as FechaNacimiento,
			@EspCiudadNacimientoID_ as EspCiudadNacimientoID,	@AuxEstadoCivilID_ as AuxEstadoCivilID,
			@CasadoCivil_ as CasadoCivil,					@CasadoIglesia_ as CasadoIglesia,
			@PpalProveedorClave_ as PpalProveedorClave,		@Iniciales_ as Iniciales,
			@NombreCorto_ as NombreCorto,					@SobreNombre_ as SobreNombre,
			@EmpresaID_ as EmpresaID,						@NombreCompleto_ as NombreCompleto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
			@IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedor_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[PpalProveedor_Eliminar]
@PpalProveedorID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @EliminarPersonaID int , @ComparteProveedor char(1),@Unico int
SELECT @EliminarPersonaID = EspPersonaID FROM PpalProveedor WHERE PpalProveedorID = @PpalProveedorID
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalProveedor',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @PpalProveedorID
	BEGIN
		select @ComparteProveedor = ComparteProveedor from CfgParamConfigUsuarioCosmos
		IF @ComparteProveedor = 'G'
			BEGIN  				
				DELETE
				FROM    PpalProveedorEmpresaSucursal
				WHERE   PpalProveedorID = @PpalProveedorID 
			END
		IF @ComparteProveedor = 'E'
			BEGIN    
				SELECT EmpresaID FROM  PpalProveedorEmpresaSucursal WHERE PpalProveedorID = @PpalProveedorID GROUP BY EmpresaID
				IF  @@RowCount < 2
				BEGIN
					DELETE
					FROM    PpalProveedorEmpresaSucursal
					WHERE   PpalProveedorID = @PpalProveedorID 
				END
			END
		IF @ComparteProveedor = 'S'
			BEGIN    
				SELECT EmpresaID FROM  PpalProveedorEmpresaSucursal WHERE PpalProveedorID = @PpalProveedorID GROUP BY EmpresaID					
				IF @@RowCount = 1
				BEGIN
					DELETE
					FROM    PpalProveedorEmpresaSucursal
					WHERE   PpalProveedorID = @PpalProveedorID 
				END
			END
		DELETE 
		FROM    PpalProveedor
		WHERE   PpalProveedorID = @PpalProveedorID
		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @PpalProveedorID)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('PpalProveedorID::', @PpalProveedorID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @PpalProveedorID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			COMMIT TRANSACTION
		END
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
--EXEC [PpalPersona_Eliminar]
--@ModificacionUsuarioID = null,
--@PersonaID = @EliminarPersonaID

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedor_Guardar]...';


GO
CREATE PROCEDURE [dbo].[PpalProveedor_Guardar]
@PpalProveedorID int,
@EspPersonaID int,
@CmpTipoProveedorID int,
@AuxGiroEmpresaID int,
@AuxMedioContactoID int = 0,
@AuxVinculoID int = 0,
@AplicaRetenciones char(1) = '',

--Variables Persona ->
@FisicaMoral char(1),
@NombreComercial nvarchar(120),
@RazonSocial nvarchar(120),
@Nombre nvarchar(35),
@ApellidoPaterno nvarchar(30),
@ApellidoMaterno nvarchar(30),
@RFC nvarchar(13),
@CURP nvarchar(18),
@SexoID int = 0,
@FechaNacimiento datetime = null,
@CiudadNacimientoID int = 0,
@EstadoCivilID int = 0,
@CasadoCivil bit,
@CasadoIglesia bit,
@Iniciales varchar(6),
@SobreNombre varchar(25),
@NombreCorto varchar(25),
--Variables ProveedorEmpresaSucursal---->
--,@EmpresaID int = null,
--@SucursalID int = null,
@PpalProveedorClave varchar(10) = null
--@Estatus bit

-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS

--SET @FechaNacimiento = '20100217'

-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',			@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = '',		@ComparteProveedor char(1),
		@EmpresaID int = null,					@SucursalID int = null,
		@Estatus bit
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalProveedor',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalProveedorID_ int,
		@EspPersonaID_ int,
		@CmpTipoProveedorID_ int,
		@AuxGiroEmpresaID_ int,
		@AuxMedioContactoID_ int = 0,
		@AuxVinculoID_ int = 0,
		@AplicaRetenciones_ char(1) = '',
		@PpalProveedorClave_ varchar(10)

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalProveedorID

	-- actualiza en Persona
	EXEC @EspPersonaID = [dbo].[EspPersona_Guardar]
			@EspPersonaID = @EspPersonaID,
			@FisicaMoral = @FisicaMoral,
			@NombreComercial= @NombreComercial,
			@RazonSocial = @RazonSocial,
			@Nombre = @Nombre,
			@ApellidoPaterno = @ApellidoPaterno,
			@ApellidoMaterno = @ApellidoMaterno,
			@RFC = @RFC,
			@CURP = @CURP,
			@SexoID = @SexoID,
			@FechaNacimiento = @FechaNacimiento,
			@CiudadNacimientoID = @CiudadNacimientoID,
			@EstadoCivilID = @EstadoCivilID,
			@CasadoCivil = @CasadoCivil,
			@CasadoIglesia = @CasadoIglesia,
			@Iniciales = @Iniciales,
			@SobreNombre = @SobreNombre,
			@NombreCorto = @NombreCorto,
			@EspDomicilioIDFacturacion = 2
			,@UsuarioIDBitacora		= @UsuarioIDBitacora
			,@DescripcionBitacora	= @DescripcionBitacora
			,@IpAddress			= @IpAddress	
			,@HostName			= @HostName
			
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	
	 			@EspPersonaID_ = IsNull(EspPersonaID,0),
				@CmpTipoProveedorID_ = IsNull(CmpTipoProveedorID,0),
				@AuxGiroEmpresaID_ = IsNull(AuxGiroEmpresaID,0),
				@AuxMedioContactoID_ = IsNull(AuxMedioContactoID,0),
				@AuxVinculoID_ = IsNull(AuxVinculoID,0),
				@AplicaRetenciones_ = IsNull(AplicaRetenciones,''),
				@PpalProveedorID_ = IsNull(PpalProveedorID,0),
				@PpalProveedorClave_ = (SELECT PpalProveedorClave 
												FROM PpalProveedorEmpresaSucursal
												WHERE PpalProveedorID = @IDAActualizar
												AND PpalSucursalID = @SucursalID AND EmpresaID = @EmpresaID)
		   FROM	PpalProveedor WHERE PpalProveedorID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @PpalProveedorClave_ = @ClaveNoAsignado and @PpalProveedorClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
	    BEGIN
        
		    UPDATE  PpalProveedor
			SET                    
                EspPersonaID = @EspPersonaID,
				CmpTipoProveedorID = @CmpTipoProveedorID,
				AuxGiroEmpresaID = @AuxGiroEmpresaID,
				AuxMedioContactoID = @AuxMedioContactoID,
				AuxVinculoID = @AuxVinculoID,
				AplicaRetenciones = @AplicaRetenciones
			 WHERE   PpalProveedorID = @IDAActualizar
		END
		ELSE
		BEGIN     
		
			INSERT  INTO PpalProveedor(					
					EspPersonaID,
					CmpTipoProveedorID,
					AuxGiroEmpresaID,
					AuxMedioContactoID,
					AuxVinculoID,
					AplicaRetenciones)
			VALUES  (
					
					@EspPersonaID,
					@CmpTipoProveedorID,
					@AuxGiroEmpresaID,
					@AuxMedioContactoID,
					@AuxVinculoID,
					@AplicaRetenciones)
        
		    SET		@IDAActualizar = SCOPE_IDENTITY()
		END
		IF @@RowCount > 0
		BEGIN
			select @ComparteProveedor = ComparteProveedor from CfgParamConfigUsuarioCosmos
			IF @ComparteProveedor = 'G'
				BEGIN        
					IF @PpalProveedorID > 0
						UPDATE	PpalProveedorEmpresaSucursal
						SET		PpalProveedorClave = @PpalProveedorClave
						WHERE	PpalProveedorID = @IDAActualizar
					ELSE
						INSERT  INTO PpalProveedorEmpresaSucursal(           
								PpalSucursalID,
								PpalProveedorID,
								PpalProveedorClave,
								Activo,
								EmpresaID)
						VALUES  (               
								@SucursalID,
								@IDAActualizar,
								@PpalProveedorClave,
								1,
								@EmpresaID)
				END

			IF @ComparteProveedor = 'E'
				BEGIN        
				INSERT  INTO PpalProveedorEmpresaSucursal(
                
						PpalSucursalID,
						PpalProveedorID,
						PpalProveedorClave,
						Activo,
						EmpresaID)
				VALUES  (
               
						@SucursalID,
						@IDAActualizar,
						@PpalProveedorClave,
						1,
						@EmpresaID)
				END

			IF @ComparteProveedor = 'S'
				BEGIN        
				INSERT  INTO PpalProveedorEmpresaSucursal(
                
						PpalSucursalID,
						PpalProveedorID,
						PpalProveedorClave,
						Activo,
						EmpresaID)
				VALUES  (
               
						@SucursalID,
						@IDAActualizar,
						@PpalProveedorClave,
						1,
						@EmpresaID)
				END
			
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalProveedorID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat(@logMessage, 'PersonaID::', @EspPersonaID_, ':', @EspPersonaID, ';')
				SET @logMessage = Concat(@logMessage, 'CmpTipoProveedorID::', @CmpTipoProveedorID_, ':', @CmpTipoProveedorID, ';')
				SET @logMessage = Concat(@logMessage, 'GiroEmpresaID::', @AuxGiroEmpresaID_, ':', @AuxGiroEmpresaID, ';')
				SET @logMessage = Concat(@logMessage, 'MedioContactoID::', @AuxMedioContactoID_, ':', @AuxMedioContactoID, ';')
				SET @logMessage = Concat(@logMessage, 'VinculoID::', @AuxVinculoID_, ':', @AuxVinculoID, ';')
				SET @logMessage = Concat(@logMessage, 'AplicaRetenciones::', @AplicaRetenciones_, ':', @AplicaRetenciones, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedor_Listado]...';


GO
CREATE PROCEDURE [dbo].[PpalProveedor_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int = null
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @ComparteProveedor char(1)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalProveedor',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaID::', @EmpresaIDSolicitudBase, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	select @ComparteProveedor = ComparteProveedor from CfgParamConfigUsuarioCosmos
	BEGIN
	IF @ComparteProveedor = 'G'
		BEGIN
			IF @TipoListado = 'Minimo'
				SELECT  PP.PpalProveedorID AS ID,		PPES.PpalProveedorClave as Clave, 
						CASE WHEN FisicaMoral = 'F' THEN EP.Nombre + ' ' + EP.ApellidoPaterno + ' ' + EP.ApellidoMaterno
													ELSE EP.NombreComercial END AS Nombre,  
						EP.NombreCorto as NombreCorto,			0 as PadreID,				EP.RFC as Extra3
				FROM    PpalProveedor PP
				inner join EspPersona EP on PP.EspPersonaID = EP.EspPersonaID 
				inner join PpalProveedorEmpresaSucursal PPES on PP.PpalProveedorID = PPES.PpalProveedorID
											AND (PPES.EmpresaID = @EmpresaIDSolicitudBase or PPES.EmpresaID IS NULL)
				ORDER BY Nombre
			ELSE IF @TipoListado = 'Parcial'
				SELECT  PP.PpalProveedorID,					PP.EspPersonaID,			PP.AuxGiroEmpresaID, 
						PP.CmpTipoProveedorID,				PP.AuxGiroEmpresaID,		PP.AuxMedioContactoID,
						PP.AuxVinculoID,					PP.AplicaRetenciones,		EP.FisicaMoral,
						EP.NombreComercial,
						EP.RazonSocial,						EP.Nombre,					EP.ApellidoPaterno,
						EP.ApellidoMaterno,					EP.CURP,					EP.SistemaSexoID,
						EP.FechaNacimiento,					EP.EspCiudadNacimientoID,		EP.AuxEstadoCivilID,
						EP.CasadoCivil,						EP.CasadoIglesia,			EP.Iniciales,
						EP.Sobrenombre,						EP.NombreCorto,
						AGE.Nombre AS GiroEmpresaNombre,	EP.RFC,						PPES.PpalProveedorClave,
						CASE EP.FisicaMoral WHEN 'F' THEN EP.Nombre + ' ' + EP.ApellidoPaterno + ' ' + EP.ApellidoMaterno
								ELSE EP.NombreComercial END AS NombreCompleto,
						PPES.PpalSucursalID,				PPES.EmpresaID
				FROM    PpalProveedor PP	
				inner join EspPersona EP on PP.EspPersonaID = EP.EspPersonaID 
				inner join AuxGiroEmpresa AGE on PP.AuxGiroEmpresaID =  AGE.AuxGiroEmpresaID
				inner join PpalProveedorEmpresaSucursal PPES on PP.PpalProveedorID = PPES.PpalProveedorID
			ELSE
				SELECT  PP.PpalProveedorID,PP.EspPersonaID,PP.CmpTipoProveedorID,PP.AuxGiroEmpresaID,PP.AuxMedioContactoID,PP.AuxVinculoID,PP.AplicaRetenciones,
						EP.RazonSocial, EP.NombreComercial, EP.RFC, EP.NombreCorto, EP.FisicaMoral, AGE.Nombre as GiroEmpresaNombre,
						EP.Nombre, EP.ApellidoPaterno, EP.ApellidoMaterno, EP.CURP, EP.SistemaSexoID AS SexoID,
						CASE EP.FisicaMoral WHEN 'F' THEN EP.Nombre + ' ' + EP.ApellidoPaterno + ' ' + EP.ApellidoMaterno
								ELSE EP.NombreComercial END AS NombreCompleto,
						PPES.PpalProveedorClave
				FROM    PpalProveedor PP	
				inner join EspPersona EP on PP.EspPersonaID = EP.EspPersonaID 
				inner join AuxGiroEmpresa AGE on PP.AuxGiroEmpresaID =  AGE.AuxGiroEmpresaID
				inner join PpalProveedorEmpresaSucursal PPES on PP.PpalProveedorID = PPES.PpalProveedorID
		END	
	IF @ComparteProveedor = 'E'
		BEGIN        
			IF @TipoListado = 'Minimo'
				SELECT  PP.PpalProveedorID AS ID,		PPES.PpalProveedorClave as Clave, 
						CASE WHEN FisicaMoral = 'F' THEN EP.Nombre + ' ' + EP.ApellidoPaterno + ' ' + EP.ApellidoMaterno
													ELSE EP.NombreComercial END AS Nombre,  
						EP.NombreCorto as NombreCorto,			0 as PadreID,				EP.RFC as Extra3
				FROM PpalProveedor PP
				inner join EspPersona EP on PP.EspPersonaID = EP.EspPersonaID 
				inner join PpalProveedorEmpresaSucursal PPES on PP.PpalProveedorID = PPES.PpalProveedorID
											AND (PPES.EmpresaID = @EmpresaIDSolicitudBase or PPES.EmpresaID IS NULL)
				WHERE PP.PpalProveedorID in (SELECT PpalProveedorID FROM PpalProveedorEmpresaSucursal
							WHERE EmpresaID is NULL) or
				(SELECT Administrador FROM SegUsuario WHERE SegUsuarioID = @UsuarioIDBitacora) = 1 or
				(SELECT SegUsuarioSucursalID FROM SegUsuarioSucursal WHERE SegUsuarioID = @UsuarioIDBitacora and PpalSucursalID is Null) > 0 or
				PP.PpalProveedorID in (SELECT Max(PPES.PpalProveedorID) FROM SegUsuarioSucursal SUS, PpalProveedorEmpresaSucursal PPES, PpalSucursal PS1, PpalSucursal PS2
						WHERE SUS.PpalSucursalID = PS1.PpalSucursalID and PPES.PpalSucursalID = PS2.PpalSucursalID and
								PS1.EmpresaID = PS2.EmpresaID and PS1.EmpresaID = @EmpresaIDSolicitudBase and
							SUS.SegUsuarioID = @UsuarioIDBitacora)
			ELSE IF @TipoListado = 'Parcial'
				SELECT  PP.PpalProveedorID,					PP.EspPersonaID,			PP.AuxGiroEmpresaID, 
						PP.CmpTipoProveedorID,				PP.AuxGiroEmpresaID,		PP.AuxMedioContactoID,
						PP.AuxVinculoID,					PP.AplicaRetenciones,		EP.FisicaMoral,
						EP.NombreComercial,
						EP.RazonSocial,						EP.Nombre,					EP.ApellidoPaterno,
						EP.ApellidoMaterno,					EP.CURP,					EP.SistemaSexoID,
						EP.FechaNacimiento,					EP.EspCiudadNacimientoID,		EP.AuxEstadoCivilID,
						EP.CasadoCivil,						EP.CasadoIglesia,			EP.Iniciales,
						EP.Sobrenombre,						EP.NombreCorto,
						AGE.Nombre AS GiroEmpresaNombre,	EP.RFC,						PPES.PpalProveedorClave,
						CASE EP.FisicaMoral WHEN 'F' THEN EP.Nombre + ' ' + EP.ApellidoPaterno + ' ' + EP.ApellidoMaterno
								ELSE EP.NombreComercial END AS NombreCompleto,
						PPES.PpalSucursalID,				PPES.EmpresaID
				FROM PpalProveedor PP
				inner join EspPersona EP on PP.EspPersonaID = EP.EspPersonaID 
				inner join AuxGiroEmpresa AGE on PP.AuxGiroEmpresaID =  AGE.AuxGiroEmpresaID
				inner join PpalProveedorEmpresaSucursal PPES on PP.PpalProveedorID = PPES.PpalProveedorID
				WHERE PP.PpalProveedorID in (SELECT PpalProveedorID FROM PpalProveedorEmpresaSucursal
							WHERE EmpresaID is NULL) or
				(SELECT Administrador FROM SegUsuario WHERE SegUsuarioID = @UsuarioIDBitacora) = 1 or
				(SELECT SegUsuarioSucursalID FROM SegUsuarioSucursal WHERE SegUsuarioID = @UsuarioIDBitacora and PpalSucursalID is Null) > 0 or
				PP.PpalProveedorID in (SELECT Max(PPES.PpalProveedorID) FROM SegUsuarioSucursal SUS, PpalProveedorEmpresaSucursal PPES, PpalSucursal PS1, PpalSucursal PS2
						WHERE SUS.PpalSucursalID = PS1.PpalSucursalID and PPES.PpalSucursalID = PS2.PpalSucursalID and
								PS1.EmpresaID = PS2.EmpresaID and PS1.EmpresaID = @EmpresaIDSolicitudBase and
							SUS.SegUsuarioID = @UsuarioIDBitacora)
			ELSE
				SELECT * FROM PpalProveedor PP
				WHERE PP.PpalProveedorID in (SELECT PpalProveedorID FROM PpalProveedorEmpresaSucursal
							WHERE EmpresaID is NULL) or
				(SELECT Administrador FROM SegUsuario WHERE SegUsuarioID = @UsuarioIDBitacora) = 1 or
				(SELECT SegUsuarioSucursalID FROM SegUsuarioSucursal WHERE SegUsuarioID = @UsuarioIDBitacora and PpalSucursalID is Null) > 0 or
				PP.PpalProveedorID in (SELECT Max(PPES.PpalProveedorID) FROM SegUsuarioSucursal SUS, PpalProveedorEmpresaSucursal PPES, PpalSucursal PS1, PpalSucursal PS2
						WHERE SUS.PpalSucursalID = PS1.PpalSucursalID and PPES.PpalSucursalID = PS2.PpalSucursalID and
								PS1.EmpresaID = PS2.EmpresaID and PS1.EmpresaID = @EmpresaIDSolicitudBase and
							SUS.SegUsuarioID = @UsuarioIDBitacora) 
		END
		IF @ComparteProveedor = 'S'
		BEGIN
			IF @TipoListado = 'Minimo'
				SELECT  PP.PpalProveedorID AS ID,		PPES.PpalProveedorClave as Clave, 
						CASE WHEN FisicaMoral = 'F' THEN EP.Nombre + ' ' + EP.ApellidoPaterno + ' ' + EP.ApellidoMaterno
													ELSE EP.NombreComercial END AS Nombre,  
						EP.NombreCorto as NombreCorto,			0 as PadreID,				EP.RFC as Extra3
				from PpalProveedor PP
				inner join EspPersona EP on PP.EspPersonaID = EP.EspPersonaID 
				inner join PpalProveedorEmpresaSucursal PPES on PP.PpalProveedorID = PPES.PpalProveedorID
											AND (PPES.EmpresaID = @EmpresaIDSolicitudBase or PPES.EmpresaID IS NULL)
				where PP.PpalProveedorID in (select PpalProveedorID from PpalProveedorEmpresaSucursal
							where EmpresaID is NULL) or
				PP.PpalProveedorID in (select PpalProveedorID from PpalProveedorEmpresaSucursal
							where EmpresaID = @EmpresaIDSolicitudBase and PpalSucursalID is NULL) and
				(Select Max(SegUsuarioSucursalID) from SegUsuarioSucursal where SegUsuarioID = @UsuarioIDBitacora) > 0 or
				(Select administrador from SegUsuario where SegUsuarioID = @UsuarioIDBitacora) = 1 or
				(Select SegUsuarioSucursalID from SegUsuarioSucursal where SegUsuarioID = @UsuarioIDBitacora and PpalSucursalID is Null) > 0 or
				PP.PpalProveedorID in (Select Max(PPES.PpalProveedorID) from SegUsuarioSucursal SUS, PpalProveedorEmpresaSucursal PPES
						where SUS.PpalSucursalID = PPES.PpalSucursalID and
							SUS.SegUsuarioID = @UsuarioIDBitacora)
			ELSE
				SELECT * from PpalProveedor PP
				where PP.PpalProveedorID in (select PpalProveedorID from PpalProveedorEmpresaSucursal
							where EmpresaID is NULL) or
				PP.PpalProveedorID in (select PpalProveedorID from PpalProveedorEmpresaSucursal
							where EmpresaID = @EmpresaIDSolicitudBase and PpalSucursalID is NULL) and
				(Select Max(SegUsuarioSucursalID) from SegUsuarioSucursal where SegUsuarioID = @UsuarioIDBitacora) > 0 or
				(Select administrador from SegUsuario where SegUsuarioID = @UsuarioIDBitacora) = 1 or
				(Select SegUsuarioSucursalID from SegUsuarioSucursal where SegUsuarioID = @UsuarioIDBitacora and PpalSucursalID is Null) > 0 or
				PP.PpalProveedorID in (Select Max(PPES.PpalProveedorID) from SegUsuarioSucursal SUS, PpalProveedorEmpresaSucursal PPES
						where SUS.PpalSucursalID = PPES.PpalSucursalID and
							SUS.SegUsuarioID = @UsuarioIDBitacora) 
		END

	END


	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedor_ListadoEmpresaID]...';


GO
CREATE PROCEDURE [dbo].[PpalProveedor_ListadoEmpresaID]
	@EmpresaID INT
	-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalProveedor',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('PpalProveedorID::', @EmpresaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT	Pro.PpalProveedorID,
			PES.PpalProveedorClave,
			CASE WHEN Per.FisicaMoral = 'M' THEN Per.RazonSocial ELSE Per.Nombre + ' ' + Per.ApellidoPaterno + ' ' + Per.ApellidoMaterno END as RazonSocial,
			CASE WHEN Per.FisicaMoral = 'M' THEN Per.NombreComercial ELSE '' END as NombreComercial,
			Per.RFC, GE.Nombre as GiroEmpresaNombre
	  FROM PpalProveedor Pro
			left outer join EspPersona Per ON  Pro.EspPersonaID = Per.EspPersonaID
			left outer join AuxGiroEmpresa GE ON Pro.AuxGiroEmpresaID = GE.AuxGiroEmpresaID
			left outer join PpalProveedorEmpresaSucursal PES ON Pro.PpalProveedorID = PES.PpalProveedorID
	 WHERE (PES.EmpresaID = @EmpresaID) OR (@EmpresaID = 0)

		-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorDomicilio_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorDomicilio_Guardar]
--@ModificacionUsuarioID int = null,
@PpalProveedorDomicilioID int,
@PpalProveedorID int,
@DomicilioID int,
@Comentario varchar(100),
@Predeterminado bit,
@TipoDomicilioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalProveedorDomicilio',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalProveedorID_ int = 0,
		@DomicilioID_ int = 0,			
		@Comentario_ varchar(10) = '',
		@Predeterminado_ bit,
		@TipoDomicilioID_ int = 0,
		@PpalProveedorDomicilioID_ int = @PpalProveedorDomicilioID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalProveedorDomicilioID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@PpalProveedorID_ = IsNull(PpalProveedorID,0),
	 			@DomicilioID_ = IsNull(EspDomicilioID,0),
				@Comentario_ = IsNull(Comentario,''),
				@Predeterminado_ = IsNull(Predeterminado,0),
				@TipoDomicilioID_ = IsNull(CfgTipoDomicilioID,0),
				@PpalProveedorDomicilioID_ = IsNull(PpalProveedorDomicilioID,0)
		   FROM	PpalProveedorDomicilio WHERE PpalProveedorDomicilioID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		--IF @PpalAreaClave_ = @ClaveNoAsignado and @PpalAreaClave <> @ClaveNoAsignado
		--	SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalProveedorDomicilio
			SET     
               
					PpalProveedorID = @PpalProveedorID,
					EspDomicilioID = @DomicilioID,
					Comentario = @Comentario,
					Predeterminado = @Predeterminado,
					CfgTipoDomicilioID = @TipoDomicilioID
			WHERE   PpalProveedorDomicilioID = @PpalProveedorDomicilioID
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalProveedorDomicilio(
                
					PpalProveedorID,
					EspDomicilioID,
					Comentario,
					Predeterminado,
					CfgTipoDomicilioID)
			VALUES  (
               
					@PpalProveedorID,
					@DomicilioID,
					@Comentario,
					@Predeterminado,
					@TipoDomicilioID)
        
		SET     @PpalProveedorDomicilioID = SCOPE_IDENTITY()
    END
    IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalProveedorDomicilioID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalProveedorID::', @PpalProveedorID_, ':', @PpalProveedorID, ';')
				SET @logMessage = Concat(@logMessage, 'DomicilioID::', @DomicilioID_, ':', @DomicilioID, ';')
				SET @logMessage = Concat(@logMessage, 'Comentario::', @Comentario_, ':', @Comentario, ';')
				SET @logMessage = Concat(@logMessage, 'Predeterminado::', @Predeterminado_, ':', @Predeterminado, ';')
				SET @logMessage = Concat(@logMessage, 'TipoDomicilioID::', @TipoDomicilioID_, ':', @TipoDomicilioID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@PpalProveedorDomicilioID as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorTelefono_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorTelefono_Eliminar]
@ModificacionUsuarioID int = null,
@PpalProveedorTelefonoID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300), @EliminarTelefonoID int
select @EliminarTelefonoID = EspTelefonoID  from PpalProveedorTelefono where PpalProveedorTelefonoID = @PpalProveedorTelefonoID


BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    PpalProveedorTelefono
    WHERE   PpalProveedorTelefonoID = @PpalProveedorTelefonoID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 
EXEC [EspTelefono_Eliminar]
	@TelefonoID = @EliminarTelefonoID,
	@UsuarioIDBitacora = @PpalProveedorTelefonoID

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorTelefono_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalProveedorTelefono_Guardar]
--@ModificacionUsuarioID int = null,
@PpalProveedorTelefonoID int,
@PpalProveedorID int,
@TelefonoID int,
@Predeterminado bit,
@Comentarios varchar(100),
@Extension varchar(10),
@CfgUsoTelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalProveedorTelefono',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalProveedorID_ int=0,
		@TelefonoID_ int=0,
		@Predeterminado_ bit= 0,
		@Comentarios_ varchar(100)='',
		@Extension_ varchar(10)='',
		@CfgUsoTelefonoID_ int=0,
		@PpalProveedorTelefonoID_ int = @PpalProveedorTelefonoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalProveedorTelefonoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@PpalProveedorID_ = IsNull(PpalProveedorID,0),
				@TelefonoID_ = IsNull(EspTelefonoID,0),
				@Predeterminado_ = IsNull(Predeterminado,0),
				@Comentarios_ = IsNull(Comentarios,''),
				@Extension_ = IsNull(Extension,''),
				@CfgUsoTelefonoID_ = IsNull(CfgUsoTelefonoID,0)
		   FROM	PpalProveedorTelefono WHERE PpalProveedorTelefonoID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		--IF @PpalAreaClave_ = @ClaveNoAsignado and @PpalAreaClave <> @ClaveNoAsignado
		--	SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
				UPDATE  PpalProveedorTelefono
				SET     
               
						PpalProveedorID = @PpalProveedorID,
						EspTelefonoID = @TelefonoID,
						Predeterminado = @Predeterminado,
						Comentarios = @Comentarios,
						Extension = @Extension,
						CfgUsoTelefonoID  = @CfgUsoTelefonoID 
				WHERE   PpalProveedorTelefonoID = @PpalProveedorTelefonoID
			END
			ELSE
			BEGIN        
				INSERT  INTO PpalProveedorTelefono(
                
						PpalProveedorID,
						EspTelefonoID,
						Predeterminado,
						Comentarios,
						Extension,
						CfgUsoTelefonoID )
				VALUES  (
               
						@PpalProveedorID,
						@TelefonoID,
						@Predeterminado,
						@Comentarios,
						@Extension,
						@CfgUsoTelefonoID )
        
				SET     @PpalProveedorTelefonoID = SCOPE_IDENTITY()
			END
    IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalProveedorTelefonoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalProveedorID::', @PpalProveedorID_, ':', @PpalProveedorID, ';')
				SET @logMessage = Concat(@logMessage, 'TelefonoID::', @TelefonoID_, ':', @TelefonoID, ';')
				SET @logMessage = Concat(@logMessage, 'Predeterminado::', @Predeterminado_, ':', @Predeterminado, ';')
				SET @logMessage = Concat(@logMessage, 'Comentarios::', @Comentarios_, ':', @Comentarios, ';')
				SET @logMessage = Concat(@logMessage, 'Extension::', @Extension_, ':', @Extension, ';')
				SET @logMessage = Concat(@logMessage, 'CfgUsoTelefonoID::', @CfgUsoTelefonoID_, ':', @CfgUsoTelefonoID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalProveedorUltimoCodigo_Listado]...';


GO
CREATE PROCEDURE [dbo].[PpalProveedorUltimoCodigo_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int = null
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @ComparteProveedor char(1)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalProveedor',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- 
DECLARE @PpalProveedorClave varchar(20),
		@PpalProveedorDigitos int

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaID::', @EmpresaIDSolicitudBase, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	select @ComparteProveedor = ComparteProveedor from CfgParamConfigUsuarioCosmos
	BEGIN
	IF @ComparteProveedor = 'G'
		BEGIN
			IF @TipoListado = 'Minimo'
				IF (SELECT ProveedorClaveAutomatico  FROM CfgParamConfigUsuarioCosmos) = 'S'
				BEGIN
					SELECT @PpalProveedorClave = (SELECT MAX(PpalProveedorClave) FROM PpalProveedor PP
										inner join PpalProveedorEmpresaSucursal PPES on PP.PpalProveedorID = PPES.PpalProveedorID
											AND (PPES.EmpresaID = @EmpresaIDSolicitudBase or PPES.EmpresaID IS NULL))
					SELECT @PpalProveedorDigitos = (SELECT ProveedorClaveDigitos FROM CfgParamConfigUsuarioCosmos)
					SET @PpalProveedorClave = right('00000000000000000000' + cast(cast(@PpalProveedorClave as decimal) + 1 as varchar), @PpalProveedorDigitos)
					SELECT  0 AS ID,						@PpalProveedorClave AS Clave,				'' AS Nombre,			
							'' AS NombreCorto,				0 as PadreID
				END
				ELSE
					SELECT  0 AS ID,						'' AS Clave,				'' AS Nombre,			
							'' AS NombreCorto,				0 as PadreID
			ELSE	
					SELECT  0 AS ID,						'' AS Clave,				'' AS Nombre,			
							'' AS NombreCorto,				0 as PadreID
		END	
	IF @ComparteProveedor = 'E'
		BEGIN        
			IF @TipoListado = 'Minimo'
				IF (SELECT ProveedorClaveAutomatico  FROM CfgParamConfigUsuarioCosmos) = 'S'
				BEGIN
					SELECT @PpalProveedorClave = (SELECT MAX(PpalProveedorClave) FROM PpalProveedor PP
										inner join PpalProveedorEmpresaSucursal PPES on PP.PpalProveedorID = PPES.PpalProveedorID
											AND (PPES.EmpresaID = @EmpresaIDSolicitudBase or PPES.EmpresaID IS NULL))
					SELECT @PpalProveedorDigitos = (SELECT ProveedorClaveDigitos FROM CfgParamConfigUsuarioCosmos)
					SET @PpalProveedorClave = right('00000000000000000000' + cast(cast(@PpalProveedorClave as decimal) + 1 as varchar), @PpalProveedorDigitos)
					SELECT  0 AS ID,						@PpalProveedorClave AS Clave,				'' AS Nombre,			
							'' AS NombreCorto,				0 as PadreID
				END
				ELSE
					SELECT  0 AS ID,						'' AS Clave,				'' AS Nombre,			
							'' AS NombreCorto,				0 as PadreID
			ELSE	
					SELECT  0 AS ID,						'' AS Clave,				'' AS Nombre,			
							'' AS NombreCorto,				0 as PadreID
		END
	IF @ComparteProveedor = 'S'
		BEGIN
			IF @TipoListado = 'Minimo'
				IF (SELECT ProveedorClaveAutomatico  FROM CfgParamConfigUsuarioCosmos) = 'S'
				BEGIN
					SELECT @PpalProveedorClave = (SELECT MAX(PpalProveedorClave) FROM PpalProveedor PP
							inner join PpalProveedorEmpresaSucursal PPES on PP.PpalProveedorID = PPES.PpalProveedorID
														AND (PPES.EmpresaID = @EmpresaIDSolicitudBase or PPES.EmpresaID IS NULL)
							where PP.PpalProveedorID in (select PpalProveedorID from PpalProveedorEmpresaSucursal
										where EmpresaID is NULL) or
							PP.PpalProveedorID in (select PpalProveedorID from PpalProveedorEmpresaSucursal
										where EmpresaID = @EmpresaIDSolicitudBase and PpalSucursalID is NULL))					
					SELECT @PpalProveedorDigitos = (SELECT ProveedorClaveDigitos FROM CfgParamConfigUsuarioCosmos)
					SET @PpalProveedorClave = right('00000000000000000000' + cast(cast(@PpalProveedorClave as decimal) + 1 as varchar), @PpalProveedorDigitos)
					SELECT  0 AS ID,						@PpalProveedorClave AS Clave,				'' AS Nombre,			
							'' AS NombreCorto,				0 as PadreID
				END
				ELSE
					SELECT  0 AS ID,						'' AS Clave,				'' AS Nombre,			
							'' AS NombreCorto,				0 as PadreID
			ELSE	
					SELECT  0 AS ID,						'' AS Clave,				'' AS Nombre,			
							'' AS NombreCorto,				0 as PadreID


		END
	END


	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedor_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedor_Eliminar]
@ModificacionUsuarioID int = null,
@PpalRepresentanteProveedorID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300),@EliminarPersonaID int 
SELECT @EliminarPersonaID = EspPersonaID FROM PpalRepresentanteProveedor WHERE PpalRepresentanteProveedorID = @PpalRepresentanteProveedorID

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    PpalRepresentanteProveedor
    WHERE   PpalRepresentanteProveedorID = @PpalRepresentanteProveedorID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 

EXEC [EspPersona_Eliminar]
	@EspPersonaID = @EliminarPersonaID
	,@UsuarioIDBitacora	= @PpalRepresentanteProveedorID
	,@DescripcionBitacora		= null
	,@IpAddress			= null
	,@HostName			= null

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedor_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedor_Guardar]
@PpalRepresentanteProveedorID int,
@PpalProveedorID int,
@PersonaID int,
@ProfesionID int,
@CmpTipoRepresentanteProveedorID int,
@Predeterminado bit,
@Puesto varchar(60),
--Variables Persona ->
@FisicaMoral char(1),
@NombreComercial nvarchar(120),
@RazonSocial nvarchar(120),
@Nombre nvarchar(35),
@ApellidoPaterno nvarchar(30),
@ApellidoMaterno nvarchar(30),
@RFC nvarchar(13),
@CURP nvarchar(18),
@SexoID int = 0,
@FechaNacimiento datetime = null,
@CiudadNacimientoID int = 0,
@EstadoCivilID int = 0,
@CasadoCivil bit,
@CasadoIglesia bit,
@Iniciales varchar(6),
@SobreNombre varchar(25),
@NombreCorto varchar(25)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalRepresentanteProveedor',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalRepresentanteProveedorID_ int,
		@PpalProveedorID_ int,
		@PersonaID_ int,
		@ProfesionID_ int,
		@CmpTipoRepresentanteProveedorID_ int,
		@Predeterminado_ bit,
		@Puesto_ varchar(60)

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalRepresentanteProveedorID

	-- actualiza en Persona
	EXEC @PersonaID = [dbo].[EspPersona_Guardar] 
			@PersonaID = @PersonaID,
			@FisicaMoral = @FisicaMoral,
			@NombreComercial= @NombreComercial,
			@RazonSocial = @RazonSocial,
			@Nombre = @Nombre,
			@ApellidoPaterno = @ApellidoPaterno,
			@ApellidoMaterno = @ApellidoMaterno,
			@RFC = @RFC,
			@CURP = @CURP,
			@SexoID = @SexoID,
			@FechaNacimiento = @FechaNacimiento,
			@CiudadNacimientoID = @CiudadNacimientoID,
			@EstadoCivilID = @EstadoCivilID,
			@CasadoCivil = @CasadoCivil,
			@CasadoIglesia = @CasadoIglesia,
			@Iniciales = @Iniciales,
			@SobreNombre = @SobreNombre,
			@NombreCorto = @NombreCorto
			,@UsuarioIDBitacora = @UsuarioIDBitacora
			,@DescripcionBitacora		= @DescripcionBitacora
			,@IpAddress			= @IpAddress	
			,@HostName			= @HostName
			
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	
	 			@PpalProveedorID_ = IsNull(PpalProveedorID,0),
				@PersonaID_ = IsNull(EspPersonaID,0),
				@ProfesionID_ = IsNull(ProfesionID,0),
				@CmpTipoRepresentanteProveedorID_ = IsNull(CmpTipoRepresentanteProveedorID,0),
				@Predeterminado_ = IsNull(Predeterminado,0),
				@Puesto_ = IsNull(Puesto,'')
		   FROM	PpalRepresentanteProveedor WHERE PpalRepresentanteProveedorID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
		--No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @PpalRepresentanteProveedorID_ = @ClaveNoAsignado and @PpalRepresentanteProveedorID <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalRepresentanteProveedor
			SET     
					PpalProveedorID = @PpalProveedorID,
					EspPersonaID = @PersonaID,
					ProfesionID = @ProfesionID,
					CmpTipoRepresentanteProveedorID = @CmpTipoRepresentanteProveedorID,
					Predeterminado = @Predeterminado,
					Puesto = @Puesto
			WHERE   PpalRepresentanteProveedorID = @PpalRepresentanteProveedorID
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalRepresentanteProveedor(
                
					PpalProveedorID,
					EspPersonaID,
					ProfesionID,
					CmpTipoRepresentanteProveedorID,
					Predeterminado,
					Puesto)
			VALUES  (
               
					@PpalProveedorID,
					@PersonaID,
					@ProfesionID,
					@CmpTipoRepresentanteProveedorID,
					@Predeterminado,
					@Puesto)
        
        SET     @PpalRepresentanteProveedorID = SCOPE_IDENTITY()
    END
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalRepresentanteProveedorID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat(@logMessage, 'PersonaID::', @PersonaID_, ':', @PersonaID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalProveedorID::', @PpalProveedorID_, ':', @PpalProveedorID, ';')
				SET @logMessage = Concat(@logMessage, 'ProfesionID::', @ProfesionID_, ':', @ProfesionID, ';')
				SET @logMessage = Concat(@logMessage, 'CmpTipoRepresentanteProveedorID::', @CmpTipoRepresentanteProveedorID_, ':', @CmpTipoRepresentanteProveedorID, ';')
				SET @logMessage = Concat(@logMessage, 'Preterminado::', @Predeterminado_, ':', @Predeterminado, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedorDomicilio_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedorDomicilio_Eliminar]
@ModificacionUsuarioID int = null,
@PpalRepresentanteProveedorDomicilioID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300), @EliminarDomicilioID int
select @EliminarDomicilioID = EspDomicilioID  
from PpalRepresentanteProveedorDomicilio 
where PpalRepresentanteProveedorDomicilioID = @PpalRepresentanteProveedorDomicilioID

BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    PpalRepresentanteProveedorDomicilio
    WHERE   PpalRepresentanteProveedorDomicilioID = @PpalRepresentanteProveedorDomicilioID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 
exec [EspDomicilio_Eliminar]
		@EspDomicilioID			= @EliminarDomicilioID
		,@UsuarioIDBitacora		= @ModificacionUsuarioID
		,@DescripcionBitacora	= "null"
		,@IpAddress				= "null"
		,@HostName				= "null"
SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedorDomicilio_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedorDomicilio_Guardar]
--@ModificacionUsuarioID int = null,
@PpalRepresentanteProveedorDomicilioID int,
@PpalRepresentanteProveedorID int,
@DomicilioID int,
@Comentario varchar(100),
@Predeterminado bit,
@TipoDomicilioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalRepresentanteProveedorDomicilio',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalRepresentanteProveedorID_ int = 0,
		@DomicilioID_ int = 0,			
		@Comentario_ varchar(10) = '',
		@Predeterminado_ bit,
		@TipoDomicilioID_ int = 0,
		@PpalRepresentanteProveedorDomicilioID_ int = @PpalRepresentanteProveedorDomicilioID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalRepresentanteProveedorDomicilioID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@PpalRepresentanteProveedorID_ = IsNull(PpalRepresentanteProveedorID,0),
	 			@DomicilioID_ = IsNull(EspDomicilioID,0),
				@Comentario_ = IsNull(Comentario,''),
				@Predeterminado_ = IsNull(Predeterminado,0),
				@TipoDomicilioID_ = IsNull(CfgTipoDomicilioID,0),
				@PpalRepresentanteProveedorDomicilioID_ = IsNull(PpalRepresentanteProveedorDomicilioID,0)
		   FROM	PpalRepresentanteProveedorDomicilio WHERE PpalRepresentanteProveedorDomicilioID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		--IF @PpalAreaClave_ = @ClaveNoAsignado and @PpalAreaClave <> @ClaveNoAsignado
		--	SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalRepresentanteProveedorDomicilio
			SET     PpalRepresentanteProveedorID = @PpalRepresentanteProveedorID,
					EspDomicilioID = @DomicilioID,
					Comentario = @Comentario,
					Predeterminado = @Predeterminado,
					CfgTipoDomicilioID = @TipoDomicilioID
			WHERE   PpalRepresentanteProveedorDomicilioID = @PpalRepresentanteProveedorDomicilioID
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalRepresentanteProveedorDomicilio(
					PpalRepresentanteProveedorID,
					EspDomicilioID,
					Comentario,
					Predeterminado,
					CfgTipoDomicilioID)
			VALUES  (@PpalRepresentanteProveedorID,
					@DomicilioID,
					@Comentario,
					@Predeterminado,
					@TipoDomicilioID)
        
			SET     @PpalRepresentanteProveedorDomicilioID = SCOPE_IDENTITY()
		END
    IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalRepresentanteProveedorDomicilioID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalProveedorID::', @PpalRepresentanteProveedorID_, ':', @PpalRepresentanteProveedorID, ';')
				SET @logMessage = Concat(@logMessage, 'DomicilioID::', @DomicilioID_, ':', @DomicilioID, ';')
				SET @logMessage = Concat(@logMessage, 'Comentario::', @Comentario_, ':', @Comentario, ';')
				SET @logMessage = Concat(@logMessage, 'Predeterminado::', @Predeterminado_, ':', @Predeterminado, ';')
				SET @logMessage = Concat(@logMessage, 'TipoDomicilioID::', @TipoDomicilioID_, ':', @TipoDomicilioID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@PpalRepresentanteProveedorDomicilioID as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedorTelefono_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedorTelefono_Eliminar]
@ModificacionUsuarioID int = null,
@PpalRepresentanteProveedorTelefonoID int
AS

SET NOCOUNT ON 

DECLARE @Errores bit, @Mensaje nvarchar(300), @EliminarTelefonoID int
SELECT @EliminarTelefonoID = EspTelefonoID FROM PpalRepresentanteProveedorTelefono WHERE PpalRepresentanteProveedorID = @PpalRepresentanteProveedorTelefonoID
BEGIN TRANSACTION 
BEGIN TRY
    DELETE
    FROM    PpalRepresentanteProveedorTelefono
    WHERE   PpalRepresentanteProveedorTelefonoID = @PpalRepresentanteProveedorTelefonoID
    
    COMMIT TRANSACTION
    SELECT @Errores = 0, @Mensaje = ''
END TRY
BEGIN CATCH 
    ROLLBACK TRANSACTION
    SELECT @Errores = 1, @Mensaje = ERROR_MESSAGE()
END CATCH 
exec [EspTelefono_Eliminar]
		@TelefonoID = @EliminarTelefonoID,
		@UsuarioIDBitacora = null
SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalRepresentanteProveedorTelefono_Guardar]...';


GO


CREATE PROCEDURE [dbo].[PpalRepresentanteProveedorTelefono_Guardar]
--@ModificacionUsuarioID int = null,
@PpalRepresentanteProveedorTelefonoID int,
@PpalRepresentanteProveedorID int,
@TelefonoID int,
@Extension varchar(6),
@Predeterminado bit,
@Comentarios varchar(20),
@CfgUsoTelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalRepresentanteProveedorTelefono',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalRepresentanteProveedorID_ int=0,
		@TelefonoID_ int=0,
		@Predeterminado_ bit= 0,
		@Comentarios_ varchar(100)='',
		@Extension_ varchar(10)='',
		@CfgUsoTelefonoID_ int=0,
		@PpalRepresentanteProveedorTelefonoID_ int = @PpalRepresentanteProveedorTelefonoID


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalRepresentanteProveedorTelefonoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@PpalRepresentanteProveedorID_ = IsNull(PpalRepresentanteProveedorID,0),
				@TelefonoID_ = IsNull(EspTelefonoID,0),
				@Predeterminado_ = IsNull(Predeterminado,0),
				@Comentarios_ = IsNull(Comentarios,''),
				@Extension_ = IsNull(Extension,''),
				@CfgUsoTelefonoID_ = IsNull(CfgUsoTelefonoID,0)
		   FROM	PpalRepresentanteProveedorTelefono WHERE PpalRepresentanteProveedorTelefonoID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		--IF @PpalAreaClave_ = @ClaveNoAsignado and @PpalAreaClave <> @ClaveNoAsignado
		--	SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalRepresentanteProveedorTelefono
			SET     
              
					PpalRepresentanteProveedorID = @PpalRepresentanteProveedorID,
					EspTelefonoID = @TelefonoID,
					Extension = @Extension,
					Predeterminado = @Predeterminado,
					Comentarios = @Comentarios,
					CfgUsoTelefonoID = @CfgUsoTelefonoID
			WHERE   PpalRepresentanteProveedorTelefonoID = @PpalRepresentanteProveedorTelefonoID
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalRepresentanteProveedorTelefono(
                
					PpalRepresentanteProveedorID,
					EspTelefonoID,
					Extension,
					Predeterminado,
					Comentarios,
					CfgUsoTelefonoID)
			VALUES  (
              
					@PpalRepresentanteProveedorID,
					@TelefonoID,
					@Extension,
					@Predeterminado,
					@Comentarios,
					@CfgUsoTelefonoID)
        
			SET     @PpalRepresentanteProveedorTelefonoID = SCOPE_IDENTITY()
		END
    IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalRepresentanteProveedorTelefonoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalRepresentanteProveedorID::', @PpalRepresentanteProveedorID_, ':', @PpalRepresentanteProveedorID, ';')
				SET @logMessage = Concat(@logMessage, 'TelefonoID::', @TelefonoID_, ':', @TelefonoID, ';')
				SET @logMessage = Concat(@logMessage, 'Predeterminado::', @Predeterminado_, ':', @Predeterminado, ';')
				SET @logMessage = Concat(@logMessage, 'Comentarios::', @Comentarios_, ':', @Comentarios, ';')
				SET @logMessage = Concat(@logMessage, 'Extension::', @Extension_, ':', @Extension, ';')
				SET @logMessage = Concat(@logMessage, 'CfgUsoTelefonoID::', @CfgUsoTelefonoID_, ':', @CfgUsoTelefonoID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalSerie_Consultar]...';


GO
CREATE PROCEDURE [dbo].[PpalSerie_Consultar]
@PpalSerieID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalSerie',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@PpalSerieClave_ nvarchar(10) = '',
		@PpalSucursalID_ int = 0,
		@TipoDocumentoID_ int = 0,
		@FolioInicial_ int = 0,
		@FolioFinal_ int = 0,
		@UltimoFolio_ int = 0,
		@Estatus_ bit = 0,
		@Predeterminado_ bit = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @PpalSerieID
	SELECT  @PpalSerieClave_ = PpalSerieClave,			@PpalSucursalID_ = PpalSucursalID,
			@TipoDocumentoID_ = TipoDocumentoID,		@FolioInicial_ = FolioInicial,
			@FolioFinal_ = FolioFinal,					@UltimoFolio_ = UltimoFolio,
			@Estatus_ = Estatus,						@Predeterminado_ = Predeterminado
	FROM    PpalSerie
	WHERE   PpalSerieID = @IDAConsultar
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalSerieID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as PpalSerieID,					@PpalSerieClave_ as PpalSerieClave,
			@PpalSucursalID_ as PpalSucursalID,				@TipoDocumentoID_ as TipoDocumentoID,		
			@FolioInicial_ as FolioInicial,					@FolioFinal_ as FolioFinal,
			@UltimoFolio_ as UltimoFolio,					@Estatus_ as Estatus,
			@Predeterminado_ as Predeterminado
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalSerie_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[PpalSerie_Eliminar]
@PpalSerieID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalSerie',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @PpalSerieID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(PpalSerieClave,'')
	  FROM	PpalSerie WHERE PpalSerieID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    PpalSerie
		WHERE   PpalSerieID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('PpalSerieID::', @PpalSerieID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @PpalSerieID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalSerie_Guardar]...';


GO

CREATE PROCEDURE [dbo].[PpalSerie_Guardar]
@PpalSerieID int,
@TipoDocumentoID int,
@PpalSerieClave varchar(10),
@FolioInicial int,
@FolioFinal int,
@UltimoFolio int,
@Estatus bit,
@Predeterminado bit,
@PpalSucursalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalSerie',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalSerieClave_ nvarchar(10) = '',
		@PpalSucursalID_ int = 0,
		@TipoDocumentoID_ int = 0,
		@FolioInicial_ int = 0,
		@FolioFinal_ int = 0,
		@UltimoFolio_ int = 0,
		@Estatus_ bit = 0,
		@Predeterminado_ bit = 0,
		@PpalSerieID_ int = @PpalSerieID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalSerieID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@PpalSerieClave_ = IsNull(PpalSerieClave,''),
				@PpalSucursalID_ = IsNull(PpalSucursalID,0),
				@PpalSerieID_ = IsNull(PpalSerieID,0),
				@TipoDocumentoID_ = IsNull(TipoDocumentoID,0),
				@FolioInicial_ = IsNull(FolioInicial,0),
				@FolioFinal_ = IsNull(FolioFinal,0),
				@UltimoFolio_ = IsNull(UltimoFolio,0),
				@Estatus_ = IsNull(Estatus,0),
				@Predeterminado_ = IsNull(Predeterminado,0)
		   FROM	PpalSerie WHERE PpalSerieID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @PpalSerieClave_ = @ClaveNoAsignado and @PpalSerieClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  PpalSerie
			SET     TipoDocumentoID = @TipoDocumentoID,
					PpalSerieClave = @PpalSerieClave,
					FolioInicial = @FolioInicial,
					FolioFinal = @FolioFinal,
					UltimoFolio = @UltimoFolio,
					Estatus = @Estatus,
					Predeterminado = @Predeterminado,
					PpalSucursalID = @PpalSucursalID
			WHERE   PpalSerieID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO PpalSerie(
               
					TipoDocumentoID,
					PpalSerieClave,
					FolioInicial,
					FolioFinal,
					UltimoFolio,
					Estatus,
					Predeterminado,
					PpalSucursalID)
			VALUES  (
                
					@TipoDocumentoID,
					@PpalSerieClave,
					@FolioInicial,
					@FolioFinal,
					@UltimoFolio,
					@Estatus,
					@Predeterminado,
					@PpalSucursalID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalSerieID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalSerieClave::', @PpalSerieClave_, ':', @PpalSerieClave, ';')
				SET @logMessage = Concat(@logMessage, 'PpalSucursalID::', @PpalSucursalID_, ':', @PpalSucursalID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalSerieID::', @PpalSerieID_, ':', @PpalSerieID, ';')
				SET @logMessage = Concat(@logMessage, 'TipoDocumentoID::', @TipoDocumentoID_, ':', @TipoDocumentoID, ';')
				SET @logMessage = Concat(@logMessage, 'FolioInicial::', @FolioInicial_, ':', @FolioInicial, ';')
				SET @logMessage = Concat(@logMessage, 'FolioFinal::', @FolioFinal_, ':', @FolioFinal, ';')
				SET @logMessage = Concat(@logMessage, 'UltimoFolio::', @UltimoFolio_, ':', @UltimoFolio, ';')
				SET @logMessage = Concat(@logMessage, 'Estatus::', @Estatus_, ':', @Estatus, ';')
				SET @logMessage = Concat(@logMessage, 'Predeterminado::', @Predeterminado_, ':', @Predeterminado, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[PpalSerie_Listado]...';


GO
CREATE PROCEDURE [dbo].[PpalSerie_Listado]
@PpalSucursalID int = null,
@TipoDocumentoID int,
@TipoListado varchar(10)
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'PpalSerie',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('SucursalID::', @PpalSucursalID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  a.PpalSerieID as ID, a.PpalSerieClave as Clave, a.PpalSerieClave as Nombre, 
				 a.PpalSerieClave as NombreCorto,				PpalSucursalID as PadreID,
				 CASE a.Predeterminado WHEN 1 THEN 'S' ELSE 'N' END as Extra1,
				 CAST (a.UltimoFolio + 1 AS varchar(10)) as Extra2
		FROM    PpalSerie a 
		WHERE	TipoDocumentoID = @TipoDocumentoID -- AND PpalSucursalID = @PpalSucursalID
	ELSE IF @TipoListado = 'Parcial' OR @TipoListado = 'Completo'
		SELECT  a.PpalSerieID, a.TipoDocumentoID, a.PpalSerieClave, a.FolioInicial, a.FolioFinal, a.UltimoFolio, a.Estatus, a.Predeterminado, a.PpalSucursalID
		FROM    PpalSerie a 
		WHERE	TipoDocumentoID = @TipoDocumentoID AND PpalSucursalID = @PpalSucursalID


	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[PpalSucursal_Consultar]...';


GO
CREATE PROCEDURE [dbo].[PpalSucursal_Consultar]
@PpalSucursalID int

-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalSucursal',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@PpalSucursalClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@EmpresaID_ int = 0,
		@EspDomicilioID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @PpalSucursalID
	/************* FIN COPY 1  *********************/
	SELECT  @PpalSucursalClave_ = PpalSucursalClave,	@Nombre_ = Nombre,		@NombreCorto_ = NombreCorto,
			@EmpresaID_ = EmpresaID, @EspDomicilioID_ = EspDomicilioID
	FROM    PpalSucursal
	WHERE   PpalSucursalID = @IDAConsultar

	/****************** COPY 2 ************************************************/
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('PpalSucursalID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as PpalSucursalID,				@PpalSucursalClave_ as PpalSucursalClave,			
			@Nombre_ as Nombre,								@NombreCorto_ as NombreCorto,
			@EmpresaID_ as EmpresaID,						@EspDomicilioID_ as DomicilioID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
/**************** FIN COPY 2 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[PpalSucursal_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[PpalSucursal_Eliminar]
@PpalSucursalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalSucursal',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @PpalSucursalID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(PpalSucursalClave,'')
	  FROM	PpalSucursal WHERE PpalSucursalID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    PpalSucursal
		WHERE   PpalSucursalID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('PpalSucursalID::', @PpalSucursalID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @PpalSucursalID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[PpalSucursal_Guardar]...';


GO
CREATE  PROCEDURE [dbo].[PpalSucursal_Guardar]
@PpalSucursalID int,
@PpalSucursalClave varchar(8),
@Nombre varchar(70),
@NombreCorto varchar(10),
@EmpresaID int,
@DomicilioID int =0
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalSucursal',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@PpalSucursalClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@EmpresaID_ int = 0,
		@PpalSucursalID_ int = @PpalSucursalID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @PpalSucursalID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
		FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@PpalSucursalClave_ = IsNull(PpalSucursalClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@EmpresaID_ = IsNull(EmpresaID,0),
				@PpalSucursalID_ = IsNull(PpalSucursalID,0)
		   FROM	PpalSucursal WHERE PpalSucursalID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @PpalSucursalClave_ = @ClaveNoAsignado and @PpalSucursalClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
/************* FIN COPY 1  *********************/
		BEGIN
			UPDATE  PpalSucursal
			SET		PpalSucursalClave = @PpalSucursalClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto,
					EmpresaID = @EmpresaID,
					EspDomicilioID = @DomicilioID
			WHERE   PpalSucursalID = @IDAActualizar
		END
		ELSE
		BEGIN
			INSERT  INTO PpalSucursal(                
					PpalSucursalClave,
					Nombre,
					NombreCorto,
					EmpresaID,
					EspDomicilioID)
			VALUES  (
					@PpalSucursalClave,
					@Nombre,
					@NombreCorto,
					@EmpresaID,
					@DomicilioID)
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @PpalSucursalID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('PpalSucursalClave::', @PpalSucursalClave_, ':', @PpalSucursalClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				SET @logMessage = Concat(@logMessage, 'EmpresaID::', @EmpresaID_, ':', @EmpresaID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
/**************** FIN COPY 3 *********************************************/
GO
PRINT N'Creando Procedimiento [dbo].[PpalSucursal_Listado]...';


GO
CREATE PROCEDURE [dbo].[PpalSucursal_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase int
	,@UsuarioIDBitacora	int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'PpalSucursal',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaID::', @EmpresaIDSolicitudBase, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  PpalSucursalID AS ID,PpalSucursalClave AS Clave,Nombre AS Nombre, 
				NombreCorto AS NombreCorto, EmpresaID AS PadreID
		FROM    PpalSucursal 
		WHERE	EmpresaID = @EmpresaIDSolicitudBase AND
		  ((SELECT administrador
			   FROM SegUsuario
			  WHERE SegUsuarioID = @UsuarioIDBitacora) = 1 OR
			(SELECT PpalSucursalID 
			   FROM PpalSucursal
			  WHERE PpalSucursalClave = (SELECT ClaveNoAsignado FROM SistemaParamCosmos)) in 
				(SELECT PpalSucursalID
				  FROM SegUsuarioSucursal
				 WHERE SegUsuarioID = @UsuarioIDBitacora) OR
			PpalSucursalID in 
				(SELECT PpalSucursalID
				  FROM SegUsuarioSucursal
				 WHERE SegUsuarioID = @UsuarioIDBitacora))
		ORDER BY PpalSucursalClave
	ELSE IF @TipoListado = 'Parcial'
		SELECT  PpalSucursalID,PpalSucursalClave,Nombre,NombreCorto,EmpresaID
		FROM    PpalSucursal 
		WHERE	EmpresaID = @EmpresaIDSolicitudBase
		ORDER BY PpalSucursalClave
	ELSE
		SELECT  PpalSucursalID,PpalSucursalClave,Nombre,NombreCorto,EmpresaID,EspDomicilioID
		FROM    PpalSucursal 
		WHERE	EmpresaID = @EmpresaIDSolicitudBase
		ORDER BY PpalSucursalClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegLogRegla_Consultar]...';


GO

CREATE Procedure [dbo].[SegLogRegla_Consultar]
@SegLogReglaID int
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

As
	-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegLogRegla',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@SysTablesName_ varchar(50) = '',	@SegUsuarioID_ int = 0,	@TablaNombre_ varchar(50) = 0,    
		@C_ tinyint = 0,					@U_ tinyint = 0,		@R_ tinyint = 0,                  
		@D_ tinyint = 0;

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
		SET @IDAConsultar = @SegLogReglaID
		SELECT	@SegUsuarioID_ = SegUsuarioID,	@TablaNombre_ = TablaNombre,	@C_ = C,
				@R_ = R,						@U_ = U,						@D_ = D 
		FROM	SegLogRegla
		WHERE	SegLogReglaID = @IDAConsultar

		-- Si no se encontró registro a Consultar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
		ELSE
			BEGIN
					/* Procesa Bitácora */
				-- Revisa si la consulta debe ser guardado en Bitácora
				EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
						@UsuarioID			=	@UsuarioIDBitacora,
						@TablaNombre		=   @TablaNombreIDBitacora,
						@Operacion			=	@Operacion
				IF @isChangeBeLogged = 1 
				BEGIN
					-- LogMessage = Parámetros de Consulta
					SET @logMessage = Concat('SegCriteriosBitacoraID::', @IDAConsultar, ':', 0, ';')
	
					-- Guarda en Bitácora
					EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
															,@TablaID			= @IDAConsultar
															,@TablaColumna1		= ''
															,@TablaColumna2		= ''
															,@Operacion			= @Operacion
															,@UsuarioID			= @UsuarioIDBitacora
															,@Descripcion		= @DescripcionBitacora
															,@Cambios			= @logMessage
															,@IpAddress			= @IpAddress
															,@HostName			= @HostName
				END
			END
			-- Si no hubo errores -> COMMIT
			COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT	@Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT	@SegUsuarioID_ as SegUsuarioID,	@TablaNombre_ as TablaNombre, @C_ as C,
			@R_ as R, @U_ as U, @D_ as D
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SegLogRegla_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[SegLogRegla_Eliminar]
@SegLogReglaID	int
/************************************************/
	-- Parámetros para Log
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
	/************************************************/
As

DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegLogRegla',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@SysTablesName_ varchar(50) = '', @SegUsuarioID_ int = 0,
		@TablaNombre_ varchar(50) = 0,    @C_ tinyint = 0,	@U_ tinyint = 0,	
		@R_ tinyint = 0,                  @D_ tinyint = 0;

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

    SET @IDABorrar = @SegLogReglaID
	BEGIN
		DELETE
		FROM    SegLogRegla
		WHERE   SegLogReglaID = @SegLogReglaID

		/****************************************************************************/
		/* Log */
		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('SegLogReglaID::', @SegLogReglaID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SegLogRegla_Guardar]...';


GO
CREATE PROCEDURE [dbo].[SegLogRegla_Guardar]
@SegLogReglaID		int			= null
,@SegUsuarioID		int			= 0
,@TablaNombre		varchar(50)
,@C					Bit			= 0
,@R					Bit			= 0
,@U					Bit			= 0
,@D					Bit			= 0

	/************************************************/
	/* Campos para Log */
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
	/************************************************/
As

SET NOCOUNT ON 
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegLogRegla',	
		@Operacion	nvarchar(20) = 'Create', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@SegUsuarioID_	int = 0,
		@SegLogReglaID_ int = 0,
		@TablaNombre_	varchar(50) = '',
		@C_				Bit = 0,
		@R_				Bit = 0,
		@U_				Bit	= 0,
		@D_				Bit = 0


SET NOCOUNT ON 
SET XACT_ABORT ON;

BEGIN TRY
	BEGIN TRANSACTION
	IF @Errores = 0
	BEGIN
		INSERT  INTO SegLogRegla(
				SegLogReglaID,
				SegUsuarioID,
				TablaNombre,
				C,
				R,
				U,
				D)
		VALUES  (
				@SegLogReglaID,
				@SegUsuarioID,
				@TablaNombre,
				@C,
				@R,
				@U,
				@D)
        
		SET     @IDAActualizar = SCOPE_IDENTITY()
	END
	IF @@RowCount > 0
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si el cambio debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- logMessage = Cambios efectuados
			SET @logMessage = Concat(@logMessage, 'SegLogReglaID::', @SegLogReglaID_, ':', @SegLogReglaID, ';')
			SET @logMessage = Concat(@logMessage, 'SegUsuarioID: :', @SegUsuarioID_, ':', @SegUsuarioID, ';')
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAActualizar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		
	END
    -- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SegLogRegla_Listado]...';


GO

CREATE Procedure [dbo].[SegLogRegla_Listado]
-- Parámetros para Bitácora
	 @UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
As
	-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegLogRegla',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
		/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT		SegLogReglaID, SegUsuarioID, TablaNombre, C, R, U, D 
	FROM		SegLogRegla 
	ORDER BY	SegLogReglaID
	
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegPerfil_Consultar]...';


GO
CREATE PROCEDURE [dbo].[SegPerfil_Consultar]
@SegPerfilID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegPerfil',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@SegPerfilClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @SegPerfilID
	SELECT  @SegPerfilClave_ = SegPerfilClave,	@Nombre_ = Nombre,		@NombreCorto_ = NombreCorto
	FROM    SegPerfil
	WHERE   SegPerfilID = @IDAConsultar


	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SegPerfilID::', @SegPerfilID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @IDAConsultar as SegPerfilID,					@SegPerfilClave_ as SegPerfilClave,	
			@Nombre_ as Nombre,								@NombreCorto_ as NombreCorto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SegPerfil_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[SegPerfil_Eliminar]
@SegPerfilID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'SegPerfil',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variable para validar no Eliminar ClaveNoAsignado
DECLARE @TablaClave nvarchar(100) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @SegPerfilID
	-- Lee ClaveNoAsignado de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
	  FROM	SistemaParamCosmos;
	-- Lee TablaClave para validar que no sea ClaveNoAsignado
	SELECT	@TablaClave = IsNull(SegPerfilClave,'')
	  FROM	SegPerfil WHERE SegPerfilID = @IDABorrar
	-- Si es ClaveNoAsignado -> No se permite borrar
	IF @TablaClave = @ClaveNoAsignado
	BEGIN
		SELECT @Errores = 999995, @Mensaje = CONCAT('No se permite eliminar Clave ', @ClaveNoAsignado)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		DELETE
		FROM    SegPerfil
		WHERE   SegPerfilID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('SegPerfilID::', @SegPerfilID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDABorrar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SegPerfil_Guardar]...';


GO
CREATE PROCEDURE [dbo].[SegPerfil_Guardar]
@SegPerfilID	int,
@SegPerfilClave varchar(4)	= null,
@Nombre			varchar(50)	= null,
@NombreCorto	varchar(20) = null
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'SegPerfil',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@SegPerfilClave_ nvarchar(4) = '',
		@Nombre_ nvarchar(50) = '',			
		@NombreCorto_ varchar(20) = '',
		@SegPerfilID_ int = @SegPerfilID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @SegPerfilID
	-- Lee ClaveNoAsignado y Títulos de mensajes de Parámetros Cosmos
	SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,''),	@TituloMensaje = IsNull(TituloMensajeRespuesta,'')
	FROM	SistemaParamCosmos;
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@SegPerfilClave_ = IsNull(SegPerfilClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@SegPerfilID_ = IsNull(SegPerfilID,0)
		   FROM	SegPerfil WHERE SegPerfilID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		IF @SegPerfilClave_ = @ClaveNoAsignado and @SegPerfilClave <> @ClaveNoAsignado
			SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado),
					@TituloMensaje = 'Error de Protección de Integridad.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SegPerfil
			SET     SegPerfilClave = @SegPerfilClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   SegPerfilID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO SegPerfil(
					SegPerfilClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@SegPerfilClave,
					@Nombre,
					@NombreCorto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @SegPerfilID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('SegPerfilClave::', @SegPerfilClave_, ':', @SegPerfilClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SegPerfil_Listado]...';


GO
CREATE PROCEDURE [dbo].[SegPerfil_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora			int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora   nvarchar(100) = 'SegPerfil',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT		SegPerfilID,SegPerfilClave,Nombre,NombreCorto
	FROM		SegPerfil
	ORDER BY	SegPerfilClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegPerfilOpcion_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SegPerfilOpcion_Consultar]
@SegPerfilOpcionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegPerfilOpcion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@SegPerfilID_ int = 0,
		@OpcionID_ int = 0,
		@SegPerfilOpcionID_ int = @SegPerfilOpcionID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @SegPerfilOpcionID

	SELECT  @OpcionID_ = OpcionID,	@SegPerfilID_ = SegPerfilID
	FROM    SegPerfilOpcion
	WHERE   @SegPerfilOpcionID = @IDAConsultar
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SegPerfilOpcionID::', @SegPerfilOpcionID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
						
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH

	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())

END CATCH 

IF @Errores = 0

	SELECT  @OpcionID_		as OpcionID,	
			@SegPerfilID_	as SegPerfilID

ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SegPerfilOpcion_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SegPerfilOpcion_Eliminar]
@SegPerfilOpcionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress					varchar(40)		= null
	,@HostName					varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegPerfilOpcion',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @SegPerfilOpcionID
	BEGIN
		DELETE
		FROM    SegPerfilOpcion
		WHERE   SegPerfilOpcionID = @SegPerfilOpcionID 

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('SegPerfilOpcionID::', @SegPerfilOpcionID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SegPerfilOpcion_Guardar]...';


GO

CREATE PROCEDURE [dbo].[SegPerfilOpcion_Guardar]
@SegPerfilID int,
@OpcionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
SET NOCOUNT ON 
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegPerfilOpcion',	
		@Operacion	nvarchar(20) = 'Create', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@OpcionID_		int = 0,
		@SegPerfilID_	int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	-- NUNCA ES UPDATE SÓLO INSERT
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		INSERT  INTO SegPerfilOpcion(
				OpcionID,
				SegPerfilID)
		VALUES  (
				@OpcionID,
				@SegPerfilID)
        
		SET     @IDAActualizar = SCOPE_IDENTITY()
	END

	IF @@RowCount > 0
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si el cambio debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- logMessage = Cambios efectuados
			SET @logMessage = Concat(@logMessage, 'OpcionID::', @OpcionID_, ':', @OpcionID, ';')
			SET @logMessage = Concat(@logMessage, 'SegPerfilID::', @SegPerfilID_, ':', @SegPerfilID, ';')
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAActualizar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SegPerfilOpcion_Listado]...';


GO


CREATE PROCEDURE [dbo].[SegPerfilOpcion_Listado]
-- Parámetros para Bitácora
	 @UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegPerfilOpcion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  SegPerfilOpcionID,SegPerfilID,OpcionID
	FROM    SegPerfilOpcion
	--WHERE	EmpresaID = @EmpresaID
	ORDER BY SegPerfilID

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegPerfilOpcion_ListadoPerfilID]...';


GO
CREATE PROCEDURE [dbo].[SegPerfilOpcion_ListadoPerfilID]
@SegPerfilID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegPerfilOpcion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage = ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT	b.SegPerfilOpcionID,b.SegPerfilID,b.OpcionID
	FROM	SistemaOpcion a 
			INNER JOIN SegPerfilOpcion b ON a.OpcionID = b.OpcionID AND b.SegPerfilID = @SegPerfilID
	ORDER	BY a.PadreID, COALESCE(a.Orden, 9999), a.Nombre

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegPerfilOpcionAccion_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SegPerfilOpcionAccion_Consultar]
@SegPerfilOpcionAccionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress					varchar(40)		= null
	,@HostName					varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegPerfilOpcionAccion',	
		@Operacion				 nvarchar(20) = 'Read', 
		@logMessage				 varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@SegPerfilOpcionID_ int = 0,	
		@AccionID_			int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

		SET		@IDAConsultar = @SegPerfilOpcionAccionID
		SELECT  @SegPerfilOpcionID_ =	 SegPerfilOpcionID,	
				@AccionID_          =	 AccionID
		FROM    SegPerfilOpcionAccion
		WHERE   SegPerfilOpcionAccionID = @IDAConsultar



	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @SegPerfilOpcionAccionID)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SegPerfilOpcionAccionID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
						
				END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @SegPerfilOpcionID_ as SegPerfilOpcionID,	
			@AccionID_ as AccionID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SegPerfilOpcionAccion_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SegPerfilOpcionAccion_Eliminar]
@SegPerfilOpcionAccionID int

-- Parámetros para Bitácora
	,@UsuarioBitacora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress					varchar(40)		= null
	,@HostName					varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora		nvarchar(100) = 'SegPerfilOpcionAccion',	
		@Operacion					nvarchar(20) = 'Delete', 
		@logMessage					varchar(Max) = '',
		@isChangeBeLogged			bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDABorrar = @SegPerfilOpcionAccionID

	BEGIN
		DELETE
		FROM    SegPerfilOpcionAccion
		WHERE   SegPerfilOpcionAccionID = @SegPerfilOpcionAccionID

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @SegPerfilOpcionAccionID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('SegPerfilOpcionAccionID::', @SegPerfilOpcionAccionID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SegPerfilOpcionAccion_Guardar]...';


GO

CREATE PROCEDURE [dbo].[SegPerfilOpcionAccion_Guardar]
@SegPerfilOpcionID int,
@AccionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
SET NOCOUNT ON 
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegPerfilOpcionAccion',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@SegPerfilOpcionID_ int = 0,
		@AccionID_			int = 0
		

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	-- NUNCA ES UPDATE SÓLO INSERT
	IF @Errores = 0
	BEGIN
		INSERT  INTO SegPerfilOpcionAccion(
				SegPerfilOpcionID,
				AccionID)
		VALUES  (
				@SegPerfilOpcionID,
				@AccionID)
        
		SET     @IDAActualizar = SCOPE_IDENTITY()
	END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('@SegPerfilOpcionID::', @SegPerfilOpcionID_, ':', @SegPerfilOpcionID, ';')
				SET @logMessage = Concat(@logMessage, 'AccionID::', @AccionID_, ':', @AccionID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SegPerfilOpcionAccion_Listado]...';


GO


CREATE PROCEDURE [dbo].[SegPerfilOpcionAccion_Listado]
@SegPerfilOpcionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegPerfilOpcionAccion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
		

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT   POA.SegPerfilOpcionAccionID, A.AccionID,A.Nombre as Nombre
	FROM     SegPerfilOpcionAccion POA
	inner join SegPerfilOpcion PO	on POA.SegPerfilOpcionID = PO.SegPerfilOpcionID
	inner join SistemaAccion A		on POA.AccionID = A.AccionID
	WHERE	POA.SegPerfilOpcionID = @SegPerfilOpcionID
	--ORDER BY SegPerfilOpcionID

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('SegPerfilID::', @SegPerfilOpcionID, ':',0, ';')
		--SET @logMessage =  Concat('SegPerfilID::',  ':',0, ';')
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegPerfilOpcionAccion_ListadoPerfilIDOpcionID]...';


GO
CREATE PROCEDURE [dbo].[SegPerfilOpcionAccion_ListadoPerfilIDOpcionID]
@SegPerfilID int,
@OpcionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegPerfilOpcionAccion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
		

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT POA. *, A.Nombre
	FROM SegPerfilOpcionAccion POA
	INNER JOIN SegPerfilOpcion PO ON POA.SegPerfilOpcionID = PO.SegPerfilOpcionID
	INNER JOIN SistemaAccion A ON POA.AccionID = A.AccionID
	WHERE PO.SegPerfilID = @SegPerfilID AND PO.OpcionID = @OpcionID

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('SegPerfilID::',	@SegPerfilID, ':',0, ';')
		SET @logMessage =  Concat('OpcionID::',		@OpcionID, ':',0, ';')
		--SET @logMessage =  Concat('SegPerfilID::',  ':',0, ';')
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuario_Consultar]...';


GO
CREATE PROCEDURE [dbo].[SegUsuario_Consultar]
@SegUsuarioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuario',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@CorreoElectronico_		nvarchar(150) = '',
		@Nombre_				nvarchar(150) = '',
		@Alias_					nvarchar(50) = '',
		@Activo_				bit = 0,
		@Intentos_				tinyint = 0,
		@Bloqueado_				bit = 0,
		@UsuarioAD_				nvarchar(50) = '',
		@Administrador_			bit = 0,
		@UltimoAcceso_			datetime = 0,
		@UltimaEmpresaID_		int = 0,
		@UltimoModuloID_		int = 0,
		@UltimaOpcionID_		int = 0,
		@UltimaIP_				nvarchar(50) = '',
		@LinkFoto_				varchar(250) = '', 
		@EspPersonaID_			int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET		@IDAConsultar = @SegUsuarioID
	SELECT  @SegUsuarioID = SegUsuarioID,		@CorreoElectronico_ = CorreoElectronico,	@Nombre_ = Nombre,						@Alias_ = Alias,
			@Activo_ = Activo,					@Intentos_ = Intentos,						@Bloqueado_ = Bloqueado,				@UsuarioAD_ = UsuarioAD,
			@Administrador_ = Administrador,	@UltimoAcceso_ = UltimoAcceso,				@UltimaEmpresaID_ = UltimaEmpresaID,	@UltimoModuloID_ = UltimoModuloID,
			@UltimaOpcionID_ = UltimaOpcionID,	@UltimaIP_ = UltimaIP,						@LinkFoto_ = LinkFoto,					@EspPersonaID_ = EspPersonaID
	FROM    SegUsuario
	WHERE   SegUsuarioID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SegUsuarioID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @SegUsuarioID as SegUsuarioID,			@CorreoElectronico_ as CorreoElectronico,	@Nombre_ as Nombre,					@Alias_ as Alias,					@Activo_ as Activo,
			@Intentos_ as Intentos,					@Bloqueado_ as Bloqueado,					@UsuarioAD_ as UsuarioAD,			@Administrador_ as Administrador,	@UltimoAcceso_ as UltimoAcceso,	
			@UltimaEmpresaID_ as UltimaEmpresaID,	@UltimoModuloID_ as UltimoModuloID,			@UltimaOpcionID_ as UltimaOpcionID,	@UltimaIP_ as UltimaIP,
			@LinkFoto_ as LinkFoto,					@EspPersonaID_ as EspPersonaID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuario_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SegUsuario_Eliminar]
@SegUsuarioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress					varchar(40)		= null
	,@HostName					varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuario',	
		@Operacion				 nvarchar(20) = 'Delete', 
		@logMessage				 varchar(Max) = '',
		@isChangeBeLogged		 bit


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @SegUsuarioID
	BEGIN
		DELETE
		FROM    SegUsuario
		WHERE   SegUsuarioID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('SegUsuarioID::', @SegUsuarioID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuario_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SegUsuario_Guardar]
@SegUsuarioID int,		@CorreoElectronico nvarchar(150),		@Nombre nvarchar(150),
@Alias nvarchar(50),	@Contrasena nvarchar(50),				@Activo bit,
@Intentos tinyint,		@Bloqueado bit,							@UsuarioAD nvarchar(50),
@Administrador bit,		@UltimoAcceso datetime,					@UltimaEmpresaID int,
@UltimoModuloID int,	@UltimaOpcionID int,					@UltimaIP nvarchar(50),
@LinkFoto varchar(250), @EspPersonaID int

-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null	

AS
-- Variables para manejo de Respuesta
DECLARE @Errores int = 0,						@Mensaje nvarchar(500) = '',				@IDAActualizar int,
		@ClaveNoAsignado varchar(5),			@TituloMensaje varchar(100) = ''
-- Variables para Bitácora
DECLARE @TablaNombreBitacora   nvarchar(100) = 'SegUsuario',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@CorreoElectronico_		nvarchar(150) = '',
		@Nombre_				nvarchar(150) = '',
		@Alias_					nvarchar(50) = '',
		@Activo_				bit = 0,
		@Intentos_				tinyint = 0,
		@Bloqueado_				bit = 0,
		@UsuarioAD_				nvarchar(50) = '',
		@Administrador_			bit = 0,
		@UltimoAcceso_			datetime = 0,
		@UltimaEmpresaID_		int = 0,
		@UltimoModuloID_		int = 0,
		@UltimaOpcionID_		int = 0,
		@UltimaIP_				nvarchar(50) = '',
		@SegUsuarioID_			int = @SegUsuarioID,
		@LinkFoto_				varchar(250) = '',
		@EspPersonaID_			int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @SegUsuarioID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN

		SELECT	@CorreoElectronico_ =	IsNull(CorreoElectronico,''),	@Nombre_ =				IsNull(Nombre,''),
				@Alias_ =				IsNull(Alias,''),				@Activo_ =				IsNull(Activo,0),
				@Intentos_ =			IsNull(Intentos,0),				@Bloqueado_ =			IsNull(Bloqueado,0),
				@UsuarioAD_ =			IsNull(UsuarioAD,''),			@Administrador_ =		IsNull(Administrador,0),
				@UltimoAcceso_ =		IsNull(UltimoAcceso,0),			@UltimaEmpresaID_ =		IsNull(UltimaEmpresaID,0),
				@UltimoModuloID_ =		IsNull(UltimoModuloID,0),		@UltimaOpcionID_ =		IsNull(UltimaOpcionID,0),
				@UltimaIP_ = IsNull(UltimaIP,''),						@LinkFoto_ = LinkFoto,	@EspPersonaID_ = EspPersonaID
		FROM	SegUsuario WHERE SegUsuarioID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar),
					@TituloMensaje = 'Error de Inconsistencia de Información.';
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @EspPersonaID = 0
			SET @EspPersonaID = NULL;
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SegUsuario
			SET     CorreoElectronico = @CorreoElectronico,			Nombre =          @Nombre,				Alias = @Alias,
					Contrasena =	CASE WHEN @Contrasena > '' THEN	PWDENCRYPT(@Contrasena) ELSE Contrasena END,	
					Activo =          @Activo,				Intentos = @Intentos,
					Bloqueado =			@Bloqueado,					UsuarioAD =       @UsuarioAD,			Administrador = @Administrador,
					UltimoAcceso =		@UltimoAcceso,				UltimaEmpresaID = @UltimaEmpresaID,		UltimoModuloID = @UltimoModuloID,
					UltimaOpcionID = @UltimaOpcionID,				UltimaIP = @UltimaIP,					LinkFoto = @LinkFoto,
					EspPersonaID = @EspPersonaID
			WHERE   SegUsuarioID = @IDAActualizar
		END
		ELSE
		BEGIN
			INSERT  INTO SegUsuario(
					CorreoElectronico,
					Nombre,
					Alias,
					Contrasena,
					Activo,
					Intentos,
					Bloqueado,
					UsuarioAD,
					Administrador,
					UltimoAcceso,
					UltimaEmpresaID,
					UltimoModuloID,
					UltimaOpcionID,
					UltimaIP,
					LinkFoto,
					EspPersonaID)
			VALUES  (
					@CorreoElectronico,
					@Nombre,
					@Alias,
					PWDENCRYPT(@Contrasena),
					@Activo,
					@Intentos,
					@Bloqueado,
					@UsuarioAD,
					@Administrador,
					@UltimoAcceso,
					@UltimaEmpresaID,
					@UltimoModuloID,
					@UltimaOpcionID,
					@UltimaIP,
					@LinkFoto,
					@EspPersonaID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @SegUsuarioID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('CorreoElectronico::', @CorreoElectronico_, ':', @CorreoElectronico, ';')
				SET @logMessage = Concat(@logMessage, 'Alias::', @Alias_, ':', @Alias, ';')
				SET @logMessage = Concat(@logMessage, 'Activo::', @Activo_, ':', @Activo, ';')
				SET @logMessage = Concat(@logMessage, 'Intentos::', @Intentos_, ':', @Intentos, ';')
				SET @logMessage = Concat('Bloqueado::', @Bloqueado_, ':', @Bloqueado, ';')
				SET @logMessage = Concat('UsuarioAD::', @UsuarioAD_, ':', @UsuarioAD, ';')
				SET @logMessage = Concat(@logMessage, 'Administrador::', @Administrador_, ':', @Administrador, ';')
				SET @logMessage = Concat(@logMessage, 'UltimoAcceso::', @UltimoAcceso_, ':', @UltimoAcceso, ';')
				SET @logMessage = Concat(@logMessage, 'UltimaEmpresaID::', @UltimaEmpresaID_, ':', @UltimaEmpresaID, ';')
				SET @logMessage = Concat('UltimoModuloID::', @UltimoModuloID_, ':', @UltimoModuloID, ';')
				SET @logMessage = Concat('UltimaOpcionID::', @UltimaOpcionID_, ':', @UltimaOpcionID, ';')
				SET @logMessage = Concat(@logMessage, 'UltimaIP::', @UltimaIP_, ':', @UltimaIP, ';')
				SET @logMessage = Concat(@logMessage, 'LinkFoto::', @LinkFoto_, ':', @LinkFoto, ';')
				SET @logMessage = Concat(@logMessage, 'EspPersonaID::', @EspPersonaID_, ':', @EspPersonaID, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuario_Listado]...';


GO


CREATE PROCEDURE [dbo].[SegUsuario_Listado]
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuario',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	SELECT  SegUsuarioID,					CorreoElectronico,				Nombre,							Alias,
			Activo,							Intentos,						Bloqueado,						UsuarioAD,
			Administrador,					UltimoAcceso,					UltimaEmpresaID,				UltimoModuloID,
			UltimaOpcionID,					UltimaIP,						LinkFoto,						EspPersonaID
	FROM    SegUsuario
	--WHERE	UltimaEmpresaID = @UltimaEmpresaID
	ORDER BY Nombre
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuario_ListadoOpcionesAnteriorFront]...';


GO

CREATE PROCEDURE [dbo].[SegUsuario_ListadoOpcionesAnteriorFront]
@SegUsuarioID int, @EmpresaID int, @ModuloID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuario',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
		
	SELECT	DISTINCT ModuloID, ModuloNombre, ModuloNombreCorto, 
			OpcionID, OpcionNombre, OpcionNombreCorto, COALESCE(PadreID,0) as PadreID, COALESCE(Orden,999) as Orden, 
			RecursoWebsite, OpcionActivo, Protegido, Popup, VisibleMenu, Icono
	FROM	vSeguridadUsuarioOpcion 
	WHERE	SegUsuarioID = @SegUsuarioID
	AND		EmpresaID = @EmpresaID
	AND		ModuloID = @ModuloID
	ORDER	BY COALESCE(PadreID, 0), COALESCE(Orden, 999), ModuloID, ModuloNombre, ModuloNombreCorto, OpcionID, 
			OpcionNombre, OpcionNombreCorto, RecursoWebsite

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  ''

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea

		

SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioArea_Consultar]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioArea_Consultar]
@SegUsuarioAreaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora		nvarchar(100) = 'SegUsuarioArea',	
		@Operacion					nvarchar(20) = 'Read', 
		@logMessage					varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@SegUsuarioID_ int = 0,
		@PpalAreaID_ int = 0			

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @SegUsuarioAreaID
	
	SELECT  @SegUsuarioID_ = SegUsuarioID, @PpalAreaID_ = PpalAreaID
	FROM    SegUsuarioArea
	WHERE   SegUsuarioAreaID = @IDAConsultar

	
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SegUsuarioAreaID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @SegUsuarioID_ as SegUsuarioID,	@PpalAreaID_ as PpalAreaID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioArea_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioArea_Eliminar]
@SegUsuarioAreaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress					varchar(40)		= null
	,@HostName					varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
DECLARE @TablaNombreIDForLog   nvarchar(100) = 'SegUsuarioArea',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @SegUsuarioAreaID
	BEGIN
		DELETE
		FROM    SegUsuarioArea
		WHERE   SegUsuarioAreaID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDForLog,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('SegUsuarioAreaID::', @SegUsuarioAreaID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDForLog
														,@TablaID			= @SegUsuarioAreaID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioArea_Guardar]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioArea_Guardar]
@SegUsuarioAreaID int,
@SegUsuarioID int,
@PpalAreaID int


-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioArea',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@SegUsuarioAreaID_	int = 0,
		@SegUsuarioID_		int = 0,			
		@PpalAreaID_		int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @SegUsuarioAreaID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@SegUsuarioAreaID_ = IsNull(SegUsuarioAreaID,''),
	 			@SegUsuarioID_ = IsNull(SegUsuarioID,''),
				@PpalAreaID_ = IsNull(PpalAreaID,'')
		   FROM	SegUsuarioArea WHERE SegUsuarioAreaID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  SegUsuarioArea
			SET     SegUsuarioID = @SegUsuarioID,
					PpalAreaID = @PpalAreaID
			WHERE   SegUsuarioAreaID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO SegUsuarioArea(
					SegUsuarioID,
					PpalAreaID)
			VALUES  (
					@SegUsuarioID,
					@PpalAreaID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @SegUsuarioAreaID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('SegUsuarioID::', @SegUsuarioID_, ':', @SegUsuarioID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalAreaID::', @PpalAreaID_, ':', @PpalAreaID, ';')
				
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioArea_Listado]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioArea_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioArea',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	SELECT  SegUsuarioAreaID,SegUsuarioID,PpalAreaID
	FROM    SegUsuarioArea

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioArea_ListadoNoSegUsuarioID]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioArea_ListadoNoSegUsuarioID]
@SegUsuarioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioArea',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('EmpresaID::', @EmpresaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	SELECT  PA.PpalAreaID, PA.Nombre as NombreArea
	FROM    PpalArea PA
	WHERE PpalAreaID NOT IN(SELECT PpalAreaID FROM SegUsuarioArea SUA where SegUsuarioID = @SegUsuarioID) 

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioArea_ListadoSegUsuarioID]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioArea_ListadoSegUsuarioID]
@SegUsuarioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioArea',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	SELECT  SegUsuarioAreaID,SegUsuarioID,SUA.PpalAreaID, PA.Nombre as NombreArea
	FROM    SegUsuarioArea SUA
	inner join PpalArea PA on SUA.PpalAreaID = PA.PpalAreaID
	WHERE	SegUsuarioID = @SegUsuarioID
	--ORDER BY PpalAreaClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioCentroCosto_Consultar]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioCentroCosto_Consultar]
@SegUsuarioCentroCostoID int

-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioCentroCosto',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@SegUsuarioID_ int = 0,
		@PpalCentroCostoID_ int = 0			

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @SegUsuarioCentroCostoID
	
	SELECT  @SegUsuarioID_ = SegUsuarioID, @PpalCentroCostoID_ = PpalCentroCostoID
	FROM    SegUsuarioCentroCosto
	WHERE   SegUsuarioCentroCostoID = @IDAConsultar

	
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SegUsuarioCentroCostoID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @SegUsuarioID_ as SegUsuarioID,	@PpalCentroCostoID_ as PpalCentroCostoID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioCentroCosto_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioCentroCosto_Eliminar]
@SegUsuarioCentroCostoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress					varchar(40)		= null
	,@HostName					varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioCentroCosto',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @SegUsuarioCentroCostoID
	BEGIN
		DELETE
		FROM    SegUsuarioCentroCosto
		WHERE   SegUsuarioCentroCostoID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('SegUsuarioCentroCostoID::', @SegUsuarioCentroCostoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @SegUsuarioCentroCostoID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioCentroCosto_Guardar]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioCentroCosto_Guardar]
@SegUsuarioCentroCostoID int,
@SegUsuarioID int,
@PpalCentroCostoID int


-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioCentroCosto',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@SegUsuarioCentroCostoID_ int = 0,
		@SegUsuarioID_ int = 0,			
		@PpalCentroCostoID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @SegUsuarioCentroCostoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@SegUsuarioCentroCostoID_ = IsNull(SegUsuarioCentroCostoID,''),
	 			@SegUsuarioID_ =			IsNull(SegUsuarioID,''),
				@PpalCentroCostoID_ =		IsNull(PpalCentroCostoID,'')
		   FROM	SegUsuarioCentroCosto WHERE SegUsuarioCentroCostoID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
		
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  SegUsuarioCentroCosto
			SET     SegUsuarioID =				@SegUsuarioID,
					PpalCentroCostoID =			@PpalCentroCostoID
			WHERE   SegUsuarioCentroCostoID =	@IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO SegUsuarioCentroCosto(
					SegUsuarioID,
					PpalCentroCostoID)
			VALUES  (
					@SegUsuarioID,
					@PpalCentroCostoID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @SegUsuarioCentroCostoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('SegUsuarioID::', @SegUsuarioID_, ':', @SegUsuarioID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalCentroCostoID::', @PpalCentroCostoID_, ':', @PpalCentroCostoID, ';')
				
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioCentroCosto_Listado]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioCentroCosto_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioCentroCosto',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('EmpresaID::', @EmpresaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	SELECT  SegUsuarioCentroCostoID,SegUsuarioID,PpalCentroCostoID
	FROM    SegUsuarioCentroCosto

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioCentroCosto_ListadoNoSegUsuarioID]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioCentroCosto_ListadoNoSegUsuarioID]
@SegUsuarioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioCentroCosto',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('EmpresaID::', @EmpresaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	SELECT  PpalCentroCostoID, Nombre as NombreCentroCosto
	FROM    PpalCentroCosto 
	WHERE PpalCentroCostoID NOT IN(SELECT PpalCentroCostoID FROM SegUsuarioCentroCosto  where SegUsuarioID = @SegUsuarioID) 
	--ORDER BY PpalAreaClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioCentroCosto_ListadoSegUsuarioID]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioCentroCosto_ListadoSegUsuarioID]
@SegUsuarioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioCentroCosto',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	SELECT  SegUsuarioCentroCostoID,SegUsuarioID, PCC.PpalCentroCostoID, PCC.Nombre as NombreCentroCosto
	FROM    SegUsuarioCentroCosto SUCC, PpalCentroCosto PCC
	WHERE	SUCC.SegUsuarioID = @SegUsuarioID and (SUCC.PpalCentroCostoID = PCC.PpalCentroCostoID or
			SUCC.PpalCentroCostoID = (SELECT PpalCentroCostoID FROM PpalCentroCosto
										WHERE PpalCentroCostoClave = (SELECT ClaveNoAsignado FROM SistemaParamCosmos)))
	--ORDER BY PpalAreaClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioConceptoEgreso_Consultar]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioConceptoEgreso_Consultar]
@SegUsuarioConceptoEgresoID int

-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioConceptoEgreso',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@SegUsuarioID_ int = 0,
		@PpalConceptoEgresoID_ int = 0,
		@SegUsuarioConceptoEgresoID_ int = 0,
		@NombreConceptoEgreso_ varchar(60) = ''

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @SegUsuarioConceptoEgresoID
	
	SELECT  @SegUsuarioConceptoEgresoID_ = SUCC.SegUsuarioConceptoEgresoID,		@SegUsuarioID_ = SUCC.SegUsuarioID, 
			@PpalConceptoEgresoID_ = PCC.PpalConceptoEgresoID,					@NombreConceptoEgreso_ = PCC.Nombre
	FROM    SegUsuarioConceptoEgreso SUCC
	 LEFT OUTER JOIN PpalConceptoEgreso PCC ON SUCC.PpalConceptoEgresoID = PCC.PpalConceptoEgresoID
	WHERE	SUCC.SegUsuarioConceptoEgresoID = @IDAConsultar
	
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SegUsuarioConceptoEgresoID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @SegUsuarioID_ as SegUsuarioID,						@PpalConceptoEgresoID_ as PpalConceptoEgresoID,
			@SegUsuarioConceptoEgresoID_ AS SegUsuarioConceptoEgresoID,		@NombreConceptoEgreso_ AS NombreConceptoEgreso
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioConceptoEgreso_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioConceptoEgreso_Eliminar]
@SegUsuarioConceptoEgresoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress					varchar(40)		= null
	,@HostName					varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioConceptoEgreso',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @SegUsuarioConceptoEgresoID
	BEGIN
		DELETE
		FROM    SegUsuarioConceptoEgreso
		WHERE   SegUsuarioConceptoEgresoID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('SegUsuarioConceptoEgresoID::', @SegUsuarioConceptoEgresoID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @SegUsuarioConceptoEgresoID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioConceptoEgreso_Guardar]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioConceptoEgreso_Guardar]
@SegUsuarioConceptoEgresoID int,
@SegUsuarioID int,
@PpalConceptoEgresoID int


-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioConceptoEgreso',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@SegUsuarioConceptoEgresoID_ int = 0,
		@SegUsuarioID_ int = 0,			
		@PpalConceptoEgresoID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @SegUsuarioConceptoEgresoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@SegUsuarioConceptoEgresoID_ = IsNull(SegUsuarioConceptoEgresoID,''),
	 			@SegUsuarioID_ =			IsNull(SegUsuarioID,''),
				@PpalConceptoEgresoID_ =		IsNull(PpalConceptoEgresoID,'')
		   FROM	SegUsuarioConceptoEgreso WHERE SegUsuarioConceptoEgresoID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
		
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  SegUsuarioConceptoEgreso
			SET     SegUsuarioID =				@SegUsuarioID,
					PpalConceptoEgresoID =			@PpalConceptoEgresoID
			WHERE   SegUsuarioConceptoEgresoID =	@IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO SegUsuarioConceptoEgreso(
					SegUsuarioID,
					PpalConceptoEgresoID)
			VALUES  (
					@SegUsuarioID,
					@PpalConceptoEgresoID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @SegUsuarioConceptoEgresoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('SegUsuarioID::', @SegUsuarioID_, ':', @SegUsuarioID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalConceptoEgresoID::', @PpalConceptoEgresoID_, ':', @PpalConceptoEgresoID, ';')
				
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioConceptoEgreso_Listado]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioConceptoEgreso_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioConceptoEgreso',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('EmpresaID::', @EmpresaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	SELECT  SegUsuarioConceptoEgresoID,SegUsuarioID,PpalConceptoEgresoID
	FROM    SegUsuarioConceptoEgreso

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioConceptoEgreso_ListadoNoSegUsuarioID]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioConceptoEgreso_ListadoNoSegUsuarioID]
@SegUsuarioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioConceptoEgreso',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('EmpresaID::', @EmpresaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	SELECT  PpalConceptoEgresoID, Nombre as NombreConceptoEgreso
	FROM    PpalConceptoEgreso 
	WHERE PpalConceptoEgresoID NOT IN(SELECT PpalConceptoEgresoID FROM SegUsuarioConceptoEgreso  where SegUsuarioID = @SegUsuarioID) 
	--ORDER BY PpalAreaClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioConceptoEgreso_ListadoSegUsuarioID]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioConceptoEgreso_ListadoSegUsuarioID]
@SegUsuarioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioConceptoEgreso',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	SELECT  SegUsuarioConceptoEgresoID,SegUsuarioID, PCC.PpalConceptoEgresoID, PCC.Nombre as NombreConceptoEgreso
	FROM    SegUsuarioConceptoEgreso SUCC, PpalConceptoEgreso PCC
	WHERE	SUCC.SegUsuarioID = @SegUsuarioID and (SUCC.PpalConceptoEgresoID = PCC.PpalConceptoEgresoID or
			SUCC.PpalConceptoEgresoID = (SELECT PpalConceptoEgresoID FROM PpalConceptoEgreso
										WHERE PpalConceptoEgresoClave = (SELECT ClaveNoAsignado FROM SistemaParamCosmos)))
	--ORDER BY PpalAreaClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioEstatusDocumento_Consultar]...';


GO

CREATE PROCEDURE [dbo].[SegUsuarioEstatusDocumento_Consultar]
@SegUsuarioEstatusDocumentoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioEstatusDocumento',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@SegUsuarioID_ int = 0,
		@CfgEstatusDocumentoID_ int = 0,
		@PPalCentroCostoID_ int = 0 ,
		@PpalAreaID_ int = 0,
		@EmpresaID_ int = 0,
		@PpalAlmacenID_ int = 0,
		@PpalSucursalID_ int = 0,
		@Monto_ money = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @SegUsuarioEstatusDocumentoID
	SELECT  @SegUsuarioID_ = SegUsuarioID,		@CfgEstatusDocumentoID_ = CfgEstatusDocumentoID,	@PpalCentroCostoID_ = PpalCentroCostoID,
			@PpalAreaID_ = PpalAreaID,			@EmpresaID_ = EmpresaID,							@PpalAlmacenID_ = PpalAlmacenID,
			@PpalSucursalID_ = PpalSucursalID,	@Monto_ = Monto
	FROM    SegUsuarioEstatusDocumento
	WHERE   SegUsuarioEstatusDocumentoID = @SegUsuarioEstatusDocumentoID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SegUsuarioEstatusDocumentoID::', @SegUsuarioEstatusDocumentoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @SegUsuarioID_ as SegUsuarioID,		@CfgEstatusDocumentoID_ as CfgEstatusDocumentoID,	@PpalCentroCostoID_ as PpalCentroCostoID,
			@PpalAreaID_ as PpalAreaID,			@EmpresaID_ as EmpresaID,							@PpalAlmacenID_ as PpalAlmacenID,
			@PpalSucursalID_ as PpalSucursalID,	@Monto_ as Monto,									@SegUsuarioEstatusDocumentoID as SegUsuarioEstatusDocumentoID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioEstatusDocumento_Eliminar]...';


GO

CREATE PROCEDURE [dbo].[SegUsuarioEstatusDocumento_Eliminar]
@SegUsuarioEstatusDocumentoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress					varchar(40)		= null
	,@HostName					varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioEstatusDocumento',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @SegUsuarioEstatusDocumentoID
	BEGIN
    DELETE
    FROM    SegUsuarioEstatusDocumento
    WHERE   SegUsuarioEstatusDocumentoID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('SegUsuarioEstatusDocumentoID::', @SegUsuarioEstatusDocumentoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioEstatusDocumento_Guardar]...';


GO

CREATE PROCEDURE [dbo].[SegUsuarioEstatusDocumento_Guardar]
@SegUsuarioEstatusDocumentoID int,
@SegUsuarioID int,
@CfgEstatusDocumentoID int,
@PpalCentroCostoID int = 0 ,
@PpalAreaID int = 0,
@EmpresaID int = 0,
@PpalAlmacenID int = 0,
@PpalSucursalID int = 0,
@Monto money = 0
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioEstatusDocumento',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@SegUsuarioID_ int = 0,
		@CfgEstatusDocumentoID_ int = 0,
		@PpalCentroCostoID_ int = 0 ,
		@PpalAreaID_ int = 0,
		@EmpresaID_ int = 0,
		@PpalAlmacenID_ int = 0,
		@PpalSucursalID_ int = 0,
		@Monto_ money = 0,
		@SegUsuarioEstatusDocumentoID_ int = @SegUsuarioEstatusDocumentoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @SegUsuarioEstatusDocumentoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@SegUsuarioID_ = IsNull(SegUsuarioID,0),
				@CfgEstatusDocumentoID_ = IsNull(CfgEstatusDocumentoID,0),
				@PpalCentroCostoID_ = IsNull(PpalCentroCostoID,0) ,
				@PpalAreaID_ = IsNull(PpalAreaID,0),
				@EmpresaID_ = IsNull(@EmpresaID,0),
				@PpalAlmacenID_ = IsNull(PpalAlmacenID,0),
				@PpalSucursalID_ = IsNull(PpalSucursalID,0),
				@Monto_ = IsNull(Monto,0),
				@SegUsuarioEstatusDocumentoID_ = IsNull(SegUsuarioEstatusDocumentoID,0)
		   FROM	SegUsuarioEstatusDocumento WHERE SegUsuarioEstatusDocumentoID = @SegUsuarioEstatusDocumentoID
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		--IF @AreaClave_ = @ClaveNoAsignado and @AreaClave <> @ClaveNoAsignado
			--SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SegUsuarioEstatusDocumento
			SET		SegUsuarioID = @SegUsuarioID,
					CfgEstatusDocumentoID = @CfgEstatusDocumentoID,
					PpalCentroCostoID = @PpalCentroCostoID,
					PpalAreaID = @PpalAreaID,
					EmpresaID = @EmpresaID,
					PpalAlmacenID = @PpalAlmacenID,
					PpalSucursalID = @PpalSucursalID,
					Monto = @Monto
			WHERE   SegUsuarioEstatusDocumentoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO SegUsuarioEstatusDocumento(
					SegUsuarioID,
					CfgEstatusDocumentoID,
					PpalCentroCostoID,
					PpalAreaID,
					EmpresaID,
					PpalAlmacenID,
					PpalSucursalID,
					Monto)
			VALUES  (
					@SegUsuarioID,
					@CfgEstatusDocumentoID,
					@PpalCentroCostoID,
					@PpalAreaID,
					@EmpresaID,
					@PpalAlmacenID,
					@PpalSucursalID,
					@Monto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @SegUsuarioEstatusDocumentoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('SegUsuarioID::', @SegUsuarioID_, ':', @SegUsuarioID, ';')
				SET @logMessage = Concat(@logMessage, 'CfgEstatusDocumentoID::', @CfgEstatusDocumentoID_, ':', @CfgEstatusDocumentoID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalCentroCostoID::', @PpalCentroCostoID_ , ':', @PpalCentroCostoID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalAreaID::', @PpalAreaID_, ':', @PpalAreaID, ';')
				SET @logMessage = Concat(@logMessage, 'EmpresaID::', @EmpresaID_, ':', @EmpresaID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalAlmacenID::', @PpalAlmacenID_, ':', @PpalAlmacenID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalSucursalID::', @PpalSucursalID_, ':', @PpalSucursalID, ';')
				SET @logMessage = Concat(@logMessage, 'Monto::', @Monto_, ':', @Monto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioEstatusDocumento_Listado]...';


GO

CREATE PROCEDURE [dbo].[SegUsuarioEstatusDocumento_Listado]
@EmpresaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioEstatusDocumento',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  SegUsuarioEstatusDocumentoID,			SegUsuarioID,				CfgEstatusDocumentoID,
			PpalCentroCostoID,						PpalAreaID,					EmpresaID,
			PpalAlmacenID,							PpalSucursalID,				Monto
	FROM    SegUsuarioEstatusDocumento
	WHERE	EmpresaID = @EmpresaID
	ORDER BY SegUsuarioID

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaID::', @EmpresaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioEstatusDocumento_ListadoSegUsuarioID]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioEstatusDocumento_ListadoSegUsuarioID]
@SegUsuarioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioEstatusDocumento',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	SELECT  SUEDP.SegUsuarioEstatusDocumentoID,		SegUsuarioID,				SUEDP.CfgEstatusDocumentoID, 
			CED.Nombre as NombreEstatusDocumento,	PpalCentroCostoID,			PpalAreaID,
			EmpresaID,								PpalAlmacenID,				PpalSucursalID,
			Monto
	FROM    SegUsuarioEstatusDocumento SUEDP, CfgEstatusDocumento CED
	WHERE	SUEDP.SegUsuarioID = @SegUsuarioID and SUEDP.CfgEstatusDocumentoID = CED.CfgEstatusDocumentoID
	--ORDER BY PpalAreaClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioPerfil_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SegUsuarioPerfil_Consultar]
@SegUsuarioPerfilID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioPerfil',	
		@Operacion				 nvarchar(20) = 'Read', 
		@logMessage				 varchar(Max) = '',
		@isChangeBeLogged		 bit
-- Variables para valores de columnas
DECLARE	@SegUsuarioID_			int = 0,
		@SegPerfilID_			int = 0,
		@EmpresaID_				int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	
	SET @IDAConsultar = @SegUsuarioPerfilID
	SELECT  @SegUsuarioPerfilID = SegUsuarioPerfilID,@SegUsuarioID_ = SegUsuarioID,@SegPerfilID_ = SegPerfilID,@EmpresaID_ = EmpresaID
	FROM    SegUsuarioPerfil
	WHERE   SegUsuarioPerfilID = @SegUsuarioPerfilID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SegUsuarioPerfilID::', @SegUsuarioPerfilID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT   @SegUsuarioPerfilID as SegUsuarioPerfilID,@SegUsuarioID_ as SegUsuarioID,@SegPerfilID_ as SegPerfilID,@EmpresaID_ as EmpresaID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioPerfil_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SegUsuarioPerfil_Eliminar]
@SegUsuarioPerfilID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress					varchar(40)		= null
	,@HostName					varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora		nvarchar(100) = 'SegUsuarioPerfil',	
		@Operacion					nvarchar(20) = 'Delete', 
		@logMessage					varchar(Max) = '',
		@isChangeBeLogged			bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @SegUsuarioPerfilID
	BEGIN
		DELETE
		FROM    SegUsuarioPerfil
		WHERE   SegUsuarioPerfilID = @SegUsuarioPerfilID

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('SegUsuarioPerfilID::', @SegUsuarioPerfilID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioPerfil_Guardar]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioPerfil_Guardar]
@SegUsuarioPerfilID int,
@SegUsuarioID int,
@SegPerfilID int,
@EmpresaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress					varchar(40)		= null
	,@HostName					varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioPerfil',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@SegUsuarioID_ int = 0,
		@SegPerfilID_ int = 0,
		@EmpresaID_ int = 0,
		@SegUsuarioPerfilID_ int = @SegUsuarioPerfilID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @SegUsuarioPerfilID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@SegUsuarioID_ =		IsNull(SegUsuarioID,0),
				@SegPerfilID_ =			IsNull(SegPerfilID,0),
				@EmpresaID_ =			IsNull(EmpresaID,0),
				@SegUsuarioPerfilID_ =	IsNull(SegUsuarioPerfilID,0)
		   FROM	SegUsuarioPerfil WHERE SegUsuarioPerfilID = @IDAActualizar
	-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SegUsuarioPerfil
			SET     SegUsuarioID = @SegUsuarioID,
					SegPerfilID = @SegPerfilID,
					EmpresaID = @EmpresaID
			WHERE   SegUsuarioPerfilID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO SegUsuarioPerfil(
					SegUsuarioID,
					SegPerfilID,
					EmpresaID)
			VALUES  (
					@SegUsuarioID,
					@SegPerfilID,
					@EmpresaID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @SegUsuarioPerfilID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('SegUsuarioID::', @SegUsuarioID_, ':', @SegUsuarioID, ';')
				SET @logMessage = Concat(@logMessage, 'SegPerfilID::', @SegPerfilID_, ':', @SegPerfilID, ';')
				SET @logMessage = Concat(@logMessage, 'EmpresaID::', @EmpresaID_, ':', @EmpresaID, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioPerfil_ListadoSegUsuarioID]...';


GO


CREATE PROCEDURE [dbo].[SegUsuarioPerfil_ListadoSegUsuarioID]
@SegUsuarioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDbitacora		nvarchar(100) = 'SegUsuarioPerfil',	
		@Operacion					nvarchar(20) = 'Read', 
		@logMessage					varchar(Max) = '',
		@isChangeBeLogged			bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  SegUsuarioPerfilID,SegUsuarioID,SUP.SegPerfilID,SUP.EmpresaID, SP.Nombre as NombrePerfil, SE.Nombre as NombreEmpresa
	FROM    SegUsuarioPerfil SUP
	inner join SegPerfil SP on SUP.SegPerfilID = SP.SegPerfilID
	inner join SistemaEmpresa SE on SUP.EmpresaID = SE.EmpresaID
	WHERE	SegUsuarioID = @SegUsuarioID
	ORDER BY SUP.SegPerfilID

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDbitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('SegUsuarioID::', @SegUsuarioID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDbitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioSucursal_Consultar]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioSucursal_Consultar]
@SegUsuarioSucursalID int

-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioSucursal',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@SegUsuarioID_ int = 0,
		@PpalSucursalID_ int = 0			

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @SegUsuarioSucursalID
	SELECT  @SegUsuarioID_ = SegUsuarioID, @PpalSucursalID_ = PpalSucursalID
	FROM    SegUsuarioSucursal
	WHERE   SegUsuarioSucursalID = @IDAConsultar

	
	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SegUsuarioSucursalID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @SegUsuarioID_ as SegUsuarioID,	@PpalSucursalID_ as PpalSucursalID
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioSucursal_Eliminar]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioSucursal_Eliminar]
@SegUsuarioSucursalID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress					varchar(40)		= null
	,@HostName					varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioSucursal',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @SegUsuarioSucursalID
	BEGIN
		DELETE
		FROM    SegUsuarioSucursal
		WHERE   SegUsuarioSucursalID = @IDABorrar

		-- Si no se encontró registro a eliminar -> error
		IF @@RowCount = 0
		BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
    		/* Procesa Bitácora */
			-- Revisa si el borrado debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1
			BEGIN
				-- LogMessage = Parámetro para borrado
				SET @logMessage = Concat('SegUsuarioSucursalID::', @SegUsuarioSucursalID, ':', 0, ';')

				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @SegUsuarioSucursalID
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioSucursal_Guardar]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioSucursal_Guardar]
@SegUsuarioSucursalID int,
@SegUsuarioID int,
@PpalSucursalID int


-- Parámetros para Bitácora
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress					varchar(40)		= null
	,@HostName					varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioSucursal',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@SegUsuarioSucursalID_ int = 0,
		@SegUsuarioID_ int = 0,			
		@PpalSucursalID_ int = 0

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @SegUsuarioSucursalID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee ClaveNoAsignado de Parámetros Cosmos
		SELECT	@ClaveNoAsignado = IsNull(ClaveNoAsignado,'')
		  FROM	SistemaParamCosmos;
		-- Lee Valores anteriores para Bitácora
		SELECT	@SegUsuarioSucursalID_ = IsNull(SegUsuarioSucursalID,''),
	 			@SegUsuarioID_ = IsNull(SegUsuarioID,''),
				@PpalSucursalID_ = IsNull(PpalSucursalID,'')
		   FROM	SegUsuarioSucursal WHERE SegUsuarioSucursalID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
		-- No se permite cambiar Clave cuando es igual a @ClaveNoAsignado
		--IF @PpalAreaClave_ = @ClaveNoAsignado and @PpalAreaClave <> @ClaveNoAsignado
		--	SELECT @Errores = 999996, @Mensaje = CONCAT('No es permitido cambiar la clave ', @ClaveNoAsignado);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0

		BEGIN
			UPDATE  SegUsuarioSucursal
			SET     SegUsuarioID = @SegUsuarioID,
					PpalSucursalID = @PpalSucursalID
			WHERE   SegUsuarioSucursalID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO SegUsuarioSucursal(
					SegUsuarioID,
					PpalSucursalID)
			VALUES  (
					@SegUsuarioID,
					@PpalSucursalID)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @SegUsuarioSucursalID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('SegUsuarioID::', @SegUsuarioID_, ':', @SegUsuarioID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalSucursalID::', @PpalSucursalID_, ':', @PpalSucursalID, ';')
				
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioSucursal_Listado]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioSucursal_Listado]
--@SegUsuarioID int
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora		nvarchar(100) = 'SegUsuarioSucursal',	
		@Operacion					nvarchar(20) = 'Read', 
		@logMessage					varchar(Max) = '',
		@isChangeBeLogged			bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('EmpresaID::', @EmpresaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	SELECT  SegUsuarioSucursalID,SegUsuarioID,PpalSucursalID
	FROM    SegUsuarioSucursal

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioSucursal_ListadoNoSegUsuarioID]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioSucursal_ListadoNoSegUsuarioID]
@SegUsuarioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioSucursal',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		--SET @logMessage =  Concat('EmpresaID::', @EmpresaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	SELECT  PS.PpalSucursalID, PS.Nombre as NombreSucursal
	FROM    PpalSucursal PS
	WHERE	PpalSucursalID NOT IN(SELECT PpalSucursalID FROM SegUsuarioSucursal SUS where SegUsuarioID = @SegUsuarioID) 

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioSucursal_ListadoSegUsuarioID]...';


GO
CREATE PROCEDURE [dbo].[SegUsuarioSucursal_ListadoSegUsuarioID]
@SegUsuarioID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora		nvarchar(100) = 'SegUsuarioSucursal',	
		@Operacion					nvarchar(20) = 'Read', 
		@logMessage					varchar(Max) = '',
		@isChangeBeLogged			bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END


	SELECT  SegUsuarioSucursalID,SegUsuarioID,SUS.PpalSucursalID, PS.Nombre as NombreSucursal
	FROM    SegUsuarioSucursal SUS
	inner join PpalSucursal PS on SUS.PpalSucursalID = PS.PpalSucursalID
	WHERE	SegUsuarioID = @SegUsuarioID
	--ORDER BY PpalAreaClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioTipoDocumentoPermiso_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SegUsuarioTipoDocumentoPermiso_Consultar]
@SegUsuarioTipoDocumentoPermisoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioTipoDocumentoPermiso',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@SegUsuarioID_ int = 0,
		@TipoDocumentoID_ int = 0,
		@PpalCentroCostoID_ int = 0,
		@PpalAreaID_ int = 0,
		@EmpresaID_ int = 0,
		@AlmacenID_ int = 0,
		@PpalSucursalID_ int = 0,
		@Preautoriza_ bit = 0,
		@PreautorizarMonto_ money = 0,
		@Autoriza_ bit = 0,
		@AutorizarMonto_ money = 0


SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @SegUsuarioTipoDocumentoPermisoID
	SELECT  @SegUsuarioID_ = SegUsuarioID,		@TipoDocumentoID_ = TipoDocumentoID,	@PpalCentroCostoID_ = PpalCentroCostoID,
			@PpalAreaID_ = PpalAreaID,			@EmpresaID_ = EmpresaID,				@AlmacenID_ = PpalAlmacenID,
			@PpalSucursalID_ = PpalSucursalID,	@Preautoriza_ = Preautoriza,			@PreautorizarMonto_ = PreautorizarMonto,
			@Autoriza_ = Autoriza,				@AutorizarMonto_ = AutorizarMonto
	FROM    SegUsuarioTipoDocumentoPermiso
	WHERE   SegUsuarioTipoDocumentoPermisoID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SegUsuarioTipoDocumentoPermisoID::', @SegUsuarioTipoDocumentoPermisoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
					
			END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @SegUsuarioID_   as SegUsuarioID,			@TipoDocumentoID_ as TipoDocumentoID,			@PpalCentroCostoID_ as PpalCentroCostoID,
			@PpalAreaID_     as PpalAreaID,				@EmpresaID_       as EmpresaID,					@AlmacenID_         as AlmacenID,
			@PpalSucursalID_ as PpalSucursalID,		    @Preautoriza_     as Preautoriza,				@PreautorizarMonto_ as PreautorizarMonto,
			@Autoriza_       as Autoriza,				@AutorizarMonto_  as AutorizarMonto
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioTipoDocumentoPermiso_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SegUsuarioTipoDocumentoPermiso_Eliminar]
@SegUsuarioTipoDocumentoPermisoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress					varchar(40)		= null
	,@HostName					varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioTipoDocumentoPermiso',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @SegUsuarioTipoDocumentoPermisoID
	BEGIN
		DELETE
		FROM    SegUsuarioTipoDocumentoPermiso
		WHERE   SegUsuarioTipoDocumentoPermisoID = @IDABorrar

	-- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
			SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar: ', @IDABorrar)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('SegUsuarioTipoDocumentoPermisoID::', @SegUsuarioTipoDocumentoPermisoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDABorrar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
			-- Fin de proceso sin errores -> COMMIT
			COMMIT TRANSACTION
		END
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioTipoDocumentoPermiso_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SegUsuarioTipoDocumentoPermiso_Guardar]
@SegUsuarioTipoDocumentoPermisoID int,
@SegUsuarioID int,
@TipoDocumentoID int,
@PpalCentroCostoID int = 0,
@PpalAreaID int = 0,
@EmpresaID int = 0,
@AlmacenID int = 0,
@PpalSucursalID int = 0,
@Preautoriza bit,
@PreautorizarMonto money,
@Autoriza bit,
@AutorizarMonto money
-- Parámetros para Bitácora
	,@UsuarioIDBitacora			int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress					varchar(40)		= null
	,@HostName					varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300) = '', @IDAActualizar int, @ClaveNoAsignado varchar(5)
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioTipoDocumentoPermiso',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@SegUsuarioID_ int = 0,
		@TipoDocumentoID_ int = 0,
		@PpalCentroCostoID_ int = 0,
		@PpalAreaID_ int = 0,
		@EmpresaID_ int = 0,
		@AlmacenID_ int = 0,
		@PpalSucursalID_ int = 0,
		@Preautoriza_ bit = 0,
		@PreautorizarMonto_ money = 0,
		@Autoriza_ bit = 0,
		@AutorizarMonto_ money = 0,
		@SegUsuarioTipoDocumentoPermisoID_ int = @SegUsuarioTipoDocumentoPermisoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @SegUsuarioTipoDocumentoPermisoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		-- Lee Valores anteriores para Bitácora
		SELECT	@SegUsuarioID_ = IsNull(SegUsuarioID,0),
				@TipoDocumentoID_ = IsNull(TipoDocumentoID,0),
				@PpalCentroCostoID_ = IsNull(PpalCentroCostoID,0),
				@PpalAreaID_ = IsNull(PpalAreaID,0),
				@EmpresaID_ = IsNull(EmpresaID,0),
				@AlmacenID_ = IsNull(PpalAlmacenID,0),
				@PpalSucursalID_ = IsNull(PpalSucursalID,0),
				@Preautoriza_ = IsNull(Preautoriza,0),
				@PreautorizarMonto_ = IsNull(PreautorizarMonto,0),
				@Autoriza_ = IsNull(Autoriza,0),
				@AutorizarMonto_ = IsNull(AutorizarMonto,0),
				@SegUsuarioTipoDocumentoPermisoID_ = IsNull(SegUsuarioTipoDocumentoPermisoID,0)
		   FROM	SegUsuarioTipoDocumentoPermiso WHERE SegUsuarioTipoDocumentoPermisoID = @IDAActualizar
		-- Si no se encontró registro a actualizar -> error
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar: ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SegUsuarioTipoDocumentoPermiso
			SET		SegUsuarioID = @SegUsuarioID,
					TipoDocumentoID = @TipoDocumentoID,
					PpalCentroCostoID = @PpalCentroCostoID,
					PpalAreaID = @PpalAreaID,
					EmpresaID = @EmpresaID,
					PpalAlmacenID = @AlmacenID,
					PpalSucursalID = @PpalSucursalID,
					Preautoriza = @Preautoriza,
					PreautorizarMonto = @PreautorizarMonto,
					Autoriza = @Autoriza,
					AutorizarMonto = @AutorizarMonto
			WHERE   SegUsuarioTipoDocumentoPermisoID = @IDAActualizar
		END
		ELSE
		BEGIN        
			INSERT  INTO SegUsuarioTipoDocumentoPermiso(
					SegUsuarioID,
					TipoDocumentoID,
					PpalCentroCostoID,
					PpalAreaID,
					EmpresaID,
					PpalAlmacenID,
					PpalSucursalID,
					Preautoriza,
					PreautorizarMonto,
					Autoriza,
					AutorizarMonto)
			VALUES  (
					@SegUsuarioID,
					@TipoDocumentoID,
					@PpalCentroCostoID,
					@PpalAreaID,
					@EmpresaID,
					@AlmacenID,
					@PpalSucursalID,
					@Preautoriza,
					@PreautorizarMonto,
					@Autoriza,
					@AutorizarMonto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @SegUsuarioTipoDocumentoPermisoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat(@logMessage,'SegUsuarioID::', @SegUsuarioID_, ':', @SegUsuarioID, ';')
				SET @logMessage = Concat(@logMessage, 'TipoDocumentoID::', @TipoDocumentoID_, ':', @TipoDocumentoID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalCentroCostoID::', @PpalCentroCostoID_, ':', @PpalCentroCostoID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalAreaID::', @PpalAreaID_, ':', @PpalAreaID, ';')
				SET @logMessage = Concat(@logMessage,'EmpresaID::', @EmpresaID_, ':', @EmpresaID, ';')
				SET @logMessage = Concat(@logMessage,'AlmacenID::', @AlmacenID_, ':', @AlmacenID, ';')
				SET @logMessage = Concat(@logMessage, 'PpalSucursalID::', @PpalSucursalID_, ':', @PpalSucursalID, ';')
				SET @logMessage = Concat(@logMessage, 'Preautoriza::', @Preautoriza_, ':', @Preautoriza, ';')
				SET @logMessage = Concat(@logMessage, 'PreautorizarMonto::', @PreautorizarMonto_, ':', @PreautorizarMonto, ';')
				SET @logMessage = Concat(@logMessage,'Autoriza::', @Autoriza_, ':', @Autoriza, ';')
				SET @logMessage = Concat(@logMessage,'AutorizarMonto::', @AutorizarMonto_, ':', @AutorizarMonto, ';')
				PRINT @logMessage
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SegUsuarioTipoDocumentoPermiso_Listado]...';


GO


CREATE PROCEDURE [dbo].[SegUsuarioTipoDocumentoPermiso_Listado]
@EmpresaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SegUsuarioTipoDocumentoPermiso',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT  SegUsuarioTipoDocumentoPermisoID,SegUsuarioID,TipoDocumentoID,PpalCentroCostoID,PpalAreaID,EmpresaID,PpalAlmacenID,PpalSucursalID,Preautoriza,PreautorizarMonto,Autoriza,AutorizarMonto
	FROM    SegUsuarioTipoDocumentoPermiso
	WHERE	EmpresaID = @EmpresaID
	ORDER BY PpalSucursalID

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('EmpresaID::', @EmpresaID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaAccion_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaAccion_Consultar]
@AccionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaAccion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @AccionID
	SELECT  AccionID,AccionClave,Nombre,NombreCorto
	FROM    SistemaAccion
	WHERE   AccionID = @AccionID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('AccionID::', @AccionID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @AccionID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaAccion_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaAccion_Eliminar]
@AccionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS

DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora  nvarchar(100) = 'SistemaAccion',	
		@Operacion				nvarchar(20) = 'Delete', 
		@logMessage				varchar(Max) = '',
		@isChangeBeLogged		bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION 

	SET @IDABorrar = @AccionID
    DELETE
    FROM    SistemaAccion
    WHERE   AccionID = @IDABorrar

	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @AccionID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('AccionID::', @AccionID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @AccionID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
 
END TRY
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaAccion_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SistemaAccion_Guardar]
@AccionID int,
@AccionClave nvarchar(30),
@Nombre nvarchar(50),
@NombreCorto nvarchar(20)

-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaAccion',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@AccionClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@AccionID_ int = @AccionID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION 
	SET @IDAActualizar = @AccionID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@AccionClave_ = IsNull(AccionClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@AccionID_ = IsNull(AccionID,0)
		   FROM	SistemaAccion WHERE AccionID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SistemaAccion
			SET     AccionClave = @AccionClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   AccionID = @AccionID
		END
		ELSE
		BEGIN        
			INSERT  INTO SistemaAccion(
					AccionClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@AccionClave,
					@Nombre,
					@NombreCorto)
        
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @AccionID_ > 0  SET @Operacion = 'Update' 	
						  ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('AccionClave::', @AccionClave_, ':', @AccionClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaAccion_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaAccion_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDForLog   nvarchar(100) = 'SistemaAccion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDForLog,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDForLog
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  AccionID,AccionClave,Nombre,NombreCorto
	FROM    SistemaAccion
	ORDER BY AccionClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaAccion_ListadoOpcionID]...';


GO

CREATE PROCEDURE [dbo].[SistemaAccion_ListadoOpcionID]
@OpcionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaAccion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT	DISTINCT 
			a.AccionID, a.AccionClave, a.AccionNombre, a.AccionNombreCorto 
	FROM	vSeguridadUsuarioOpcion a 
	WHERE	a.OpcionID = @OpcionID
	AND		a.AccionID IS NOT NULL
	ORDER	BY a.AccionNombre

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('OpcionID::', @OpcionID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaAccion_ListadoTipoOpcionID]...';


GO
CREATE PROCEDURE [dbo].[SistemaAccion_ListadoTipoOpcionID]
@TipoOpcionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaAccion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SELECT	a.*
	FROM	SistemaAccion a 
				INNER JOIN SistemaTipoOpcionAccion b ON a.AccionID = b.AccionID AND b.TipoOpcionID = @TipoOpcionID
	ORDER	BY a.Nombre

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado
		SET @logMessage =  Concat('TipoOpcionID::', @TipoOpcionID, ':',0, ';')

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaBitacoraEstatus_Consultar]...';


GO
CREATE PROCEDURE [dbo].[SistemaBitacoraEstatus_Consultar]
@BitacoraEstatusID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaBitacoraEstatus',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores de columnas
DECLARE	@TipoDocumentoID_ int = 0,
		@DocumentoID_ int = 0,
		@UsuarioID_ int = 0,
		@SistemaEstatusDocumentoID_ int = 0,
		@SistemaEstatusDocumentoIDAnterior_ int = 0,
		@FechaHora_ datetime='',
		@BitacoraEstatusID_ int = @BitacoraEstatusID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @BitacoraEstatusID

	SELECT  @TipoDocumentoID_ = TipoDocumentoID,	@DocumentoID_  = DocumentoID,	@UsuarioID_  = UsuarioID,
			@SistemaEstatusDocumentoID_  = SistemaEstatusDocumentoID,	@SistemaEstatusDocumentoIDAnterior_  = SistemaEstatusDocumentoIDAnterior,
			@FechaHora_ =FechaHora
	FROM    SistemaBitacoraEstatus
	WHERE   BitacoraEstatusID = @IDAConsultar

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('BitacoraEstatusID::', @IDAConsultar, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @IDAConsultar
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioID_
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

IF @Errores = 0
	SELECT  @TipoDocumentoID_ as TipoDocumentoID,	@DocumentoID_  as DocumentoID,	@UsuarioID_  as UsuarioID,
			@SistemaEstatusDocumentoID_  as SistemaEstatusDocumentoID,	@SistemaEstatusDocumentoIDAnterior_  as SistemaEstatusDocumentoIDAnterior,
			@FechaHora_ as FechaHora
ELSE
	SELECT  COALESCE(@Errores, 0) as Errores, 
			COALESCE(@Mensaje, '') as Mensaje,
			COALESCE(ERROR_SEVERITY(), 0) as Severidad,
			COALESCE(ERROR_STATE(), 0) as Estado,
			COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
			COALESCE(ERROR_LINE(), 0) as Linea,
		    @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaBitacoraEstatus_Listado]...';


GO
CREATE PROCEDURE [dbo].[SistemaBitacoraEstatus_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaBitacoraEstatus',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  BitacoraEstatusID,TipoDocumentoID,DocumentoID,UsuarioID,SistemaEstatusDocumentoID,SistemaEstatusDocumentoIDAnterior,FechaHora
	FROM    SistemaBitacoraEstatus

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaClaseProducto_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaClaseProducto_Consultar]
@ClaseProductoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaClaseProducto',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	
	SET @IDAConsultar = @ClaseProductoID

	SELECT  ClaseProductoID,ClaseProductoClave,Nombre,NombreCorto
	FROM    SistemaClaseProducto
	WHERE   ClaseProductoID = @ClaseProductoID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('ClaseProductoID::', @ClaseProductoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @ClaseProductoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaClaseProducto_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaClaseProducto_Eliminar]
@ClaseProductoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaClaseProducto',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @ClaseProductoID
    DELETE
    FROM    SistemaClaseProducto
    WHERE   ClaseProductoID = @ClaseProductoID
    
    -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @ClaseProductoID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('SistemaClaseProductoID::', @ClaseProductoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @ClaseProductoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
	/********************* FIN COPY 2  *********************************/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaClaseProducto_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SistemaClaseProducto_Guardar]
@ClaseProductoID int,
@ClaseProductoClave varchar(4),
@Nombre varchar(25),
@NombreCorto varchar(8)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
SET NOCOUNT ON 
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaClaseProducto',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@ClaseProductoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@ClaseProductoID_ int = @ClaseProductoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @ClaseProductoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@ClaseProductoClave_ = IsNull(ClaseProductoClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@ClaseProductoID_ = IsNull(ClaseProductoID,0)
		   FROM	SistemaClaseProducto WHERE ClaseProductoID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
    BEGIN
        UPDATE  SistemaClaseProducto
        SET                     ClaseProductoClave = @ClaseProductoClave,
				Nombre = @Nombre,
				NombreCorto = @NombreCorto
        WHERE   ClaseProductoID = @ClaseProductoID
    END
    ELSE
    BEGIN        
        INSERT  INTO SistemaClaseProducto(
                ClaseProductoClave,
				Nombre,
				NombreCorto)
        VALUES  (
                @ClaseProductoClave,
				@Nombre,
				@NombreCorto)
        
        SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @ClaseProductoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('ClaseProductoID::', @IDAActualizar, ':', @ClaseProductoID, ';')
				SET @logMessage = Concat('ClaseProductoClave::', @ClaseProductoClave_, ':', @ClaseProductoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaClaseProducto_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaClaseProducto_Listado]
	@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaClaseProducto',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- logMessage = Parámetros de Listado

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  ClaseProductoID AS ID,				ClaseProductoClave AS Clave,
				Nombre,								NombreCorto,
				0 AS PadreID
		FROM    SistemaClaseProducto
		ORDER BY ClaseProductoClave
	ELSE
		SELECT  ClaseProductoID,ClaseProductoClave,Nombre,NombreCorto
		FROM    SistemaClaseProducto
		ORDER BY ClaseProductoClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaConfiguracion_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaConfiguracion_Consultar]
@ConfiguracionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS

-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaConfiguracion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	
	SET @IDAConsultar = @ConfiguracionID
	SELECT  ConfiguracionID,Nombre,MaximoIntentosLogin,Activa
	FROM    SistemaConfiguracion
	WHERE   ConfiguracionID = @ConfiguracionID	

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('ConfiguracionID::', @ConfiguracionID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @ConfiguracionID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaConfiguracion_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaConfiguracion_Eliminar]
@ConfiguracionID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS

-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaConfiguracion',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
/************* FIN COPY 1  *********************/

	SET @IDABorrar = @ConfiguracionID    
	DELETE
    FROM    SistemaConfiguracion
    WHERE   ConfiguracionID = @ConfiguracionID
    -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @ConfiguracionID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('ConfiguracionID::', @ConfiguracionID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @ConfiguracionID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaConfiguracion_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SistemaConfiguracion_Guardar]
@ConfiguracionID int,
@Nombre nvarchar(50),
@MaximoIntentosLogin tinyint,
@Activa bit
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaConfiguracion',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE @Nombre_ nvarchar(60) = '',			
		@MaximoIntentosLogin_ tinyint = 0,
		@Activa_ bit = 0,
		@ConfiguracionID_ int = @ConfiguracionID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @ConfiguracionID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	
	 			@Nombre_ = IsNull(Nombre,''),
				@MaximoIntentosLogin_ = IsNull(MaximoIntentosLogin,0),
				@Activa_ = IsNull(Activa,0),
				@ConfiguracionID_ = IsNull(ConfiguracionID,0)
		   FROM	SistemaConfiguracion WHERE ConfiguracionID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
    BEGIN
        UPDATE  SistemaConfiguracion
        SET     Nombre = @Nombre,
				MaximoIntentosLogin = @MaximoIntentosLogin,
				Activa = @Activa
        WHERE   ConfiguracionID = @ConfiguracionID
    END
    ELSE
    BEGIN        
        INSERT  INTO SistemaConfiguracion(
                Nombre,
				MaximoIntentosLogin,
				Activa)
        VALUES  (
                @Nombre,
				@MaximoIntentosLogin,
				@Activa)
        
        SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @ConfiguracionID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'MaximoIntentosLogin::', @MaximoIntentosLogin_, ':', @MaximoIntentosLogin, ';')
				SET @logMessage = Concat(@logMessage, 'Activa::', @Activa_, ':', @Activa, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaConfiguracion_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaConfiguracion_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS

-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaConfiguracion',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	
	SELECT  ConfiguracionID,Nombre,MaximoIntentosLogin,Activa
	FROM    SistemaConfiguracion

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEmpresa_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaEmpresa_Consultar]
@EmpresaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaEmpresa',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	/************* FIN COPY 1  *********************/
	SET @IDAConsultar = @EmpresaID
	SELECT  EmpresaID,EmpresaClave,Nombre,NombreCorto
	FROM    SistemaEmpresa
	WHERE   EmpresaID = @EmpresaID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('EmpresaID::', @EmpresaID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @EmpresaID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEmpresa_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaEmpresa_Eliminar]
@EmpresaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaEmpresa',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @EmpresaID
    DELETE
    FROM    SistemaEmpresa
    WHERE   EmpresaID = @EmpresaID
    -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @EmpresaID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('EmpresaID::', @EmpresaID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @EmpresaID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEmpresa_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SistemaEmpresa_Guardar]
@EmpresaID int,
@EmpresaClave varchar(6),
@Nombre nvarchar(50),
@NombreCorto nvarchar(20)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaEmpresa',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@EmpresaClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@EmpresaID_ int = @EmpresaID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @EmpresaID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@EmpresaClave_ = IsNull(@EmpresaClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@EmpresaID_ = IsNull(EmpresaID,0)
		   FROM	SistemaEmpresa WHERE EmpresaID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SistemaEmpresa
			SET     EmpresaClave = @EmpresaClave,              
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   EmpresaID = @EmpresaID
		END
		ELSE
		BEGIN        
			INSERT  INTO SistemaEmpresa(
					EmpresaClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@EmpresaClave,
					@Nombre,
					@NombreCorto)
        
        SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @EmpresaID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('EmpresaClave::', @EmpresaClave_, ':', @EmpresaClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEmpresa_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaEmpresa_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaEmpresa',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	
	SELECT  EmpresaID,EmpresaClave,Nombre,NombreCorto
	FROM    SistemaEmpresa

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEstatusDocumento_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaEstatusDocumento_Consultar]
@SistemaEstatusDocumentoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaEstatusDocumento',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	/************* FIN COPY 1  *********************/
	SET @IDAConsultar = @SistemaEstatusDocumentoID
	SELECT  SistemaEstatusDocumentoID,SistemaEstatusDocumentoClave,Nombre,NombreCorto
	FROM    SistemaEstatusDocumento
	WHERE   SistemaEstatusDocumentoID = @SistemaEstatusDocumentoID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SistemaEstatusDocumentoID::', @SistemaEstatusDocumentoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @SistemaEstatusDocumentoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEstatusDocumento_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaEstatusDocumento_Eliminar]
@SistemaEstatusDocumentoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaEstatusDocumento',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
/************* FIN COPY 1  *********************/

	SET @IDABorrar = @SistemaEstatusDocumentoID
    DELETE
    FROM    SistemaEstatusDocumento
    WHERE   SistemaEstatusDocumentoID = @SistemaEstatusDocumentoID
    
    -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @SistemaEstatusDocumentoID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('AreaID::', @SistemaEstatusDocumentoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @SistemaEstatusDocumentoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
	/********************* FIN COPY 2  *********************************/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEstatusDocumento_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SistemaEstatusDocumento_Guardar]
@ModificacionUsuarioID int = null,
@SistemaEstatusDocumentoID int,
@SistemaEstatusDocumentoClave varchar(4),
@Nombre varchar(30),
@NombreCorto varchar(10)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaEstatusDocumento',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@SistemaEstatusDocumentoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@SistemaEstatusDocumentoID_ int = @SistemaEstatusDocumentoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @SistemaEstatusDocumentoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@SistemaEstatusDocumentoClave_ = IsNull(SistemaEstatusDocumentoClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@SistemaEstatusDocumentoID_ = IsNull(SistemaEstatusDocumentoID,0)
		   FROM	SistemaEstatusDocumento WHERE SistemaEstatusDocumentoID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SistemaEstatusDocumento
			SET                     SistemaEstatusDocumentoClave = @SistemaEstatusDocumentoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   SistemaEstatusDocumentoID = @SistemaEstatusDocumentoID
		END
		ELSE
		BEGIN        
			INSERT  INTO SistemaEstatusDocumento(
					SistemaEstatusDocumentoClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@SistemaEstatusDocumentoClave,
					@Nombre,
					@NombreCorto)
        SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @SistemaEstatusDocumentoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('SistemaEstatusDocumentoID::', @IDAActualizar, ':', @SistemaEstatusDocumentoID, ';')
				SET @logMessage = Concat('SistemaEstatusDocumentoClave::', @SistemaEstatusDocumentoClave_, ':', @SistemaEstatusDocumentoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEstatusDocumento_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaEstatusDocumento_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaEstatusDocumento',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  SistemaEstatusDocumentoID,SistemaEstatusDocumentoClave,Nombre,NombreCorto
	FROM    SistemaEstatusDocumento
	ORDER BY SistemaEstatusDocumentoClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEstatusPersona_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaEstatusPersona_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora nvarchar(100) = 'SistemaEstatusPersona',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  EstatusPersonaID AS ID,				EstatusPersonaClave AS Clave,
				Nombre,								NombreCorto,
				0 AS PadreID
		FROM    SistemaEstatusPersona
		ORDER BY EstatusPersonaClave
	ELSE
		SELECT  EstatusPersonaID,		EstatusPersonaClave,		Nombre,
				NombreCorto
		FROM    SistemaEstatusPersona
		ORDER BY EstatusPersonaClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEstatusProducto_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaEstatusProducto_Consultar]
@EstatusProductoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaEstatusProducto',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAConsultar = @EstatusProductoID
	SELECT  EstatusProductoID,EstatusProductoClave,Nombre,NombreCorto
	FROM    SistemaEstatusProducto
	WHERE   EstatusProductoID = @EstatusProductoID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('EstatusProductoID::', @EstatusProductoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @EstatusProductoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEstatusProducto_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaEstatusProducto_Eliminar]
@EstatusProductoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaEstatusProducto',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @EstatusProductoID
    DELETE
    FROM    SistemaEstatusProducto
    WHERE   EstatusProductoID = @EstatusProductoID
    
   -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @EstatusProductoID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('EstatusProductoID::', @EstatusProductoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @EstatusProductoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
	/********************* FIN COPY 2  *********************************/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEstatusProducto_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SistemaEstatusProducto_Guardar]
@EstatusProductoID int,
@EstatusProductoClave varchar(4),
@Nombre varchar(25),
@NombreCorto varchar(8)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaEstatusProducto',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@EstatusProductoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@EstatusProductoID_ int = @EstatusProductoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @EstatusProductoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@EstatusProductoClave_ = IsNull(EstatusProductoClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@EstatusProductoID_ = IsNull(EstatusProductoID,0)
		   FROM	SistemaEstatusProducto WHERE EstatusProductoID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SistemaEstatusProducto
			SET                     EstatusProductoClave = @EstatusProductoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   EstatusProductoID = @EstatusProductoID
		END
		ELSE
		BEGIN        
			INSERT  INTO SistemaEstatusProducto(
					EstatusProductoClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@EstatusProductoClave,
					@Nombre,
					@NombreCorto)
        
			
			SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @EstatusProductoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('EstatusProductoClave::', @EstatusProductoClave_, ':', @EstatusProductoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEstatusProducto_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaEstatusProducto_Listado]
@TipoListado varchar(10) = ''
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora nvarchar(100) = 'SistemaEstatusProducto',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	IF @TipoListado = 'Minimo'
		SELECT  EstatusProductoID AS ID,				EstatusProductoClave AS Clave,
				Nombre,									NombreCorto,
				0 AS PadreID
		FROM    SistemaEstatusProducto
		ORDER BY EstatusProductoClave
	ELSE
		SELECT  EstatusProductoID,EstatusProductoClave,Nombre,NombreCorto
		FROM    SistemaEstatusProducto
		ORDER BY EstatusProductoClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEstatusTelefono_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaEstatusTelefono_Consultar]
@EstatusTelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaEstatusTelefono',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	/************* FIN COPY 1  *********************/
	SET @IDAConsultar = @EstatusTelefonoID

	SELECT  EstatusTelefonoID,EstatusTelefonoClave,Nombre,NombreCorto
	FROM    SistemaEstatusTelefono
	WHERE   EstatusTelefonoID = @EstatusTelefonoID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('EstatusTelefonoID::', @EstatusTelefonoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @EstatusTelefonoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEstatusTelefono_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaEstatusTelefono_Eliminar]
@EstatusTelefonoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaEstatusTelefono',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @EstatusTelefonoID
    DELETE
    FROM    SistemaEstatusTelefono
    WHERE   EstatusTelefonoID = @EstatusTelefonoID
    
   -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @EstatusTelefonoID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('EstatusTelefonoID::', @EstatusTelefonoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @EstatusTelefonoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
	/********************* FIN COPY 2  *********************************/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEstatusTelefono_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SistemaEstatusTelefono_Guardar]
@EstatusTelefonoID int,
@EstatusTelefonoClave varchar(4),
@Nombre varchar(25),
@NombreCorto varchar(8)
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaEstatusTelefono',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@EstatusTelefonoClave_ nvarchar(10) = '',
		@Nombre_ nvarchar(60) = '',			
		@NombreCorto_ varchar(10) = '',
		@EstatusTelefonoID_ int = @EstatusTelefonoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @EstatusTelefonoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@EstatusTelefonoClave_ = IsNull(EstatusTelefonoClave,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@NombreCorto_ = IsNull(NombreCorto,''),
				@EstatusTelefonoID_ = IsNull(EstatusTelefonoID,0)
		   FROM	SistemaEstatusTelefono WHERE EstatusTelefonoID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SistemaEstatusTelefono
			SET                     EstatusTelefonoClave = @EstatusTelefonoClave,
					Nombre = @Nombre,
					NombreCorto = @NombreCorto
			WHERE   EstatusTelefonoID = @EstatusTelefonoID
		END
		ELSE
		BEGIN        
			INSERT  INTO SistemaEstatusTelefono(
					EstatusTelefonoClave,
					Nombre,
					NombreCorto)
			VALUES  (
					@EstatusTelefonoClave,
					@Nombre,
					@NombreCorto)
        
        SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @EstatusTelefonoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('EstatusTelefonoClave::', @EstatusTelefonoClave_, ':', @EstatusTelefonoClave, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'NombreCorto::', @NombreCorto_, ':', @NombreCorto, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEstatusTelefono_Listado]...';


GO


CREATE PROCEDURE [dbo].[SistemaEstatusTelefono_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaEstatusTelefono',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  EstatusTelefonoID,EstatusTelefonoClave,Nombre,NombreCorto
	FROM    SistemaEstatusTelefono
	ORDER BY EstatusTelefonoClave

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEstatusTipoDocumento_Consultar]...';


GO


CREATE PROCEDURE [dbo].[SistemaEstatusTipoDocumento_Consultar]
@SistemaEstatusTipoDocumentoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS

-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaEstatusTipoDocumento',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	/************* FIN COPY 1  *********************/
	SET @IDAConsultar = @SistemaEstatusTipoDocumentoID

	SELECT  SistemaEstatusTipoDocumentoID,SistemaEstatusDocumentoID,TipoDocumentoID
	FROM    SistemaEstatusTipoDocumento
	WHERE   SistemaEstatusTipoDocumentoID = @SistemaEstatusTipoDocumentoID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SistemaEstatusTipoDocumentoID::', @SistemaEstatusTipoDocumentoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @SistemaEstatusTipoDocumentoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEstatusTipoDocumento_Eliminar]...';


GO


CREATE PROCEDURE [dbo].[SistemaEstatusTipoDocumento_Eliminar]
@SistemaEstatusTipoDocumentoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaEstatusTipoDocumento',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @SistemaEstatusTipoDocumentoID
    DELETE
    FROM    SistemaEstatusTipoDocumento
    WHERE   SistemaEstatusTipoDocumentoID = @SistemaEstatusTipoDocumentoID
    -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @SistemaEstatusTipoDocumentoID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('SistemaEstatusTipoDocumentoID::', @SistemaEstatusTipoDocumentoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @SistemaEstatusTipoDocumentoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
	/********************* FIN COPY 2  *********************************/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEstatusTipoDocumento_Guardar]...';


GO


CREATE PROCEDURE [dbo].[SistemaEstatusTipoDocumento_Guardar]
@SistemaEstatusTipoDocumentoID int,
@SistemaEstatusDocumentoID int,
@TipoDocumentoID int,
@EmpresaID int,
@Predeterminado bit,
@Restringido bit,
@Monto bit,
@Propietario bit,
@Sistema bit

-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaEstatusTipoDocumento',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@TipoDocumentoID_ int = 0,
		@SistemaEstatusDocumentoID_ int = 0,
		@SistemaEstatusTipoDocumentoID_ int = @SistemaEstatusTipoDocumentoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @SistemaEstatusTipoDocumentoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@TipoDocumentoID_ = IsNull(TipoDocumentoID,0),
				@SistemaEstatusDocumentoID_ = IsNull(SistemaEstatusDocumentoID,0),
				@SistemaEstatusTipoDocumentoID_ = IsNull(SistemaEstatusTipoDocumentoID,0)
		   FROM	SistemaEstatusTipoDocumento WHERE SistemaEstatusTipoDocumentoID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SistemaEstatusTipoDocumento
			SET     SistemaEstatusDocumentoID = @SistemaEstatusDocumentoID,
					TipoDocumentoID = @TipoDocumentoID
			WHERE   SistemaEstatusTipoDocumentoID = @SistemaEstatusTipoDocumentoID
		END
		ELSE
		BEGIN        
			INSERT  INTO SistemaEstatusTipoDocumento(
					SistemaEstatusDocumentoID,
					TipoDocumentoID,
					EmpresaID,
					Predeterminado,
					Restringido,
					Monto,
					Sistema)
			VALUES  (
					@SistemaEstatusDocumentoID,
					@TipoDocumentoID,
					@EmpresaID,
					@Predeterminado,
					@Restringido,
					@Monto,
					@Sistema)
        
        SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @SistemaEstatusTipoDocumentoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat(@logMessage, 'SistemaEstatusDocumentoID::', @SistemaEstatusDocumentoID_, ':', @SistemaEstatusDocumentoID, ';')
				SET @logMessage = Concat(@logMessage, 'TipoDocumentoID::', @TipoDocumentoID_, ':', @TipoDocumentoID, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaEstatusTipoDocumento_Listado]...';


GO
CREATE PROCEDURE [dbo].[SistemaEstatusTipoDocumento_Listado]
@TipoListado varchar(10) = ''
/************   COPY 1  ************************************/
-- Parámetros para Bitácora
	,@EmpresaIDSolicitudBase	int
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress				varchar(40)		= null
	,@HostName				varchar(50)		= null
/************************************************/
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreBitacora  nvarchar(100) = 'SistemaEstatusTipoDocumento',	
		@Operacion	nvarchar(20) = 'List', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN



		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END
/************* FIN COPY 1  *********************/
	IF @TipoListado = 'Minimo'	
		SELECT  SistemaEstatusTipoDocumentoID AS ID, SistemaEstatusDocumentoClave AS Clave, SED.Nombre,
				SED.NombreCorto,					 SETD.TipoDocumentoID AS PadreID
		FROM    SistemaEstatusTipoDocumento SETD
		INNER JOIN SistemaEstatusDocumento SED ON SETD.SistemaEstatusDocumentoID = SED.SistemaEstatusDocumentoID
	ELSE
		SELECT  SistemaEstatusTipoDocumentoID,SistemaEstatusDocumentoID,TipoDocumentoID
		FROM    SistemaEstatusTipoDocumento

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaGrupo_Consultar]...';


GO

CREATE PROCEDURE [dbo].[SistemaGrupo_Consultar]
@SistemaGrupoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora  nvarchar(100) = 'SistemaGrupo',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	/************* FIN COPY 1  *********************/
	SET @IDAConsultar = @SistemaGrupoID
	SELECT  SistemaGrupoID,Nombre,ModuloID,Activo
	FROM    SistemaGrupo
	WHERE   SistemaGrupoID = @SistemaGrupoID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SistemaGrupoID::', @SistemaGrupoID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @SistemaGrupoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaGrupo_Eliminar]...';


GO

CREATE PROCEDURE [dbo].[SistemaGrupo_Eliminar]
@SistemaGrupoID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaGrupo',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @SistemaGrupoID
    DELETE
    FROM    SistemaGrupo
    WHERE   SistemaGrupoID = @SistemaGrupoID
    
    -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @SistemaGrupoID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('SistemaGrupoID::', @SistemaGrupoID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @SistemaGrupoID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
	/********************* FIN COPY 2  *********************************/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaGrupo_Guardar]...';


GO

CREATE PROCEDURE [dbo].[SistemaGrupo_Guardar]
@SistemaGrupoID int,
@Nombre varchar(50),
@ModuloID int,
@Activo bit
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaGrupo',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	
		@Nombre_ nvarchar(60) = '',			
		@ModuloID_ int = 0,
		@Activo_ bit = 0,
		@SistemaGrupoID_ int = @SistemaGrupoID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @SistemaGrupoID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	
	 			@Nombre_ = IsNull(Nombre,''),
				@ModuloID_ = IsNull(ModuloID,0),
				@Activo_ = IsNull(Activo,0),
				@SistemaGrupoID_ = IsNull(SistemaGrupoID,0)
		   FROM	SistemaGrupo WHERE SistemaGrupoID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
    BEGIN
        UPDATE  SistemaGrupo
        SET                     Nombre = @Nombre,
				ModuloID = @ModuloID,
				Activo = @Activo
        WHERE   SistemaGrupoID = @SistemaGrupoID
    END
    ELSE
    BEGIN        
        INSERT  INTO SistemaGrupo(
                Nombre,
				ModuloID,
				Activo)
        VALUES  (
                @Nombre,
				@ModuloID,
				@Activo)
        
        SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @SistemaGrupoID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'ModuloID::', @ModuloID_, ':', @ModuloID, ';')
				SET @logMessage = Concat(@logMessage, 'Activo::', @Activo_, ':', @Activo, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaGrupo_Listado]...';


GO

CREATE PROCEDURE [dbo].[SistemaGrupo_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaGrupo',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	
	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	SELECT  SistemaGrupoID,Nombre,ModuloID,Activo
	FROM    SistemaGrupo
	
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaGrupoEstatus_Consultar]...';


GO

CREATE PROCEDURE [dbo].[SistemaGrupoEstatus_Consultar]
@SistemaGrupoEstatusID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaGrupoEstatus',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	SET @IDAConsultar = @SistemaGrupoEstatusID
	SELECT  SistemaGrupoEstatusID,SistemaGrupoID,Nombre,TipoDocumentoID,Color,Activo
	FROM    SistemaGrupoEstatus
	WHERE   SistemaGrupoEstatusID = @SistemaGrupoEstatusID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SistemaGrupoEstatusID::', @SistemaGrupoEstatusID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @SistemaGrupoEstatusID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaGrupoEstatus_Eliminar]...';


GO

CREATE PROCEDURE [dbo].[SistemaGrupoEstatus_Eliminar]
@SistemaGrupoEstatusID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaGrupoEstatus',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
/************* FIN COPY 1  *********************/

	SET @IDABorrar = @SistemaGrupoEstatusID    
	DELETE
    FROM    SistemaGrupoEstatus
    WHERE   SistemaGrupoEstatusID = @SistemaGrupoEstatusID
    
    -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @SistemaGrupoEstatusID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('SistemaGrupoEstatusID::', @SistemaGrupoEstatusID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @SistemaGrupoEstatusID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
	/********************* FIN COPY 2  *********************************/
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaGrupoEstatus_Guardar]...';


GO

CREATE PROCEDURE [dbo].[SistemaGrupoEstatus_Guardar]
@SistemaGrupoEstatusID int,
@SistemaGrupoID int,
@Nombre varchar(50),
@TipoDocumentoID int,
@Color varchar(30),
@Activo bit
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaGrupoEstatus',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@SistemaGrupoID_ int = 0,
		@Nombre_ nvarchar(60) = '',			
		@TipoDocumentoID_ int = 0,
		@Color_ varchar(50) = '',
		@Activo_ bit = 0,
		@SistemaGrupoEstatusID_ int = @SistemaGrupoEstatusID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @SistemaGrupoEstatusID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@SistemaGrupoID_ = IsNull(SistemaGrupoID,''),
	 			@Nombre_ = IsNull(Nombre,''),
				@TipoDocumentoID_ = IsNull(TipoDocumentoID,0),
				@Color_ = IsNull(Color,''),
				@Activo_ = IsNull(Activo,0),
				@SistemaGrupoEstatusID_ = IsNull(SistemaGrupoEstatusID,0)
		   FROM	SistemaGrupoEstatus WHERE SistemaGrupoEstatusID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SistemaGrupoEstatus
			SET                     SistemaGrupoID = @SistemaGrupoID,
					Nombre = @Nombre,
					TipoDocumentoID = @TipoDocumentoID,
					Color = @Color,
					Activo = @Activo
			WHERE   SistemaGrupoEstatusID = @SistemaGrupoEstatusID
		END
		ELSE
		BEGIN        
			INSERT  INTO SistemaGrupoEstatus(
					SistemaGrupoID,
					Nombre,
					TipoDocumentoID,
					Color,
					Activo)
			VALUES  (
					@SistemaGrupoID,
					@Nombre,
					@TipoDocumentoID,
					@Color,
					@Activo)
        
        SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		/****************** COPY 3 ************************************************/
		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @SistemaGrupoEstatusID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat('SistemaGrupoID::', @SistemaGrupoID_, ':', @SistemaGrupoID, ';')
				SET @logMessage = Concat(@logMessage, 'Nombre::', @Nombre_, ':', @Nombre, ';')
				SET @logMessage = Concat(@logMessage, 'TipoDocumentoID::', @TipoDocumentoID_, ':', @TipoDocumentoID, ';')
				SET @logMessage = Concat(@logMessage, 'Color::', @Color_, ':', @Color, ';')
				SET @logMessage = Concat(@logMessage, 'Activo::', @Activo_, ':', @Activo, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaGrupoEstatus_Listado]...';


GO

CREATE PROCEDURE [dbo].[SistemaGrupoEstatus_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaGrupoEstatus',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN
		

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	
	SELECT  SistemaGrupoEstatusID as GrupoEstatusID,SistemaGrupoID,Nombre,TipoDocumentoID,Color,Activo
	FROM    SistemaGrupoEstatus

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[SistemaGrupoRegla_Consultar]...';


GO

CREATE PROCEDURE [dbo].[SistemaGrupoRegla_Consultar]
@SistemaGrupoReglaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500), @IDAConsultar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaGrupoRegla',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
	/************* FIN COPY 1  *********************/
	SET @IDAConsultar = @SistemaGrupoReglaID

	SELECT  SistemaGrupoReglaID,SistemaGrupoEstatusID,SistemaEstatusTipoDocumentoID,Activo
	FROM    SistemaGrupoRegla
	WHERE   SistemaGrupoReglaID = @SistemaGrupoReglaID

	-- Si no se encontró registro a Consultar -> error
	IF @@RowCount = 0
		SELECT @Errores = 999997, @Mensaje = CONCAT('No se encontró el ID a Consultar:', ' ', @IDAConsultar)
	ELSE
	BEGIN
		/* Procesa Bitácora */
		-- Revisa si la consulta debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si la consulta debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1 
		BEGIN
			-- LogMessage = Parámetros de Consulta
			SET @logMessage = Concat('SistemaGrupoReglaID::', @SistemaGrupoReglaID, ':', 0, ';')
	
			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @SistemaGrupoReglaID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
	END
	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error lo procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
        @IDAConsultar as ConsultarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaGrupoRegla_Eliminar]...';


GO

CREATE PROCEDURE [dbo].[SistemaGrupoRegla_Eliminar]
@SistemaGrupoReglaID int
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS

-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(300), @IDABorrar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaGrupoRegla',	
		@Operacion	nvarchar(20) = 'Delete', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDABorrar = @SistemaGrupoReglaID
    DELETE
    FROM    SistemaGrupoRegla
    WHERE   SistemaGrupoReglaID = @SistemaGrupoReglaID
    
    -- Si no se encontró registro a eliminar -> error
	IF @@RowCount = 0
	BEGIN
		SELECT @Errores = 999998, @Mensaje = CONCAT('No se encontró el ID a Eliminar:', ' ', @SistemaGrupoReglaID)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
    	/* Procesa Bitácora */
		-- Revisa si el borrado debe ser guardado en Bitácora
		EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
				@UsuarioID			=	@UsuarioIDBitacora,
				@TablaNombre		=   @TablaNombreIDBitacora,
				@Operacion			=	@Operacion

		-- Si el borrado debe guardarse, prepara variables de Bitácora y lo guarda
		IF @isChangeBeLogged = 1
		BEGIN
			-- LogMessage = Parámetro para borrado
			SET @logMessage = Concat('SistemaGrupoReglaID::', @SistemaGrupoReglaID, ':', 0, ';')

			-- Guarda en Bitácora
			EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
													,@TablaID			= @SistemaGrupoReglaID
													,@TablaColumna1		= ''
													,@TablaColumna2		= ''
													,@Operacion			= @Operacion
													,@UsuarioID			= @UsuarioIDBitacora
													,@Descripcion		= @DescripcionBitacora
													,@Cambios			= @logMessage
													,@IpAddress			= @IpAddress
													,@HostName			= @HostName
		END
		COMMIT TRANSACTION
	END
	-- Fin de proceso sin errores -> COMMIT
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDABorrar as EliminarID
SET NOCOUNT OFF
GO
PRINT N'Creando Procedimiento [dbo].[SistemaGrupoRegla_Guardar]...';


GO

CREATE PROCEDURE [dbo].[SistemaGrupoRegla_Guardar]
@SistemaGrupoReglaID int,
@SistemaGrupoEstatusID int,
@SistemaEstatusTipoDocumentoID int,
@Activo bit
-- Parámetros para Bitácora
	,@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
AS
-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500) = '', @IDAActualizar int
-- Variables para Bitácora
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaGrupoRegla',	
		@Operacion	nvarchar(20) = '', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit
-- Variables para valores anteriores (Bitácora Update) 
DECLARE	@SistemaGrupoEstatusID_ int = 0,
		@SistemaEstatusTipoDocumentoID_ int = 0,			
		@Activo_ bit = 0,
		@SistemaGrupoReglaID_ int = @SistemaGrupoReglaID

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	SET @IDAActualizar = @SistemaGrupoReglaID
	-- Si es UPDATE -> Lee valores anteriores de las columnas (Bitácora Update) 
	IF @IDAActualizar > 0
	BEGIN
		SELECT	@SistemaGrupoEstatusID_ = IsNull(SistemaGrupoEstatusID,0),
	 			@SistemaEstatusTipoDocumentoID_ = IsNull(SistemaEstatusTipoDocumentoID,0),
				@Activo_ = IsNull(Activo,0),
				@SistemaGrupoReglaID_ = IsNull(SistemaGrupoReglaID,0)
		   FROM	SistemaGrupoRegla WHERE SistemaGrupoReglaID = @IDAActualizar
		IF @@RowCount = 0
			SELECT @Errores = 999999, @Mensaje = CONCAT('No se encontró el ID a Actualizar:', ' ', @IDAActualizar);
	END
	-- Si no hubo error (es INSERT o es UPDATE y existe el registro)
	IF @Errores = 0
	BEGIN
		-- Si la llave existe hace UPDATE y si no, hace INSERT
		IF @IDAActualizar > 0
		BEGIN
			UPDATE  SistemaGrupoRegla
			SET                     SistemaGrupoEstatusID = @SistemaGrupoEstatusID,
					SistemaEstatusTipoDocumentoID = @SistemaEstatusTipoDocumentoID,
					Activo = @Activo
			WHERE   SistemaGrupoReglaID = @SistemaGrupoReglaID
		END
		ELSE
		BEGIN        
			INSERT  INTO SistemaGrupoRegla(
					SistemaGrupoEstatusID,
					SistemaEstatusTipoDocumentoID,
					Activo)
			VALUES  (
					@SistemaGrupoEstatusID,
					@SistemaEstatusTipoDocumentoID,
					@Activo)
        SET     @IDAActualizar = SCOPE_IDENTITY()
		END

		IF @@RowCount > 0
		BEGIN
			/* Procesa Bitácora */
			-- Determina si fue UPDATE o INSERT
			IF @SistemaGrupoReglaID_ > 0  SET @Operacion = 'Update' 	
						ELSE SET @Operacion = 'Create' 

			-- Revisa si el cambio debe ser guardado en Bitácora
			EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
					@UsuarioID			=	@UsuarioIDBitacora,
					@TablaNombre		=   @TablaNombreIDBitacora,
					@Operacion			=	@Operacion

			-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
			IF @isChangeBeLogged = 1 
			BEGIN
				-- logMessage = Cambios efectuados
				SET @logMessage = Concat(@logMessage, 'SistemaGrupoEstatusID::', @SistemaGrupoEstatusID_, ':', @SistemaGrupoEstatusID, ';')
				SET @logMessage = Concat(@logMessage, 'SistemaEstatusTipoDocumentoID::', @SistemaEstatusTipoDocumentoID_, ':', @SistemaEstatusTipoDocumentoID, ';')
				SET @logMessage = Concat(@logMessage, 'EmpresaID::', @Activo_, ':', @Activo, ';')
				-- Guarda en Bitácora
				EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
														,@TablaID			= @IDAActualizar
														,@TablaColumna1		= ''
														,@TablaColumna2		= ''
														,@Operacion			= @Operacion
														,@UsuarioID			= @UsuarioIDBitacora
														,@Descripcion		= @DescripcionBitacora
														,@Cambios			= @logMessage
														,@IpAddress			= @IpAddress
														,@HostName			= @HostName
			END
		END
		-- Fin de proceso sin errores -> COMMIT
		COMMIT TRANSACTION
	END
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 
IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
IF (XACT_STATE()) = 1 COMMIT TRANSACTION;

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea,
		@IDAActualizar as GuardarID
GO
PRINT N'Creando Procedimiento [dbo].[SistemaGrupoRegla_Listado]...';


GO

CREATE PROCEDURE [dbo].[SistemaGrupoRegla_Listado]
-- Parámetros para Bitácora
	@UsuarioIDBitacora		int
	,@DescripcionBitacora	varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null

AS

-- Variables para manejo de Errores
DECLARE @Errores int = 0, @Mensaje nvarchar(500)
-- Variables para Bitácora          
DECLARE @TablaNombreIDBitacora   nvarchar(100) = 'SistemaGrupoRegla',	
		@Operacion	nvarchar(20) = 'Read', 
		@logMessage	varchar(Max) = '',
		@isChangeBeLogged bit

SET NOCOUNT ON 
SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION

	/* Procesa Bitácora */
	-- Revisa si el cambio debe ser guardado en Bitácora
	EXEC	@isChangeBeLogged	=   SistemaLogRegla_Consultar_LogBit
			@UsuarioID			=	@UsuarioIDBitacora,
			@TablaNombre		=   @TablaNombreIDBitacora,
			@Operacion			=	@Operacion

	-- Si el cambio debe guardarse, prepara variables de Bitácora y lo guarda
	IF @isChangeBeLogged = 1 And @@RowCount > 0
	BEGIN

		-- Guarda en Bitácora
		EXEC 	 [dbo].[SistemaLog_Guardar] @TablaNombre		= @TablaNombreIDBitacora
												,@TablaID			= 0
												,@TablaColumna1		= ''
												,@TablaColumna2		= ''
												,@Operacion			= @Operacion
												,@UsuarioID			= @UsuarioIDBitacora
												,@Descripcion		= @DescripcionBitacora
												,@Cambios			= @logMessage
												,@IpAddress			= @IpAddress
												,@HostName			= @HostName
	END

	
	SELECT  SistemaGrupoReglaID,SistemaGrupoEstatusID,SistemaEstatusTipoDocumentoID,Activo
	FROM    SistemaGrupoRegla

	-- Si no hubo errores -> COMMIT
	COMMIT TRANSACTION
END TRY
-- Si hubo error los procesa y lo regresa
BEGIN CATCH
	IF (XACT_STATE()) = -1 ROLLBACK TRANSACTION;
	IF (XACT_STATE()) = 1 COMMIT TRANSACTION;
    SELECT @Errores = ERROR_NUMBER(), 
			@Mensaje = dbo.FDecodificaError(ERROR_NUMBER(), ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE())
END CATCH 

SELECT  COALESCE(@Errores, 0) as Errores, 
        COALESCE(@Mensaje, '') as Mensaje,
		COALESCE(ERROR_SEVERITY(), 0) as Severidad,
		COALESCE(ERROR_STATE(), 0) as Estado,
		COALESCE(ERROR_PROCEDURE(), '') as ProcedimientoAlmacenado,
		COALESCE(ERROR_LINE(), 0) as Linea
GO
PRINT N'Creando Procedimiento [dbo].[Mensajeria_Chat_Mensaje_Consulta_Mensajes_xConversacion]...';


GO

Create Procedure [dbo].[Mensajeria_Chat_Mensaje_Consulta_Mensajes_xConversacion]
	
	 @UsuarioID				int
	,@ConversacionID		int
	,@Consulta_sin_Fecha	bit = 0
	
	/************************************************/
	/* Campos para Log */
	,@UserIDForLog		int				= 1
	,@Descripcion		varchar(500)	= null
	,@IpAddress			varchar(40)		= null
	,@HostName			varchar(50)		= null
	/************************************************/

As
	/*
		Si llega el parámetro de consulta sin fecha en 1, voy a consultar con una
		fecha default 2020-01-01
	*/
	Declare @Fecha_Ultima_Consulta as datetime

	If @Consulta_sin_Fecha = 1
		Begin
			Set @Fecha_Ultima_Consulta = '2020-01-01'
		End
	Else
		Begin
			Exec @Fecha_Ultima_Consulta = Mensajeria_Chat_UltimaConsultaConversacion_Consultar
				  @UsuarioID			= @UsuarioID
				 ,@ConversacionID		= @ConversacionID
				 ,@UserIDForLog			= @UserIDForLog
				 ,@Descripcion			= @Descripcion
				 ,@IpAddress			= @IpAddress
				 ,@HostName				= @HostName
		End

	Select  *
	From    MsjChatMensaje
	Where   (ConversacionID = @ConversacionID) And 
			(Borrado Is Null) And
			(Creado >= @Fecha_Ultima_Consulta)
GO
-- Paso de refactorización para actualizar el servidor de destino con los registros de transacciones implementadas

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '09b75d8b-8df3-4616-b462-14c049e00da5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('09b75d8b-8df3-4616-b462-14c049e00da5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e5f11446-7277-4f2e-838a-98e51d300ad1')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e5f11446-7277-4f2e-838a-98e51d300ad1')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd7e381a8-e68c-457d-8db2-8bc5d3af3315')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d7e381a8-e68c-457d-8db2-8bc5d3af3315')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5476b9a9-0eef-4c40-a1cb-ec84a3ceb20b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5476b9a9-0eef-4c40-a1cb-ec84a3ceb20b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '64bef6e4-1dec-48ae-897d-3b79b42b7abe')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('64bef6e4-1dec-48ae-897d-3b79b42b7abe')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4719f419-d476-47cb-b370-f43186ee6f41')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4719f419-d476-47cb-b370-f43186ee6f41')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'dc3b1fd2-829e-4d6e-aab0-605d3c5510c7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('dc3b1fd2-829e-4d6e-aab0-605d3c5510c7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '964349b3-078c-4849-a29b-dda0c05e4d7a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('964349b3-078c-4849-a29b-dda0c05e4d7a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3f8d2cd0-dd5c-4aa5-bd68-a196c9db501b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3f8d2cd0-dd5c-4aa5-bd68-a196c9db501b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fa91a8de-a0eb-44e2-981c-5eb5f41bcffe')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fa91a8de-a0eb-44e2-981c-5eb5f41bcffe')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3e8a5056-de3f-4118-b26c-4204e242a840')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3e8a5056-de3f-4118-b26c-4204e242a840')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '748b6c51-05ff-4b67-b2ea-e01013810a91')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('748b6c51-05ff-4b67-b2ea-e01013810a91')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'bac6b041-c299-42aa-a4fd-dd1dd8a97f06')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('bac6b041-c299-42aa-a4fd-dd1dd8a97f06')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '791c5f37-0af4-4d0d-897c-3b12e0efc917')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('791c5f37-0af4-4d0d-897c-3b12e0efc917')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f60d74af-e067-4742-a694-39d183bfdf51')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f60d74af-e067-4742-a694-39d183bfdf51')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e41d8afd-d76b-4421-a3cb-7a1d6907a92a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e41d8afd-d76b-4421-a3cb-7a1d6907a92a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'aa7f1b40-30e9-4d7c-b9e9-7acbaffcc5a7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('aa7f1b40-30e9-4d7c-b9e9-7acbaffcc5a7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fae4c5b1-6391-4967-8e69-fdd8e1b26bb5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fae4c5b1-6391-4967-8e69-fdd8e1b26bb5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b469825b-d98c-4a20-bab2-37eb9a9c9f9b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b469825b-d98c-4a20-bab2-37eb9a9c9f9b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd852850a-13bf-4e77-95e0-69d3dab7decb')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d852850a-13bf-4e77-95e0-69d3dab7decb')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8531ee63-71a9-40ba-ae0d-98747f7e2db6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8531ee63-71a9-40ba-ae0d-98747f7e2db6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b6d8f3cb-68e2-4213-ad90-dbd7bcbf8bbd')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b6d8f3cb-68e2-4213-ad90-dbd7bcbf8bbd')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4b0e850c-8cc6-4086-8cdf-4bf9a92f0a89')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4b0e850c-8cc6-4086-8cdf-4bf9a92f0a89')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e3b6a965-9a0c-4d19-8d08-2dbaecb4a047')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e3b6a965-9a0c-4d19-8d08-2dbaecb4a047')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '26f0c58d-eb0f-4c5f-841e-4d8e7c12855f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('26f0c58d-eb0f-4c5f-841e-4d8e7c12855f')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4c7284a5-904c-4ebe-96cd-8e55747529ad')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4c7284a5-904c-4ebe-96cd-8e55747529ad')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f2449132-34ba-4e1e-a556-1494909a8230')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f2449132-34ba-4e1e-a556-1494909a8230')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fbda9196-af90-4028-a244-b30784ff0df8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fbda9196-af90-4028-a244-b30784ff0df8')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Actualización completada.';


GO
